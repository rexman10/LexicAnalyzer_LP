Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ADDITION_ASSIGNMENT
    BACK_SLASH
    BREAK
    DIVISION_ASSIGNMENT
    DOLLARSIGN
    DOUBLEPOINT
    DOUBLE_QUOTATION_MARKS
    ID
    JOIN
    JUMP_LINE
    LONG
    MODULE_ASSIGNMENT
    MULTIPLICATION_ASSIGNMENT
    NAMESPACE
    PIPE
    SIPLE_QUOTATION_MARKS
    START
    SUBTRACTION_ASSIGNMENT
    SWITCH
    TABULATION
    THREAD
    WRITE

Grammar

Rule 0     S' -> program
Rule 1     program -> USING SYSTEM DOTANDCOMMA block_publicClass
Rule 2     block_publicClass -> PUBLIC CLASS VARIABLE LKEY all_method_definitions block_main_method RKEY
Rule 3     block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_main_method RKEY
Rule 4     block_publicClass -> PUBLIC CLASS VARIABLE LKEY all_method_definitions RKEY
Rule 5     block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
Rule 6     block_code -> def_const_or_var
Rule 7     block_code -> print_data
Rule 8     block_code -> read_data
Rule 9     block_code -> arithmetic_operation
Rule 10    block_code -> logic_operation
Rule 11    block_code -> array_assignation
Rule 12    block_code -> array_value_assign
Rule 13    block_code -> array_indexing
Rule 14    block_code -> lists
Rule 15    block_code -> functions_list
Rule 16    block_code -> dict_estruct
Rule 17    block_code -> functions_dict
Rule 18    block_code -> concurrent_method
Rule 19    block_code -> queue_struct
Rule 20    block_code -> functions_queue
Rule 21    block_code -> stack_struct
Rule 22    block_code -> functions_stack
Rule 23    block_code -> block_if
Rule 24    block_code -> block_for
Rule 25    block_code -> block_try_catch
Rule 26    block_code -> block_while
Rule 27    all_block_code -> block_code
Rule 28    all_block_code -> block_code all_block_code
Rule 29    method_definition -> simple_method
Rule 30    method_definition -> declaration_async
Rule 31    method_definition -> declaration_lambda
Rule 32    all_method_definitions -> method_definition
Rule 33    all_method_definitions -> method_definition all_method_definitions
Rule 34    print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA
Rule 35    print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
Rule 36    read_data -> READ LPARENT RPARENT DOTANDCOMMA
Rule 37    concatenation -> STRING
Rule 38    concatenation -> STRING PLUS concatenation
Rule 39    value -> value_numeric
Rule 40    value -> value_logic
Rule 41    value -> value_string
Rule 42    value -> read_data
Rule 43    value -> METHOD
Rule 44    value -> array
Rule 45    array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA
Rule 46    array -> LBRACKET array_content RBRACKET
Rule 47    array_content -> value
Rule 48    array_content -> value COMMA array_content
Rule 49    array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET
Rule 50    array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET
Rule 51    array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
Rule 52    array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
Rule 53    value_string -> STRING
Rule 54    value_string -> CHAR
Rule 55    value_string -> VARIABLE
Rule 56    value_string -> concatenation
Rule 57    value_logic -> BOOLTRUE
Rule 58    value_logic -> BOOLFALSE
Rule 59    value_logic -> logic_operation
Rule 60    value_numeric -> INTEGER
Rule 61    value_numeric -> FLOAT_NUMBER
Rule 62    value_numeric -> DECIMAL_NUMBER
Rule 63    value_numeric -> arithmetic_operation
Rule 64    arithmetic_operation -> value_numeric
Rule 65    arithmetic_operation -> VARIABLE
Rule 66    arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation
Rule 67    arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation
Rule 68    logic_operation -> value_numeric logic_operator INTEGER
Rule 69    logic_operation -> VARIABLE logic_operator INTEGER
Rule 70    logic_operator -> GREATER_THAN
Rule 71    logic_operator -> SMALLER_THAN
Rule 72    logic_operator -> EQUAL_COMPARATION
Rule 73    logic_operator -> INEQUALITY
Rule 74    logic_operator -> GREATER_THAN_OR_EQUAL
Rule 75    logic_operator -> SMALLER_THAN_OR_EQUAL
Rule 76    logic_operator -> LOGICAND
Rule 77    logic_operator -> LOGICOR
Rule 78    logic_operator -> LOGICNOT
Rule 79    logic_operator -> LOGICXOR
Rule 80    arithmetic_operator -> PLUS
Rule 81    arithmetic_operator -> MINUS
Rule 82    arithmetic_operator -> TIMES
Rule 83    arithmetic_operator -> DIVIDE
Rule 84    arithmetic_operator -> PERCENT
Rule 85    access_modifiers -> PUBLIC
Rule 86    access_modifiers -> PRIVATE
Rule 87    def_const_or_var -> constant_assignation
Rule 88    def_const_or_var -> variable_assignation
Rule 89    def_const_or_var -> late_initialization
Rule 90    constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA
Rule 91    constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA
Rule 92    constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA
Rule 93    constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA
Rule 94    variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA
Rule 95    variable_assignation -> data_type assignation_key_value DOTANDCOMMA
Rule 96    variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA
Rule 97    variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA
Rule 98    late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA
Rule 99    late_initialization -> data_type VARIABLE DOTANDCOMMA
Rule 100   late_initialization -> assignation_key_value DOTANDCOMMA
Rule 101   assignation_key_value -> VARIABLE ASSIGNATION value
Rule 102   assignation_key_value -> READ LPARENT RPARENT
Rule 103   assignation_key_value_multiple -> assignation_key_value
Rule 104   assignation_key_value_multiple -> assignation_key_value COMMA assignation_key_value_multiple
Rule 105   assignation_with_datatype -> data_type assignation_key_value DOTANDCOMMA
Rule 106   assignation_with_datatype -> data_type assignation_key_value COMMA assignation_with_datatype
Rule 107   data_type -> CHARTYPE
Rule 108   data_type -> STRINGTYPE
Rule 109   data_type -> FLOATTYPE
Rule 110   data_type -> DECIMALTYPE
Rule 111   data_type -> INTTYPE
Rule 112   data_type -> BOOLTYPE
Rule 113   data_type -> array_type
Rule 114   array_type -> CHARTYPE LBRACKET RBRACKET
Rule 115   array_type -> STRINGTYPE LBRACKET RBRACKET
Rule 116   array_type -> FLOATTYPE LBRACKET RBRACKET
Rule 117   array_type -> DECIMALTYPE LBRACKET RBRACKET
Rule 118   array_type -> INTTYPE LBRACKET RBRACKET
Rule 119   array_type -> BOOLTYPE LBRACKET RBRACKET
Rule 120   logic_operations -> logic_operation DOTANDCOMMA
Rule 121   logic_operations -> logic_operation COMMA logic_operations
Rule 122   block_for -> for_anidado
Rule 123   block_for -> for_each
Rule 124   for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
Rule 125   for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
Rule 126   for_anidado -> for_simple
Rule 127   for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY
Rule 128   for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY
Rule 129   for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
Rule 130   block_try_catch -> try_catch_simply
Rule 131   block_try_catch -> try_catch_finally
Rule 132   try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY
Rule 133   try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY
Rule 134   block_while -> normal_while
Rule 135   block_while -> do_while
Rule 136   normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY
Rule 137   do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT
Rule 138   block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if
Rule 139   other_if -> ELSE LKEY not_yes_nested_if RKEY
Rule 140   other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if
Rule 141   not_yes_nested_if -> block_if
Rule 142   not_yes_nested_if -> block_code
Rule 143   dict_estruct -> dict_empty
Rule 144   dict_estruct -> dict_full
Rule 145   dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
Rule 146   dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA
Rule 147   key_value_pairs -> key_value_pair
Rule 148   key_value_pairs -> key_value_pair COMMA key_value_pairs
Rule 149   key_value_pair -> LKEY VARIABLE COMMA value RKEY
Rule 150   estruct_of_data -> list_empty
Rule 151   estruct_of_data -> list_full
Rule 152   functions_dict -> dict_func_put
Rule 153   functions_dict -> dict_func_remove
Rule 154   dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA
Rule 155   dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA
Rule 156   lists -> list_empty
Rule 157   lists -> list_full
Rule 158   list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
Rule 159   list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
Rule 160   list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
Rule 161   list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
Rule 162   strings_list -> STRING
Rule 163   strings_list -> STRING COMMA strings_list
Rule 164   ints_list -> INTEGER
Rule 165   ints_list -> INTEGER COMMA ints_list
Rule 166   functions_list -> list_func_clear
Rule 167   functions_list -> list_func_count
Rule 168   functions_list -> list_func_add
Rule 169   functions_list -> list_func_removeat
Rule 170   list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
Rule 171   list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
Rule 172   list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
Rule 173   list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
Rule 174   stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
Rule 175   functions_stack -> stack_push
Rule 176   functions_stack -> stack_pop
Rule 177   functions_stack -> stack_clear
Rule 178   functions_stack -> stack_peek
Rule 179   functions_stack -> stack_isEmpty
Rule 180   stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
Rule 181   stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
Rule 182   stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
Rule 183   stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
Rule 184   stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
Rule 185   queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA
Rule 186   queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
Rule 187   functions_queue -> queue_enqueue
Rule 188   functions_queue -> queue_dequeue
Rule 189   functions_queue -> queue_clear
Rule 190   functions_queue -> queue_isEmpty
Rule 191   functions_queue -> queue_peek
Rule 192   queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
Rule 193   queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
Rule 194   queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
Rule 195   queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
Rule 196   queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
Rule 197   simple_method -> STATIC data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY
Rule 198   simple_method -> STATIC VOID METHOD LPARENT function_arguments RPARENT LKEY all_block_code RKEY
Rule 199   simple_method -> STATIC VOID MAIN LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY
Rule 200   simple_method -> access_modifiers STATIC data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY
Rule 201   simple_method -> PUBLIC STATIC VOID METHOD LPARENT function_arguments RPARENT LKEY all_block_code RKEY
Rule 202   function_return -> RETURN value DOTANDCOMMA
Rule 203   function_argument -> data_type VARIABLE
Rule 204   function_argument -> data_type CHAR
Rule 205   function_argument -> METHOD VARIABLE
Rule 206   function_argument -> data_type LBRACKET RBRACKET VARIABLE
Rule 207   function_arguments -> function_argument
Rule 208   function_arguments -> function_argument COMMA function_arguments
Rule 209   declaration_async -> PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY
Rule 210   declaration_lambda -> ACTION SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION VARIABLE ARROW LKEY block_code RKEY
Rule 211   concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY
Rule 212   method_declaration -> METHOD IDENTIFIER LPARENT RPARENT DOTANDCOMMA
Rule 213   concurrent_block -> statement_list
Rule 214   statement_list -> statement
Rule 215   statement_list -> statement_list statement
Rule 216   statement -> assignment_concurrent
Rule 217   statement -> if_statement_concurrent
Rule 218   statement -> while_loop_concurrent
Rule 219   statement -> method_call_concurrent
Rule 220   statement -> return_statement_concurrent
Rule 221   assignment_concurrent -> VARIABLE ASSIGNATION expression DOTANDCOMMA
Rule 222   if_statement_concurrent -> IF LPARENT condition RPARENT LKEY concurrent_block RKEY
Rule 223   while_loop_concurrent -> WHILE LPARENT condition RPARENT LKEY concurrent_block RKEY
Rule 224   method_call_concurrent -> IDENTIFIER LPARENT RPARENT DOTANDCOMMA
Rule 225   return_statement_concurrent -> RETURN expression DOTANDCOMMA
Rule 226   expression -> value_numeric
Rule 227   expression -> VARIABLE
Rule 228   expression -> value_numeric arithmetic_operator expression
Rule 229   expression -> VARIABLE arithmetic_operator expression
Rule 230   condition -> value_numeric logic_operator value_numeric
Rule 231   condition -> VARIABLE logic_operator value_numeric
Rule 232   condition -> value_numeric logic_operator VARIABLE
Rule 233   condition -> VARIABLE logic_operator VARIABLE

Terminals, with rules where they appear

ACTION               : 210
ADD                  : 172
ADDITION_ASSIGNMENT  : 
ARROW                : 209 210
ASSIGNATION          : 45 51 52 101 145 146 158 159 160 161 174 185 186 210 221
ASYNC                : 209
AWAIT                : 209
BACK_SLASH           : 
BOOLFALSE            : 58
BOOLTRUE             : 57
BOOLTYPE             : 112 119
BREAK                : 
CATCH                : 132 133
CHAR                 : 54 204
CHARTYPE             : 107 114
CLASS                : 2 3 4
CLEAR                : 170 182 194
COMMA                : 48 104 106 121 148 149 154 163 165 208
CONCURRENT           : 211
CONST                : 90 91 92 93
COUNT                : 171
DECIMALTYPE          : 110 117
DECIMAL_NUMBER       : 62
DECREMENT            : 125 128
DEQUEUE              : 193
DICTIONARY           : 145 145 146 146
DIVIDE               : 83
DIVISION_ASSIGNMENT  : 
DO                   : 137
DOLLARSIGN           : 
DOT                  : 154 155 170 171 172 173 180 181 182 183 184 192 193 194 195 196 209
DOTANDCOMMA          : 1 34 35 36 45 51 52 90 91 92 93 94 95 96 97 98 99 100 105 120 124 125 127 128 145 146 154 155 158 159 160 161 170 171 172 173 174 180 181 182 183 184 185 186 192 193 194 195 196 202 209 212 221 224 225
DOUBLEPOINT          : 
DOUBLE_QUOTATION_MARKS : 
ELSE                 : 139
ELSE_IF              : 140
ENQUEUE              : 192
EQUAL_COMPARATION    : 72
EXCEPTION            : 132 133
FINALLY              : 133
FLOATTYPE            : 109 116
FLOAT_NUMBER         : 61
FOR                  : 124 125 127 128
FOREACH              : 129
GREATER_THAN         : 70 145 145 146 146 158 158 159 159 160 160 161 161 185 185 186 186 210
GREATER_THAN_OR_EQUAL : 74
ID                   : 
IDENTIFIER           : 212 224
IF                   : 138 222
IN                   : 129
INCREMENT            : 124 127
INEQUALITY           : 73
INTEGER              : 50 52 60 68 69 164 165 173
INTTYPE              : 111 118 159 159 161 161
ISEMPTY              : 184 196
JOIN                 : 
JUMP_LINE            : 
LBRACKET             : 5 45 46 49 50 51 52 114 115 116 117 118 119 206
LIST                 : 158 158 159 159 160 160 161 161
LKEY                 : 2 3 4 5 124 125 127 128 129 132 132 133 133 133 136 137 138 139 140 146 149 160 161 197 198 199 200 201 209 209 210 211 222 223
LOGICAND             : 76
LOGICNOT             : 78
LOGICOR              : 77
LONG                 : 
LPARENT              : 5 34 35 36 102 124 125 127 128 129 132 133 136 137 138 140 145 146 154 155 158 159 160 161 170 171 172 173 174 180 181 182 183 184 185 186 192 193 194 195 196 197 198 199 200 201 209 209 209 212 222 223 224
MAIN                 : 5 199
METHOD               : 43 197 198 200 201 205 209 209 212
MINUS                : 81
MODULE_ASSIGNMENT    : 
MULTIPLICATION_ASSIGNMENT : 
NAMESPACE            : 
NEW                  : 145 146 158 159 160 161 174 185 186
PEEK                 : 183 195
PERCENT              : 84
PIPE                 : 
PLUS                 : 38 80
POP                  : 181
PRINT                : 34 35
PRIVATE              : 86
PUBLIC               : 2 3 4 85 201 209
PUSH                 : 180
PUT                  : 154
QUEUE                : 185 185 186 186
RBRACKET             : 5 45 46 49 50 51 52 114 115 116 117 118 119 206
READ                 : 36 102
REMOVE               : 155
REMOVEAT             : 173
RETURN               : 202 225
RKEY                 : 2 3 4 5 124 125 127 128 129 132 132 133 133 133 136 137 138 139 140 146 149 160 161 197 198 199 200 201 209 209 210 211 222 223
RPARENT              : 5 34 35 36 102 124 125 127 128 129 132 133 136 137 138 140 145 146 154 155 158 159 160 161 170 171 172 173 174 180 181 182 183 184 185 186 192 193 194 195 196 197 198 199 200 201 209 209 209 212 222 223 224
SIPLE_QUOTATION_MARKS : 
SMALLER_THAN         : 71 145 145 146 146 158 158 159 159 160 160 161 161 185 185 186 186 210
SMALLER_THAN_OR_EQUAL : 75
STACK                : 174 174
START                : 
STATIC               : 5 197 198 199 200 201 209
STRING               : 34 37 38 53 154 162 163 172
STRINGTYPE           : 5 108 115 158 158 160 160 210
SUBTRACTION_ASSIGNMENT : 
SWITCH               : 
SYSTEM               : 1
TABULATION           : 
TASK                 : 209 209
THREAD               : 
TIMES                : 82
TRY                  : 132 133
USING                : 1
VARIABLE             : 2 3 4 5 35 45 49 49 50 51 51 52 55 65 67 69 98 99 101 124 125 127 128 129 129 132 133 145 146 149 154 154 155 155 158 159 160 161 170 171 172 173 174 180 181 182 183 184 185 186 192 193 194 195 196 203 205 206 210 210 221 227 229 231 232 233 233
VOID                 : 5 198 199 201
WHILE                : 136 137 223
WRITE                : 
error                : 

Nonterminals, with rules where they appear

LOGICXOR             : 79
access_modifiers     : 90 92 94 96 98 200
all_block_code       : 5 28 124 125 129 132 132 133 133 133 136 137 197 198 199 200 201
all_method_definitions : 2 4 33
arithmetic_operation : 9 63 66 67
arithmetic_operator  : 66 67 228 229
array                : 44
array_assignation    : 11
array_content        : 45 46 48
array_indexing       : 13
array_type           : 45 113
array_value_assign   : 12
assignation_key_value : 90 91 94 95 100 103 104 105 106
assignation_key_value_multiple : 92 93 96 97 104
assignation_with_datatype : 106 124 125 127 128
assignment_concurrent : 216
block_code           : 27 28 142 209 210
block_for            : 24
block_if             : 23 141
block_main_method    : 2 3
block_publicClass    : 1
block_try_catch      : 25
block_while          : 26
concatenation        : 38 56
concurrent_block     : 211 222 223
concurrent_method    : 18
condition            : 222 223
constant_assignation : 87
data_type            : 90 91 92 93 94 95 96 97 98 99 105 106 129 185 185 186 197 200 203 204 206
declaration_async    : 30
declaration_lambda   : 31
def_const_or_var     : 6
dict_empty           : 143
dict_estruct         : 16
dict_full            : 144
dict_func_put        : 152
dict_func_remove     : 153
do_while             : 135
estruct_of_data      : 
expression           : 221 225 228 229
for_anidado          : 122 127 128
for_each             : 123
for_simple           : 126
function_argument    : 207 208
function_arguments   : 197 198 199 200 201 208
function_return      : 197 199 200
functions_dict       : 17
functions_list       : 15
functions_queue      : 20
functions_stack      : 22
if_statement_concurrent : 217
ints_list            : 161 165
key_value_pair       : 147 148
key_value_pairs      : 146 148
late_initialization  : 89
list_empty           : 150 156
list_full            : 151 157
list_func_add        : 168
list_func_clear      : 166
list_func_count      : 167
list_func_removeat   : 169
lists                : 14
logic_operation      : 10 59 120 121 136 137 138 140
logic_operations     : 121 124 125 127 128
logic_operator       : 68 69 230 231 232 233
method_call_concurrent : 219
method_declaration   : 211
method_definition    : 32 33
normal_while         : 134
not_yes_nested_if    : 138 139 140
other_if             : 138 140
print_data           : 7
program              : 0
queue_clear          : 189
queue_dequeue        : 188
queue_enqueue        : 187
queue_isEmpty        : 190
queue_peek           : 191
queue_struct         : 19
read_data            : 8 42
return_statement_concurrent : 220
simple_method        : 29
stack_clear          : 177
stack_isEmpty        : 179
stack_peek           : 178
stack_pop            : 176
stack_push           : 175
stack_struct         : 21
statement            : 214 215
statement_list       : 213 215
strings_list         : 160 163
try_catch_finally    : 131
try_catch_simply     : 130
value                : 47 48 51 52 101 149 180 192 202
value_logic          : 40
value_numeric        : 39 64 66 68 226 228 230 230 231 232
value_string         : 41
variable_assignation : 88
while_loop_concurrent : 218

