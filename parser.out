Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ADDITION_ASSIGNMENT
    BACK_SLASH
    BOOL
    BREAK
    DIVISION_ASSIGNMENT
    DOLLARSIGN
    DOUBLEPOINT
    DOUBLE_QUOTATION_MARKS
    ID
    JUMP_LINE
    LONG
    MODULE_ASSIGNMENT
    MULTIPLICATION_ASSIGNMENT
    NAMESPACE
    PIPE
    SIPLE_QUOTATION_MARKS
    SUBTRACTION_ASSIGNMENT
    SWITCH
    TABULATION

Grammar

Rule 0     S' -> program
Rule 1     program -> USING SYSTEM DOTANDCOMMA block_publicClass
Rule 2     block_publicClass -> PUBLIC CLASS VARIABLE LKEY all_method_definitions block_main_method RKEY
Rule 3     block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_main_method RKEY
Rule 4     block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
Rule 5     block_code -> def_const_or_var
Rule 6     block_code -> print_data
Rule 7     block_code -> read_data
Rule 8     block_code -> arithmetic_operation
Rule 9     block_code -> logic_operation
Rule 10    block_code -> array_assignation
Rule 11    block_code -> array_value_assign
Rule 12    block_code -> array_indexing
Rule 13    block_code -> lists
Rule 14    block_code -> functions_list
Rule 15    block_code -> dict_estruct
Rule 16    block_code -> functions_dict
Rule 17    block_code -> concurrent_method
Rule 18    block_code -> queue_struct
Rule 19    block_code -> functions_queue
Rule 20    block_code -> stack_struct
Rule 21    block_code -> functions_stack
Rule 22    block_code -> block_if
Rule 23    block_code -> block_for
Rule 24    block_code -> block_try_catch
Rule 25    block_code -> block_while
Rule 26    all_block_code -> block_code
Rule 27    all_block_code -> block_code all_block_code
Rule 28    method_definition -> simple_method
Rule 29    method_definition -> declaration_async
Rule 30    method_definition -> declaration_lambda
Rule 31    all_method_definitions -> method_definition
Rule 32    all_method_definitions -> method_definition all_method_definitions
Rule 33    print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA
Rule 34    print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
Rule 35    read_data -> READ LPARENT RPARENT DOTANDCOMMA
Rule 36    concatenation -> STRING
Rule 37    concatenation -> STRING PLUS concatenation
Rule 38    value -> value_numeric
Rule 39    value -> value_logic
Rule 40    value -> value_string
Rule 41    value -> read_data
Rule 42    value -> METHOD
Rule 43    value -> array
Rule 44    array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA
Rule 45    array -> LBRACKET array_content RBRACKET
Rule 46    array_content -> value
Rule 47    array_content -> value COMMA array_content
Rule 48    array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET
Rule 49    array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET
Rule 50    array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
Rule 51    array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
Rule 52    value_string -> STRING
Rule 53    value_string -> CHAR
Rule 54    value_string -> VARIABLE
Rule 55    value_string -> concatenation
Rule 56    value_logic -> BOOLTRUE
Rule 57    value_logic -> BOOLFALSE
Rule 58    value_logic -> logic_operation
Rule 59    value_numeric -> INTEGER
Rule 60    value_numeric -> FLOAT_NUMBER
Rule 61    value_numeric -> DECIMAL_NUMBER
Rule 62    value_numeric -> arithmetic_operation
Rule 63    arithmetic_operation -> value_numeric
Rule 64    arithmetic_operation -> VARIABLE
Rule 65    arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation
Rule 66    arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation
Rule 67    logic_operation -> value_numeric logic_operator INTEGER
Rule 68    logic_operation -> VARIABLE logic_operator INTEGER
Rule 69    logic_operator -> GREATER_THAN
Rule 70    logic_operator -> SMALLER_THAN
Rule 71    logic_operator -> EQUAL_COMPARATION
Rule 72    logic_operator -> INEQUALITY
Rule 73    logic_operator -> GREATER_THAN_OR_EQUAL
Rule 74    logic_operator -> SMALLER_THAN_OR_EQUAL
Rule 75    logic_operator -> LOGICAND
Rule 76    logic_operator -> LOGICOR
Rule 77    logic_operator -> LOGICNOT
Rule 78    logic_operator -> LOGICXOR
Rule 79    arithmetic_operator -> PLUS
Rule 80    arithmetic_operator -> MINUS
Rule 81    arithmetic_operator -> TIMES
Rule 82    arithmetic_operator -> DIVIDE
Rule 83    arithmetic_operator -> PERCENT
Rule 84    access_modifiers -> PUBLIC
Rule 85    access_modifiers -> PRIVATE
Rule 86    def_const_or_var -> constant_assignation
Rule 87    def_const_or_var -> variable_assignation
Rule 88    def_const_or_var -> late_initialization
Rule 89    constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA
Rule 90    constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA
Rule 91    constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA
Rule 92    constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA
Rule 93    variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA
Rule 94    variable_assignation -> data_type assignation_key_value DOTANDCOMMA
Rule 95    variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA
Rule 96    variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA
Rule 97    late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA
Rule 98    late_initialization -> data_type VARIABLE DOTANDCOMMA
Rule 99    late_initialization -> assignation_key_value DOTANDCOMMA
Rule 100   assignation_key_value -> VARIABLE ASSIGNATION value
Rule 101   assignation_key_value -> READ LPARENT RPARENT
Rule 102   assignation_key_value_multiple -> assignation_key_value
Rule 103   assignation_key_value_multiple -> assignation_key_value COMMA assignation_key_value_multiple
Rule 104   assignation_with_datatype -> data_type assignation_key_value DOTANDCOMMA
Rule 105   assignation_with_datatype -> data_type assignation_key_value COMMA assignation_with_datatype
Rule 106   data_type -> CHARTYPE
Rule 107   data_type -> STRINGTYPE
Rule 108   data_type -> FLOATTYPE
Rule 109   data_type -> DECIMALTYPE
Rule 110   data_type -> INTTYPE
Rule 111   data_type -> BOOLTYPE
Rule 112   data_type -> array_type
Rule 113   array_type -> CHARTYPE LBRACKET RBRACKET
Rule 114   array_type -> STRINGTYPE LBRACKET RBRACKET
Rule 115   array_type -> FLOATTYPE LBRACKET RBRACKET
Rule 116   array_type -> DECIMALTYPE LBRACKET RBRACKET
Rule 117   array_type -> INTTYPE LBRACKET RBRACKET
Rule 118   array_type -> BOOLTYPE LBRACKET RBRACKET
Rule 119   logic_operations -> logic_operation DOTANDCOMMA
Rule 120   logic_operations -> logic_operation COMMA logic_operations
Rule 121   block_for -> for_anidado
Rule 122   block_for -> for_each
Rule 123   for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
Rule 124   for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
Rule 125   for_anidado -> for_simple
Rule 126   for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY
Rule 127   for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY
Rule 128   for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
Rule 129   block_try_catch -> try_catch_simply
Rule 130   block_try_catch -> try_catch_finally
Rule 131   try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY
Rule 132   try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY
Rule 133   block_while -> normal_while
Rule 134   block_while -> do_while
Rule 135   normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY
Rule 136   do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT
Rule 137   block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if
Rule 138   other_if -> ELSE LKEY not_yes_nested_if RKEY
Rule 139   other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if
Rule 140   not_yes_nested_if -> block_if
Rule 141   not_yes_nested_if -> block_code
Rule 142   dict_estruct -> dict_empty
Rule 143   dict_estruct -> dict_full
Rule 144   dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
Rule 145   dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA
Rule 146   key_value_pairs -> key_value_pair
Rule 147   key_value_pairs -> key_value_pair COMMA key_value_pairs
Rule 148   key_value_pair -> LKEY VARIABLE COMMA value RKEY
Rule 149   estruct_of_data -> list_empty
Rule 150   estruct_of_data -> list_full
Rule 151   functions_dict -> dict_func_put
Rule 152   functions_dict -> dict_func_remove
Rule 153   dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA
Rule 154   dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA
Rule 155   lists -> list_empty
Rule 156   lists -> list_full
Rule 157   list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
Rule 158   list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
Rule 159   list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
Rule 160   list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
Rule 161   strings_list -> STRING
Rule 162   strings_list -> STRING COMMA strings_list
Rule 163   ints_list -> INTEGER
Rule 164   ints_list -> INTEGER COMMA ints_list
Rule 165   functions_list -> list_func_clear
Rule 166   functions_list -> list_func_count
Rule 167   functions_list -> list_func_add
Rule 168   functions_list -> list_func_removeat
Rule 169   list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
Rule 170   list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
Rule 171   list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
Rule 172   list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
Rule 173   stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
Rule 174   functions_stack -> stack_push
Rule 175   functions_stack -> stack_pop
Rule 176   functions_stack -> stack_clear
Rule 177   functions_stack -> stack_peek
Rule 178   functions_stack -> stack_isEmpty
Rule 179   stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
Rule 180   stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
Rule 181   stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
Rule 182   stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
Rule 183   stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
Rule 184   queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA
Rule 185   functions_queue -> queue_enqueue
Rule 186   functions_queue -> queue_dequeue
Rule 187   functions_queue -> queue_clear
Rule 188   functions_queue -> queue_isEmpty
Rule 189   queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
Rule 190   queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
Rule 191   queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
Rule 192   queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
Rule 193   queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
Rule 194   simple_method -> STATIC data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY
Rule 195   simple_method -> STATIC VOID METHOD LPARENT function_arguments RPARENT LKEY all_block_code RKEY
Rule 196   simple_method -> access_modifiers STATIC data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY
Rule 197   simple_method -> access_modifiers STATIC VOID METHOD LPARENT function_arguments RPARENT LKEY all_block_code RKEY
Rule 198   function_return -> RETURN value DOTANDCOMMA
Rule 199   function_argument -> data_type VARIABLE
Rule 200   function_argument -> METHOD VARIABLE
Rule 201   function_arguments -> function_argument
Rule 202   function_arguments -> function_argument COMMA function_arguments
Rule 203   declaration_async -> PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY
Rule 204   declaration_lambda -> ACTION SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION VARIABLE ARROW LKEY block_code RKEY
Rule 205   concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY
Rule 206   method_declaration -> METHOD IDENTIFIER LPARENT RPARENT DOTANDCOMMA
Rule 207   concurrent_block -> statement_list
Rule 208   statement_list -> statement
Rule 209   statement_list -> statement_list statement
Rule 210   statement -> assignment_concurrent
Rule 211   statement -> if_statement_concurrent
Rule 212   statement -> while_loop_concurrent
Rule 213   statement -> method_call_concurrent
Rule 214   statement -> return_statement_concurrent
Rule 215   assignment_concurrent -> VARIABLE ASSIGNATION expression DOTANDCOMMA
Rule 216   if_statement_concurrent -> IF LPARENT condition RPARENT LKEY concurrent_block RKEY
Rule 217   while_loop_concurrent -> WHILE LPARENT condition RPARENT LKEY concurrent_block RKEY
Rule 218   method_call_concurrent -> IDENTIFIER LPARENT RPARENT DOTANDCOMMA
Rule 219   return_statement_concurrent -> RETURN expression DOTANDCOMMA
Rule 220   expression -> value_numeric
Rule 221   expression -> VARIABLE
Rule 222   expression -> value_numeric arithmetic_operator expression
Rule 223   expression -> VARIABLE arithmetic_operator expression
Rule 224   condition -> value_numeric logic_operator value_numeric
Rule 225   condition -> VARIABLE logic_operator value_numeric
Rule 226   condition -> value_numeric logic_operator VARIABLE
Rule 227   condition -> VARIABLE logic_operator VARIABLE

Terminals, with rules where they appear

ACTION               : 204
ADD                  : 171
ADDITION_ASSIGNMENT  : 
ARROW                : 203 204
ASSIGNATION          : 44 50 51 100 144 145 157 158 159 160 173 184 204 215
ASYNC                : 203
AWAIT                : 203
BACK_SLASH           : 
BOOL                 : 
BOOLFALSE            : 57
BOOLTRUE             : 56
BOOLTYPE             : 111 118
BREAK                : 
CATCH                : 131 132
CHAR                 : 53
CHARTYPE             : 106 113
CLASS                : 2 3
CLEAR                : 169 181 191
COMMA                : 47 103 105 120 147 148 153 162 164 202
CONCURRENT           : 205
CONST                : 89 90 91 92
COUNT                : 170
DECIMALTYPE          : 109 116
DECIMAL_NUMBER       : 61
DECREMENT            : 124 127
DEQUEUE              : 190
DICTIONARY           : 144 144 145 145
DIVIDE               : 82
DIVISION_ASSIGNMENT  : 
DO                   : 136
DOLLARSIGN           : 
DOT                  : 153 154 169 170 171 172 179 180 181 182 183 189 190 191 192 193 203
DOTANDCOMMA          : 1 33 34 35 44 50 51 89 90 91 92 93 94 95 96 97 98 99 104 119 123 124 126 127 144 145 153 154 157 158 159 160 169 170 171 172 173 179 180 181 182 183 184 189 190 191 192 193 198 203 206 215 218 219
DOUBLEPOINT          : 
DOUBLE_QUOTATION_MARKS : 
ELSE                 : 138
ELSE_IF              : 139
ENQUEUE              : 189
EQUAL_COMPARATION    : 71
EXCEPTION            : 131 132
FINALLY              : 132
FLOATTYPE            : 108 115
FLOAT_NUMBER         : 60
FOR                  : 123 124 126 127
FOREACH              : 128
GREATER_THAN         : 69 144 144 145 145 157 157 158 158 159 159 160 160 184 184 204
GREATER_THAN_OR_EQUAL : 73
ID                   : 
IDENTIFIER           : 206 218
IF                   : 137 216
IN                   : 128
INCREMENT            : 123 126
INEQUALITY           : 72
INTEGER              : 49 51 59 67 68 163 164 172
INTTYPE              : 110 117 158 158 160 160
ISEMPTY              : 183 193
JUMP_LINE            : 
LBRACKET             : 4 44 45 48 49 50 51 113 114 115 116 117 118
LIST                 : 157 157 158 158 159 159 160 160
LKEY                 : 2 3 4 123 124 126 127 128 131 131 132 132 132 135 136 137 138 139 145 148 159 160 194 195 196 197 203 203 204 205 216 217
LOGICAND             : 75
LOGICNOT             : 77
LOGICOR              : 76
LOGICXOR             : 78
LONG                 : 
LPARENT              : 4 33 34 35 101 123 124 126 127 128 131 132 135 136 137 139 144 145 153 154 157 158 159 160 169 170 171 172 173 179 180 181 182 183 184 189 190 191 192 193 194 195 196 197 203 203 203 206 216 217 218
MAIN                 : 4
METHOD               : 42 194 195 196 197 200 203 203 206
MINUS                : 80
MODULE_ASSIGNMENT    : 
MULTIPLICATION_ASSIGNMENT : 
NAMESPACE            : 
NEW                  : 144 145 157 158 159 160 173 184
PEEK                 : 182 192
PERCENT              : 83
PIPE                 : 
PLUS                 : 37 79
POP                  : 180
PRINT                : 33 34
PRIVATE              : 85
PUBLIC               : 2 3 84 203
PUSH                 : 179
PUT                  : 153
QUEUE                : 184 184
RBRACKET             : 4 44 45 48 49 50 51 113 114 115 116 117 118
READ                 : 35 101
REMOVE               : 154
REMOVEAT             : 172
RETURN               : 198 219
RKEY                 : 2 3 4 123 124 126 127 128 131 131 132 132 132 135 136 137 138 139 145 148 159 160 194 195 196 197 203 203 204 205 216 217
RPARENT              : 4 33 34 35 101 123 124 126 127 128 131 132 135 136 137 139 144 145 153 154 157 158 159 160 169 170 171 172 173 179 180 181 182 183 184 189 190 191 192 193 194 195 196 197 203 203 203 206 216 217 218
SIPLE_QUOTATION_MARKS : 
SMALLER_THAN         : 70 144 144 145 145 157 157 158 158 159 159 160 160 184 184 204
SMALLER_THAN_OR_EQUAL : 74
STACK                : 173 173
STATIC               : 4 194 195 196 197 203
STRING               : 33 36 37 52 153 161 162 171
STRINGTYPE           : 4 107 114 157 157 159 159 204
SUBTRACTION_ASSIGNMENT : 
SWITCH               : 
SYSTEM               : 1
TABULATION           : 
TASK                 : 203 203
TIMES                : 81
TRY                  : 131 132
USING                : 1
VARIABLE             : 2 3 4 34 44 48 48 49 50 50 51 54 64 66 68 97 98 100 123 124 126 127 128 128 131 132 144 145 148 153 153 154 154 157 158 159 160 169 170 171 172 173 179 180 181 182 183 184 189 190 191 192 193 199 200 204 204 215 221 223 225 226 227 227
VOID                 : 4 195 197
WHILE                : 135 136 217
error                : 

Nonterminals, with rules where they appear

access_modifiers     : 89 91 93 95 97 196 197
all_block_code       : 4 27 123 124 128 131 131 132 132 132 135 136 194 195 196 197
all_method_definitions : 2 32
arithmetic_operation : 8 62 65 66
arithmetic_operator  : 65 66 222 223
array                : 43
array_assignation    : 10
array_content        : 44 45 47
array_indexing       : 12
array_type           : 44 112
array_value_assign   : 11
assignation_key_value : 89 90 93 94 99 102 103 104 105
assignation_key_value_multiple : 91 92 95 96 103
assignation_with_datatype : 105 123 124 126 127
assignment_concurrent : 210
block_code           : 26 27 141 203 204
block_for            : 23
block_if             : 22 140
block_main_method    : 2 3
block_publicClass    : 1
block_try_catch      : 24
block_while          : 25
concatenation        : 37 55
concurrent_block     : 205 216 217
concurrent_method    : 17
condition            : 216 217
constant_assignation : 86
data_type            : 89 90 91 92 93 94 95 96 97 98 104 105 128 184 184 194 196 199
declaration_async    : 29
declaration_lambda   : 30
def_const_or_var     : 5
dict_empty           : 142
dict_estruct         : 15
dict_full            : 143
dict_func_put        : 151
dict_func_remove     : 152
do_while             : 134
estruct_of_data      : 
expression           : 215 219 222 223
for_anidado          : 121 126 127
for_each             : 122
for_simple           : 125
function_argument    : 201 202
function_arguments   : 194 195 196 197 202
function_return      : 194 196
functions_dict       : 16
functions_list       : 14
functions_queue      : 19
functions_stack      : 21
if_statement_concurrent : 211
ints_list            : 160 164
key_value_pair       : 146 147
key_value_pairs      : 145 147
late_initialization  : 88
list_empty           : 149 155
list_full            : 150 156
list_func_add        : 167
list_func_clear      : 165
list_func_count      : 166
list_func_removeat   : 168
lists                : 13
logic_operation      : 9 58 119 120 135 136 137 139
logic_operations     : 120 123 124 126 127
logic_operator       : 67 68 224 225 226 227
method_call_concurrent : 213
method_declaration   : 205
method_definition    : 31 32
normal_while         : 133
not_yes_nested_if    : 137 138 139
other_if             : 137 139
print_data           : 6
program              : 0
queue_clear          : 187
queue_dequeue        : 186
queue_enqueue        : 185
queue_isEmpty        : 188
queue_peek           : 
queue_struct         : 18
read_data            : 7 41
return_statement_concurrent : 214
simple_method        : 28
stack_clear          : 176
stack_isEmpty        : 178
stack_peek           : 177
stack_pop            : 175
stack_push           : 174
stack_struct         : 20
statement            : 208 209
statement_list       : 207 209
strings_list         : 159 162
try_catch_finally    : 130
try_catch_simply     : 129
value                : 46 47 50 51 100 148 179 189 198
value_logic          : 39
value_numeric        : 38 63 65 67 220 222 224 224 225 226
value_string         : 40
variable_assignation : 87
while_loop_concurrent : 212

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . USING SYSTEM DOTANDCOMMA block_publicClass

    USING           shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> USING . SYSTEM DOTANDCOMMA block_publicClass

    SYSTEM          shift and go to state 3


state 3

    (1) program -> USING SYSTEM . DOTANDCOMMA block_publicClass

    DOTANDCOMMA     shift and go to state 4


state 4

    (1) program -> USING SYSTEM DOTANDCOMMA . block_publicClass
    (2) block_publicClass -> . PUBLIC CLASS VARIABLE LKEY all_method_definitions block_main_method RKEY
    (3) block_publicClass -> . PUBLIC CLASS VARIABLE LKEY block_main_method RKEY

    PUBLIC          shift and go to state 6

    block_publicClass              shift and go to state 5

state 5

    (1) program -> USING SYSTEM DOTANDCOMMA block_publicClass .

    $end            reduce using rule 1 (program -> USING SYSTEM DOTANDCOMMA block_publicClass .)


state 6

    (2) block_publicClass -> PUBLIC . CLASS VARIABLE LKEY all_method_definitions block_main_method RKEY
    (3) block_publicClass -> PUBLIC . CLASS VARIABLE LKEY block_main_method RKEY

    CLASS           shift and go to state 7


state 7

    (2) block_publicClass -> PUBLIC CLASS . VARIABLE LKEY all_method_definitions block_main_method RKEY
    (3) block_publicClass -> PUBLIC CLASS . VARIABLE LKEY block_main_method RKEY

    VARIABLE        shift and go to state 8


state 8

    (2) block_publicClass -> PUBLIC CLASS VARIABLE . LKEY all_method_definitions block_main_method RKEY
    (3) block_publicClass -> PUBLIC CLASS VARIABLE . LKEY block_main_method RKEY

    LKEY            shift and go to state 9


state 9

    (2) block_publicClass -> PUBLIC CLASS VARIABLE LKEY . all_method_definitions block_main_method RKEY
    (3) block_publicClass -> PUBLIC CLASS VARIABLE LKEY . block_main_method RKEY
    (31) all_method_definitions -> . method_definition
    (32) all_method_definitions -> . method_definition all_method_definitions
    (4) block_main_method -> . STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (28) method_definition -> . simple_method
    (29) method_definition -> . declaration_async
    (30) method_definition -> . declaration_lambda
    (194) simple_method -> . STATIC data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY
    (195) simple_method -> . STATIC VOID METHOD LPARENT function_arguments RPARENT LKEY all_block_code RKEY
    (196) simple_method -> . access_modifiers STATIC data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY
    (197) simple_method -> . access_modifiers STATIC VOID METHOD LPARENT function_arguments RPARENT LKEY all_block_code RKEY
    (203) declaration_async -> . PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY
    (204) declaration_lambda -> . ACTION SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION VARIABLE ARROW LKEY block_code RKEY
    (84) access_modifiers -> . PUBLIC
    (85) access_modifiers -> . PRIVATE

    STATIC          shift and go to state 14
    PUBLIC          shift and go to state 10
    ACTION          shift and go to state 19
    PRIVATE         shift and go to state 20

    all_method_definitions         shift and go to state 11
    block_main_method              shift and go to state 12
    method_definition              shift and go to state 13
    simple_method                  shift and go to state 15
    declaration_async              shift and go to state 16
    declaration_lambda             shift and go to state 17
    access_modifiers               shift and go to state 18

state 10

    (203) declaration_async -> PUBLIC . STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY
    (84) access_modifiers -> PUBLIC .

  ! shift/reduce conflict for STATIC resolved as shift
    STATIC          shift and go to state 21

  ! STATIC          [ reduce using rule 84 (access_modifiers -> PUBLIC .) ]


state 11

    (2) block_publicClass -> PUBLIC CLASS VARIABLE LKEY all_method_definitions . block_main_method RKEY
    (4) block_main_method -> . STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY

    STATIC          shift and go to state 23

    block_main_method              shift and go to state 22

state 12

    (3) block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_main_method . RKEY

    RKEY            shift and go to state 24


state 13

    (31) all_method_definitions -> method_definition .
    (32) all_method_definitions -> method_definition . all_method_definitions
    (31) all_method_definitions -> . method_definition
    (32) all_method_definitions -> . method_definition all_method_definitions
    (28) method_definition -> . simple_method
    (29) method_definition -> . declaration_async
    (30) method_definition -> . declaration_lambda
    (194) simple_method -> . STATIC data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY
    (195) simple_method -> . STATIC VOID METHOD LPARENT function_arguments RPARENT LKEY all_block_code RKEY
    (196) simple_method -> . access_modifiers STATIC data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY
    (197) simple_method -> . access_modifiers STATIC VOID METHOD LPARENT function_arguments RPARENT LKEY all_block_code RKEY
    (203) declaration_async -> . PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY
    (204) declaration_lambda -> . ACTION SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION VARIABLE ARROW LKEY block_code RKEY
    (84) access_modifiers -> . PUBLIC
    (85) access_modifiers -> . PRIVATE

  ! shift/reduce conflict for STATIC resolved as shift
    STATIC          shift and go to state 26
    PUBLIC          shift and go to state 10
    ACTION          shift and go to state 19
    PRIVATE         shift and go to state 20

  ! STATIC          [ reduce using rule 31 (all_method_definitions -> method_definition .) ]

    method_definition              shift and go to state 13
    all_method_definitions         shift and go to state 25
    simple_method                  shift and go to state 15
    declaration_async              shift and go to state 16
    declaration_lambda             shift and go to state 17
    access_modifiers               shift and go to state 18

state 14

    (4) block_main_method -> STATIC . VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (194) simple_method -> STATIC . data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY
    (195) simple_method -> STATIC . VOID METHOD LPARENT function_arguments RPARENT LKEY all_block_code RKEY
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET

    VOID            shift and go to state 27
    CHARTYPE        shift and go to state 30
    STRINGTYPE      shift and go to state 28
    FLOATTYPE       shift and go to state 31
    DECIMALTYPE     shift and go to state 32
    INTTYPE         shift and go to state 33
    BOOLTYPE        shift and go to state 34

    data_type                      shift and go to state 29
    array_type                     shift and go to state 35

state 15

    (28) method_definition -> simple_method .

    STATIC          reduce using rule 28 (method_definition -> simple_method .)
    PUBLIC          reduce using rule 28 (method_definition -> simple_method .)
    ACTION          reduce using rule 28 (method_definition -> simple_method .)
    PRIVATE         reduce using rule 28 (method_definition -> simple_method .)


state 16

    (29) method_definition -> declaration_async .

    STATIC          reduce using rule 29 (method_definition -> declaration_async .)
    PUBLIC          reduce using rule 29 (method_definition -> declaration_async .)
    ACTION          reduce using rule 29 (method_definition -> declaration_async .)
    PRIVATE         reduce using rule 29 (method_definition -> declaration_async .)


state 17

    (30) method_definition -> declaration_lambda .

    STATIC          reduce using rule 30 (method_definition -> declaration_lambda .)
    PUBLIC          reduce using rule 30 (method_definition -> declaration_lambda .)
    ACTION          reduce using rule 30 (method_definition -> declaration_lambda .)
    PRIVATE         reduce using rule 30 (method_definition -> declaration_lambda .)


state 18

    (196) simple_method -> access_modifiers . STATIC data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY
    (197) simple_method -> access_modifiers . STATIC VOID METHOD LPARENT function_arguments RPARENT LKEY all_block_code RKEY

    STATIC          shift and go to state 36


state 19

    (204) declaration_lambda -> ACTION . SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION VARIABLE ARROW LKEY block_code RKEY

    SMALLER_THAN    shift and go to state 37


state 20

    (85) access_modifiers -> PRIVATE .

    STATIC          reduce using rule 85 (access_modifiers -> PRIVATE .)
    CONST           reduce using rule 85 (access_modifiers -> PRIVATE .)
    CHARTYPE        reduce using rule 85 (access_modifiers -> PRIVATE .)
    STRINGTYPE      reduce using rule 85 (access_modifiers -> PRIVATE .)
    FLOATTYPE       reduce using rule 85 (access_modifiers -> PRIVATE .)
    DECIMALTYPE     reduce using rule 85 (access_modifiers -> PRIVATE .)
    INTTYPE         reduce using rule 85 (access_modifiers -> PRIVATE .)
    BOOLTYPE        reduce using rule 85 (access_modifiers -> PRIVATE .)


state 21

    (203) declaration_async -> PUBLIC STATIC . ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY

    ASYNC           shift and go to state 38


state 22

    (2) block_publicClass -> PUBLIC CLASS VARIABLE LKEY all_method_definitions block_main_method . RKEY

    RKEY            shift and go to state 39


state 23

    (4) block_main_method -> STATIC . VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY

    VOID            shift and go to state 40


state 24

    (3) block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_main_method RKEY .

    $end            reduce using rule 3 (block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_main_method RKEY .)


state 25

    (32) all_method_definitions -> method_definition all_method_definitions .

    STATIC          reduce using rule 32 (all_method_definitions -> method_definition all_method_definitions .)


state 26

    (194) simple_method -> STATIC . data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY
    (195) simple_method -> STATIC . VOID METHOD LPARENT function_arguments RPARENT LKEY all_block_code RKEY
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET

    VOID            shift and go to state 41
    CHARTYPE        shift and go to state 30
    STRINGTYPE      shift and go to state 28
    FLOATTYPE       shift and go to state 31
    DECIMALTYPE     shift and go to state 32
    INTTYPE         shift and go to state 33
    BOOLTYPE        shift and go to state 34

    data_type                      shift and go to state 29
    array_type                     shift and go to state 35

state 27

    (4) block_main_method -> STATIC VOID . MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (195) simple_method -> STATIC VOID . METHOD LPARENT function_arguments RPARENT LKEY all_block_code RKEY

    MAIN            shift and go to state 42
    METHOD          shift and go to state 43


state 28

    (107) data_type -> STRINGTYPE .
    (114) array_type -> STRINGTYPE . LBRACKET RBRACKET

    METHOD          reduce using rule 107 (data_type -> STRINGTYPE .)
    VARIABLE        reduce using rule 107 (data_type -> STRINGTYPE .)
    READ            reduce using rule 107 (data_type -> STRINGTYPE .)
    GREATER_THAN    reduce using rule 107 (data_type -> STRINGTYPE .)
    LBRACKET        shift and go to state 44


state 29

    (194) simple_method -> STATIC data_type . METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY

    METHOD          shift and go to state 45


state 30

    (106) data_type -> CHARTYPE .
    (113) array_type -> CHARTYPE . LBRACKET RBRACKET

    METHOD          reduce using rule 106 (data_type -> CHARTYPE .)
    VARIABLE        reduce using rule 106 (data_type -> CHARTYPE .)
    READ            reduce using rule 106 (data_type -> CHARTYPE .)
    GREATER_THAN    reduce using rule 106 (data_type -> CHARTYPE .)
    LBRACKET        shift and go to state 46


state 31

    (108) data_type -> FLOATTYPE .
    (115) array_type -> FLOATTYPE . LBRACKET RBRACKET

    METHOD          reduce using rule 108 (data_type -> FLOATTYPE .)
    VARIABLE        reduce using rule 108 (data_type -> FLOATTYPE .)
    READ            reduce using rule 108 (data_type -> FLOATTYPE .)
    GREATER_THAN    reduce using rule 108 (data_type -> FLOATTYPE .)
    LBRACKET        shift and go to state 47


state 32

    (109) data_type -> DECIMALTYPE .
    (116) array_type -> DECIMALTYPE . LBRACKET RBRACKET

    METHOD          reduce using rule 109 (data_type -> DECIMALTYPE .)
    VARIABLE        reduce using rule 109 (data_type -> DECIMALTYPE .)
    READ            reduce using rule 109 (data_type -> DECIMALTYPE .)
    GREATER_THAN    reduce using rule 109 (data_type -> DECIMALTYPE .)
    LBRACKET        shift and go to state 48


state 33

    (110) data_type -> INTTYPE .
    (117) array_type -> INTTYPE . LBRACKET RBRACKET

    METHOD          reduce using rule 110 (data_type -> INTTYPE .)
    VARIABLE        reduce using rule 110 (data_type -> INTTYPE .)
    READ            reduce using rule 110 (data_type -> INTTYPE .)
    GREATER_THAN    reduce using rule 110 (data_type -> INTTYPE .)
    LBRACKET        shift and go to state 49


state 34

    (111) data_type -> BOOLTYPE .
    (118) array_type -> BOOLTYPE . LBRACKET RBRACKET

    METHOD          reduce using rule 111 (data_type -> BOOLTYPE .)
    VARIABLE        reduce using rule 111 (data_type -> BOOLTYPE .)
    READ            reduce using rule 111 (data_type -> BOOLTYPE .)
    GREATER_THAN    reduce using rule 111 (data_type -> BOOLTYPE .)
    LBRACKET        shift and go to state 50


state 35

    (112) data_type -> array_type .

    METHOD          reduce using rule 112 (data_type -> array_type .)
    VARIABLE        reduce using rule 112 (data_type -> array_type .)
    READ            reduce using rule 112 (data_type -> array_type .)
    GREATER_THAN    reduce using rule 112 (data_type -> array_type .)


state 36

    (196) simple_method -> access_modifiers STATIC . data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY
    (197) simple_method -> access_modifiers STATIC . VOID METHOD LPARENT function_arguments RPARENT LKEY all_block_code RKEY
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET

    VOID            shift and go to state 52
    CHARTYPE        shift and go to state 30
    STRINGTYPE      shift and go to state 28
    FLOATTYPE       shift and go to state 31
    DECIMALTYPE     shift and go to state 32
    INTTYPE         shift and go to state 33
    BOOLTYPE        shift and go to state 34

    data_type                      shift and go to state 51
    array_type                     shift and go to state 35

state 37

    (204) declaration_lambda -> ACTION SMALLER_THAN . STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION VARIABLE ARROW LKEY block_code RKEY

    STRINGTYPE      shift and go to state 53


state 38

    (203) declaration_async -> PUBLIC STATIC ASYNC . TASK METHOD LPARENT RPARENT LKEY AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY

    TASK            shift and go to state 54


state 39

    (2) block_publicClass -> PUBLIC CLASS VARIABLE LKEY all_method_definitions block_main_method RKEY .

    $end            reduce using rule 2 (block_publicClass -> PUBLIC CLASS VARIABLE LKEY all_method_definitions block_main_method RKEY .)


state 40

    (4) block_main_method -> STATIC VOID . MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY

    MAIN            shift and go to state 42


state 41

    (195) simple_method -> STATIC VOID . METHOD LPARENT function_arguments RPARENT LKEY all_block_code RKEY

    METHOD          shift and go to state 43


state 42

    (4) block_main_method -> STATIC VOID MAIN . LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY

    LPARENT         shift and go to state 55


state 43

    (195) simple_method -> STATIC VOID METHOD . LPARENT function_arguments RPARENT LKEY all_block_code RKEY

    LPARENT         shift and go to state 56


state 44

    (114) array_type -> STRINGTYPE LBRACKET . RBRACKET

    RBRACKET        shift and go to state 57


state 45

    (194) simple_method -> STATIC data_type METHOD . LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY

    LPARENT         shift and go to state 58


state 46

    (113) array_type -> CHARTYPE LBRACKET . RBRACKET

    RBRACKET        shift and go to state 59


state 47

    (115) array_type -> FLOATTYPE LBRACKET . RBRACKET

    RBRACKET        shift and go to state 60


state 48

    (116) array_type -> DECIMALTYPE LBRACKET . RBRACKET

    RBRACKET        shift and go to state 61


state 49

    (117) array_type -> INTTYPE LBRACKET . RBRACKET

    RBRACKET        shift and go to state 62


state 50

    (118) array_type -> BOOLTYPE LBRACKET . RBRACKET

    RBRACKET        shift and go to state 63


state 51

    (196) simple_method -> access_modifiers STATIC data_type . METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY

    METHOD          shift and go to state 64


state 52

    (197) simple_method -> access_modifiers STATIC VOID . METHOD LPARENT function_arguments RPARENT LKEY all_block_code RKEY

    METHOD          shift and go to state 65


state 53

    (204) declaration_lambda -> ACTION SMALLER_THAN STRINGTYPE . GREATER_THAN VARIABLE ASSIGNATION VARIABLE ARROW LKEY block_code RKEY

    GREATER_THAN    shift and go to state 66


state 54

    (203) declaration_async -> PUBLIC STATIC ASYNC TASK . METHOD LPARENT RPARENT LKEY AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY

    METHOD          shift and go to state 67


state 55

    (4) block_main_method -> STATIC VOID MAIN LPARENT . STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY

    STRINGTYPE      shift and go to state 68


state 56

    (195) simple_method -> STATIC VOID METHOD LPARENT . function_arguments RPARENT LKEY all_block_code RKEY
    (201) function_arguments -> . function_argument
    (202) function_arguments -> . function_argument COMMA function_arguments
    (199) function_argument -> . data_type VARIABLE
    (200) function_argument -> . METHOD VARIABLE
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET

    METHOD          shift and go to state 69
    CHARTYPE        shift and go to state 30
    STRINGTYPE      shift and go to state 28
    FLOATTYPE       shift and go to state 31
    DECIMALTYPE     shift and go to state 32
    INTTYPE         shift and go to state 33
    BOOLTYPE        shift and go to state 34

    function_arguments             shift and go to state 70
    function_argument              shift and go to state 71
    data_type                      shift and go to state 72
    array_type                     shift and go to state 35

state 57

    (114) array_type -> STRINGTYPE LBRACKET RBRACKET .

    METHOD          reduce using rule 114 (array_type -> STRINGTYPE LBRACKET RBRACKET .)
    VARIABLE        reduce using rule 114 (array_type -> STRINGTYPE LBRACKET RBRACKET .)
    READ            reduce using rule 114 (array_type -> STRINGTYPE LBRACKET RBRACKET .)
    GREATER_THAN    reduce using rule 114 (array_type -> STRINGTYPE LBRACKET RBRACKET .)


state 58

    (194) simple_method -> STATIC data_type METHOD LPARENT . function_arguments RPARENT LKEY all_block_code function_return RKEY
    (201) function_arguments -> . function_argument
    (202) function_arguments -> . function_argument COMMA function_arguments
    (199) function_argument -> . data_type VARIABLE
    (200) function_argument -> . METHOD VARIABLE
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET

    METHOD          shift and go to state 69
    CHARTYPE        shift and go to state 30
    STRINGTYPE      shift and go to state 28
    FLOATTYPE       shift and go to state 31
    DECIMALTYPE     shift and go to state 32
    INTTYPE         shift and go to state 33
    BOOLTYPE        shift and go to state 34

    data_type                      shift and go to state 72
    function_arguments             shift and go to state 73
    function_argument              shift and go to state 71
    array_type                     shift and go to state 35

state 59

    (113) array_type -> CHARTYPE LBRACKET RBRACKET .

    METHOD          reduce using rule 113 (array_type -> CHARTYPE LBRACKET RBRACKET .)
    VARIABLE        reduce using rule 113 (array_type -> CHARTYPE LBRACKET RBRACKET .)
    READ            reduce using rule 113 (array_type -> CHARTYPE LBRACKET RBRACKET .)
    GREATER_THAN    reduce using rule 113 (array_type -> CHARTYPE LBRACKET RBRACKET .)


state 60

    (115) array_type -> FLOATTYPE LBRACKET RBRACKET .

    METHOD          reduce using rule 115 (array_type -> FLOATTYPE LBRACKET RBRACKET .)
    VARIABLE        reduce using rule 115 (array_type -> FLOATTYPE LBRACKET RBRACKET .)
    READ            reduce using rule 115 (array_type -> FLOATTYPE LBRACKET RBRACKET .)
    GREATER_THAN    reduce using rule 115 (array_type -> FLOATTYPE LBRACKET RBRACKET .)


state 61

    (116) array_type -> DECIMALTYPE LBRACKET RBRACKET .

    METHOD          reduce using rule 116 (array_type -> DECIMALTYPE LBRACKET RBRACKET .)
    VARIABLE        reduce using rule 116 (array_type -> DECIMALTYPE LBRACKET RBRACKET .)
    READ            reduce using rule 116 (array_type -> DECIMALTYPE LBRACKET RBRACKET .)
    GREATER_THAN    reduce using rule 116 (array_type -> DECIMALTYPE LBRACKET RBRACKET .)


state 62

    (117) array_type -> INTTYPE LBRACKET RBRACKET .

    METHOD          reduce using rule 117 (array_type -> INTTYPE LBRACKET RBRACKET .)
    VARIABLE        reduce using rule 117 (array_type -> INTTYPE LBRACKET RBRACKET .)
    READ            reduce using rule 117 (array_type -> INTTYPE LBRACKET RBRACKET .)
    GREATER_THAN    reduce using rule 117 (array_type -> INTTYPE LBRACKET RBRACKET .)


state 63

    (118) array_type -> BOOLTYPE LBRACKET RBRACKET .

    METHOD          reduce using rule 118 (array_type -> BOOLTYPE LBRACKET RBRACKET .)
    VARIABLE        reduce using rule 118 (array_type -> BOOLTYPE LBRACKET RBRACKET .)
    READ            reduce using rule 118 (array_type -> BOOLTYPE LBRACKET RBRACKET .)
    GREATER_THAN    reduce using rule 118 (array_type -> BOOLTYPE LBRACKET RBRACKET .)


state 64

    (196) simple_method -> access_modifiers STATIC data_type METHOD . LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY

    LPARENT         shift and go to state 74


state 65

    (197) simple_method -> access_modifiers STATIC VOID METHOD . LPARENT function_arguments RPARENT LKEY all_block_code RKEY

    LPARENT         shift and go to state 75


state 66

    (204) declaration_lambda -> ACTION SMALLER_THAN STRINGTYPE GREATER_THAN . VARIABLE ASSIGNATION VARIABLE ARROW LKEY block_code RKEY

    VARIABLE        shift and go to state 76


state 67

    (203) declaration_async -> PUBLIC STATIC ASYNC TASK METHOD . LPARENT RPARENT LKEY AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY

    LPARENT         shift and go to state 77


state 68

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE . LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY

    LBRACKET        shift and go to state 78


state 69

    (200) function_argument -> METHOD . VARIABLE

    VARIABLE        shift and go to state 79


state 70

    (195) simple_method -> STATIC VOID METHOD LPARENT function_arguments . RPARENT LKEY all_block_code RKEY

    RPARENT         shift and go to state 80


state 71

    (201) function_arguments -> function_argument .
    (202) function_arguments -> function_argument . COMMA function_arguments

    RPARENT         reduce using rule 201 (function_arguments -> function_argument .)
    COMMA           shift and go to state 81


state 72

    (199) function_argument -> data_type . VARIABLE

    VARIABLE        shift and go to state 82


state 73

    (194) simple_method -> STATIC data_type METHOD LPARENT function_arguments . RPARENT LKEY all_block_code function_return RKEY

    RPARENT         shift and go to state 83


state 74

    (196) simple_method -> access_modifiers STATIC data_type METHOD LPARENT . function_arguments RPARENT LKEY all_block_code function_return RKEY
    (201) function_arguments -> . function_argument
    (202) function_arguments -> . function_argument COMMA function_arguments
    (199) function_argument -> . data_type VARIABLE
    (200) function_argument -> . METHOD VARIABLE
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET

    METHOD          shift and go to state 69
    CHARTYPE        shift and go to state 30
    STRINGTYPE      shift and go to state 28
    FLOATTYPE       shift and go to state 31
    DECIMALTYPE     shift and go to state 32
    INTTYPE         shift and go to state 33
    BOOLTYPE        shift and go to state 34

    data_type                      shift and go to state 72
    function_arguments             shift and go to state 84
    function_argument              shift and go to state 71
    array_type                     shift and go to state 35

state 75

    (197) simple_method -> access_modifiers STATIC VOID METHOD LPARENT . function_arguments RPARENT LKEY all_block_code RKEY
    (201) function_arguments -> . function_argument
    (202) function_arguments -> . function_argument COMMA function_arguments
    (199) function_argument -> . data_type VARIABLE
    (200) function_argument -> . METHOD VARIABLE
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET

    METHOD          shift and go to state 69
    CHARTYPE        shift and go to state 30
    STRINGTYPE      shift and go to state 28
    FLOATTYPE       shift and go to state 31
    DECIMALTYPE     shift and go to state 32
    INTTYPE         shift and go to state 33
    BOOLTYPE        shift and go to state 34

    function_arguments             shift and go to state 85
    function_argument              shift and go to state 71
    data_type                      shift and go to state 72
    array_type                     shift and go to state 35

state 76

    (204) declaration_lambda -> ACTION SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE . ASSIGNATION VARIABLE ARROW LKEY block_code RKEY

    ASSIGNATION     shift and go to state 86


state 77

    (203) declaration_async -> PUBLIC STATIC ASYNC TASK METHOD LPARENT . RPARENT LKEY AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY

    RPARENT         shift and go to state 87


state 78

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET . RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY

    RBRACKET        shift and go to state 88


state 79

    (200) function_argument -> METHOD VARIABLE .

    COMMA           reduce using rule 200 (function_argument -> METHOD VARIABLE .)
    RPARENT         reduce using rule 200 (function_argument -> METHOD VARIABLE .)


state 80

    (195) simple_method -> STATIC VOID METHOD LPARENT function_arguments RPARENT . LKEY all_block_code RKEY

    LKEY            shift and go to state 89


state 81

    (202) function_arguments -> function_argument COMMA . function_arguments
    (201) function_arguments -> . function_argument
    (202) function_arguments -> . function_argument COMMA function_arguments
    (199) function_argument -> . data_type VARIABLE
    (200) function_argument -> . METHOD VARIABLE
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET

    METHOD          shift and go to state 69
    CHARTYPE        shift and go to state 30
    STRINGTYPE      shift and go to state 28
    FLOATTYPE       shift and go to state 31
    DECIMALTYPE     shift and go to state 32
    INTTYPE         shift and go to state 33
    BOOLTYPE        shift and go to state 34

    function_argument              shift and go to state 71
    function_arguments             shift and go to state 90
    data_type                      shift and go to state 72
    array_type                     shift and go to state 35

state 82

    (199) function_argument -> data_type VARIABLE .

    COMMA           reduce using rule 199 (function_argument -> data_type VARIABLE .)
    RPARENT         reduce using rule 199 (function_argument -> data_type VARIABLE .)


state 83

    (194) simple_method -> STATIC data_type METHOD LPARENT function_arguments RPARENT . LKEY all_block_code function_return RKEY

    LKEY            shift and go to state 91


state 84

    (196) simple_method -> access_modifiers STATIC data_type METHOD LPARENT function_arguments . RPARENT LKEY all_block_code function_return RKEY

    RPARENT         shift and go to state 92


state 85

    (197) simple_method -> access_modifiers STATIC VOID METHOD LPARENT function_arguments . RPARENT LKEY all_block_code RKEY

    RPARENT         shift and go to state 93


state 86

    (204) declaration_lambda -> ACTION SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION . VARIABLE ARROW LKEY block_code RKEY

    VARIABLE        shift and go to state 94


state 87

    (203) declaration_async -> PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT . LKEY AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY

    LKEY            shift and go to state 95


state 88

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET . VARIABLE RPARENT LKEY all_block_code RKEY

    VARIABLE        shift and go to state 96


state 89

    (195) simple_method -> STATIC VOID METHOD LPARENT function_arguments RPARENT LKEY . all_block_code RKEY
    (26) all_block_code -> . block_code
    (27) all_block_code -> . block_code all_block_code
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . read_data
    (8) block_code -> . arithmetic_operation
    (9) block_code -> . logic_operation
    (10) block_code -> . array_assignation
    (11) block_code -> . array_value_assign
    (12) block_code -> . array_indexing
    (13) block_code -> . lists
    (14) block_code -> . functions_list
    (15) block_code -> . dict_estruct
    (16) block_code -> . functions_dict
    (17) block_code -> . concurrent_method
    (18) block_code -> . queue_struct
    (19) block_code -> . functions_queue
    (20) block_code -> . stack_struct
    (21) block_code -> . functions_stack
    (22) block_code -> . block_if
    (23) block_code -> . block_for
    (24) block_code -> . block_try_catch
    (25) block_code -> . block_while
    (86) def_const_or_var -> . constant_assignation
    (87) def_const_or_var -> . variable_assignation
    (88) def_const_or_var -> . late_initialization
    (33) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (34) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (35) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (44) array_assignation -> . array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA
    (50) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (51) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (48) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (49) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (155) lists -> . list_empty
    (156) lists -> . list_full
    (165) functions_list -> . list_func_clear
    (166) functions_list -> . list_func_count
    (167) functions_list -> . list_func_add
    (168) functions_list -> . list_func_removeat
    (142) dict_estruct -> . dict_empty
    (143) dict_estruct -> . dict_full
    (151) functions_dict -> . dict_func_put
    (152) functions_dict -> . dict_func_remove
    (205) concurrent_method -> . method_declaration CONCURRENT LKEY concurrent_block RKEY
    (184) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (185) functions_queue -> . queue_enqueue
    (186) functions_queue -> . queue_dequeue
    (187) functions_queue -> . queue_clear
    (188) functions_queue -> . queue_isEmpty
    (173) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (174) functions_stack -> . stack_push
    (175) functions_stack -> . stack_pop
    (176) functions_stack -> . stack_clear
    (177) functions_stack -> . stack_peek
    (178) functions_stack -> . stack_isEmpty
    (137) block_if -> . IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if
    (121) block_for -> . for_anidado
    (122) block_for -> . for_each
    (129) block_try_catch -> . try_catch_simply
    (130) block_try_catch -> . try_catch_finally
    (133) block_while -> . normal_while
    (134) block_while -> . do_while
    (89) constant_assignation -> . access_modifiers CONST data_type assignation_key_value DOTANDCOMMA
    (90) constant_assignation -> . CONST data_type assignation_key_value DOTANDCOMMA
    (91) constant_assignation -> . access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (92) constant_assignation -> . CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (93) variable_assignation -> . access_modifiers data_type assignation_key_value DOTANDCOMMA
    (94) variable_assignation -> . data_type assignation_key_value DOTANDCOMMA
    (95) variable_assignation -> . access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA
    (96) variable_assignation -> . data_type assignation_key_value_multiple DOTANDCOMMA
    (97) late_initialization -> . access_modifiers data_type VARIABLE DOTANDCOMMA
    (98) late_initialization -> . data_type VARIABLE DOTANDCOMMA
    (99) late_initialization -> . assignation_key_value DOTANDCOMMA
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET
    (157) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (158) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (160) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (169) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (170) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (171) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (172) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (144) dict_empty -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (145) dict_full -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA
    (153) dict_func_put -> . VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA
    (154) dict_func_remove -> . VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA
    (206) method_declaration -> . METHOD IDENTIFIER LPARENT RPARENT DOTANDCOMMA
    (189) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (190) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (191) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (193) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (179) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (180) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (181) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (182) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (183) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (125) for_anidado -> . for_simple
    (126) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY
    (127) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY
    (128) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (131) try_catch_simply -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY
    (132) try_catch_finally -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY
    (135) normal_while -> . WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY
    (136) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT
    (84) access_modifiers -> . PUBLIC
    (85) access_modifiers -> . PRIVATE
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (100) assignation_key_value -> . VARIABLE ASSIGNATION value
    (101) assignation_key_value -> . READ LPARENT RPARENT
    (123) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (124) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    PRINT           shift and go to state 124
    READ            shift and go to state 126
    VARIABLE        shift and go to state 125
    QUEUE           shift and go to state 141
    STACK           shift and go to state 147
    IF              shift and go to state 153
    CONST           shift and go to state 161
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164
    CHARTYPE        shift and go to state 165
    STRINGTYPE      shift and go to state 166
    FLOATTYPE       shift and go to state 167
    DECIMALTYPE     shift and go to state 168
    INTTYPE         shift and go to state 169
    BOOLTYPE        shift and go to state 170
    LIST            shift and go to state 171
    DICTIONARY      shift and go to state 172
    METHOD          shift and go to state 97
    FOR             shift and go to state 174
    FOREACH         shift and go to state 175
    TRY             shift and go to state 176
    WHILE           shift and go to state 177
    DO              shift and go to state 178
    PUBLIC          shift and go to state 179
    PRIVATE         shift and go to state 20

    all_block_code                 shift and go to state 98
    block_code                     shift and go to state 99
    def_const_or_var               shift and go to state 100
    print_data                     shift and go to state 101
    read_data                      shift and go to state 102
    arithmetic_operation           shift and go to state 103
    logic_operation                shift and go to state 104
    array_assignation              shift and go to state 105
    array_value_assign             shift and go to state 106
    array_indexing                 shift and go to state 107
    lists                          shift and go to state 108
    functions_list                 shift and go to state 109
    dict_estruct                   shift and go to state 110
    functions_dict                 shift and go to state 111
    concurrent_method              shift and go to state 112
    queue_struct                   shift and go to state 113
    functions_queue                shift and go to state 114
    stack_struct                   shift and go to state 115
    functions_stack                shift and go to state 116
    block_if                       shift and go to state 117
    block_for                      shift and go to state 118
    block_try_catch                shift and go to state 119
    block_while                    shift and go to state 120
    constant_assignation           shift and go to state 121
    variable_assignation           shift and go to state 122
    late_initialization            shift and go to state 123
    value_numeric                  shift and go to state 127
    array_type                     shift and go to state 129
    list_empty                     shift and go to state 130
    list_full                      shift and go to state 131
    list_func_clear                shift and go to state 132
    list_func_count                shift and go to state 133
    list_func_add                  shift and go to state 134
    list_func_removeat             shift and go to state 135
    dict_empty                     shift and go to state 136
    dict_full                      shift and go to state 137
    dict_func_put                  shift and go to state 138
    dict_func_remove               shift and go to state 139
    method_declaration             shift and go to state 140
    data_type                      shift and go to state 142
    queue_enqueue                  shift and go to state 143
    queue_dequeue                  shift and go to state 144
    queue_clear                    shift and go to state 145
    queue_isEmpty                  shift and go to state 146
    stack_push                     shift and go to state 148
    stack_pop                      shift and go to state 149
    stack_clear                    shift and go to state 150
    stack_peek                     shift and go to state 151
    stack_isEmpty                  shift and go to state 152
    for_anidado                    shift and go to state 154
    for_each                       shift and go to state 155
    try_catch_simply               shift and go to state 156
    try_catch_finally              shift and go to state 157
    normal_while                   shift and go to state 158
    do_while                       shift and go to state 159
    access_modifiers               shift and go to state 160
    assignation_key_value          shift and go to state 162
    for_simple                     shift and go to state 173

state 90

    (202) function_arguments -> function_argument COMMA function_arguments .

    RPARENT         reduce using rule 202 (function_arguments -> function_argument COMMA function_arguments .)


state 91

    (194) simple_method -> STATIC data_type METHOD LPARENT function_arguments RPARENT LKEY . all_block_code function_return RKEY
    (26) all_block_code -> . block_code
    (27) all_block_code -> . block_code all_block_code
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . read_data
    (8) block_code -> . arithmetic_operation
    (9) block_code -> . logic_operation
    (10) block_code -> . array_assignation
    (11) block_code -> . array_value_assign
    (12) block_code -> . array_indexing
    (13) block_code -> . lists
    (14) block_code -> . functions_list
    (15) block_code -> . dict_estruct
    (16) block_code -> . functions_dict
    (17) block_code -> . concurrent_method
    (18) block_code -> . queue_struct
    (19) block_code -> . functions_queue
    (20) block_code -> . stack_struct
    (21) block_code -> . functions_stack
    (22) block_code -> . block_if
    (23) block_code -> . block_for
    (24) block_code -> . block_try_catch
    (25) block_code -> . block_while
    (86) def_const_or_var -> . constant_assignation
    (87) def_const_or_var -> . variable_assignation
    (88) def_const_or_var -> . late_initialization
    (33) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (34) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (35) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (44) array_assignation -> . array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA
    (50) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (51) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (48) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (49) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (155) lists -> . list_empty
    (156) lists -> . list_full
    (165) functions_list -> . list_func_clear
    (166) functions_list -> . list_func_count
    (167) functions_list -> . list_func_add
    (168) functions_list -> . list_func_removeat
    (142) dict_estruct -> . dict_empty
    (143) dict_estruct -> . dict_full
    (151) functions_dict -> . dict_func_put
    (152) functions_dict -> . dict_func_remove
    (205) concurrent_method -> . method_declaration CONCURRENT LKEY concurrent_block RKEY
    (184) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (185) functions_queue -> . queue_enqueue
    (186) functions_queue -> . queue_dequeue
    (187) functions_queue -> . queue_clear
    (188) functions_queue -> . queue_isEmpty
    (173) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (174) functions_stack -> . stack_push
    (175) functions_stack -> . stack_pop
    (176) functions_stack -> . stack_clear
    (177) functions_stack -> . stack_peek
    (178) functions_stack -> . stack_isEmpty
    (137) block_if -> . IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if
    (121) block_for -> . for_anidado
    (122) block_for -> . for_each
    (129) block_try_catch -> . try_catch_simply
    (130) block_try_catch -> . try_catch_finally
    (133) block_while -> . normal_while
    (134) block_while -> . do_while
    (89) constant_assignation -> . access_modifiers CONST data_type assignation_key_value DOTANDCOMMA
    (90) constant_assignation -> . CONST data_type assignation_key_value DOTANDCOMMA
    (91) constant_assignation -> . access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (92) constant_assignation -> . CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (93) variable_assignation -> . access_modifiers data_type assignation_key_value DOTANDCOMMA
    (94) variable_assignation -> . data_type assignation_key_value DOTANDCOMMA
    (95) variable_assignation -> . access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA
    (96) variable_assignation -> . data_type assignation_key_value_multiple DOTANDCOMMA
    (97) late_initialization -> . access_modifiers data_type VARIABLE DOTANDCOMMA
    (98) late_initialization -> . data_type VARIABLE DOTANDCOMMA
    (99) late_initialization -> . assignation_key_value DOTANDCOMMA
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET
    (157) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (158) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (160) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (169) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (170) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (171) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (172) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (144) dict_empty -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (145) dict_full -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA
    (153) dict_func_put -> . VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA
    (154) dict_func_remove -> . VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA
    (206) method_declaration -> . METHOD IDENTIFIER LPARENT RPARENT DOTANDCOMMA
    (189) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (190) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (191) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (193) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (179) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (180) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (181) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (182) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (183) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (125) for_anidado -> . for_simple
    (126) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY
    (127) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY
    (128) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (131) try_catch_simply -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY
    (132) try_catch_finally -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY
    (135) normal_while -> . WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY
    (136) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT
    (84) access_modifiers -> . PUBLIC
    (85) access_modifiers -> . PRIVATE
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (100) assignation_key_value -> . VARIABLE ASSIGNATION value
    (101) assignation_key_value -> . READ LPARENT RPARENT
    (123) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (124) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    PRINT           shift and go to state 124
    READ            shift and go to state 126
    VARIABLE        shift and go to state 125
    QUEUE           shift and go to state 141
    STACK           shift and go to state 147
    IF              shift and go to state 153
    CONST           shift and go to state 161
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164
    CHARTYPE        shift and go to state 165
    STRINGTYPE      shift and go to state 166
    FLOATTYPE       shift and go to state 167
    DECIMALTYPE     shift and go to state 168
    INTTYPE         shift and go to state 169
    BOOLTYPE        shift and go to state 170
    LIST            shift and go to state 171
    DICTIONARY      shift and go to state 172
    METHOD          shift and go to state 97
    FOR             shift and go to state 174
    FOREACH         shift and go to state 175
    TRY             shift and go to state 176
    WHILE           shift and go to state 177
    DO              shift and go to state 178
    PUBLIC          shift and go to state 179
    PRIVATE         shift and go to state 20

    data_type                      shift and go to state 142
    all_block_code                 shift and go to state 180
    block_code                     shift and go to state 99
    def_const_or_var               shift and go to state 100
    print_data                     shift and go to state 101
    read_data                      shift and go to state 102
    arithmetic_operation           shift and go to state 103
    logic_operation                shift and go to state 104
    array_assignation              shift and go to state 105
    array_value_assign             shift and go to state 106
    array_indexing                 shift and go to state 107
    lists                          shift and go to state 108
    functions_list                 shift and go to state 109
    dict_estruct                   shift and go to state 110
    functions_dict                 shift and go to state 111
    concurrent_method              shift and go to state 112
    queue_struct                   shift and go to state 113
    functions_queue                shift and go to state 114
    stack_struct                   shift and go to state 115
    functions_stack                shift and go to state 116
    block_if                       shift and go to state 117
    block_for                      shift and go to state 118
    block_try_catch                shift and go to state 119
    block_while                    shift and go to state 120
    constant_assignation           shift and go to state 121
    variable_assignation           shift and go to state 122
    late_initialization            shift and go to state 123
    value_numeric                  shift and go to state 127
    array_type                     shift and go to state 129
    list_empty                     shift and go to state 130
    list_full                      shift and go to state 131
    list_func_clear                shift and go to state 132
    list_func_count                shift and go to state 133
    list_func_add                  shift and go to state 134
    list_func_removeat             shift and go to state 135
    dict_empty                     shift and go to state 136
    dict_full                      shift and go to state 137
    dict_func_put                  shift and go to state 138
    dict_func_remove               shift and go to state 139
    method_declaration             shift and go to state 140
    queue_enqueue                  shift and go to state 143
    queue_dequeue                  shift and go to state 144
    queue_clear                    shift and go to state 145
    queue_isEmpty                  shift and go to state 146
    stack_push                     shift and go to state 148
    stack_pop                      shift and go to state 149
    stack_clear                    shift and go to state 150
    stack_peek                     shift and go to state 151
    stack_isEmpty                  shift and go to state 152
    for_anidado                    shift and go to state 154
    for_each                       shift and go to state 155
    try_catch_simply               shift and go to state 156
    try_catch_finally              shift and go to state 157
    normal_while                   shift and go to state 158
    do_while                       shift and go to state 159
    access_modifiers               shift and go to state 160
    assignation_key_value          shift and go to state 162
    for_simple                     shift and go to state 173

state 92

    (196) simple_method -> access_modifiers STATIC data_type METHOD LPARENT function_arguments RPARENT . LKEY all_block_code function_return RKEY

    LKEY            shift and go to state 181


state 93

    (197) simple_method -> access_modifiers STATIC VOID METHOD LPARENT function_arguments RPARENT . LKEY all_block_code RKEY

    LKEY            shift and go to state 182


state 94

    (204) declaration_lambda -> ACTION SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION VARIABLE . ARROW LKEY block_code RKEY

    ARROW           shift and go to state 183


state 95

    (203) declaration_async -> PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY . AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY

    AWAIT           shift and go to state 184


state 96

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE . RPARENT LKEY all_block_code RKEY

    RPARENT         shift and go to state 185


state 97

    (206) method_declaration -> METHOD . IDENTIFIER LPARENT RPARENT DOTANDCOMMA

    IDENTIFIER      shift and go to state 186


state 98

    (195) simple_method -> STATIC VOID METHOD LPARENT function_arguments RPARENT LKEY all_block_code . RKEY

    RKEY            shift and go to state 187


state 99

    (26) all_block_code -> block_code .
    (27) all_block_code -> block_code . all_block_code
    (26) all_block_code -> . block_code
    (27) all_block_code -> . block_code all_block_code
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . read_data
    (8) block_code -> . arithmetic_operation
    (9) block_code -> . logic_operation
    (10) block_code -> . array_assignation
    (11) block_code -> . array_value_assign
    (12) block_code -> . array_indexing
    (13) block_code -> . lists
    (14) block_code -> . functions_list
    (15) block_code -> . dict_estruct
    (16) block_code -> . functions_dict
    (17) block_code -> . concurrent_method
    (18) block_code -> . queue_struct
    (19) block_code -> . functions_queue
    (20) block_code -> . stack_struct
    (21) block_code -> . functions_stack
    (22) block_code -> . block_if
    (23) block_code -> . block_for
    (24) block_code -> . block_try_catch
    (25) block_code -> . block_while
    (86) def_const_or_var -> . constant_assignation
    (87) def_const_or_var -> . variable_assignation
    (88) def_const_or_var -> . late_initialization
    (33) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (34) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (35) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (44) array_assignation -> . array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA
    (50) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (51) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (48) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (49) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (155) lists -> . list_empty
    (156) lists -> . list_full
    (165) functions_list -> . list_func_clear
    (166) functions_list -> . list_func_count
    (167) functions_list -> . list_func_add
    (168) functions_list -> . list_func_removeat
    (142) dict_estruct -> . dict_empty
    (143) dict_estruct -> . dict_full
    (151) functions_dict -> . dict_func_put
    (152) functions_dict -> . dict_func_remove
    (205) concurrent_method -> . method_declaration CONCURRENT LKEY concurrent_block RKEY
    (184) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (185) functions_queue -> . queue_enqueue
    (186) functions_queue -> . queue_dequeue
    (187) functions_queue -> . queue_clear
    (188) functions_queue -> . queue_isEmpty
    (173) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (174) functions_stack -> . stack_push
    (175) functions_stack -> . stack_pop
    (176) functions_stack -> . stack_clear
    (177) functions_stack -> . stack_peek
    (178) functions_stack -> . stack_isEmpty
    (137) block_if -> . IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if
    (121) block_for -> . for_anidado
    (122) block_for -> . for_each
    (129) block_try_catch -> . try_catch_simply
    (130) block_try_catch -> . try_catch_finally
    (133) block_while -> . normal_while
    (134) block_while -> . do_while
    (89) constant_assignation -> . access_modifiers CONST data_type assignation_key_value DOTANDCOMMA
    (90) constant_assignation -> . CONST data_type assignation_key_value DOTANDCOMMA
    (91) constant_assignation -> . access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (92) constant_assignation -> . CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (93) variable_assignation -> . access_modifiers data_type assignation_key_value DOTANDCOMMA
    (94) variable_assignation -> . data_type assignation_key_value DOTANDCOMMA
    (95) variable_assignation -> . access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA
    (96) variable_assignation -> . data_type assignation_key_value_multiple DOTANDCOMMA
    (97) late_initialization -> . access_modifiers data_type VARIABLE DOTANDCOMMA
    (98) late_initialization -> . data_type VARIABLE DOTANDCOMMA
    (99) late_initialization -> . assignation_key_value DOTANDCOMMA
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET
    (157) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (158) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (160) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (169) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (170) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (171) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (172) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (144) dict_empty -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (145) dict_full -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA
    (153) dict_func_put -> . VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA
    (154) dict_func_remove -> . VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA
    (206) method_declaration -> . METHOD IDENTIFIER LPARENT RPARENT DOTANDCOMMA
    (189) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (190) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (191) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (193) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (179) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (180) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (181) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (182) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (183) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (125) for_anidado -> . for_simple
    (126) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY
    (127) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY
    (128) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (131) try_catch_simply -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY
    (132) try_catch_finally -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY
    (135) normal_while -> . WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY
    (136) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT
    (84) access_modifiers -> . PUBLIC
    (85) access_modifiers -> . PRIVATE
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (100) assignation_key_value -> . VARIABLE ASSIGNATION value
    (101) assignation_key_value -> . READ LPARENT RPARENT
    (123) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (124) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    RKEY            reduce using rule 26 (all_block_code -> block_code .)
    RETURN          reduce using rule 26 (all_block_code -> block_code .)
    PRINT           shift and go to state 124
    READ            shift and go to state 126
    VARIABLE        shift and go to state 125
    QUEUE           shift and go to state 141
    STACK           shift and go to state 147
    IF              shift and go to state 153
    CONST           shift and go to state 161
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164
    CHARTYPE        shift and go to state 165
    STRINGTYPE      shift and go to state 166
    FLOATTYPE       shift and go to state 167
    DECIMALTYPE     shift and go to state 168
    INTTYPE         shift and go to state 169
    BOOLTYPE        shift and go to state 170
    LIST            shift and go to state 171
    DICTIONARY      shift and go to state 172
    METHOD          shift and go to state 97
    FOR             shift and go to state 174
    FOREACH         shift and go to state 175
    TRY             shift and go to state 176
    WHILE           shift and go to state 177
    DO              shift and go to state 178
    PUBLIC          shift and go to state 179
    PRIVATE         shift and go to state 20

    block_code                     shift and go to state 99
    all_block_code                 shift and go to state 188
    def_const_or_var               shift and go to state 100
    print_data                     shift and go to state 101
    read_data                      shift and go to state 102
    arithmetic_operation           shift and go to state 103
    logic_operation                shift and go to state 104
    array_assignation              shift and go to state 105
    array_value_assign             shift and go to state 106
    array_indexing                 shift and go to state 107
    lists                          shift and go to state 108
    functions_list                 shift and go to state 109
    dict_estruct                   shift and go to state 110
    functions_dict                 shift and go to state 111
    concurrent_method              shift and go to state 112
    queue_struct                   shift and go to state 113
    functions_queue                shift and go to state 114
    stack_struct                   shift and go to state 115
    functions_stack                shift and go to state 116
    block_if                       shift and go to state 117
    block_for                      shift and go to state 118
    block_try_catch                shift and go to state 119
    block_while                    shift and go to state 120
    constant_assignation           shift and go to state 121
    variable_assignation           shift and go to state 122
    late_initialization            shift and go to state 123
    value_numeric                  shift and go to state 127
    array_type                     shift and go to state 129
    list_empty                     shift and go to state 130
    list_full                      shift and go to state 131
    list_func_clear                shift and go to state 132
    list_func_count                shift and go to state 133
    list_func_add                  shift and go to state 134
    list_func_removeat             shift and go to state 135
    dict_empty                     shift and go to state 136
    dict_full                      shift and go to state 137
    dict_func_put                  shift and go to state 138
    dict_func_remove               shift and go to state 139
    method_declaration             shift and go to state 140
    data_type                      shift and go to state 142
    queue_enqueue                  shift and go to state 143
    queue_dequeue                  shift and go to state 144
    queue_clear                    shift and go to state 145
    queue_isEmpty                  shift and go to state 146
    stack_push                     shift and go to state 148
    stack_pop                      shift and go to state 149
    stack_clear                    shift and go to state 150
    stack_peek                     shift and go to state 151
    stack_isEmpty                  shift and go to state 152
    for_anidado                    shift and go to state 154
    for_each                       shift and go to state 155
    try_catch_simply               shift and go to state 156
    try_catch_finally              shift and go to state 157
    normal_while                   shift and go to state 158
    do_while                       shift and go to state 159
    access_modifiers               shift and go to state 160
    assignation_key_value          shift and go to state 162
    for_simple                     shift and go to state 173

state 100

    (5) block_code -> def_const_or_var .

    PRINT           reduce using rule 5 (block_code -> def_const_or_var .)
    READ            reduce using rule 5 (block_code -> def_const_or_var .)
    VARIABLE        reduce using rule 5 (block_code -> def_const_or_var .)
    QUEUE           reduce using rule 5 (block_code -> def_const_or_var .)
    STACK           reduce using rule 5 (block_code -> def_const_or_var .)
    IF              reduce using rule 5 (block_code -> def_const_or_var .)
    CONST           reduce using rule 5 (block_code -> def_const_or_var .)
    INTEGER         reduce using rule 5 (block_code -> def_const_or_var .)
    FLOAT_NUMBER    reduce using rule 5 (block_code -> def_const_or_var .)
    DECIMAL_NUMBER  reduce using rule 5 (block_code -> def_const_or_var .)
    CHARTYPE        reduce using rule 5 (block_code -> def_const_or_var .)
    STRINGTYPE      reduce using rule 5 (block_code -> def_const_or_var .)
    FLOATTYPE       reduce using rule 5 (block_code -> def_const_or_var .)
    DECIMALTYPE     reduce using rule 5 (block_code -> def_const_or_var .)
    INTTYPE         reduce using rule 5 (block_code -> def_const_or_var .)
    BOOLTYPE        reduce using rule 5 (block_code -> def_const_or_var .)
    LIST            reduce using rule 5 (block_code -> def_const_or_var .)
    DICTIONARY      reduce using rule 5 (block_code -> def_const_or_var .)
    METHOD          reduce using rule 5 (block_code -> def_const_or_var .)
    FOR             reduce using rule 5 (block_code -> def_const_or_var .)
    FOREACH         reduce using rule 5 (block_code -> def_const_or_var .)
    TRY             reduce using rule 5 (block_code -> def_const_or_var .)
    WHILE           reduce using rule 5 (block_code -> def_const_or_var .)
    DO              reduce using rule 5 (block_code -> def_const_or_var .)
    PUBLIC          reduce using rule 5 (block_code -> def_const_or_var .)
    PRIVATE         reduce using rule 5 (block_code -> def_const_or_var .)
    RKEY            reduce using rule 5 (block_code -> def_const_or_var .)
    RETURN          reduce using rule 5 (block_code -> def_const_or_var .)


state 101

    (6) block_code -> print_data .

    PRINT           reduce using rule 6 (block_code -> print_data .)
    READ            reduce using rule 6 (block_code -> print_data .)
    VARIABLE        reduce using rule 6 (block_code -> print_data .)
    QUEUE           reduce using rule 6 (block_code -> print_data .)
    STACK           reduce using rule 6 (block_code -> print_data .)
    IF              reduce using rule 6 (block_code -> print_data .)
    CONST           reduce using rule 6 (block_code -> print_data .)
    INTEGER         reduce using rule 6 (block_code -> print_data .)
    FLOAT_NUMBER    reduce using rule 6 (block_code -> print_data .)
    DECIMAL_NUMBER  reduce using rule 6 (block_code -> print_data .)
    CHARTYPE        reduce using rule 6 (block_code -> print_data .)
    STRINGTYPE      reduce using rule 6 (block_code -> print_data .)
    FLOATTYPE       reduce using rule 6 (block_code -> print_data .)
    DECIMALTYPE     reduce using rule 6 (block_code -> print_data .)
    INTTYPE         reduce using rule 6 (block_code -> print_data .)
    BOOLTYPE        reduce using rule 6 (block_code -> print_data .)
    LIST            reduce using rule 6 (block_code -> print_data .)
    DICTIONARY      reduce using rule 6 (block_code -> print_data .)
    METHOD          reduce using rule 6 (block_code -> print_data .)
    FOR             reduce using rule 6 (block_code -> print_data .)
    FOREACH         reduce using rule 6 (block_code -> print_data .)
    TRY             reduce using rule 6 (block_code -> print_data .)
    WHILE           reduce using rule 6 (block_code -> print_data .)
    DO              reduce using rule 6 (block_code -> print_data .)
    PUBLIC          reduce using rule 6 (block_code -> print_data .)
    PRIVATE         reduce using rule 6 (block_code -> print_data .)
    RKEY            reduce using rule 6 (block_code -> print_data .)
    RETURN          reduce using rule 6 (block_code -> print_data .)


state 102

    (7) block_code -> read_data .

    PRINT           reduce using rule 7 (block_code -> read_data .)
    READ            reduce using rule 7 (block_code -> read_data .)
    VARIABLE        reduce using rule 7 (block_code -> read_data .)
    QUEUE           reduce using rule 7 (block_code -> read_data .)
    STACK           reduce using rule 7 (block_code -> read_data .)
    IF              reduce using rule 7 (block_code -> read_data .)
    CONST           reduce using rule 7 (block_code -> read_data .)
    INTEGER         reduce using rule 7 (block_code -> read_data .)
    FLOAT_NUMBER    reduce using rule 7 (block_code -> read_data .)
    DECIMAL_NUMBER  reduce using rule 7 (block_code -> read_data .)
    CHARTYPE        reduce using rule 7 (block_code -> read_data .)
    STRINGTYPE      reduce using rule 7 (block_code -> read_data .)
    FLOATTYPE       reduce using rule 7 (block_code -> read_data .)
    DECIMALTYPE     reduce using rule 7 (block_code -> read_data .)
    INTTYPE         reduce using rule 7 (block_code -> read_data .)
    BOOLTYPE        reduce using rule 7 (block_code -> read_data .)
    LIST            reduce using rule 7 (block_code -> read_data .)
    DICTIONARY      reduce using rule 7 (block_code -> read_data .)
    METHOD          reduce using rule 7 (block_code -> read_data .)
    FOR             reduce using rule 7 (block_code -> read_data .)
    FOREACH         reduce using rule 7 (block_code -> read_data .)
    TRY             reduce using rule 7 (block_code -> read_data .)
    WHILE           reduce using rule 7 (block_code -> read_data .)
    DO              reduce using rule 7 (block_code -> read_data .)
    PUBLIC          reduce using rule 7 (block_code -> read_data .)
    PRIVATE         reduce using rule 7 (block_code -> read_data .)
    RKEY            reduce using rule 7 (block_code -> read_data .)
    RETURN          reduce using rule 7 (block_code -> read_data .)


state 103

    (8) block_code -> arithmetic_operation .
    (62) value_numeric -> arithmetic_operation .

  ! reduce/reduce conflict for PRINT resolved using rule 8 (block_code -> arithmetic_operation .)
  ! reduce/reduce conflict for READ resolved using rule 8 (block_code -> arithmetic_operation .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 8 (block_code -> arithmetic_operation .)
  ! reduce/reduce conflict for QUEUE resolved using rule 8 (block_code -> arithmetic_operation .)
  ! reduce/reduce conflict for STACK resolved using rule 8 (block_code -> arithmetic_operation .)
  ! reduce/reduce conflict for IF resolved using rule 8 (block_code -> arithmetic_operation .)
  ! reduce/reduce conflict for CONST resolved using rule 8 (block_code -> arithmetic_operation .)
  ! reduce/reduce conflict for INTEGER resolved using rule 8 (block_code -> arithmetic_operation .)
  ! reduce/reduce conflict for FLOAT_NUMBER resolved using rule 8 (block_code -> arithmetic_operation .)
  ! reduce/reduce conflict for DECIMAL_NUMBER resolved using rule 8 (block_code -> arithmetic_operation .)
  ! reduce/reduce conflict for CHARTYPE resolved using rule 8 (block_code -> arithmetic_operation .)
  ! reduce/reduce conflict for STRINGTYPE resolved using rule 8 (block_code -> arithmetic_operation .)
  ! reduce/reduce conflict for FLOATTYPE resolved using rule 8 (block_code -> arithmetic_operation .)
  ! reduce/reduce conflict for DECIMALTYPE resolved using rule 8 (block_code -> arithmetic_operation .)
  ! reduce/reduce conflict for INTTYPE resolved using rule 8 (block_code -> arithmetic_operation .)
  ! reduce/reduce conflict for BOOLTYPE resolved using rule 8 (block_code -> arithmetic_operation .)
  ! reduce/reduce conflict for LIST resolved using rule 8 (block_code -> arithmetic_operation .)
  ! reduce/reduce conflict for DICTIONARY resolved using rule 8 (block_code -> arithmetic_operation .)
  ! reduce/reduce conflict for METHOD resolved using rule 8 (block_code -> arithmetic_operation .)
  ! reduce/reduce conflict for FOR resolved using rule 8 (block_code -> arithmetic_operation .)
  ! reduce/reduce conflict for FOREACH resolved using rule 8 (block_code -> arithmetic_operation .)
  ! reduce/reduce conflict for TRY resolved using rule 8 (block_code -> arithmetic_operation .)
  ! reduce/reduce conflict for WHILE resolved using rule 8 (block_code -> arithmetic_operation .)
  ! reduce/reduce conflict for DO resolved using rule 8 (block_code -> arithmetic_operation .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 8 (block_code -> arithmetic_operation .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 8 (block_code -> arithmetic_operation .)
  ! reduce/reduce conflict for RKEY resolved using rule 8 (block_code -> arithmetic_operation .)
  ! reduce/reduce conflict for RETURN resolved using rule 8 (block_code -> arithmetic_operation .)
    PRINT           reduce using rule 8 (block_code -> arithmetic_operation .)
    READ            reduce using rule 8 (block_code -> arithmetic_operation .)
    VARIABLE        reduce using rule 8 (block_code -> arithmetic_operation .)
    QUEUE           reduce using rule 8 (block_code -> arithmetic_operation .)
    STACK           reduce using rule 8 (block_code -> arithmetic_operation .)
    IF              reduce using rule 8 (block_code -> arithmetic_operation .)
    CONST           reduce using rule 8 (block_code -> arithmetic_operation .)
    INTEGER         reduce using rule 8 (block_code -> arithmetic_operation .)
    FLOAT_NUMBER    reduce using rule 8 (block_code -> arithmetic_operation .)
    DECIMAL_NUMBER  reduce using rule 8 (block_code -> arithmetic_operation .)
    CHARTYPE        reduce using rule 8 (block_code -> arithmetic_operation .)
    STRINGTYPE      reduce using rule 8 (block_code -> arithmetic_operation .)
    FLOATTYPE       reduce using rule 8 (block_code -> arithmetic_operation .)
    DECIMALTYPE     reduce using rule 8 (block_code -> arithmetic_operation .)
    INTTYPE         reduce using rule 8 (block_code -> arithmetic_operation .)
    BOOLTYPE        reduce using rule 8 (block_code -> arithmetic_operation .)
    LIST            reduce using rule 8 (block_code -> arithmetic_operation .)
    DICTIONARY      reduce using rule 8 (block_code -> arithmetic_operation .)
    METHOD          reduce using rule 8 (block_code -> arithmetic_operation .)
    FOR             reduce using rule 8 (block_code -> arithmetic_operation .)
    FOREACH         reduce using rule 8 (block_code -> arithmetic_operation .)
    TRY             reduce using rule 8 (block_code -> arithmetic_operation .)
    WHILE           reduce using rule 8 (block_code -> arithmetic_operation .)
    DO              reduce using rule 8 (block_code -> arithmetic_operation .)
    PUBLIC          reduce using rule 8 (block_code -> arithmetic_operation .)
    PRIVATE         reduce using rule 8 (block_code -> arithmetic_operation .)
    RKEY            reduce using rule 8 (block_code -> arithmetic_operation .)
    RETURN          reduce using rule 8 (block_code -> arithmetic_operation .)
    PLUS            reduce using rule 62 (value_numeric -> arithmetic_operation .)
    MINUS           reduce using rule 62 (value_numeric -> arithmetic_operation .)
    TIMES           reduce using rule 62 (value_numeric -> arithmetic_operation .)
    DIVIDE          reduce using rule 62 (value_numeric -> arithmetic_operation .)
    PERCENT         reduce using rule 62 (value_numeric -> arithmetic_operation .)
    GREATER_THAN    reduce using rule 62 (value_numeric -> arithmetic_operation .)
    SMALLER_THAN    reduce using rule 62 (value_numeric -> arithmetic_operation .)
    EQUAL_COMPARATION reduce using rule 62 (value_numeric -> arithmetic_operation .)
    INEQUALITY      reduce using rule 62 (value_numeric -> arithmetic_operation .)
    GREATER_THAN_OR_EQUAL reduce using rule 62 (value_numeric -> arithmetic_operation .)
    SMALLER_THAN_OR_EQUAL reduce using rule 62 (value_numeric -> arithmetic_operation .)
    LOGICAND        reduce using rule 62 (value_numeric -> arithmetic_operation .)
    LOGICOR         reduce using rule 62 (value_numeric -> arithmetic_operation .)
    LOGICNOT        reduce using rule 62 (value_numeric -> arithmetic_operation .)
    LOGICXOR        reduce using rule 62 (value_numeric -> arithmetic_operation .)

  ! PRINT           [ reduce using rule 62 (value_numeric -> arithmetic_operation .) ]
  ! READ            [ reduce using rule 62 (value_numeric -> arithmetic_operation .) ]
  ! VARIABLE        [ reduce using rule 62 (value_numeric -> arithmetic_operation .) ]
  ! QUEUE           [ reduce using rule 62 (value_numeric -> arithmetic_operation .) ]
  ! STACK           [ reduce using rule 62 (value_numeric -> arithmetic_operation .) ]
  ! IF              [ reduce using rule 62 (value_numeric -> arithmetic_operation .) ]
  ! CONST           [ reduce using rule 62 (value_numeric -> arithmetic_operation .) ]
  ! INTEGER         [ reduce using rule 62 (value_numeric -> arithmetic_operation .) ]
  ! FLOAT_NUMBER    [ reduce using rule 62 (value_numeric -> arithmetic_operation .) ]
  ! DECIMAL_NUMBER  [ reduce using rule 62 (value_numeric -> arithmetic_operation .) ]
  ! CHARTYPE        [ reduce using rule 62 (value_numeric -> arithmetic_operation .) ]
  ! STRINGTYPE      [ reduce using rule 62 (value_numeric -> arithmetic_operation .) ]
  ! FLOATTYPE       [ reduce using rule 62 (value_numeric -> arithmetic_operation .) ]
  ! DECIMALTYPE     [ reduce using rule 62 (value_numeric -> arithmetic_operation .) ]
  ! INTTYPE         [ reduce using rule 62 (value_numeric -> arithmetic_operation .) ]
  ! BOOLTYPE        [ reduce using rule 62 (value_numeric -> arithmetic_operation .) ]
  ! LIST            [ reduce using rule 62 (value_numeric -> arithmetic_operation .) ]
  ! DICTIONARY      [ reduce using rule 62 (value_numeric -> arithmetic_operation .) ]
  ! METHOD          [ reduce using rule 62 (value_numeric -> arithmetic_operation .) ]
  ! FOR             [ reduce using rule 62 (value_numeric -> arithmetic_operation .) ]
  ! FOREACH         [ reduce using rule 62 (value_numeric -> arithmetic_operation .) ]
  ! TRY             [ reduce using rule 62 (value_numeric -> arithmetic_operation .) ]
  ! WHILE           [ reduce using rule 62 (value_numeric -> arithmetic_operation .) ]
  ! DO              [ reduce using rule 62 (value_numeric -> arithmetic_operation .) ]
  ! PUBLIC          [ reduce using rule 62 (value_numeric -> arithmetic_operation .) ]
  ! PRIVATE         [ reduce using rule 62 (value_numeric -> arithmetic_operation .) ]
  ! RKEY            [ reduce using rule 62 (value_numeric -> arithmetic_operation .) ]
  ! RETURN          [ reduce using rule 62 (value_numeric -> arithmetic_operation .) ]


state 104

    (9) block_code -> logic_operation .

    PRINT           reduce using rule 9 (block_code -> logic_operation .)
    READ            reduce using rule 9 (block_code -> logic_operation .)
    VARIABLE        reduce using rule 9 (block_code -> logic_operation .)
    QUEUE           reduce using rule 9 (block_code -> logic_operation .)
    STACK           reduce using rule 9 (block_code -> logic_operation .)
    IF              reduce using rule 9 (block_code -> logic_operation .)
    CONST           reduce using rule 9 (block_code -> logic_operation .)
    INTEGER         reduce using rule 9 (block_code -> logic_operation .)
    FLOAT_NUMBER    reduce using rule 9 (block_code -> logic_operation .)
    DECIMAL_NUMBER  reduce using rule 9 (block_code -> logic_operation .)
    CHARTYPE        reduce using rule 9 (block_code -> logic_operation .)
    STRINGTYPE      reduce using rule 9 (block_code -> logic_operation .)
    FLOATTYPE       reduce using rule 9 (block_code -> logic_operation .)
    DECIMALTYPE     reduce using rule 9 (block_code -> logic_operation .)
    INTTYPE         reduce using rule 9 (block_code -> logic_operation .)
    BOOLTYPE        reduce using rule 9 (block_code -> logic_operation .)
    LIST            reduce using rule 9 (block_code -> logic_operation .)
    DICTIONARY      reduce using rule 9 (block_code -> logic_operation .)
    METHOD          reduce using rule 9 (block_code -> logic_operation .)
    FOR             reduce using rule 9 (block_code -> logic_operation .)
    FOREACH         reduce using rule 9 (block_code -> logic_operation .)
    TRY             reduce using rule 9 (block_code -> logic_operation .)
    WHILE           reduce using rule 9 (block_code -> logic_operation .)
    DO              reduce using rule 9 (block_code -> logic_operation .)
    PUBLIC          reduce using rule 9 (block_code -> logic_operation .)
    PRIVATE         reduce using rule 9 (block_code -> logic_operation .)
    RKEY            reduce using rule 9 (block_code -> logic_operation .)
    RETURN          reduce using rule 9 (block_code -> logic_operation .)


state 105

    (10) block_code -> array_assignation .

    PRINT           reduce using rule 10 (block_code -> array_assignation .)
    READ            reduce using rule 10 (block_code -> array_assignation .)
    VARIABLE        reduce using rule 10 (block_code -> array_assignation .)
    QUEUE           reduce using rule 10 (block_code -> array_assignation .)
    STACK           reduce using rule 10 (block_code -> array_assignation .)
    IF              reduce using rule 10 (block_code -> array_assignation .)
    CONST           reduce using rule 10 (block_code -> array_assignation .)
    INTEGER         reduce using rule 10 (block_code -> array_assignation .)
    FLOAT_NUMBER    reduce using rule 10 (block_code -> array_assignation .)
    DECIMAL_NUMBER  reduce using rule 10 (block_code -> array_assignation .)
    CHARTYPE        reduce using rule 10 (block_code -> array_assignation .)
    STRINGTYPE      reduce using rule 10 (block_code -> array_assignation .)
    FLOATTYPE       reduce using rule 10 (block_code -> array_assignation .)
    DECIMALTYPE     reduce using rule 10 (block_code -> array_assignation .)
    INTTYPE         reduce using rule 10 (block_code -> array_assignation .)
    BOOLTYPE        reduce using rule 10 (block_code -> array_assignation .)
    LIST            reduce using rule 10 (block_code -> array_assignation .)
    DICTIONARY      reduce using rule 10 (block_code -> array_assignation .)
    METHOD          reduce using rule 10 (block_code -> array_assignation .)
    FOR             reduce using rule 10 (block_code -> array_assignation .)
    FOREACH         reduce using rule 10 (block_code -> array_assignation .)
    TRY             reduce using rule 10 (block_code -> array_assignation .)
    WHILE           reduce using rule 10 (block_code -> array_assignation .)
    DO              reduce using rule 10 (block_code -> array_assignation .)
    PUBLIC          reduce using rule 10 (block_code -> array_assignation .)
    PRIVATE         reduce using rule 10 (block_code -> array_assignation .)
    RKEY            reduce using rule 10 (block_code -> array_assignation .)
    RETURN          reduce using rule 10 (block_code -> array_assignation .)


state 106

    (11) block_code -> array_value_assign .

    PRINT           reduce using rule 11 (block_code -> array_value_assign .)
    READ            reduce using rule 11 (block_code -> array_value_assign .)
    VARIABLE        reduce using rule 11 (block_code -> array_value_assign .)
    QUEUE           reduce using rule 11 (block_code -> array_value_assign .)
    STACK           reduce using rule 11 (block_code -> array_value_assign .)
    IF              reduce using rule 11 (block_code -> array_value_assign .)
    CONST           reduce using rule 11 (block_code -> array_value_assign .)
    INTEGER         reduce using rule 11 (block_code -> array_value_assign .)
    FLOAT_NUMBER    reduce using rule 11 (block_code -> array_value_assign .)
    DECIMAL_NUMBER  reduce using rule 11 (block_code -> array_value_assign .)
    CHARTYPE        reduce using rule 11 (block_code -> array_value_assign .)
    STRINGTYPE      reduce using rule 11 (block_code -> array_value_assign .)
    FLOATTYPE       reduce using rule 11 (block_code -> array_value_assign .)
    DECIMALTYPE     reduce using rule 11 (block_code -> array_value_assign .)
    INTTYPE         reduce using rule 11 (block_code -> array_value_assign .)
    BOOLTYPE        reduce using rule 11 (block_code -> array_value_assign .)
    LIST            reduce using rule 11 (block_code -> array_value_assign .)
    DICTIONARY      reduce using rule 11 (block_code -> array_value_assign .)
    METHOD          reduce using rule 11 (block_code -> array_value_assign .)
    FOR             reduce using rule 11 (block_code -> array_value_assign .)
    FOREACH         reduce using rule 11 (block_code -> array_value_assign .)
    TRY             reduce using rule 11 (block_code -> array_value_assign .)
    WHILE           reduce using rule 11 (block_code -> array_value_assign .)
    DO              reduce using rule 11 (block_code -> array_value_assign .)
    PUBLIC          reduce using rule 11 (block_code -> array_value_assign .)
    PRIVATE         reduce using rule 11 (block_code -> array_value_assign .)
    RKEY            reduce using rule 11 (block_code -> array_value_assign .)
    RETURN          reduce using rule 11 (block_code -> array_value_assign .)


state 107

    (12) block_code -> array_indexing .

    PRINT           reduce using rule 12 (block_code -> array_indexing .)
    READ            reduce using rule 12 (block_code -> array_indexing .)
    VARIABLE        reduce using rule 12 (block_code -> array_indexing .)
    QUEUE           reduce using rule 12 (block_code -> array_indexing .)
    STACK           reduce using rule 12 (block_code -> array_indexing .)
    IF              reduce using rule 12 (block_code -> array_indexing .)
    CONST           reduce using rule 12 (block_code -> array_indexing .)
    INTEGER         reduce using rule 12 (block_code -> array_indexing .)
    FLOAT_NUMBER    reduce using rule 12 (block_code -> array_indexing .)
    DECIMAL_NUMBER  reduce using rule 12 (block_code -> array_indexing .)
    CHARTYPE        reduce using rule 12 (block_code -> array_indexing .)
    STRINGTYPE      reduce using rule 12 (block_code -> array_indexing .)
    FLOATTYPE       reduce using rule 12 (block_code -> array_indexing .)
    DECIMALTYPE     reduce using rule 12 (block_code -> array_indexing .)
    INTTYPE         reduce using rule 12 (block_code -> array_indexing .)
    BOOLTYPE        reduce using rule 12 (block_code -> array_indexing .)
    LIST            reduce using rule 12 (block_code -> array_indexing .)
    DICTIONARY      reduce using rule 12 (block_code -> array_indexing .)
    METHOD          reduce using rule 12 (block_code -> array_indexing .)
    FOR             reduce using rule 12 (block_code -> array_indexing .)
    FOREACH         reduce using rule 12 (block_code -> array_indexing .)
    TRY             reduce using rule 12 (block_code -> array_indexing .)
    WHILE           reduce using rule 12 (block_code -> array_indexing .)
    DO              reduce using rule 12 (block_code -> array_indexing .)
    PUBLIC          reduce using rule 12 (block_code -> array_indexing .)
    PRIVATE         reduce using rule 12 (block_code -> array_indexing .)
    RKEY            reduce using rule 12 (block_code -> array_indexing .)
    RETURN          reduce using rule 12 (block_code -> array_indexing .)


state 108

    (13) block_code -> lists .

    PRINT           reduce using rule 13 (block_code -> lists .)
    READ            reduce using rule 13 (block_code -> lists .)
    VARIABLE        reduce using rule 13 (block_code -> lists .)
    QUEUE           reduce using rule 13 (block_code -> lists .)
    STACK           reduce using rule 13 (block_code -> lists .)
    IF              reduce using rule 13 (block_code -> lists .)
    CONST           reduce using rule 13 (block_code -> lists .)
    INTEGER         reduce using rule 13 (block_code -> lists .)
    FLOAT_NUMBER    reduce using rule 13 (block_code -> lists .)
    DECIMAL_NUMBER  reduce using rule 13 (block_code -> lists .)
    CHARTYPE        reduce using rule 13 (block_code -> lists .)
    STRINGTYPE      reduce using rule 13 (block_code -> lists .)
    FLOATTYPE       reduce using rule 13 (block_code -> lists .)
    DECIMALTYPE     reduce using rule 13 (block_code -> lists .)
    INTTYPE         reduce using rule 13 (block_code -> lists .)
    BOOLTYPE        reduce using rule 13 (block_code -> lists .)
    LIST            reduce using rule 13 (block_code -> lists .)
    DICTIONARY      reduce using rule 13 (block_code -> lists .)
    METHOD          reduce using rule 13 (block_code -> lists .)
    FOR             reduce using rule 13 (block_code -> lists .)
    FOREACH         reduce using rule 13 (block_code -> lists .)
    TRY             reduce using rule 13 (block_code -> lists .)
    WHILE           reduce using rule 13 (block_code -> lists .)
    DO              reduce using rule 13 (block_code -> lists .)
    PUBLIC          reduce using rule 13 (block_code -> lists .)
    PRIVATE         reduce using rule 13 (block_code -> lists .)
    RKEY            reduce using rule 13 (block_code -> lists .)
    RETURN          reduce using rule 13 (block_code -> lists .)


state 109

    (14) block_code -> functions_list .

    PRINT           reduce using rule 14 (block_code -> functions_list .)
    READ            reduce using rule 14 (block_code -> functions_list .)
    VARIABLE        reduce using rule 14 (block_code -> functions_list .)
    QUEUE           reduce using rule 14 (block_code -> functions_list .)
    STACK           reduce using rule 14 (block_code -> functions_list .)
    IF              reduce using rule 14 (block_code -> functions_list .)
    CONST           reduce using rule 14 (block_code -> functions_list .)
    INTEGER         reduce using rule 14 (block_code -> functions_list .)
    FLOAT_NUMBER    reduce using rule 14 (block_code -> functions_list .)
    DECIMAL_NUMBER  reduce using rule 14 (block_code -> functions_list .)
    CHARTYPE        reduce using rule 14 (block_code -> functions_list .)
    STRINGTYPE      reduce using rule 14 (block_code -> functions_list .)
    FLOATTYPE       reduce using rule 14 (block_code -> functions_list .)
    DECIMALTYPE     reduce using rule 14 (block_code -> functions_list .)
    INTTYPE         reduce using rule 14 (block_code -> functions_list .)
    BOOLTYPE        reduce using rule 14 (block_code -> functions_list .)
    LIST            reduce using rule 14 (block_code -> functions_list .)
    DICTIONARY      reduce using rule 14 (block_code -> functions_list .)
    METHOD          reduce using rule 14 (block_code -> functions_list .)
    FOR             reduce using rule 14 (block_code -> functions_list .)
    FOREACH         reduce using rule 14 (block_code -> functions_list .)
    TRY             reduce using rule 14 (block_code -> functions_list .)
    WHILE           reduce using rule 14 (block_code -> functions_list .)
    DO              reduce using rule 14 (block_code -> functions_list .)
    PUBLIC          reduce using rule 14 (block_code -> functions_list .)
    PRIVATE         reduce using rule 14 (block_code -> functions_list .)
    RKEY            reduce using rule 14 (block_code -> functions_list .)
    RETURN          reduce using rule 14 (block_code -> functions_list .)


state 110

    (15) block_code -> dict_estruct .

    PRINT           reduce using rule 15 (block_code -> dict_estruct .)
    READ            reduce using rule 15 (block_code -> dict_estruct .)
    VARIABLE        reduce using rule 15 (block_code -> dict_estruct .)
    QUEUE           reduce using rule 15 (block_code -> dict_estruct .)
    STACK           reduce using rule 15 (block_code -> dict_estruct .)
    IF              reduce using rule 15 (block_code -> dict_estruct .)
    CONST           reduce using rule 15 (block_code -> dict_estruct .)
    INTEGER         reduce using rule 15 (block_code -> dict_estruct .)
    FLOAT_NUMBER    reduce using rule 15 (block_code -> dict_estruct .)
    DECIMAL_NUMBER  reduce using rule 15 (block_code -> dict_estruct .)
    CHARTYPE        reduce using rule 15 (block_code -> dict_estruct .)
    STRINGTYPE      reduce using rule 15 (block_code -> dict_estruct .)
    FLOATTYPE       reduce using rule 15 (block_code -> dict_estruct .)
    DECIMALTYPE     reduce using rule 15 (block_code -> dict_estruct .)
    INTTYPE         reduce using rule 15 (block_code -> dict_estruct .)
    BOOLTYPE        reduce using rule 15 (block_code -> dict_estruct .)
    LIST            reduce using rule 15 (block_code -> dict_estruct .)
    DICTIONARY      reduce using rule 15 (block_code -> dict_estruct .)
    METHOD          reduce using rule 15 (block_code -> dict_estruct .)
    FOR             reduce using rule 15 (block_code -> dict_estruct .)
    FOREACH         reduce using rule 15 (block_code -> dict_estruct .)
    TRY             reduce using rule 15 (block_code -> dict_estruct .)
    WHILE           reduce using rule 15 (block_code -> dict_estruct .)
    DO              reduce using rule 15 (block_code -> dict_estruct .)
    PUBLIC          reduce using rule 15 (block_code -> dict_estruct .)
    PRIVATE         reduce using rule 15 (block_code -> dict_estruct .)
    RKEY            reduce using rule 15 (block_code -> dict_estruct .)
    RETURN          reduce using rule 15 (block_code -> dict_estruct .)


state 111

    (16) block_code -> functions_dict .

    PRINT           reduce using rule 16 (block_code -> functions_dict .)
    READ            reduce using rule 16 (block_code -> functions_dict .)
    VARIABLE        reduce using rule 16 (block_code -> functions_dict .)
    QUEUE           reduce using rule 16 (block_code -> functions_dict .)
    STACK           reduce using rule 16 (block_code -> functions_dict .)
    IF              reduce using rule 16 (block_code -> functions_dict .)
    CONST           reduce using rule 16 (block_code -> functions_dict .)
    INTEGER         reduce using rule 16 (block_code -> functions_dict .)
    FLOAT_NUMBER    reduce using rule 16 (block_code -> functions_dict .)
    DECIMAL_NUMBER  reduce using rule 16 (block_code -> functions_dict .)
    CHARTYPE        reduce using rule 16 (block_code -> functions_dict .)
    STRINGTYPE      reduce using rule 16 (block_code -> functions_dict .)
    FLOATTYPE       reduce using rule 16 (block_code -> functions_dict .)
    DECIMALTYPE     reduce using rule 16 (block_code -> functions_dict .)
    INTTYPE         reduce using rule 16 (block_code -> functions_dict .)
    BOOLTYPE        reduce using rule 16 (block_code -> functions_dict .)
    LIST            reduce using rule 16 (block_code -> functions_dict .)
    DICTIONARY      reduce using rule 16 (block_code -> functions_dict .)
    METHOD          reduce using rule 16 (block_code -> functions_dict .)
    FOR             reduce using rule 16 (block_code -> functions_dict .)
    FOREACH         reduce using rule 16 (block_code -> functions_dict .)
    TRY             reduce using rule 16 (block_code -> functions_dict .)
    WHILE           reduce using rule 16 (block_code -> functions_dict .)
    DO              reduce using rule 16 (block_code -> functions_dict .)
    PUBLIC          reduce using rule 16 (block_code -> functions_dict .)
    PRIVATE         reduce using rule 16 (block_code -> functions_dict .)
    RKEY            reduce using rule 16 (block_code -> functions_dict .)
    RETURN          reduce using rule 16 (block_code -> functions_dict .)


state 112

    (17) block_code -> concurrent_method .

    PRINT           reduce using rule 17 (block_code -> concurrent_method .)
    READ            reduce using rule 17 (block_code -> concurrent_method .)
    VARIABLE        reduce using rule 17 (block_code -> concurrent_method .)
    QUEUE           reduce using rule 17 (block_code -> concurrent_method .)
    STACK           reduce using rule 17 (block_code -> concurrent_method .)
    IF              reduce using rule 17 (block_code -> concurrent_method .)
    CONST           reduce using rule 17 (block_code -> concurrent_method .)
    INTEGER         reduce using rule 17 (block_code -> concurrent_method .)
    FLOAT_NUMBER    reduce using rule 17 (block_code -> concurrent_method .)
    DECIMAL_NUMBER  reduce using rule 17 (block_code -> concurrent_method .)
    CHARTYPE        reduce using rule 17 (block_code -> concurrent_method .)
    STRINGTYPE      reduce using rule 17 (block_code -> concurrent_method .)
    FLOATTYPE       reduce using rule 17 (block_code -> concurrent_method .)
    DECIMALTYPE     reduce using rule 17 (block_code -> concurrent_method .)
    INTTYPE         reduce using rule 17 (block_code -> concurrent_method .)
    BOOLTYPE        reduce using rule 17 (block_code -> concurrent_method .)
    LIST            reduce using rule 17 (block_code -> concurrent_method .)
    DICTIONARY      reduce using rule 17 (block_code -> concurrent_method .)
    METHOD          reduce using rule 17 (block_code -> concurrent_method .)
    FOR             reduce using rule 17 (block_code -> concurrent_method .)
    FOREACH         reduce using rule 17 (block_code -> concurrent_method .)
    TRY             reduce using rule 17 (block_code -> concurrent_method .)
    WHILE           reduce using rule 17 (block_code -> concurrent_method .)
    DO              reduce using rule 17 (block_code -> concurrent_method .)
    PUBLIC          reduce using rule 17 (block_code -> concurrent_method .)
    PRIVATE         reduce using rule 17 (block_code -> concurrent_method .)
    RKEY            reduce using rule 17 (block_code -> concurrent_method .)
    RETURN          reduce using rule 17 (block_code -> concurrent_method .)


state 113

    (18) block_code -> queue_struct .

    PRINT           reduce using rule 18 (block_code -> queue_struct .)
    READ            reduce using rule 18 (block_code -> queue_struct .)
    VARIABLE        reduce using rule 18 (block_code -> queue_struct .)
    QUEUE           reduce using rule 18 (block_code -> queue_struct .)
    STACK           reduce using rule 18 (block_code -> queue_struct .)
    IF              reduce using rule 18 (block_code -> queue_struct .)
    CONST           reduce using rule 18 (block_code -> queue_struct .)
    INTEGER         reduce using rule 18 (block_code -> queue_struct .)
    FLOAT_NUMBER    reduce using rule 18 (block_code -> queue_struct .)
    DECIMAL_NUMBER  reduce using rule 18 (block_code -> queue_struct .)
    CHARTYPE        reduce using rule 18 (block_code -> queue_struct .)
    STRINGTYPE      reduce using rule 18 (block_code -> queue_struct .)
    FLOATTYPE       reduce using rule 18 (block_code -> queue_struct .)
    DECIMALTYPE     reduce using rule 18 (block_code -> queue_struct .)
    INTTYPE         reduce using rule 18 (block_code -> queue_struct .)
    BOOLTYPE        reduce using rule 18 (block_code -> queue_struct .)
    LIST            reduce using rule 18 (block_code -> queue_struct .)
    DICTIONARY      reduce using rule 18 (block_code -> queue_struct .)
    METHOD          reduce using rule 18 (block_code -> queue_struct .)
    FOR             reduce using rule 18 (block_code -> queue_struct .)
    FOREACH         reduce using rule 18 (block_code -> queue_struct .)
    TRY             reduce using rule 18 (block_code -> queue_struct .)
    WHILE           reduce using rule 18 (block_code -> queue_struct .)
    DO              reduce using rule 18 (block_code -> queue_struct .)
    PUBLIC          reduce using rule 18 (block_code -> queue_struct .)
    PRIVATE         reduce using rule 18 (block_code -> queue_struct .)
    RKEY            reduce using rule 18 (block_code -> queue_struct .)
    RETURN          reduce using rule 18 (block_code -> queue_struct .)


state 114

    (19) block_code -> functions_queue .

    PRINT           reduce using rule 19 (block_code -> functions_queue .)
    READ            reduce using rule 19 (block_code -> functions_queue .)
    VARIABLE        reduce using rule 19 (block_code -> functions_queue .)
    QUEUE           reduce using rule 19 (block_code -> functions_queue .)
    STACK           reduce using rule 19 (block_code -> functions_queue .)
    IF              reduce using rule 19 (block_code -> functions_queue .)
    CONST           reduce using rule 19 (block_code -> functions_queue .)
    INTEGER         reduce using rule 19 (block_code -> functions_queue .)
    FLOAT_NUMBER    reduce using rule 19 (block_code -> functions_queue .)
    DECIMAL_NUMBER  reduce using rule 19 (block_code -> functions_queue .)
    CHARTYPE        reduce using rule 19 (block_code -> functions_queue .)
    STRINGTYPE      reduce using rule 19 (block_code -> functions_queue .)
    FLOATTYPE       reduce using rule 19 (block_code -> functions_queue .)
    DECIMALTYPE     reduce using rule 19 (block_code -> functions_queue .)
    INTTYPE         reduce using rule 19 (block_code -> functions_queue .)
    BOOLTYPE        reduce using rule 19 (block_code -> functions_queue .)
    LIST            reduce using rule 19 (block_code -> functions_queue .)
    DICTIONARY      reduce using rule 19 (block_code -> functions_queue .)
    METHOD          reduce using rule 19 (block_code -> functions_queue .)
    FOR             reduce using rule 19 (block_code -> functions_queue .)
    FOREACH         reduce using rule 19 (block_code -> functions_queue .)
    TRY             reduce using rule 19 (block_code -> functions_queue .)
    WHILE           reduce using rule 19 (block_code -> functions_queue .)
    DO              reduce using rule 19 (block_code -> functions_queue .)
    PUBLIC          reduce using rule 19 (block_code -> functions_queue .)
    PRIVATE         reduce using rule 19 (block_code -> functions_queue .)
    RKEY            reduce using rule 19 (block_code -> functions_queue .)
    RETURN          reduce using rule 19 (block_code -> functions_queue .)


state 115

    (20) block_code -> stack_struct .

    PRINT           reduce using rule 20 (block_code -> stack_struct .)
    READ            reduce using rule 20 (block_code -> stack_struct .)
    VARIABLE        reduce using rule 20 (block_code -> stack_struct .)
    QUEUE           reduce using rule 20 (block_code -> stack_struct .)
    STACK           reduce using rule 20 (block_code -> stack_struct .)
    IF              reduce using rule 20 (block_code -> stack_struct .)
    CONST           reduce using rule 20 (block_code -> stack_struct .)
    INTEGER         reduce using rule 20 (block_code -> stack_struct .)
    FLOAT_NUMBER    reduce using rule 20 (block_code -> stack_struct .)
    DECIMAL_NUMBER  reduce using rule 20 (block_code -> stack_struct .)
    CHARTYPE        reduce using rule 20 (block_code -> stack_struct .)
    STRINGTYPE      reduce using rule 20 (block_code -> stack_struct .)
    FLOATTYPE       reduce using rule 20 (block_code -> stack_struct .)
    DECIMALTYPE     reduce using rule 20 (block_code -> stack_struct .)
    INTTYPE         reduce using rule 20 (block_code -> stack_struct .)
    BOOLTYPE        reduce using rule 20 (block_code -> stack_struct .)
    LIST            reduce using rule 20 (block_code -> stack_struct .)
    DICTIONARY      reduce using rule 20 (block_code -> stack_struct .)
    METHOD          reduce using rule 20 (block_code -> stack_struct .)
    FOR             reduce using rule 20 (block_code -> stack_struct .)
    FOREACH         reduce using rule 20 (block_code -> stack_struct .)
    TRY             reduce using rule 20 (block_code -> stack_struct .)
    WHILE           reduce using rule 20 (block_code -> stack_struct .)
    DO              reduce using rule 20 (block_code -> stack_struct .)
    PUBLIC          reduce using rule 20 (block_code -> stack_struct .)
    PRIVATE         reduce using rule 20 (block_code -> stack_struct .)
    RKEY            reduce using rule 20 (block_code -> stack_struct .)
    RETURN          reduce using rule 20 (block_code -> stack_struct .)


state 116

    (21) block_code -> functions_stack .

    PRINT           reduce using rule 21 (block_code -> functions_stack .)
    READ            reduce using rule 21 (block_code -> functions_stack .)
    VARIABLE        reduce using rule 21 (block_code -> functions_stack .)
    QUEUE           reduce using rule 21 (block_code -> functions_stack .)
    STACK           reduce using rule 21 (block_code -> functions_stack .)
    IF              reduce using rule 21 (block_code -> functions_stack .)
    CONST           reduce using rule 21 (block_code -> functions_stack .)
    INTEGER         reduce using rule 21 (block_code -> functions_stack .)
    FLOAT_NUMBER    reduce using rule 21 (block_code -> functions_stack .)
    DECIMAL_NUMBER  reduce using rule 21 (block_code -> functions_stack .)
    CHARTYPE        reduce using rule 21 (block_code -> functions_stack .)
    STRINGTYPE      reduce using rule 21 (block_code -> functions_stack .)
    FLOATTYPE       reduce using rule 21 (block_code -> functions_stack .)
    DECIMALTYPE     reduce using rule 21 (block_code -> functions_stack .)
    INTTYPE         reduce using rule 21 (block_code -> functions_stack .)
    BOOLTYPE        reduce using rule 21 (block_code -> functions_stack .)
    LIST            reduce using rule 21 (block_code -> functions_stack .)
    DICTIONARY      reduce using rule 21 (block_code -> functions_stack .)
    METHOD          reduce using rule 21 (block_code -> functions_stack .)
    FOR             reduce using rule 21 (block_code -> functions_stack .)
    FOREACH         reduce using rule 21 (block_code -> functions_stack .)
    TRY             reduce using rule 21 (block_code -> functions_stack .)
    WHILE           reduce using rule 21 (block_code -> functions_stack .)
    DO              reduce using rule 21 (block_code -> functions_stack .)
    PUBLIC          reduce using rule 21 (block_code -> functions_stack .)
    PRIVATE         reduce using rule 21 (block_code -> functions_stack .)
    RKEY            reduce using rule 21 (block_code -> functions_stack .)
    RETURN          reduce using rule 21 (block_code -> functions_stack .)


state 117

    (22) block_code -> block_if .

    PRINT           reduce using rule 22 (block_code -> block_if .)
    READ            reduce using rule 22 (block_code -> block_if .)
    VARIABLE        reduce using rule 22 (block_code -> block_if .)
    QUEUE           reduce using rule 22 (block_code -> block_if .)
    STACK           reduce using rule 22 (block_code -> block_if .)
    IF              reduce using rule 22 (block_code -> block_if .)
    CONST           reduce using rule 22 (block_code -> block_if .)
    INTEGER         reduce using rule 22 (block_code -> block_if .)
    FLOAT_NUMBER    reduce using rule 22 (block_code -> block_if .)
    DECIMAL_NUMBER  reduce using rule 22 (block_code -> block_if .)
    CHARTYPE        reduce using rule 22 (block_code -> block_if .)
    STRINGTYPE      reduce using rule 22 (block_code -> block_if .)
    FLOATTYPE       reduce using rule 22 (block_code -> block_if .)
    DECIMALTYPE     reduce using rule 22 (block_code -> block_if .)
    INTTYPE         reduce using rule 22 (block_code -> block_if .)
    BOOLTYPE        reduce using rule 22 (block_code -> block_if .)
    LIST            reduce using rule 22 (block_code -> block_if .)
    DICTIONARY      reduce using rule 22 (block_code -> block_if .)
    METHOD          reduce using rule 22 (block_code -> block_if .)
    FOR             reduce using rule 22 (block_code -> block_if .)
    FOREACH         reduce using rule 22 (block_code -> block_if .)
    TRY             reduce using rule 22 (block_code -> block_if .)
    WHILE           reduce using rule 22 (block_code -> block_if .)
    DO              reduce using rule 22 (block_code -> block_if .)
    PUBLIC          reduce using rule 22 (block_code -> block_if .)
    PRIVATE         reduce using rule 22 (block_code -> block_if .)
    RKEY            reduce using rule 22 (block_code -> block_if .)
    RETURN          reduce using rule 22 (block_code -> block_if .)


state 118

    (23) block_code -> block_for .

    PRINT           reduce using rule 23 (block_code -> block_for .)
    READ            reduce using rule 23 (block_code -> block_for .)
    VARIABLE        reduce using rule 23 (block_code -> block_for .)
    QUEUE           reduce using rule 23 (block_code -> block_for .)
    STACK           reduce using rule 23 (block_code -> block_for .)
    IF              reduce using rule 23 (block_code -> block_for .)
    CONST           reduce using rule 23 (block_code -> block_for .)
    INTEGER         reduce using rule 23 (block_code -> block_for .)
    FLOAT_NUMBER    reduce using rule 23 (block_code -> block_for .)
    DECIMAL_NUMBER  reduce using rule 23 (block_code -> block_for .)
    CHARTYPE        reduce using rule 23 (block_code -> block_for .)
    STRINGTYPE      reduce using rule 23 (block_code -> block_for .)
    FLOATTYPE       reduce using rule 23 (block_code -> block_for .)
    DECIMALTYPE     reduce using rule 23 (block_code -> block_for .)
    INTTYPE         reduce using rule 23 (block_code -> block_for .)
    BOOLTYPE        reduce using rule 23 (block_code -> block_for .)
    LIST            reduce using rule 23 (block_code -> block_for .)
    DICTIONARY      reduce using rule 23 (block_code -> block_for .)
    METHOD          reduce using rule 23 (block_code -> block_for .)
    FOR             reduce using rule 23 (block_code -> block_for .)
    FOREACH         reduce using rule 23 (block_code -> block_for .)
    TRY             reduce using rule 23 (block_code -> block_for .)
    WHILE           reduce using rule 23 (block_code -> block_for .)
    DO              reduce using rule 23 (block_code -> block_for .)
    PUBLIC          reduce using rule 23 (block_code -> block_for .)
    PRIVATE         reduce using rule 23 (block_code -> block_for .)
    RKEY            reduce using rule 23 (block_code -> block_for .)
    RETURN          reduce using rule 23 (block_code -> block_for .)


state 119

    (24) block_code -> block_try_catch .

    PRINT           reduce using rule 24 (block_code -> block_try_catch .)
    READ            reduce using rule 24 (block_code -> block_try_catch .)
    VARIABLE        reduce using rule 24 (block_code -> block_try_catch .)
    QUEUE           reduce using rule 24 (block_code -> block_try_catch .)
    STACK           reduce using rule 24 (block_code -> block_try_catch .)
    IF              reduce using rule 24 (block_code -> block_try_catch .)
    CONST           reduce using rule 24 (block_code -> block_try_catch .)
    INTEGER         reduce using rule 24 (block_code -> block_try_catch .)
    FLOAT_NUMBER    reduce using rule 24 (block_code -> block_try_catch .)
    DECIMAL_NUMBER  reduce using rule 24 (block_code -> block_try_catch .)
    CHARTYPE        reduce using rule 24 (block_code -> block_try_catch .)
    STRINGTYPE      reduce using rule 24 (block_code -> block_try_catch .)
    FLOATTYPE       reduce using rule 24 (block_code -> block_try_catch .)
    DECIMALTYPE     reduce using rule 24 (block_code -> block_try_catch .)
    INTTYPE         reduce using rule 24 (block_code -> block_try_catch .)
    BOOLTYPE        reduce using rule 24 (block_code -> block_try_catch .)
    LIST            reduce using rule 24 (block_code -> block_try_catch .)
    DICTIONARY      reduce using rule 24 (block_code -> block_try_catch .)
    METHOD          reduce using rule 24 (block_code -> block_try_catch .)
    FOR             reduce using rule 24 (block_code -> block_try_catch .)
    FOREACH         reduce using rule 24 (block_code -> block_try_catch .)
    TRY             reduce using rule 24 (block_code -> block_try_catch .)
    WHILE           reduce using rule 24 (block_code -> block_try_catch .)
    DO              reduce using rule 24 (block_code -> block_try_catch .)
    PUBLIC          reduce using rule 24 (block_code -> block_try_catch .)
    PRIVATE         reduce using rule 24 (block_code -> block_try_catch .)
    RKEY            reduce using rule 24 (block_code -> block_try_catch .)
    RETURN          reduce using rule 24 (block_code -> block_try_catch .)


state 120

    (25) block_code -> block_while .

    PRINT           reduce using rule 25 (block_code -> block_while .)
    READ            reduce using rule 25 (block_code -> block_while .)
    VARIABLE        reduce using rule 25 (block_code -> block_while .)
    QUEUE           reduce using rule 25 (block_code -> block_while .)
    STACK           reduce using rule 25 (block_code -> block_while .)
    IF              reduce using rule 25 (block_code -> block_while .)
    CONST           reduce using rule 25 (block_code -> block_while .)
    INTEGER         reduce using rule 25 (block_code -> block_while .)
    FLOAT_NUMBER    reduce using rule 25 (block_code -> block_while .)
    DECIMAL_NUMBER  reduce using rule 25 (block_code -> block_while .)
    CHARTYPE        reduce using rule 25 (block_code -> block_while .)
    STRINGTYPE      reduce using rule 25 (block_code -> block_while .)
    FLOATTYPE       reduce using rule 25 (block_code -> block_while .)
    DECIMALTYPE     reduce using rule 25 (block_code -> block_while .)
    INTTYPE         reduce using rule 25 (block_code -> block_while .)
    BOOLTYPE        reduce using rule 25 (block_code -> block_while .)
    LIST            reduce using rule 25 (block_code -> block_while .)
    DICTIONARY      reduce using rule 25 (block_code -> block_while .)
    METHOD          reduce using rule 25 (block_code -> block_while .)
    FOR             reduce using rule 25 (block_code -> block_while .)
    FOREACH         reduce using rule 25 (block_code -> block_while .)
    TRY             reduce using rule 25 (block_code -> block_while .)
    WHILE           reduce using rule 25 (block_code -> block_while .)
    DO              reduce using rule 25 (block_code -> block_while .)
    PUBLIC          reduce using rule 25 (block_code -> block_while .)
    PRIVATE         reduce using rule 25 (block_code -> block_while .)
    RKEY            reduce using rule 25 (block_code -> block_while .)
    RETURN          reduce using rule 25 (block_code -> block_while .)


state 121

    (86) def_const_or_var -> constant_assignation .

    PRINT           reduce using rule 86 (def_const_or_var -> constant_assignation .)
    READ            reduce using rule 86 (def_const_or_var -> constant_assignation .)
    VARIABLE        reduce using rule 86 (def_const_or_var -> constant_assignation .)
    QUEUE           reduce using rule 86 (def_const_or_var -> constant_assignation .)
    STACK           reduce using rule 86 (def_const_or_var -> constant_assignation .)
    IF              reduce using rule 86 (def_const_or_var -> constant_assignation .)
    CONST           reduce using rule 86 (def_const_or_var -> constant_assignation .)
    INTEGER         reduce using rule 86 (def_const_or_var -> constant_assignation .)
    FLOAT_NUMBER    reduce using rule 86 (def_const_or_var -> constant_assignation .)
    DECIMAL_NUMBER  reduce using rule 86 (def_const_or_var -> constant_assignation .)
    CHARTYPE        reduce using rule 86 (def_const_or_var -> constant_assignation .)
    STRINGTYPE      reduce using rule 86 (def_const_or_var -> constant_assignation .)
    FLOATTYPE       reduce using rule 86 (def_const_or_var -> constant_assignation .)
    DECIMALTYPE     reduce using rule 86 (def_const_or_var -> constant_assignation .)
    INTTYPE         reduce using rule 86 (def_const_or_var -> constant_assignation .)
    BOOLTYPE        reduce using rule 86 (def_const_or_var -> constant_assignation .)
    LIST            reduce using rule 86 (def_const_or_var -> constant_assignation .)
    DICTIONARY      reduce using rule 86 (def_const_or_var -> constant_assignation .)
    METHOD          reduce using rule 86 (def_const_or_var -> constant_assignation .)
    FOR             reduce using rule 86 (def_const_or_var -> constant_assignation .)
    FOREACH         reduce using rule 86 (def_const_or_var -> constant_assignation .)
    TRY             reduce using rule 86 (def_const_or_var -> constant_assignation .)
    WHILE           reduce using rule 86 (def_const_or_var -> constant_assignation .)
    DO              reduce using rule 86 (def_const_or_var -> constant_assignation .)
    PUBLIC          reduce using rule 86 (def_const_or_var -> constant_assignation .)
    PRIVATE         reduce using rule 86 (def_const_or_var -> constant_assignation .)
    RKEY            reduce using rule 86 (def_const_or_var -> constant_assignation .)
    RETURN          reduce using rule 86 (def_const_or_var -> constant_assignation .)


state 122

    (87) def_const_or_var -> variable_assignation .

    PRINT           reduce using rule 87 (def_const_or_var -> variable_assignation .)
    READ            reduce using rule 87 (def_const_or_var -> variable_assignation .)
    VARIABLE        reduce using rule 87 (def_const_or_var -> variable_assignation .)
    QUEUE           reduce using rule 87 (def_const_or_var -> variable_assignation .)
    STACK           reduce using rule 87 (def_const_or_var -> variable_assignation .)
    IF              reduce using rule 87 (def_const_or_var -> variable_assignation .)
    CONST           reduce using rule 87 (def_const_or_var -> variable_assignation .)
    INTEGER         reduce using rule 87 (def_const_or_var -> variable_assignation .)
    FLOAT_NUMBER    reduce using rule 87 (def_const_or_var -> variable_assignation .)
    DECIMAL_NUMBER  reduce using rule 87 (def_const_or_var -> variable_assignation .)
    CHARTYPE        reduce using rule 87 (def_const_or_var -> variable_assignation .)
    STRINGTYPE      reduce using rule 87 (def_const_or_var -> variable_assignation .)
    FLOATTYPE       reduce using rule 87 (def_const_or_var -> variable_assignation .)
    DECIMALTYPE     reduce using rule 87 (def_const_or_var -> variable_assignation .)
    INTTYPE         reduce using rule 87 (def_const_or_var -> variable_assignation .)
    BOOLTYPE        reduce using rule 87 (def_const_or_var -> variable_assignation .)
    LIST            reduce using rule 87 (def_const_or_var -> variable_assignation .)
    DICTIONARY      reduce using rule 87 (def_const_or_var -> variable_assignation .)
    METHOD          reduce using rule 87 (def_const_or_var -> variable_assignation .)
    FOR             reduce using rule 87 (def_const_or_var -> variable_assignation .)
    FOREACH         reduce using rule 87 (def_const_or_var -> variable_assignation .)
    TRY             reduce using rule 87 (def_const_or_var -> variable_assignation .)
    WHILE           reduce using rule 87 (def_const_or_var -> variable_assignation .)
    DO              reduce using rule 87 (def_const_or_var -> variable_assignation .)
    PUBLIC          reduce using rule 87 (def_const_or_var -> variable_assignation .)
    PRIVATE         reduce using rule 87 (def_const_or_var -> variable_assignation .)
    RKEY            reduce using rule 87 (def_const_or_var -> variable_assignation .)
    RETURN          reduce using rule 87 (def_const_or_var -> variable_assignation .)


state 123

    (88) def_const_or_var -> late_initialization .

    PRINT           reduce using rule 88 (def_const_or_var -> late_initialization .)
    READ            reduce using rule 88 (def_const_or_var -> late_initialization .)
    VARIABLE        reduce using rule 88 (def_const_or_var -> late_initialization .)
    QUEUE           reduce using rule 88 (def_const_or_var -> late_initialization .)
    STACK           reduce using rule 88 (def_const_or_var -> late_initialization .)
    IF              reduce using rule 88 (def_const_or_var -> late_initialization .)
    CONST           reduce using rule 88 (def_const_or_var -> late_initialization .)
    INTEGER         reduce using rule 88 (def_const_or_var -> late_initialization .)
    FLOAT_NUMBER    reduce using rule 88 (def_const_or_var -> late_initialization .)
    DECIMAL_NUMBER  reduce using rule 88 (def_const_or_var -> late_initialization .)
    CHARTYPE        reduce using rule 88 (def_const_or_var -> late_initialization .)
    STRINGTYPE      reduce using rule 88 (def_const_or_var -> late_initialization .)
    FLOATTYPE       reduce using rule 88 (def_const_or_var -> late_initialization .)
    DECIMALTYPE     reduce using rule 88 (def_const_or_var -> late_initialization .)
    INTTYPE         reduce using rule 88 (def_const_or_var -> late_initialization .)
    BOOLTYPE        reduce using rule 88 (def_const_or_var -> late_initialization .)
    LIST            reduce using rule 88 (def_const_or_var -> late_initialization .)
    DICTIONARY      reduce using rule 88 (def_const_or_var -> late_initialization .)
    METHOD          reduce using rule 88 (def_const_or_var -> late_initialization .)
    FOR             reduce using rule 88 (def_const_or_var -> late_initialization .)
    FOREACH         reduce using rule 88 (def_const_or_var -> late_initialization .)
    TRY             reduce using rule 88 (def_const_or_var -> late_initialization .)
    WHILE           reduce using rule 88 (def_const_or_var -> late_initialization .)
    DO              reduce using rule 88 (def_const_or_var -> late_initialization .)
    PUBLIC          reduce using rule 88 (def_const_or_var -> late_initialization .)
    PRIVATE         reduce using rule 88 (def_const_or_var -> late_initialization .)
    RKEY            reduce using rule 88 (def_const_or_var -> late_initialization .)
    RETURN          reduce using rule 88 (def_const_or_var -> late_initialization .)


state 124

    (33) print_data -> PRINT . LPARENT STRING RPARENT DOTANDCOMMA
    (34) print_data -> PRINT . LPARENT VARIABLE RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 189


state 125

    (64) arithmetic_operation -> VARIABLE .
    (66) arithmetic_operation -> VARIABLE . arithmetic_operator arithmetic_operation
    (68) logic_operation -> VARIABLE . logic_operator INTEGER
    (50) array_value_assign -> VARIABLE . LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (51) array_value_assign -> VARIABLE . LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (48) array_indexing -> VARIABLE . LBRACKET VARIABLE RBRACKET
    (49) array_indexing -> VARIABLE . LBRACKET INTEGER RBRACKET
    (169) list_func_clear -> VARIABLE . DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (170) list_func_count -> VARIABLE . DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (171) list_func_add -> VARIABLE . DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (172) list_func_removeat -> VARIABLE . DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (153) dict_func_put -> VARIABLE . DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA
    (154) dict_func_remove -> VARIABLE . DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA
    (189) queue_enqueue -> VARIABLE . DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (190) queue_dequeue -> VARIABLE . DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (191) queue_clear -> VARIABLE . DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (193) queue_isEmpty -> VARIABLE . DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (179) stack_push -> VARIABLE . DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (180) stack_pop -> VARIABLE . DOT POP LPARENT RPARENT DOTANDCOMMA
    (181) stack_clear -> VARIABLE . DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (182) stack_peek -> VARIABLE . DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (183) stack_isEmpty -> VARIABLE . DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (100) assignation_key_value -> VARIABLE . ASSIGNATION value
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . MINUS
    (81) arithmetic_operator -> . TIMES
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT
    (69) logic_operator -> . GREATER_THAN
    (70) logic_operator -> . SMALLER_THAN
    (71) logic_operator -> . EQUAL_COMPARATION
    (72) logic_operator -> . INEQUALITY
    (73) logic_operator -> . GREATER_THAN_OR_EQUAL
    (74) logic_operator -> . SMALLER_THAN_OR_EQUAL
    (75) logic_operator -> . LOGICAND
    (76) logic_operator -> . LOGICOR
    (77) logic_operator -> . LOGICNOT
    (78) logic_operator -> . LOGICXOR

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for SMALLER_THAN resolved as shift
  ! shift/reduce conflict for EQUAL_COMPARATION resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUAL resolved as shift
  ! shift/reduce conflict for SMALLER_THAN_OR_EQUAL resolved as shift
  ! shift/reduce conflict for LOGICAND resolved as shift
  ! shift/reduce conflict for LOGICOR resolved as shift
  ! shift/reduce conflict for LOGICNOT resolved as shift
  ! shift/reduce conflict for LOGICXOR resolved as shift
    PRINT           reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    READ            reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    VARIABLE        reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    QUEUE           reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    STACK           reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    IF              reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    CONST           reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    INTEGER         reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    FLOAT_NUMBER    reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    DECIMAL_NUMBER  reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    CHARTYPE        reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    STRINGTYPE      reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    FLOATTYPE       reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    DECIMALTYPE     reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    INTTYPE         reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    BOOLTYPE        reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    LIST            reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    DICTIONARY      reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    METHOD          reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    FOR             reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    FOREACH         reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    TRY             reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    WHILE           reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    DO              reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    PUBLIC          reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    PRIVATE         reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    RKEY            reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    RETURN          reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    LBRACKET        shift and go to state 192
    DOT             shift and go to state 194
    ASSIGNATION     shift and go to state 193
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    PERCENT         shift and go to state 199
    GREATER_THAN    shift and go to state 200
    SMALLER_THAN    shift and go to state 201
    EQUAL_COMPARATION shift and go to state 202
    INEQUALITY      shift and go to state 203
    GREATER_THAN_OR_EQUAL shift and go to state 204
    SMALLER_THAN_OR_EQUAL shift and go to state 205
    LOGICAND        shift and go to state 206
    LOGICOR         shift and go to state 207
    LOGICNOT        shift and go to state 208
    LOGICXOR        shift and go to state 209

  ! PLUS            [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! TIMES           [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! PERCENT         [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! GREATER_THAN    [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! SMALLER_THAN    [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! EQUAL_COMPARATION [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! INEQUALITY      [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! SMALLER_THAN_OR_EQUAL [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! LOGICAND        [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! LOGICOR         [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! LOGICNOT        [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! LOGICXOR        [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]

    arithmetic_operator            shift and go to state 190
    logic_operator                 shift and go to state 191

state 126

    (35) read_data -> READ . LPARENT RPARENT DOTANDCOMMA
    (101) assignation_key_value -> READ . LPARENT RPARENT

    LPARENT         shift and go to state 210


state 127

    (63) arithmetic_operation -> value_numeric .
    (65) arithmetic_operation -> value_numeric . arithmetic_operator arithmetic_operation
    (67) logic_operation -> value_numeric . logic_operator INTEGER
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . MINUS
    (81) arithmetic_operator -> . TIMES
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT
    (69) logic_operator -> . GREATER_THAN
    (70) logic_operator -> . SMALLER_THAN
    (71) logic_operator -> . EQUAL_COMPARATION
    (72) logic_operator -> . INEQUALITY
    (73) logic_operator -> . GREATER_THAN_OR_EQUAL
    (74) logic_operator -> . SMALLER_THAN_OR_EQUAL
    (75) logic_operator -> . LOGICAND
    (76) logic_operator -> . LOGICOR
    (77) logic_operator -> . LOGICNOT
    (78) logic_operator -> . LOGICXOR

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for SMALLER_THAN resolved as shift
  ! shift/reduce conflict for EQUAL_COMPARATION resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUAL resolved as shift
  ! shift/reduce conflict for SMALLER_THAN_OR_EQUAL resolved as shift
  ! shift/reduce conflict for LOGICAND resolved as shift
  ! shift/reduce conflict for LOGICOR resolved as shift
  ! shift/reduce conflict for LOGICNOT resolved as shift
  ! shift/reduce conflict for LOGICXOR resolved as shift
    PRINT           reduce using rule 63 (arithmetic_operation -> value_numeric .)
    READ            reduce using rule 63 (arithmetic_operation -> value_numeric .)
    VARIABLE        reduce using rule 63 (arithmetic_operation -> value_numeric .)
    QUEUE           reduce using rule 63 (arithmetic_operation -> value_numeric .)
    STACK           reduce using rule 63 (arithmetic_operation -> value_numeric .)
    IF              reduce using rule 63 (arithmetic_operation -> value_numeric .)
    CONST           reduce using rule 63 (arithmetic_operation -> value_numeric .)
    INTEGER         reduce using rule 63 (arithmetic_operation -> value_numeric .)
    FLOAT_NUMBER    reduce using rule 63 (arithmetic_operation -> value_numeric .)
    DECIMAL_NUMBER  reduce using rule 63 (arithmetic_operation -> value_numeric .)
    CHARTYPE        reduce using rule 63 (arithmetic_operation -> value_numeric .)
    STRINGTYPE      reduce using rule 63 (arithmetic_operation -> value_numeric .)
    FLOATTYPE       reduce using rule 63 (arithmetic_operation -> value_numeric .)
    DECIMALTYPE     reduce using rule 63 (arithmetic_operation -> value_numeric .)
    INTTYPE         reduce using rule 63 (arithmetic_operation -> value_numeric .)
    BOOLTYPE        reduce using rule 63 (arithmetic_operation -> value_numeric .)
    LIST            reduce using rule 63 (arithmetic_operation -> value_numeric .)
    DICTIONARY      reduce using rule 63 (arithmetic_operation -> value_numeric .)
    METHOD          reduce using rule 63 (arithmetic_operation -> value_numeric .)
    FOR             reduce using rule 63 (arithmetic_operation -> value_numeric .)
    FOREACH         reduce using rule 63 (arithmetic_operation -> value_numeric .)
    TRY             reduce using rule 63 (arithmetic_operation -> value_numeric .)
    WHILE           reduce using rule 63 (arithmetic_operation -> value_numeric .)
    DO              reduce using rule 63 (arithmetic_operation -> value_numeric .)
    PUBLIC          reduce using rule 63 (arithmetic_operation -> value_numeric .)
    PRIVATE         reduce using rule 63 (arithmetic_operation -> value_numeric .)
    RKEY            reduce using rule 63 (arithmetic_operation -> value_numeric .)
    RETURN          reduce using rule 63 (arithmetic_operation -> value_numeric .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    PERCENT         shift and go to state 199
    GREATER_THAN    shift and go to state 200
    SMALLER_THAN    shift and go to state 201
    EQUAL_COMPARATION shift and go to state 202
    INEQUALITY      shift and go to state 203
    GREATER_THAN_OR_EQUAL shift and go to state 204
    SMALLER_THAN_OR_EQUAL shift and go to state 205
    LOGICAND        shift and go to state 206
    LOGICOR         shift and go to state 207
    LOGICNOT        shift and go to state 208
    LOGICXOR        shift and go to state 209

  ! PLUS            [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! MINUS           [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! TIMES           [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! DIVIDE          [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! PERCENT         [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! GREATER_THAN    [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! SMALLER_THAN    [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! EQUAL_COMPARATION [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! INEQUALITY      [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! SMALLER_THAN_OR_EQUAL [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! LOGICAND        [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! LOGICOR         [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! LOGICNOT        [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! LOGICXOR        [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]

    arithmetic_operator            shift and go to state 211
    logic_operator                 shift and go to state 212

state 128

    (59) value_numeric -> INTEGER .

    PRINT           reduce using rule 59 (value_numeric -> INTEGER .)
    READ            reduce using rule 59 (value_numeric -> INTEGER .)
    VARIABLE        reduce using rule 59 (value_numeric -> INTEGER .)
    QUEUE           reduce using rule 59 (value_numeric -> INTEGER .)
    STACK           reduce using rule 59 (value_numeric -> INTEGER .)
    IF              reduce using rule 59 (value_numeric -> INTEGER .)
    CONST           reduce using rule 59 (value_numeric -> INTEGER .)
    INTEGER         reduce using rule 59 (value_numeric -> INTEGER .)
    FLOAT_NUMBER    reduce using rule 59 (value_numeric -> INTEGER .)
    DECIMAL_NUMBER  reduce using rule 59 (value_numeric -> INTEGER .)
    CHARTYPE        reduce using rule 59 (value_numeric -> INTEGER .)
    STRINGTYPE      reduce using rule 59 (value_numeric -> INTEGER .)
    FLOATTYPE       reduce using rule 59 (value_numeric -> INTEGER .)
    DECIMALTYPE     reduce using rule 59 (value_numeric -> INTEGER .)
    INTTYPE         reduce using rule 59 (value_numeric -> INTEGER .)
    BOOLTYPE        reduce using rule 59 (value_numeric -> INTEGER .)
    LIST            reduce using rule 59 (value_numeric -> INTEGER .)
    DICTIONARY      reduce using rule 59 (value_numeric -> INTEGER .)
    METHOD          reduce using rule 59 (value_numeric -> INTEGER .)
    FOR             reduce using rule 59 (value_numeric -> INTEGER .)
    FOREACH         reduce using rule 59 (value_numeric -> INTEGER .)
    TRY             reduce using rule 59 (value_numeric -> INTEGER .)
    WHILE           reduce using rule 59 (value_numeric -> INTEGER .)
    DO              reduce using rule 59 (value_numeric -> INTEGER .)
    PUBLIC          reduce using rule 59 (value_numeric -> INTEGER .)
    PRIVATE         reduce using rule 59 (value_numeric -> INTEGER .)
    RKEY            reduce using rule 59 (value_numeric -> INTEGER .)
    PLUS            reduce using rule 59 (value_numeric -> INTEGER .)
    MINUS           reduce using rule 59 (value_numeric -> INTEGER .)
    TIMES           reduce using rule 59 (value_numeric -> INTEGER .)
    DIVIDE          reduce using rule 59 (value_numeric -> INTEGER .)
    PERCENT         reduce using rule 59 (value_numeric -> INTEGER .)
    GREATER_THAN    reduce using rule 59 (value_numeric -> INTEGER .)
    SMALLER_THAN    reduce using rule 59 (value_numeric -> INTEGER .)
    EQUAL_COMPARATION reduce using rule 59 (value_numeric -> INTEGER .)
    INEQUALITY      reduce using rule 59 (value_numeric -> INTEGER .)
    GREATER_THAN_OR_EQUAL reduce using rule 59 (value_numeric -> INTEGER .)
    SMALLER_THAN_OR_EQUAL reduce using rule 59 (value_numeric -> INTEGER .)
    LOGICAND        reduce using rule 59 (value_numeric -> INTEGER .)
    LOGICOR         reduce using rule 59 (value_numeric -> INTEGER .)
    LOGICNOT        reduce using rule 59 (value_numeric -> INTEGER .)
    LOGICXOR        reduce using rule 59 (value_numeric -> INTEGER .)
    RETURN          reduce using rule 59 (value_numeric -> INTEGER .)
    DOTANDCOMMA     reduce using rule 59 (value_numeric -> INTEGER .)
    COMMA           reduce using rule 59 (value_numeric -> INTEGER .)
    RBRACKET        reduce using rule 59 (value_numeric -> INTEGER .)
    RPARENT         reduce using rule 59 (value_numeric -> INTEGER .)


state 129

    (44) array_assignation -> array_type . VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA
    (112) data_type -> array_type .

  ! shift/reduce conflict for VARIABLE resolved as shift
    VARIABLE        shift and go to state 213
    READ            reduce using rule 112 (data_type -> array_type .)

  ! VARIABLE        [ reduce using rule 112 (data_type -> array_type .) ]


state 130

    (155) lists -> list_empty .

    PRINT           reduce using rule 155 (lists -> list_empty .)
    READ            reduce using rule 155 (lists -> list_empty .)
    VARIABLE        reduce using rule 155 (lists -> list_empty .)
    QUEUE           reduce using rule 155 (lists -> list_empty .)
    STACK           reduce using rule 155 (lists -> list_empty .)
    IF              reduce using rule 155 (lists -> list_empty .)
    CONST           reduce using rule 155 (lists -> list_empty .)
    INTEGER         reduce using rule 155 (lists -> list_empty .)
    FLOAT_NUMBER    reduce using rule 155 (lists -> list_empty .)
    DECIMAL_NUMBER  reduce using rule 155 (lists -> list_empty .)
    CHARTYPE        reduce using rule 155 (lists -> list_empty .)
    STRINGTYPE      reduce using rule 155 (lists -> list_empty .)
    FLOATTYPE       reduce using rule 155 (lists -> list_empty .)
    DECIMALTYPE     reduce using rule 155 (lists -> list_empty .)
    INTTYPE         reduce using rule 155 (lists -> list_empty .)
    BOOLTYPE        reduce using rule 155 (lists -> list_empty .)
    LIST            reduce using rule 155 (lists -> list_empty .)
    DICTIONARY      reduce using rule 155 (lists -> list_empty .)
    METHOD          reduce using rule 155 (lists -> list_empty .)
    FOR             reduce using rule 155 (lists -> list_empty .)
    FOREACH         reduce using rule 155 (lists -> list_empty .)
    TRY             reduce using rule 155 (lists -> list_empty .)
    WHILE           reduce using rule 155 (lists -> list_empty .)
    DO              reduce using rule 155 (lists -> list_empty .)
    PUBLIC          reduce using rule 155 (lists -> list_empty .)
    PRIVATE         reduce using rule 155 (lists -> list_empty .)
    RKEY            reduce using rule 155 (lists -> list_empty .)
    RETURN          reduce using rule 155 (lists -> list_empty .)


state 131

    (156) lists -> list_full .

    PRINT           reduce using rule 156 (lists -> list_full .)
    READ            reduce using rule 156 (lists -> list_full .)
    VARIABLE        reduce using rule 156 (lists -> list_full .)
    QUEUE           reduce using rule 156 (lists -> list_full .)
    STACK           reduce using rule 156 (lists -> list_full .)
    IF              reduce using rule 156 (lists -> list_full .)
    CONST           reduce using rule 156 (lists -> list_full .)
    INTEGER         reduce using rule 156 (lists -> list_full .)
    FLOAT_NUMBER    reduce using rule 156 (lists -> list_full .)
    DECIMAL_NUMBER  reduce using rule 156 (lists -> list_full .)
    CHARTYPE        reduce using rule 156 (lists -> list_full .)
    STRINGTYPE      reduce using rule 156 (lists -> list_full .)
    FLOATTYPE       reduce using rule 156 (lists -> list_full .)
    DECIMALTYPE     reduce using rule 156 (lists -> list_full .)
    INTTYPE         reduce using rule 156 (lists -> list_full .)
    BOOLTYPE        reduce using rule 156 (lists -> list_full .)
    LIST            reduce using rule 156 (lists -> list_full .)
    DICTIONARY      reduce using rule 156 (lists -> list_full .)
    METHOD          reduce using rule 156 (lists -> list_full .)
    FOR             reduce using rule 156 (lists -> list_full .)
    FOREACH         reduce using rule 156 (lists -> list_full .)
    TRY             reduce using rule 156 (lists -> list_full .)
    WHILE           reduce using rule 156 (lists -> list_full .)
    DO              reduce using rule 156 (lists -> list_full .)
    PUBLIC          reduce using rule 156 (lists -> list_full .)
    PRIVATE         reduce using rule 156 (lists -> list_full .)
    RKEY            reduce using rule 156 (lists -> list_full .)
    RETURN          reduce using rule 156 (lists -> list_full .)


state 132

    (165) functions_list -> list_func_clear .

    PRINT           reduce using rule 165 (functions_list -> list_func_clear .)
    READ            reduce using rule 165 (functions_list -> list_func_clear .)
    VARIABLE        reduce using rule 165 (functions_list -> list_func_clear .)
    QUEUE           reduce using rule 165 (functions_list -> list_func_clear .)
    STACK           reduce using rule 165 (functions_list -> list_func_clear .)
    IF              reduce using rule 165 (functions_list -> list_func_clear .)
    CONST           reduce using rule 165 (functions_list -> list_func_clear .)
    INTEGER         reduce using rule 165 (functions_list -> list_func_clear .)
    FLOAT_NUMBER    reduce using rule 165 (functions_list -> list_func_clear .)
    DECIMAL_NUMBER  reduce using rule 165 (functions_list -> list_func_clear .)
    CHARTYPE        reduce using rule 165 (functions_list -> list_func_clear .)
    STRINGTYPE      reduce using rule 165 (functions_list -> list_func_clear .)
    FLOATTYPE       reduce using rule 165 (functions_list -> list_func_clear .)
    DECIMALTYPE     reduce using rule 165 (functions_list -> list_func_clear .)
    INTTYPE         reduce using rule 165 (functions_list -> list_func_clear .)
    BOOLTYPE        reduce using rule 165 (functions_list -> list_func_clear .)
    LIST            reduce using rule 165 (functions_list -> list_func_clear .)
    DICTIONARY      reduce using rule 165 (functions_list -> list_func_clear .)
    METHOD          reduce using rule 165 (functions_list -> list_func_clear .)
    FOR             reduce using rule 165 (functions_list -> list_func_clear .)
    FOREACH         reduce using rule 165 (functions_list -> list_func_clear .)
    TRY             reduce using rule 165 (functions_list -> list_func_clear .)
    WHILE           reduce using rule 165 (functions_list -> list_func_clear .)
    DO              reduce using rule 165 (functions_list -> list_func_clear .)
    PUBLIC          reduce using rule 165 (functions_list -> list_func_clear .)
    PRIVATE         reduce using rule 165 (functions_list -> list_func_clear .)
    RKEY            reduce using rule 165 (functions_list -> list_func_clear .)
    RETURN          reduce using rule 165 (functions_list -> list_func_clear .)


state 133

    (166) functions_list -> list_func_count .

    PRINT           reduce using rule 166 (functions_list -> list_func_count .)
    READ            reduce using rule 166 (functions_list -> list_func_count .)
    VARIABLE        reduce using rule 166 (functions_list -> list_func_count .)
    QUEUE           reduce using rule 166 (functions_list -> list_func_count .)
    STACK           reduce using rule 166 (functions_list -> list_func_count .)
    IF              reduce using rule 166 (functions_list -> list_func_count .)
    CONST           reduce using rule 166 (functions_list -> list_func_count .)
    INTEGER         reduce using rule 166 (functions_list -> list_func_count .)
    FLOAT_NUMBER    reduce using rule 166 (functions_list -> list_func_count .)
    DECIMAL_NUMBER  reduce using rule 166 (functions_list -> list_func_count .)
    CHARTYPE        reduce using rule 166 (functions_list -> list_func_count .)
    STRINGTYPE      reduce using rule 166 (functions_list -> list_func_count .)
    FLOATTYPE       reduce using rule 166 (functions_list -> list_func_count .)
    DECIMALTYPE     reduce using rule 166 (functions_list -> list_func_count .)
    INTTYPE         reduce using rule 166 (functions_list -> list_func_count .)
    BOOLTYPE        reduce using rule 166 (functions_list -> list_func_count .)
    LIST            reduce using rule 166 (functions_list -> list_func_count .)
    DICTIONARY      reduce using rule 166 (functions_list -> list_func_count .)
    METHOD          reduce using rule 166 (functions_list -> list_func_count .)
    FOR             reduce using rule 166 (functions_list -> list_func_count .)
    FOREACH         reduce using rule 166 (functions_list -> list_func_count .)
    TRY             reduce using rule 166 (functions_list -> list_func_count .)
    WHILE           reduce using rule 166 (functions_list -> list_func_count .)
    DO              reduce using rule 166 (functions_list -> list_func_count .)
    PUBLIC          reduce using rule 166 (functions_list -> list_func_count .)
    PRIVATE         reduce using rule 166 (functions_list -> list_func_count .)
    RKEY            reduce using rule 166 (functions_list -> list_func_count .)
    RETURN          reduce using rule 166 (functions_list -> list_func_count .)


state 134

    (167) functions_list -> list_func_add .

    PRINT           reduce using rule 167 (functions_list -> list_func_add .)
    READ            reduce using rule 167 (functions_list -> list_func_add .)
    VARIABLE        reduce using rule 167 (functions_list -> list_func_add .)
    QUEUE           reduce using rule 167 (functions_list -> list_func_add .)
    STACK           reduce using rule 167 (functions_list -> list_func_add .)
    IF              reduce using rule 167 (functions_list -> list_func_add .)
    CONST           reduce using rule 167 (functions_list -> list_func_add .)
    INTEGER         reduce using rule 167 (functions_list -> list_func_add .)
    FLOAT_NUMBER    reduce using rule 167 (functions_list -> list_func_add .)
    DECIMAL_NUMBER  reduce using rule 167 (functions_list -> list_func_add .)
    CHARTYPE        reduce using rule 167 (functions_list -> list_func_add .)
    STRINGTYPE      reduce using rule 167 (functions_list -> list_func_add .)
    FLOATTYPE       reduce using rule 167 (functions_list -> list_func_add .)
    DECIMALTYPE     reduce using rule 167 (functions_list -> list_func_add .)
    INTTYPE         reduce using rule 167 (functions_list -> list_func_add .)
    BOOLTYPE        reduce using rule 167 (functions_list -> list_func_add .)
    LIST            reduce using rule 167 (functions_list -> list_func_add .)
    DICTIONARY      reduce using rule 167 (functions_list -> list_func_add .)
    METHOD          reduce using rule 167 (functions_list -> list_func_add .)
    FOR             reduce using rule 167 (functions_list -> list_func_add .)
    FOREACH         reduce using rule 167 (functions_list -> list_func_add .)
    TRY             reduce using rule 167 (functions_list -> list_func_add .)
    WHILE           reduce using rule 167 (functions_list -> list_func_add .)
    DO              reduce using rule 167 (functions_list -> list_func_add .)
    PUBLIC          reduce using rule 167 (functions_list -> list_func_add .)
    PRIVATE         reduce using rule 167 (functions_list -> list_func_add .)
    RKEY            reduce using rule 167 (functions_list -> list_func_add .)
    RETURN          reduce using rule 167 (functions_list -> list_func_add .)


state 135

    (168) functions_list -> list_func_removeat .

    PRINT           reduce using rule 168 (functions_list -> list_func_removeat .)
    READ            reduce using rule 168 (functions_list -> list_func_removeat .)
    VARIABLE        reduce using rule 168 (functions_list -> list_func_removeat .)
    QUEUE           reduce using rule 168 (functions_list -> list_func_removeat .)
    STACK           reduce using rule 168 (functions_list -> list_func_removeat .)
    IF              reduce using rule 168 (functions_list -> list_func_removeat .)
    CONST           reduce using rule 168 (functions_list -> list_func_removeat .)
    INTEGER         reduce using rule 168 (functions_list -> list_func_removeat .)
    FLOAT_NUMBER    reduce using rule 168 (functions_list -> list_func_removeat .)
    DECIMAL_NUMBER  reduce using rule 168 (functions_list -> list_func_removeat .)
    CHARTYPE        reduce using rule 168 (functions_list -> list_func_removeat .)
    STRINGTYPE      reduce using rule 168 (functions_list -> list_func_removeat .)
    FLOATTYPE       reduce using rule 168 (functions_list -> list_func_removeat .)
    DECIMALTYPE     reduce using rule 168 (functions_list -> list_func_removeat .)
    INTTYPE         reduce using rule 168 (functions_list -> list_func_removeat .)
    BOOLTYPE        reduce using rule 168 (functions_list -> list_func_removeat .)
    LIST            reduce using rule 168 (functions_list -> list_func_removeat .)
    DICTIONARY      reduce using rule 168 (functions_list -> list_func_removeat .)
    METHOD          reduce using rule 168 (functions_list -> list_func_removeat .)
    FOR             reduce using rule 168 (functions_list -> list_func_removeat .)
    FOREACH         reduce using rule 168 (functions_list -> list_func_removeat .)
    TRY             reduce using rule 168 (functions_list -> list_func_removeat .)
    WHILE           reduce using rule 168 (functions_list -> list_func_removeat .)
    DO              reduce using rule 168 (functions_list -> list_func_removeat .)
    PUBLIC          reduce using rule 168 (functions_list -> list_func_removeat .)
    PRIVATE         reduce using rule 168 (functions_list -> list_func_removeat .)
    RKEY            reduce using rule 168 (functions_list -> list_func_removeat .)
    RETURN          reduce using rule 168 (functions_list -> list_func_removeat .)


state 136

    (142) dict_estruct -> dict_empty .

    PRINT           reduce using rule 142 (dict_estruct -> dict_empty .)
    READ            reduce using rule 142 (dict_estruct -> dict_empty .)
    VARIABLE        reduce using rule 142 (dict_estruct -> dict_empty .)
    QUEUE           reduce using rule 142 (dict_estruct -> dict_empty .)
    STACK           reduce using rule 142 (dict_estruct -> dict_empty .)
    IF              reduce using rule 142 (dict_estruct -> dict_empty .)
    CONST           reduce using rule 142 (dict_estruct -> dict_empty .)
    INTEGER         reduce using rule 142 (dict_estruct -> dict_empty .)
    FLOAT_NUMBER    reduce using rule 142 (dict_estruct -> dict_empty .)
    DECIMAL_NUMBER  reduce using rule 142 (dict_estruct -> dict_empty .)
    CHARTYPE        reduce using rule 142 (dict_estruct -> dict_empty .)
    STRINGTYPE      reduce using rule 142 (dict_estruct -> dict_empty .)
    FLOATTYPE       reduce using rule 142 (dict_estruct -> dict_empty .)
    DECIMALTYPE     reduce using rule 142 (dict_estruct -> dict_empty .)
    INTTYPE         reduce using rule 142 (dict_estruct -> dict_empty .)
    BOOLTYPE        reduce using rule 142 (dict_estruct -> dict_empty .)
    LIST            reduce using rule 142 (dict_estruct -> dict_empty .)
    DICTIONARY      reduce using rule 142 (dict_estruct -> dict_empty .)
    METHOD          reduce using rule 142 (dict_estruct -> dict_empty .)
    FOR             reduce using rule 142 (dict_estruct -> dict_empty .)
    FOREACH         reduce using rule 142 (dict_estruct -> dict_empty .)
    TRY             reduce using rule 142 (dict_estruct -> dict_empty .)
    WHILE           reduce using rule 142 (dict_estruct -> dict_empty .)
    DO              reduce using rule 142 (dict_estruct -> dict_empty .)
    PUBLIC          reduce using rule 142 (dict_estruct -> dict_empty .)
    PRIVATE         reduce using rule 142 (dict_estruct -> dict_empty .)
    RKEY            reduce using rule 142 (dict_estruct -> dict_empty .)
    RETURN          reduce using rule 142 (dict_estruct -> dict_empty .)


state 137

    (143) dict_estruct -> dict_full .

    PRINT           reduce using rule 143 (dict_estruct -> dict_full .)
    READ            reduce using rule 143 (dict_estruct -> dict_full .)
    VARIABLE        reduce using rule 143 (dict_estruct -> dict_full .)
    QUEUE           reduce using rule 143 (dict_estruct -> dict_full .)
    STACK           reduce using rule 143 (dict_estruct -> dict_full .)
    IF              reduce using rule 143 (dict_estruct -> dict_full .)
    CONST           reduce using rule 143 (dict_estruct -> dict_full .)
    INTEGER         reduce using rule 143 (dict_estruct -> dict_full .)
    FLOAT_NUMBER    reduce using rule 143 (dict_estruct -> dict_full .)
    DECIMAL_NUMBER  reduce using rule 143 (dict_estruct -> dict_full .)
    CHARTYPE        reduce using rule 143 (dict_estruct -> dict_full .)
    STRINGTYPE      reduce using rule 143 (dict_estruct -> dict_full .)
    FLOATTYPE       reduce using rule 143 (dict_estruct -> dict_full .)
    DECIMALTYPE     reduce using rule 143 (dict_estruct -> dict_full .)
    INTTYPE         reduce using rule 143 (dict_estruct -> dict_full .)
    BOOLTYPE        reduce using rule 143 (dict_estruct -> dict_full .)
    LIST            reduce using rule 143 (dict_estruct -> dict_full .)
    DICTIONARY      reduce using rule 143 (dict_estruct -> dict_full .)
    METHOD          reduce using rule 143 (dict_estruct -> dict_full .)
    FOR             reduce using rule 143 (dict_estruct -> dict_full .)
    FOREACH         reduce using rule 143 (dict_estruct -> dict_full .)
    TRY             reduce using rule 143 (dict_estruct -> dict_full .)
    WHILE           reduce using rule 143 (dict_estruct -> dict_full .)
    DO              reduce using rule 143 (dict_estruct -> dict_full .)
    PUBLIC          reduce using rule 143 (dict_estruct -> dict_full .)
    PRIVATE         reduce using rule 143 (dict_estruct -> dict_full .)
    RKEY            reduce using rule 143 (dict_estruct -> dict_full .)
    RETURN          reduce using rule 143 (dict_estruct -> dict_full .)


state 138

    (151) functions_dict -> dict_func_put .

    PRINT           reduce using rule 151 (functions_dict -> dict_func_put .)
    READ            reduce using rule 151 (functions_dict -> dict_func_put .)
    VARIABLE        reduce using rule 151 (functions_dict -> dict_func_put .)
    QUEUE           reduce using rule 151 (functions_dict -> dict_func_put .)
    STACK           reduce using rule 151 (functions_dict -> dict_func_put .)
    IF              reduce using rule 151 (functions_dict -> dict_func_put .)
    CONST           reduce using rule 151 (functions_dict -> dict_func_put .)
    INTEGER         reduce using rule 151 (functions_dict -> dict_func_put .)
    FLOAT_NUMBER    reduce using rule 151 (functions_dict -> dict_func_put .)
    DECIMAL_NUMBER  reduce using rule 151 (functions_dict -> dict_func_put .)
    CHARTYPE        reduce using rule 151 (functions_dict -> dict_func_put .)
    STRINGTYPE      reduce using rule 151 (functions_dict -> dict_func_put .)
    FLOATTYPE       reduce using rule 151 (functions_dict -> dict_func_put .)
    DECIMALTYPE     reduce using rule 151 (functions_dict -> dict_func_put .)
    INTTYPE         reduce using rule 151 (functions_dict -> dict_func_put .)
    BOOLTYPE        reduce using rule 151 (functions_dict -> dict_func_put .)
    LIST            reduce using rule 151 (functions_dict -> dict_func_put .)
    DICTIONARY      reduce using rule 151 (functions_dict -> dict_func_put .)
    METHOD          reduce using rule 151 (functions_dict -> dict_func_put .)
    FOR             reduce using rule 151 (functions_dict -> dict_func_put .)
    FOREACH         reduce using rule 151 (functions_dict -> dict_func_put .)
    TRY             reduce using rule 151 (functions_dict -> dict_func_put .)
    WHILE           reduce using rule 151 (functions_dict -> dict_func_put .)
    DO              reduce using rule 151 (functions_dict -> dict_func_put .)
    PUBLIC          reduce using rule 151 (functions_dict -> dict_func_put .)
    PRIVATE         reduce using rule 151 (functions_dict -> dict_func_put .)
    RKEY            reduce using rule 151 (functions_dict -> dict_func_put .)
    RETURN          reduce using rule 151 (functions_dict -> dict_func_put .)


state 139

    (152) functions_dict -> dict_func_remove .

    PRINT           reduce using rule 152 (functions_dict -> dict_func_remove .)
    READ            reduce using rule 152 (functions_dict -> dict_func_remove .)
    VARIABLE        reduce using rule 152 (functions_dict -> dict_func_remove .)
    QUEUE           reduce using rule 152 (functions_dict -> dict_func_remove .)
    STACK           reduce using rule 152 (functions_dict -> dict_func_remove .)
    IF              reduce using rule 152 (functions_dict -> dict_func_remove .)
    CONST           reduce using rule 152 (functions_dict -> dict_func_remove .)
    INTEGER         reduce using rule 152 (functions_dict -> dict_func_remove .)
    FLOAT_NUMBER    reduce using rule 152 (functions_dict -> dict_func_remove .)
    DECIMAL_NUMBER  reduce using rule 152 (functions_dict -> dict_func_remove .)
    CHARTYPE        reduce using rule 152 (functions_dict -> dict_func_remove .)
    STRINGTYPE      reduce using rule 152 (functions_dict -> dict_func_remove .)
    FLOATTYPE       reduce using rule 152 (functions_dict -> dict_func_remove .)
    DECIMALTYPE     reduce using rule 152 (functions_dict -> dict_func_remove .)
    INTTYPE         reduce using rule 152 (functions_dict -> dict_func_remove .)
    BOOLTYPE        reduce using rule 152 (functions_dict -> dict_func_remove .)
    LIST            reduce using rule 152 (functions_dict -> dict_func_remove .)
    DICTIONARY      reduce using rule 152 (functions_dict -> dict_func_remove .)
    METHOD          reduce using rule 152 (functions_dict -> dict_func_remove .)
    FOR             reduce using rule 152 (functions_dict -> dict_func_remove .)
    FOREACH         reduce using rule 152 (functions_dict -> dict_func_remove .)
    TRY             reduce using rule 152 (functions_dict -> dict_func_remove .)
    WHILE           reduce using rule 152 (functions_dict -> dict_func_remove .)
    DO              reduce using rule 152 (functions_dict -> dict_func_remove .)
    PUBLIC          reduce using rule 152 (functions_dict -> dict_func_remove .)
    PRIVATE         reduce using rule 152 (functions_dict -> dict_func_remove .)
    RKEY            reduce using rule 152 (functions_dict -> dict_func_remove .)
    RETURN          reduce using rule 152 (functions_dict -> dict_func_remove .)


state 140

    (205) concurrent_method -> method_declaration . CONCURRENT LKEY concurrent_block RKEY

    CONCURRENT      shift and go to state 214


state 141

    (184) queue_struct -> QUEUE . SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA

    SMALLER_THAN    shift and go to state 215


state 142

    (94) variable_assignation -> data_type . assignation_key_value DOTANDCOMMA
    (96) variable_assignation -> data_type . assignation_key_value_multiple DOTANDCOMMA
    (98) late_initialization -> data_type . VARIABLE DOTANDCOMMA
    (100) assignation_key_value -> . VARIABLE ASSIGNATION value
    (101) assignation_key_value -> . READ LPARENT RPARENT
    (102) assignation_key_value_multiple -> . assignation_key_value
    (103) assignation_key_value_multiple -> . assignation_key_value COMMA assignation_key_value_multiple

    VARIABLE        shift and go to state 218
    READ            shift and go to state 219

    assignation_key_value          shift and go to state 216
    assignation_key_value_multiple shift and go to state 217

state 143

    (185) functions_queue -> queue_enqueue .

    PRINT           reduce using rule 185 (functions_queue -> queue_enqueue .)
    READ            reduce using rule 185 (functions_queue -> queue_enqueue .)
    VARIABLE        reduce using rule 185 (functions_queue -> queue_enqueue .)
    QUEUE           reduce using rule 185 (functions_queue -> queue_enqueue .)
    STACK           reduce using rule 185 (functions_queue -> queue_enqueue .)
    IF              reduce using rule 185 (functions_queue -> queue_enqueue .)
    CONST           reduce using rule 185 (functions_queue -> queue_enqueue .)
    INTEGER         reduce using rule 185 (functions_queue -> queue_enqueue .)
    FLOAT_NUMBER    reduce using rule 185 (functions_queue -> queue_enqueue .)
    DECIMAL_NUMBER  reduce using rule 185 (functions_queue -> queue_enqueue .)
    CHARTYPE        reduce using rule 185 (functions_queue -> queue_enqueue .)
    STRINGTYPE      reduce using rule 185 (functions_queue -> queue_enqueue .)
    FLOATTYPE       reduce using rule 185 (functions_queue -> queue_enqueue .)
    DECIMALTYPE     reduce using rule 185 (functions_queue -> queue_enqueue .)
    INTTYPE         reduce using rule 185 (functions_queue -> queue_enqueue .)
    BOOLTYPE        reduce using rule 185 (functions_queue -> queue_enqueue .)
    LIST            reduce using rule 185 (functions_queue -> queue_enqueue .)
    DICTIONARY      reduce using rule 185 (functions_queue -> queue_enqueue .)
    METHOD          reduce using rule 185 (functions_queue -> queue_enqueue .)
    FOR             reduce using rule 185 (functions_queue -> queue_enqueue .)
    FOREACH         reduce using rule 185 (functions_queue -> queue_enqueue .)
    TRY             reduce using rule 185 (functions_queue -> queue_enqueue .)
    WHILE           reduce using rule 185 (functions_queue -> queue_enqueue .)
    DO              reduce using rule 185 (functions_queue -> queue_enqueue .)
    PUBLIC          reduce using rule 185 (functions_queue -> queue_enqueue .)
    PRIVATE         reduce using rule 185 (functions_queue -> queue_enqueue .)
    RKEY            reduce using rule 185 (functions_queue -> queue_enqueue .)
    RETURN          reduce using rule 185 (functions_queue -> queue_enqueue .)


state 144

    (186) functions_queue -> queue_dequeue .

    PRINT           reduce using rule 186 (functions_queue -> queue_dequeue .)
    READ            reduce using rule 186 (functions_queue -> queue_dequeue .)
    VARIABLE        reduce using rule 186 (functions_queue -> queue_dequeue .)
    QUEUE           reduce using rule 186 (functions_queue -> queue_dequeue .)
    STACK           reduce using rule 186 (functions_queue -> queue_dequeue .)
    IF              reduce using rule 186 (functions_queue -> queue_dequeue .)
    CONST           reduce using rule 186 (functions_queue -> queue_dequeue .)
    INTEGER         reduce using rule 186 (functions_queue -> queue_dequeue .)
    FLOAT_NUMBER    reduce using rule 186 (functions_queue -> queue_dequeue .)
    DECIMAL_NUMBER  reduce using rule 186 (functions_queue -> queue_dequeue .)
    CHARTYPE        reduce using rule 186 (functions_queue -> queue_dequeue .)
    STRINGTYPE      reduce using rule 186 (functions_queue -> queue_dequeue .)
    FLOATTYPE       reduce using rule 186 (functions_queue -> queue_dequeue .)
    DECIMALTYPE     reduce using rule 186 (functions_queue -> queue_dequeue .)
    INTTYPE         reduce using rule 186 (functions_queue -> queue_dequeue .)
    BOOLTYPE        reduce using rule 186 (functions_queue -> queue_dequeue .)
    LIST            reduce using rule 186 (functions_queue -> queue_dequeue .)
    DICTIONARY      reduce using rule 186 (functions_queue -> queue_dequeue .)
    METHOD          reduce using rule 186 (functions_queue -> queue_dequeue .)
    FOR             reduce using rule 186 (functions_queue -> queue_dequeue .)
    FOREACH         reduce using rule 186 (functions_queue -> queue_dequeue .)
    TRY             reduce using rule 186 (functions_queue -> queue_dequeue .)
    WHILE           reduce using rule 186 (functions_queue -> queue_dequeue .)
    DO              reduce using rule 186 (functions_queue -> queue_dequeue .)
    PUBLIC          reduce using rule 186 (functions_queue -> queue_dequeue .)
    PRIVATE         reduce using rule 186 (functions_queue -> queue_dequeue .)
    RKEY            reduce using rule 186 (functions_queue -> queue_dequeue .)
    RETURN          reduce using rule 186 (functions_queue -> queue_dequeue .)


state 145

    (187) functions_queue -> queue_clear .

    PRINT           reduce using rule 187 (functions_queue -> queue_clear .)
    READ            reduce using rule 187 (functions_queue -> queue_clear .)
    VARIABLE        reduce using rule 187 (functions_queue -> queue_clear .)
    QUEUE           reduce using rule 187 (functions_queue -> queue_clear .)
    STACK           reduce using rule 187 (functions_queue -> queue_clear .)
    IF              reduce using rule 187 (functions_queue -> queue_clear .)
    CONST           reduce using rule 187 (functions_queue -> queue_clear .)
    INTEGER         reduce using rule 187 (functions_queue -> queue_clear .)
    FLOAT_NUMBER    reduce using rule 187 (functions_queue -> queue_clear .)
    DECIMAL_NUMBER  reduce using rule 187 (functions_queue -> queue_clear .)
    CHARTYPE        reduce using rule 187 (functions_queue -> queue_clear .)
    STRINGTYPE      reduce using rule 187 (functions_queue -> queue_clear .)
    FLOATTYPE       reduce using rule 187 (functions_queue -> queue_clear .)
    DECIMALTYPE     reduce using rule 187 (functions_queue -> queue_clear .)
    INTTYPE         reduce using rule 187 (functions_queue -> queue_clear .)
    BOOLTYPE        reduce using rule 187 (functions_queue -> queue_clear .)
    LIST            reduce using rule 187 (functions_queue -> queue_clear .)
    DICTIONARY      reduce using rule 187 (functions_queue -> queue_clear .)
    METHOD          reduce using rule 187 (functions_queue -> queue_clear .)
    FOR             reduce using rule 187 (functions_queue -> queue_clear .)
    FOREACH         reduce using rule 187 (functions_queue -> queue_clear .)
    TRY             reduce using rule 187 (functions_queue -> queue_clear .)
    WHILE           reduce using rule 187 (functions_queue -> queue_clear .)
    DO              reduce using rule 187 (functions_queue -> queue_clear .)
    PUBLIC          reduce using rule 187 (functions_queue -> queue_clear .)
    PRIVATE         reduce using rule 187 (functions_queue -> queue_clear .)
    RKEY            reduce using rule 187 (functions_queue -> queue_clear .)
    RETURN          reduce using rule 187 (functions_queue -> queue_clear .)


state 146

    (188) functions_queue -> queue_isEmpty .

    PRINT           reduce using rule 188 (functions_queue -> queue_isEmpty .)
    READ            reduce using rule 188 (functions_queue -> queue_isEmpty .)
    VARIABLE        reduce using rule 188 (functions_queue -> queue_isEmpty .)
    QUEUE           reduce using rule 188 (functions_queue -> queue_isEmpty .)
    STACK           reduce using rule 188 (functions_queue -> queue_isEmpty .)
    IF              reduce using rule 188 (functions_queue -> queue_isEmpty .)
    CONST           reduce using rule 188 (functions_queue -> queue_isEmpty .)
    INTEGER         reduce using rule 188 (functions_queue -> queue_isEmpty .)
    FLOAT_NUMBER    reduce using rule 188 (functions_queue -> queue_isEmpty .)
    DECIMAL_NUMBER  reduce using rule 188 (functions_queue -> queue_isEmpty .)
    CHARTYPE        reduce using rule 188 (functions_queue -> queue_isEmpty .)
    STRINGTYPE      reduce using rule 188 (functions_queue -> queue_isEmpty .)
    FLOATTYPE       reduce using rule 188 (functions_queue -> queue_isEmpty .)
    DECIMALTYPE     reduce using rule 188 (functions_queue -> queue_isEmpty .)
    INTTYPE         reduce using rule 188 (functions_queue -> queue_isEmpty .)
    BOOLTYPE        reduce using rule 188 (functions_queue -> queue_isEmpty .)
    LIST            reduce using rule 188 (functions_queue -> queue_isEmpty .)
    DICTIONARY      reduce using rule 188 (functions_queue -> queue_isEmpty .)
    METHOD          reduce using rule 188 (functions_queue -> queue_isEmpty .)
    FOR             reduce using rule 188 (functions_queue -> queue_isEmpty .)
    FOREACH         reduce using rule 188 (functions_queue -> queue_isEmpty .)
    TRY             reduce using rule 188 (functions_queue -> queue_isEmpty .)
    WHILE           reduce using rule 188 (functions_queue -> queue_isEmpty .)
    DO              reduce using rule 188 (functions_queue -> queue_isEmpty .)
    PUBLIC          reduce using rule 188 (functions_queue -> queue_isEmpty .)
    PRIVATE         reduce using rule 188 (functions_queue -> queue_isEmpty .)
    RKEY            reduce using rule 188 (functions_queue -> queue_isEmpty .)
    RETURN          reduce using rule 188 (functions_queue -> queue_isEmpty .)


state 147

    (173) stack_struct -> STACK . VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA

    VARIABLE        shift and go to state 220


state 148

    (174) functions_stack -> stack_push .

    PRINT           reduce using rule 174 (functions_stack -> stack_push .)
    READ            reduce using rule 174 (functions_stack -> stack_push .)
    VARIABLE        reduce using rule 174 (functions_stack -> stack_push .)
    QUEUE           reduce using rule 174 (functions_stack -> stack_push .)
    STACK           reduce using rule 174 (functions_stack -> stack_push .)
    IF              reduce using rule 174 (functions_stack -> stack_push .)
    CONST           reduce using rule 174 (functions_stack -> stack_push .)
    INTEGER         reduce using rule 174 (functions_stack -> stack_push .)
    FLOAT_NUMBER    reduce using rule 174 (functions_stack -> stack_push .)
    DECIMAL_NUMBER  reduce using rule 174 (functions_stack -> stack_push .)
    CHARTYPE        reduce using rule 174 (functions_stack -> stack_push .)
    STRINGTYPE      reduce using rule 174 (functions_stack -> stack_push .)
    FLOATTYPE       reduce using rule 174 (functions_stack -> stack_push .)
    DECIMALTYPE     reduce using rule 174 (functions_stack -> stack_push .)
    INTTYPE         reduce using rule 174 (functions_stack -> stack_push .)
    BOOLTYPE        reduce using rule 174 (functions_stack -> stack_push .)
    LIST            reduce using rule 174 (functions_stack -> stack_push .)
    DICTIONARY      reduce using rule 174 (functions_stack -> stack_push .)
    METHOD          reduce using rule 174 (functions_stack -> stack_push .)
    FOR             reduce using rule 174 (functions_stack -> stack_push .)
    FOREACH         reduce using rule 174 (functions_stack -> stack_push .)
    TRY             reduce using rule 174 (functions_stack -> stack_push .)
    WHILE           reduce using rule 174 (functions_stack -> stack_push .)
    DO              reduce using rule 174 (functions_stack -> stack_push .)
    PUBLIC          reduce using rule 174 (functions_stack -> stack_push .)
    PRIVATE         reduce using rule 174 (functions_stack -> stack_push .)
    RKEY            reduce using rule 174 (functions_stack -> stack_push .)
    RETURN          reduce using rule 174 (functions_stack -> stack_push .)


state 149

    (175) functions_stack -> stack_pop .

    PRINT           reduce using rule 175 (functions_stack -> stack_pop .)
    READ            reduce using rule 175 (functions_stack -> stack_pop .)
    VARIABLE        reduce using rule 175 (functions_stack -> stack_pop .)
    QUEUE           reduce using rule 175 (functions_stack -> stack_pop .)
    STACK           reduce using rule 175 (functions_stack -> stack_pop .)
    IF              reduce using rule 175 (functions_stack -> stack_pop .)
    CONST           reduce using rule 175 (functions_stack -> stack_pop .)
    INTEGER         reduce using rule 175 (functions_stack -> stack_pop .)
    FLOAT_NUMBER    reduce using rule 175 (functions_stack -> stack_pop .)
    DECIMAL_NUMBER  reduce using rule 175 (functions_stack -> stack_pop .)
    CHARTYPE        reduce using rule 175 (functions_stack -> stack_pop .)
    STRINGTYPE      reduce using rule 175 (functions_stack -> stack_pop .)
    FLOATTYPE       reduce using rule 175 (functions_stack -> stack_pop .)
    DECIMALTYPE     reduce using rule 175 (functions_stack -> stack_pop .)
    INTTYPE         reduce using rule 175 (functions_stack -> stack_pop .)
    BOOLTYPE        reduce using rule 175 (functions_stack -> stack_pop .)
    LIST            reduce using rule 175 (functions_stack -> stack_pop .)
    DICTIONARY      reduce using rule 175 (functions_stack -> stack_pop .)
    METHOD          reduce using rule 175 (functions_stack -> stack_pop .)
    FOR             reduce using rule 175 (functions_stack -> stack_pop .)
    FOREACH         reduce using rule 175 (functions_stack -> stack_pop .)
    TRY             reduce using rule 175 (functions_stack -> stack_pop .)
    WHILE           reduce using rule 175 (functions_stack -> stack_pop .)
    DO              reduce using rule 175 (functions_stack -> stack_pop .)
    PUBLIC          reduce using rule 175 (functions_stack -> stack_pop .)
    PRIVATE         reduce using rule 175 (functions_stack -> stack_pop .)
    RKEY            reduce using rule 175 (functions_stack -> stack_pop .)
    RETURN          reduce using rule 175 (functions_stack -> stack_pop .)


state 150

    (176) functions_stack -> stack_clear .

    PRINT           reduce using rule 176 (functions_stack -> stack_clear .)
    READ            reduce using rule 176 (functions_stack -> stack_clear .)
    VARIABLE        reduce using rule 176 (functions_stack -> stack_clear .)
    QUEUE           reduce using rule 176 (functions_stack -> stack_clear .)
    STACK           reduce using rule 176 (functions_stack -> stack_clear .)
    IF              reduce using rule 176 (functions_stack -> stack_clear .)
    CONST           reduce using rule 176 (functions_stack -> stack_clear .)
    INTEGER         reduce using rule 176 (functions_stack -> stack_clear .)
    FLOAT_NUMBER    reduce using rule 176 (functions_stack -> stack_clear .)
    DECIMAL_NUMBER  reduce using rule 176 (functions_stack -> stack_clear .)
    CHARTYPE        reduce using rule 176 (functions_stack -> stack_clear .)
    STRINGTYPE      reduce using rule 176 (functions_stack -> stack_clear .)
    FLOATTYPE       reduce using rule 176 (functions_stack -> stack_clear .)
    DECIMALTYPE     reduce using rule 176 (functions_stack -> stack_clear .)
    INTTYPE         reduce using rule 176 (functions_stack -> stack_clear .)
    BOOLTYPE        reduce using rule 176 (functions_stack -> stack_clear .)
    LIST            reduce using rule 176 (functions_stack -> stack_clear .)
    DICTIONARY      reduce using rule 176 (functions_stack -> stack_clear .)
    METHOD          reduce using rule 176 (functions_stack -> stack_clear .)
    FOR             reduce using rule 176 (functions_stack -> stack_clear .)
    FOREACH         reduce using rule 176 (functions_stack -> stack_clear .)
    TRY             reduce using rule 176 (functions_stack -> stack_clear .)
    WHILE           reduce using rule 176 (functions_stack -> stack_clear .)
    DO              reduce using rule 176 (functions_stack -> stack_clear .)
    PUBLIC          reduce using rule 176 (functions_stack -> stack_clear .)
    PRIVATE         reduce using rule 176 (functions_stack -> stack_clear .)
    RKEY            reduce using rule 176 (functions_stack -> stack_clear .)
    RETURN          reduce using rule 176 (functions_stack -> stack_clear .)


state 151

    (177) functions_stack -> stack_peek .

    PRINT           reduce using rule 177 (functions_stack -> stack_peek .)
    READ            reduce using rule 177 (functions_stack -> stack_peek .)
    VARIABLE        reduce using rule 177 (functions_stack -> stack_peek .)
    QUEUE           reduce using rule 177 (functions_stack -> stack_peek .)
    STACK           reduce using rule 177 (functions_stack -> stack_peek .)
    IF              reduce using rule 177 (functions_stack -> stack_peek .)
    CONST           reduce using rule 177 (functions_stack -> stack_peek .)
    INTEGER         reduce using rule 177 (functions_stack -> stack_peek .)
    FLOAT_NUMBER    reduce using rule 177 (functions_stack -> stack_peek .)
    DECIMAL_NUMBER  reduce using rule 177 (functions_stack -> stack_peek .)
    CHARTYPE        reduce using rule 177 (functions_stack -> stack_peek .)
    STRINGTYPE      reduce using rule 177 (functions_stack -> stack_peek .)
    FLOATTYPE       reduce using rule 177 (functions_stack -> stack_peek .)
    DECIMALTYPE     reduce using rule 177 (functions_stack -> stack_peek .)
    INTTYPE         reduce using rule 177 (functions_stack -> stack_peek .)
    BOOLTYPE        reduce using rule 177 (functions_stack -> stack_peek .)
    LIST            reduce using rule 177 (functions_stack -> stack_peek .)
    DICTIONARY      reduce using rule 177 (functions_stack -> stack_peek .)
    METHOD          reduce using rule 177 (functions_stack -> stack_peek .)
    FOR             reduce using rule 177 (functions_stack -> stack_peek .)
    FOREACH         reduce using rule 177 (functions_stack -> stack_peek .)
    TRY             reduce using rule 177 (functions_stack -> stack_peek .)
    WHILE           reduce using rule 177 (functions_stack -> stack_peek .)
    DO              reduce using rule 177 (functions_stack -> stack_peek .)
    PUBLIC          reduce using rule 177 (functions_stack -> stack_peek .)
    PRIVATE         reduce using rule 177 (functions_stack -> stack_peek .)
    RKEY            reduce using rule 177 (functions_stack -> stack_peek .)
    RETURN          reduce using rule 177 (functions_stack -> stack_peek .)


state 152

    (178) functions_stack -> stack_isEmpty .

    PRINT           reduce using rule 178 (functions_stack -> stack_isEmpty .)
    READ            reduce using rule 178 (functions_stack -> stack_isEmpty .)
    VARIABLE        reduce using rule 178 (functions_stack -> stack_isEmpty .)
    QUEUE           reduce using rule 178 (functions_stack -> stack_isEmpty .)
    STACK           reduce using rule 178 (functions_stack -> stack_isEmpty .)
    IF              reduce using rule 178 (functions_stack -> stack_isEmpty .)
    CONST           reduce using rule 178 (functions_stack -> stack_isEmpty .)
    INTEGER         reduce using rule 178 (functions_stack -> stack_isEmpty .)
    FLOAT_NUMBER    reduce using rule 178 (functions_stack -> stack_isEmpty .)
    DECIMAL_NUMBER  reduce using rule 178 (functions_stack -> stack_isEmpty .)
    CHARTYPE        reduce using rule 178 (functions_stack -> stack_isEmpty .)
    STRINGTYPE      reduce using rule 178 (functions_stack -> stack_isEmpty .)
    FLOATTYPE       reduce using rule 178 (functions_stack -> stack_isEmpty .)
    DECIMALTYPE     reduce using rule 178 (functions_stack -> stack_isEmpty .)
    INTTYPE         reduce using rule 178 (functions_stack -> stack_isEmpty .)
    BOOLTYPE        reduce using rule 178 (functions_stack -> stack_isEmpty .)
    LIST            reduce using rule 178 (functions_stack -> stack_isEmpty .)
    DICTIONARY      reduce using rule 178 (functions_stack -> stack_isEmpty .)
    METHOD          reduce using rule 178 (functions_stack -> stack_isEmpty .)
    FOR             reduce using rule 178 (functions_stack -> stack_isEmpty .)
    FOREACH         reduce using rule 178 (functions_stack -> stack_isEmpty .)
    TRY             reduce using rule 178 (functions_stack -> stack_isEmpty .)
    WHILE           reduce using rule 178 (functions_stack -> stack_isEmpty .)
    DO              reduce using rule 178 (functions_stack -> stack_isEmpty .)
    PUBLIC          reduce using rule 178 (functions_stack -> stack_isEmpty .)
    PRIVATE         reduce using rule 178 (functions_stack -> stack_isEmpty .)
    RKEY            reduce using rule 178 (functions_stack -> stack_isEmpty .)
    RETURN          reduce using rule 178 (functions_stack -> stack_isEmpty .)


state 153

    (137) block_if -> IF . LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if

    LPARENT         shift and go to state 221


state 154

    (121) block_for -> for_anidado .

    PRINT           reduce using rule 121 (block_for -> for_anidado .)
    READ            reduce using rule 121 (block_for -> for_anidado .)
    VARIABLE        reduce using rule 121 (block_for -> for_anidado .)
    QUEUE           reduce using rule 121 (block_for -> for_anidado .)
    STACK           reduce using rule 121 (block_for -> for_anidado .)
    IF              reduce using rule 121 (block_for -> for_anidado .)
    CONST           reduce using rule 121 (block_for -> for_anidado .)
    INTEGER         reduce using rule 121 (block_for -> for_anidado .)
    FLOAT_NUMBER    reduce using rule 121 (block_for -> for_anidado .)
    DECIMAL_NUMBER  reduce using rule 121 (block_for -> for_anidado .)
    CHARTYPE        reduce using rule 121 (block_for -> for_anidado .)
    STRINGTYPE      reduce using rule 121 (block_for -> for_anidado .)
    FLOATTYPE       reduce using rule 121 (block_for -> for_anidado .)
    DECIMALTYPE     reduce using rule 121 (block_for -> for_anidado .)
    INTTYPE         reduce using rule 121 (block_for -> for_anidado .)
    BOOLTYPE        reduce using rule 121 (block_for -> for_anidado .)
    LIST            reduce using rule 121 (block_for -> for_anidado .)
    DICTIONARY      reduce using rule 121 (block_for -> for_anidado .)
    METHOD          reduce using rule 121 (block_for -> for_anidado .)
    FOR             reduce using rule 121 (block_for -> for_anidado .)
    FOREACH         reduce using rule 121 (block_for -> for_anidado .)
    TRY             reduce using rule 121 (block_for -> for_anidado .)
    WHILE           reduce using rule 121 (block_for -> for_anidado .)
    DO              reduce using rule 121 (block_for -> for_anidado .)
    PUBLIC          reduce using rule 121 (block_for -> for_anidado .)
    PRIVATE         reduce using rule 121 (block_for -> for_anidado .)
    RKEY            reduce using rule 121 (block_for -> for_anidado .)
    RETURN          reduce using rule 121 (block_for -> for_anidado .)


state 155

    (122) block_for -> for_each .

    PRINT           reduce using rule 122 (block_for -> for_each .)
    READ            reduce using rule 122 (block_for -> for_each .)
    VARIABLE        reduce using rule 122 (block_for -> for_each .)
    QUEUE           reduce using rule 122 (block_for -> for_each .)
    STACK           reduce using rule 122 (block_for -> for_each .)
    IF              reduce using rule 122 (block_for -> for_each .)
    CONST           reduce using rule 122 (block_for -> for_each .)
    INTEGER         reduce using rule 122 (block_for -> for_each .)
    FLOAT_NUMBER    reduce using rule 122 (block_for -> for_each .)
    DECIMAL_NUMBER  reduce using rule 122 (block_for -> for_each .)
    CHARTYPE        reduce using rule 122 (block_for -> for_each .)
    STRINGTYPE      reduce using rule 122 (block_for -> for_each .)
    FLOATTYPE       reduce using rule 122 (block_for -> for_each .)
    DECIMALTYPE     reduce using rule 122 (block_for -> for_each .)
    INTTYPE         reduce using rule 122 (block_for -> for_each .)
    BOOLTYPE        reduce using rule 122 (block_for -> for_each .)
    LIST            reduce using rule 122 (block_for -> for_each .)
    DICTIONARY      reduce using rule 122 (block_for -> for_each .)
    METHOD          reduce using rule 122 (block_for -> for_each .)
    FOR             reduce using rule 122 (block_for -> for_each .)
    FOREACH         reduce using rule 122 (block_for -> for_each .)
    TRY             reduce using rule 122 (block_for -> for_each .)
    WHILE           reduce using rule 122 (block_for -> for_each .)
    DO              reduce using rule 122 (block_for -> for_each .)
    PUBLIC          reduce using rule 122 (block_for -> for_each .)
    PRIVATE         reduce using rule 122 (block_for -> for_each .)
    RKEY            reduce using rule 122 (block_for -> for_each .)
    RETURN          reduce using rule 122 (block_for -> for_each .)


state 156

    (129) block_try_catch -> try_catch_simply .

    PRINT           reduce using rule 129 (block_try_catch -> try_catch_simply .)
    READ            reduce using rule 129 (block_try_catch -> try_catch_simply .)
    VARIABLE        reduce using rule 129 (block_try_catch -> try_catch_simply .)
    QUEUE           reduce using rule 129 (block_try_catch -> try_catch_simply .)
    STACK           reduce using rule 129 (block_try_catch -> try_catch_simply .)
    IF              reduce using rule 129 (block_try_catch -> try_catch_simply .)
    CONST           reduce using rule 129 (block_try_catch -> try_catch_simply .)
    INTEGER         reduce using rule 129 (block_try_catch -> try_catch_simply .)
    FLOAT_NUMBER    reduce using rule 129 (block_try_catch -> try_catch_simply .)
    DECIMAL_NUMBER  reduce using rule 129 (block_try_catch -> try_catch_simply .)
    CHARTYPE        reduce using rule 129 (block_try_catch -> try_catch_simply .)
    STRINGTYPE      reduce using rule 129 (block_try_catch -> try_catch_simply .)
    FLOATTYPE       reduce using rule 129 (block_try_catch -> try_catch_simply .)
    DECIMALTYPE     reduce using rule 129 (block_try_catch -> try_catch_simply .)
    INTTYPE         reduce using rule 129 (block_try_catch -> try_catch_simply .)
    BOOLTYPE        reduce using rule 129 (block_try_catch -> try_catch_simply .)
    LIST            reduce using rule 129 (block_try_catch -> try_catch_simply .)
    DICTIONARY      reduce using rule 129 (block_try_catch -> try_catch_simply .)
    METHOD          reduce using rule 129 (block_try_catch -> try_catch_simply .)
    FOR             reduce using rule 129 (block_try_catch -> try_catch_simply .)
    FOREACH         reduce using rule 129 (block_try_catch -> try_catch_simply .)
    TRY             reduce using rule 129 (block_try_catch -> try_catch_simply .)
    WHILE           reduce using rule 129 (block_try_catch -> try_catch_simply .)
    DO              reduce using rule 129 (block_try_catch -> try_catch_simply .)
    PUBLIC          reduce using rule 129 (block_try_catch -> try_catch_simply .)
    PRIVATE         reduce using rule 129 (block_try_catch -> try_catch_simply .)
    RKEY            reduce using rule 129 (block_try_catch -> try_catch_simply .)
    RETURN          reduce using rule 129 (block_try_catch -> try_catch_simply .)


state 157

    (130) block_try_catch -> try_catch_finally .

    PRINT           reduce using rule 130 (block_try_catch -> try_catch_finally .)
    READ            reduce using rule 130 (block_try_catch -> try_catch_finally .)
    VARIABLE        reduce using rule 130 (block_try_catch -> try_catch_finally .)
    QUEUE           reduce using rule 130 (block_try_catch -> try_catch_finally .)
    STACK           reduce using rule 130 (block_try_catch -> try_catch_finally .)
    IF              reduce using rule 130 (block_try_catch -> try_catch_finally .)
    CONST           reduce using rule 130 (block_try_catch -> try_catch_finally .)
    INTEGER         reduce using rule 130 (block_try_catch -> try_catch_finally .)
    FLOAT_NUMBER    reduce using rule 130 (block_try_catch -> try_catch_finally .)
    DECIMAL_NUMBER  reduce using rule 130 (block_try_catch -> try_catch_finally .)
    CHARTYPE        reduce using rule 130 (block_try_catch -> try_catch_finally .)
    STRINGTYPE      reduce using rule 130 (block_try_catch -> try_catch_finally .)
    FLOATTYPE       reduce using rule 130 (block_try_catch -> try_catch_finally .)
    DECIMALTYPE     reduce using rule 130 (block_try_catch -> try_catch_finally .)
    INTTYPE         reduce using rule 130 (block_try_catch -> try_catch_finally .)
    BOOLTYPE        reduce using rule 130 (block_try_catch -> try_catch_finally .)
    LIST            reduce using rule 130 (block_try_catch -> try_catch_finally .)
    DICTIONARY      reduce using rule 130 (block_try_catch -> try_catch_finally .)
    METHOD          reduce using rule 130 (block_try_catch -> try_catch_finally .)
    FOR             reduce using rule 130 (block_try_catch -> try_catch_finally .)
    FOREACH         reduce using rule 130 (block_try_catch -> try_catch_finally .)
    TRY             reduce using rule 130 (block_try_catch -> try_catch_finally .)
    WHILE           reduce using rule 130 (block_try_catch -> try_catch_finally .)
    DO              reduce using rule 130 (block_try_catch -> try_catch_finally .)
    PUBLIC          reduce using rule 130 (block_try_catch -> try_catch_finally .)
    PRIVATE         reduce using rule 130 (block_try_catch -> try_catch_finally .)
    RKEY            reduce using rule 130 (block_try_catch -> try_catch_finally .)
    RETURN          reduce using rule 130 (block_try_catch -> try_catch_finally .)


state 158

    (133) block_while -> normal_while .

    PRINT           reduce using rule 133 (block_while -> normal_while .)
    READ            reduce using rule 133 (block_while -> normal_while .)
    VARIABLE        reduce using rule 133 (block_while -> normal_while .)
    QUEUE           reduce using rule 133 (block_while -> normal_while .)
    STACK           reduce using rule 133 (block_while -> normal_while .)
    IF              reduce using rule 133 (block_while -> normal_while .)
    CONST           reduce using rule 133 (block_while -> normal_while .)
    INTEGER         reduce using rule 133 (block_while -> normal_while .)
    FLOAT_NUMBER    reduce using rule 133 (block_while -> normal_while .)
    DECIMAL_NUMBER  reduce using rule 133 (block_while -> normal_while .)
    CHARTYPE        reduce using rule 133 (block_while -> normal_while .)
    STRINGTYPE      reduce using rule 133 (block_while -> normal_while .)
    FLOATTYPE       reduce using rule 133 (block_while -> normal_while .)
    DECIMALTYPE     reduce using rule 133 (block_while -> normal_while .)
    INTTYPE         reduce using rule 133 (block_while -> normal_while .)
    BOOLTYPE        reduce using rule 133 (block_while -> normal_while .)
    LIST            reduce using rule 133 (block_while -> normal_while .)
    DICTIONARY      reduce using rule 133 (block_while -> normal_while .)
    METHOD          reduce using rule 133 (block_while -> normal_while .)
    FOR             reduce using rule 133 (block_while -> normal_while .)
    FOREACH         reduce using rule 133 (block_while -> normal_while .)
    TRY             reduce using rule 133 (block_while -> normal_while .)
    WHILE           reduce using rule 133 (block_while -> normal_while .)
    DO              reduce using rule 133 (block_while -> normal_while .)
    PUBLIC          reduce using rule 133 (block_while -> normal_while .)
    PRIVATE         reduce using rule 133 (block_while -> normal_while .)
    RKEY            reduce using rule 133 (block_while -> normal_while .)
    RETURN          reduce using rule 133 (block_while -> normal_while .)


state 159

    (134) block_while -> do_while .

    PRINT           reduce using rule 134 (block_while -> do_while .)
    READ            reduce using rule 134 (block_while -> do_while .)
    VARIABLE        reduce using rule 134 (block_while -> do_while .)
    QUEUE           reduce using rule 134 (block_while -> do_while .)
    STACK           reduce using rule 134 (block_while -> do_while .)
    IF              reduce using rule 134 (block_while -> do_while .)
    CONST           reduce using rule 134 (block_while -> do_while .)
    INTEGER         reduce using rule 134 (block_while -> do_while .)
    FLOAT_NUMBER    reduce using rule 134 (block_while -> do_while .)
    DECIMAL_NUMBER  reduce using rule 134 (block_while -> do_while .)
    CHARTYPE        reduce using rule 134 (block_while -> do_while .)
    STRINGTYPE      reduce using rule 134 (block_while -> do_while .)
    FLOATTYPE       reduce using rule 134 (block_while -> do_while .)
    DECIMALTYPE     reduce using rule 134 (block_while -> do_while .)
    INTTYPE         reduce using rule 134 (block_while -> do_while .)
    BOOLTYPE        reduce using rule 134 (block_while -> do_while .)
    LIST            reduce using rule 134 (block_while -> do_while .)
    DICTIONARY      reduce using rule 134 (block_while -> do_while .)
    METHOD          reduce using rule 134 (block_while -> do_while .)
    FOR             reduce using rule 134 (block_while -> do_while .)
    FOREACH         reduce using rule 134 (block_while -> do_while .)
    TRY             reduce using rule 134 (block_while -> do_while .)
    WHILE           reduce using rule 134 (block_while -> do_while .)
    DO              reduce using rule 134 (block_while -> do_while .)
    PUBLIC          reduce using rule 134 (block_while -> do_while .)
    PRIVATE         reduce using rule 134 (block_while -> do_while .)
    RKEY            reduce using rule 134 (block_while -> do_while .)
    RETURN          reduce using rule 134 (block_while -> do_while .)


state 160

    (89) constant_assignation -> access_modifiers . CONST data_type assignation_key_value DOTANDCOMMA
    (91) constant_assignation -> access_modifiers . CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (93) variable_assignation -> access_modifiers . data_type assignation_key_value DOTANDCOMMA
    (95) variable_assignation -> access_modifiers . data_type assignation_key_value_multiple DOTANDCOMMA
    (97) late_initialization -> access_modifiers . data_type VARIABLE DOTANDCOMMA
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET

    CONST           shift and go to state 222
    CHARTYPE        shift and go to state 30
    STRINGTYPE      shift and go to state 28
    FLOATTYPE       shift and go to state 31
    DECIMALTYPE     shift and go to state 32
    INTTYPE         shift and go to state 33
    BOOLTYPE        shift and go to state 34

    data_type                      shift and go to state 223
    array_type                     shift and go to state 35

state 161

    (90) constant_assignation -> CONST . data_type assignation_key_value DOTANDCOMMA
    (92) constant_assignation -> CONST . data_type assignation_key_value_multiple DOTANDCOMMA
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET

    CHARTYPE        shift and go to state 30
    STRINGTYPE      shift and go to state 28
    FLOATTYPE       shift and go to state 31
    DECIMALTYPE     shift and go to state 32
    INTTYPE         shift and go to state 33
    BOOLTYPE        shift and go to state 34

    data_type                      shift and go to state 224
    array_type                     shift and go to state 35

state 162

    (99) late_initialization -> assignation_key_value . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 225


state 163

    (60) value_numeric -> FLOAT_NUMBER .

    PRINT           reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    READ            reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    VARIABLE        reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    QUEUE           reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    STACK           reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    IF              reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    CONST           reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    INTEGER         reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    FLOAT_NUMBER    reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    DECIMAL_NUMBER  reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    CHARTYPE        reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    STRINGTYPE      reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    FLOATTYPE       reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    DECIMALTYPE     reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    INTTYPE         reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    BOOLTYPE        reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    LIST            reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    DICTIONARY      reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    METHOD          reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    FOR             reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    FOREACH         reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    TRY             reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    WHILE           reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    DO              reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    PUBLIC          reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    PRIVATE         reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    RKEY            reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    PLUS            reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    MINUS           reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    TIMES           reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    DIVIDE          reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    PERCENT         reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    GREATER_THAN    reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    SMALLER_THAN    reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    EQUAL_COMPARATION reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    INEQUALITY      reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    GREATER_THAN_OR_EQUAL reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    SMALLER_THAN_OR_EQUAL reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    LOGICAND        reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    LOGICOR         reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    LOGICNOT        reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    LOGICXOR        reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    RETURN          reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    DOTANDCOMMA     reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    COMMA           reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    RBRACKET        reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)
    RPARENT         reduce using rule 60 (value_numeric -> FLOAT_NUMBER .)


state 164

    (61) value_numeric -> DECIMAL_NUMBER .

    PRINT           reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    READ            reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    VARIABLE        reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    QUEUE           reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    STACK           reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    IF              reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    CONST           reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    INTEGER         reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    FLOAT_NUMBER    reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    DECIMAL_NUMBER  reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    CHARTYPE        reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    STRINGTYPE      reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    FLOATTYPE       reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    DECIMALTYPE     reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    INTTYPE         reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    BOOLTYPE        reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    LIST            reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    DICTIONARY      reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    METHOD          reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    FOR             reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    FOREACH         reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    TRY             reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    WHILE           reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    DO              reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    PUBLIC          reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    PRIVATE         reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    RKEY            reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    PLUS            reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    MINUS           reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    TIMES           reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    DIVIDE          reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    PERCENT         reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    GREATER_THAN    reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    SMALLER_THAN    reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    EQUAL_COMPARATION reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    INEQUALITY      reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    GREATER_THAN_OR_EQUAL reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    SMALLER_THAN_OR_EQUAL reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    LOGICAND        reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    LOGICOR         reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    LOGICNOT        reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    LOGICXOR        reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    RETURN          reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    DOTANDCOMMA     reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    COMMA           reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    RBRACKET        reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)
    RPARENT         reduce using rule 61 (value_numeric -> DECIMAL_NUMBER .)


state 165

    (113) array_type -> CHARTYPE . LBRACKET RBRACKET
    (106) data_type -> CHARTYPE .

    LBRACKET        shift and go to state 46
    VARIABLE        reduce using rule 106 (data_type -> CHARTYPE .)
    READ            reduce using rule 106 (data_type -> CHARTYPE .)


state 166

    (114) array_type -> STRINGTYPE . LBRACKET RBRACKET
    (107) data_type -> STRINGTYPE .

    LBRACKET        shift and go to state 44
    VARIABLE        reduce using rule 107 (data_type -> STRINGTYPE .)
    READ            reduce using rule 107 (data_type -> STRINGTYPE .)


state 167

    (115) array_type -> FLOATTYPE . LBRACKET RBRACKET
    (108) data_type -> FLOATTYPE .

    LBRACKET        shift and go to state 47
    VARIABLE        reduce using rule 108 (data_type -> FLOATTYPE .)
    READ            reduce using rule 108 (data_type -> FLOATTYPE .)


state 168

    (116) array_type -> DECIMALTYPE . LBRACKET RBRACKET
    (109) data_type -> DECIMALTYPE .

    LBRACKET        shift and go to state 48
    VARIABLE        reduce using rule 109 (data_type -> DECIMALTYPE .)
    READ            reduce using rule 109 (data_type -> DECIMALTYPE .)


state 169

    (117) array_type -> INTTYPE . LBRACKET RBRACKET
    (110) data_type -> INTTYPE .

    LBRACKET        shift and go to state 49
    VARIABLE        reduce using rule 110 (data_type -> INTTYPE .)
    READ            reduce using rule 110 (data_type -> INTTYPE .)


state 170

    (118) array_type -> BOOLTYPE . LBRACKET RBRACKET
    (111) data_type -> BOOLTYPE .

    LBRACKET        shift and go to state 50
    VARIABLE        reduce using rule 111 (data_type -> BOOLTYPE .)
    READ            reduce using rule 111 (data_type -> BOOLTYPE .)


state 171

    (157) list_empty -> LIST . SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (158) list_empty -> LIST . SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> LIST . SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (160) list_full -> LIST . SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    SMALLER_THAN    shift and go to state 226


state 172

    (144) dict_empty -> DICTIONARY . SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (145) dict_full -> DICTIONARY . SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA

    SMALLER_THAN    shift and go to state 227


state 173

    (125) for_anidado -> for_simple .

    PRINT           reduce using rule 125 (for_anidado -> for_simple .)
    READ            reduce using rule 125 (for_anidado -> for_simple .)
    VARIABLE        reduce using rule 125 (for_anidado -> for_simple .)
    QUEUE           reduce using rule 125 (for_anidado -> for_simple .)
    STACK           reduce using rule 125 (for_anidado -> for_simple .)
    IF              reduce using rule 125 (for_anidado -> for_simple .)
    CONST           reduce using rule 125 (for_anidado -> for_simple .)
    INTEGER         reduce using rule 125 (for_anidado -> for_simple .)
    FLOAT_NUMBER    reduce using rule 125 (for_anidado -> for_simple .)
    DECIMAL_NUMBER  reduce using rule 125 (for_anidado -> for_simple .)
    CHARTYPE        reduce using rule 125 (for_anidado -> for_simple .)
    STRINGTYPE      reduce using rule 125 (for_anidado -> for_simple .)
    FLOATTYPE       reduce using rule 125 (for_anidado -> for_simple .)
    DECIMALTYPE     reduce using rule 125 (for_anidado -> for_simple .)
    INTTYPE         reduce using rule 125 (for_anidado -> for_simple .)
    BOOLTYPE        reduce using rule 125 (for_anidado -> for_simple .)
    LIST            reduce using rule 125 (for_anidado -> for_simple .)
    DICTIONARY      reduce using rule 125 (for_anidado -> for_simple .)
    METHOD          reduce using rule 125 (for_anidado -> for_simple .)
    FOR             reduce using rule 125 (for_anidado -> for_simple .)
    FOREACH         reduce using rule 125 (for_anidado -> for_simple .)
    TRY             reduce using rule 125 (for_anidado -> for_simple .)
    WHILE           reduce using rule 125 (for_anidado -> for_simple .)
    DO              reduce using rule 125 (for_anidado -> for_simple .)
    PUBLIC          reduce using rule 125 (for_anidado -> for_simple .)
    PRIVATE         reduce using rule 125 (for_anidado -> for_simple .)
    RKEY            reduce using rule 125 (for_anidado -> for_simple .)
    RETURN          reduce using rule 125 (for_anidado -> for_simple .)


state 174

    (126) for_anidado -> FOR . LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY
    (127) for_anidado -> FOR . LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY
    (123) for_simple -> FOR . LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (124) for_simple -> FOR . LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    LPARENT         shift and go to state 228


state 175

    (128) for_each -> FOREACH . LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY

    LPARENT         shift and go to state 229


state 176

    (131) try_catch_simply -> TRY . LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY
    (132) try_catch_finally -> TRY . LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY

    LKEY            shift and go to state 230


state 177

    (135) normal_while -> WHILE . LPARENT logic_operation RPARENT LKEY all_block_code RKEY

    LPARENT         shift and go to state 231


state 178

    (136) do_while -> DO . LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT

    LKEY            shift and go to state 232


state 179

    (84) access_modifiers -> PUBLIC .

    CONST           reduce using rule 84 (access_modifiers -> PUBLIC .)
    CHARTYPE        reduce using rule 84 (access_modifiers -> PUBLIC .)
    STRINGTYPE      reduce using rule 84 (access_modifiers -> PUBLIC .)
    FLOATTYPE       reduce using rule 84 (access_modifiers -> PUBLIC .)
    DECIMALTYPE     reduce using rule 84 (access_modifiers -> PUBLIC .)
    INTTYPE         reduce using rule 84 (access_modifiers -> PUBLIC .)
    BOOLTYPE        reduce using rule 84 (access_modifiers -> PUBLIC .)


state 180

    (194) simple_method -> STATIC data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code . function_return RKEY
    (198) function_return -> . RETURN value DOTANDCOMMA

    RETURN          shift and go to state 234

    function_return                shift and go to state 233

state 181

    (196) simple_method -> access_modifiers STATIC data_type METHOD LPARENT function_arguments RPARENT LKEY . all_block_code function_return RKEY
    (26) all_block_code -> . block_code
    (27) all_block_code -> . block_code all_block_code
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . read_data
    (8) block_code -> . arithmetic_operation
    (9) block_code -> . logic_operation
    (10) block_code -> . array_assignation
    (11) block_code -> . array_value_assign
    (12) block_code -> . array_indexing
    (13) block_code -> . lists
    (14) block_code -> . functions_list
    (15) block_code -> . dict_estruct
    (16) block_code -> . functions_dict
    (17) block_code -> . concurrent_method
    (18) block_code -> . queue_struct
    (19) block_code -> . functions_queue
    (20) block_code -> . stack_struct
    (21) block_code -> . functions_stack
    (22) block_code -> . block_if
    (23) block_code -> . block_for
    (24) block_code -> . block_try_catch
    (25) block_code -> . block_while
    (86) def_const_or_var -> . constant_assignation
    (87) def_const_or_var -> . variable_assignation
    (88) def_const_or_var -> . late_initialization
    (33) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (34) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (35) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (44) array_assignation -> . array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA
    (50) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (51) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (48) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (49) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (155) lists -> . list_empty
    (156) lists -> . list_full
    (165) functions_list -> . list_func_clear
    (166) functions_list -> . list_func_count
    (167) functions_list -> . list_func_add
    (168) functions_list -> . list_func_removeat
    (142) dict_estruct -> . dict_empty
    (143) dict_estruct -> . dict_full
    (151) functions_dict -> . dict_func_put
    (152) functions_dict -> . dict_func_remove
    (205) concurrent_method -> . method_declaration CONCURRENT LKEY concurrent_block RKEY
    (184) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (185) functions_queue -> . queue_enqueue
    (186) functions_queue -> . queue_dequeue
    (187) functions_queue -> . queue_clear
    (188) functions_queue -> . queue_isEmpty
    (173) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (174) functions_stack -> . stack_push
    (175) functions_stack -> . stack_pop
    (176) functions_stack -> . stack_clear
    (177) functions_stack -> . stack_peek
    (178) functions_stack -> . stack_isEmpty
    (137) block_if -> . IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if
    (121) block_for -> . for_anidado
    (122) block_for -> . for_each
    (129) block_try_catch -> . try_catch_simply
    (130) block_try_catch -> . try_catch_finally
    (133) block_while -> . normal_while
    (134) block_while -> . do_while
    (89) constant_assignation -> . access_modifiers CONST data_type assignation_key_value DOTANDCOMMA
    (90) constant_assignation -> . CONST data_type assignation_key_value DOTANDCOMMA
    (91) constant_assignation -> . access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (92) constant_assignation -> . CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (93) variable_assignation -> . access_modifiers data_type assignation_key_value DOTANDCOMMA
    (94) variable_assignation -> . data_type assignation_key_value DOTANDCOMMA
    (95) variable_assignation -> . access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA
    (96) variable_assignation -> . data_type assignation_key_value_multiple DOTANDCOMMA
    (97) late_initialization -> . access_modifiers data_type VARIABLE DOTANDCOMMA
    (98) late_initialization -> . data_type VARIABLE DOTANDCOMMA
    (99) late_initialization -> . assignation_key_value DOTANDCOMMA
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET
    (157) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (158) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (160) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (169) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (170) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (171) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (172) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (144) dict_empty -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (145) dict_full -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA
    (153) dict_func_put -> . VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA
    (154) dict_func_remove -> . VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA
    (206) method_declaration -> . METHOD IDENTIFIER LPARENT RPARENT DOTANDCOMMA
    (189) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (190) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (191) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (193) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (179) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (180) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (181) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (182) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (183) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (125) for_anidado -> . for_simple
    (126) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY
    (127) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY
    (128) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (131) try_catch_simply -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY
    (132) try_catch_finally -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY
    (135) normal_while -> . WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY
    (136) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT
    (84) access_modifiers -> . PUBLIC
    (85) access_modifiers -> . PRIVATE
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (100) assignation_key_value -> . VARIABLE ASSIGNATION value
    (101) assignation_key_value -> . READ LPARENT RPARENT
    (123) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (124) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    PRINT           shift and go to state 124
    READ            shift and go to state 126
    VARIABLE        shift and go to state 125
    QUEUE           shift and go to state 141
    STACK           shift and go to state 147
    IF              shift and go to state 153
    CONST           shift and go to state 161
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164
    CHARTYPE        shift and go to state 165
    STRINGTYPE      shift and go to state 166
    FLOATTYPE       shift and go to state 167
    DECIMALTYPE     shift and go to state 168
    INTTYPE         shift and go to state 169
    BOOLTYPE        shift and go to state 170
    LIST            shift and go to state 171
    DICTIONARY      shift and go to state 172
    METHOD          shift and go to state 97
    FOR             shift and go to state 174
    FOREACH         shift and go to state 175
    TRY             shift and go to state 176
    WHILE           shift and go to state 177
    DO              shift and go to state 178
    PUBLIC          shift and go to state 179
    PRIVATE         shift and go to state 20

    access_modifiers               shift and go to state 160
    data_type                      shift and go to state 142
    all_block_code                 shift and go to state 235
    block_code                     shift and go to state 99
    def_const_or_var               shift and go to state 100
    print_data                     shift and go to state 101
    read_data                      shift and go to state 102
    arithmetic_operation           shift and go to state 103
    logic_operation                shift and go to state 104
    array_assignation              shift and go to state 105
    array_value_assign             shift and go to state 106
    array_indexing                 shift and go to state 107
    lists                          shift and go to state 108
    functions_list                 shift and go to state 109
    dict_estruct                   shift and go to state 110
    functions_dict                 shift and go to state 111
    concurrent_method              shift and go to state 112
    queue_struct                   shift and go to state 113
    functions_queue                shift and go to state 114
    stack_struct                   shift and go to state 115
    functions_stack                shift and go to state 116
    block_if                       shift and go to state 117
    block_for                      shift and go to state 118
    block_try_catch                shift and go to state 119
    block_while                    shift and go to state 120
    constant_assignation           shift and go to state 121
    variable_assignation           shift and go to state 122
    late_initialization            shift and go to state 123
    value_numeric                  shift and go to state 127
    array_type                     shift and go to state 129
    list_empty                     shift and go to state 130
    list_full                      shift and go to state 131
    list_func_clear                shift and go to state 132
    list_func_count                shift and go to state 133
    list_func_add                  shift and go to state 134
    list_func_removeat             shift and go to state 135
    dict_empty                     shift and go to state 136
    dict_full                      shift and go to state 137
    dict_func_put                  shift and go to state 138
    dict_func_remove               shift and go to state 139
    method_declaration             shift and go to state 140
    queue_enqueue                  shift and go to state 143
    queue_dequeue                  shift and go to state 144
    queue_clear                    shift and go to state 145
    queue_isEmpty                  shift and go to state 146
    stack_push                     shift and go to state 148
    stack_pop                      shift and go to state 149
    stack_clear                    shift and go to state 150
    stack_peek                     shift and go to state 151
    stack_isEmpty                  shift and go to state 152
    for_anidado                    shift and go to state 154
    for_each                       shift and go to state 155
    try_catch_simply               shift and go to state 156
    try_catch_finally              shift and go to state 157
    normal_while                   shift and go to state 158
    do_while                       shift and go to state 159
    assignation_key_value          shift and go to state 162
    for_simple                     shift and go to state 173

state 182

    (197) simple_method -> access_modifiers STATIC VOID METHOD LPARENT function_arguments RPARENT LKEY . all_block_code RKEY
    (26) all_block_code -> . block_code
    (27) all_block_code -> . block_code all_block_code
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . read_data
    (8) block_code -> . arithmetic_operation
    (9) block_code -> . logic_operation
    (10) block_code -> . array_assignation
    (11) block_code -> . array_value_assign
    (12) block_code -> . array_indexing
    (13) block_code -> . lists
    (14) block_code -> . functions_list
    (15) block_code -> . dict_estruct
    (16) block_code -> . functions_dict
    (17) block_code -> . concurrent_method
    (18) block_code -> . queue_struct
    (19) block_code -> . functions_queue
    (20) block_code -> . stack_struct
    (21) block_code -> . functions_stack
    (22) block_code -> . block_if
    (23) block_code -> . block_for
    (24) block_code -> . block_try_catch
    (25) block_code -> . block_while
    (86) def_const_or_var -> . constant_assignation
    (87) def_const_or_var -> . variable_assignation
    (88) def_const_or_var -> . late_initialization
    (33) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (34) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (35) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (44) array_assignation -> . array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA
    (50) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (51) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (48) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (49) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (155) lists -> . list_empty
    (156) lists -> . list_full
    (165) functions_list -> . list_func_clear
    (166) functions_list -> . list_func_count
    (167) functions_list -> . list_func_add
    (168) functions_list -> . list_func_removeat
    (142) dict_estruct -> . dict_empty
    (143) dict_estruct -> . dict_full
    (151) functions_dict -> . dict_func_put
    (152) functions_dict -> . dict_func_remove
    (205) concurrent_method -> . method_declaration CONCURRENT LKEY concurrent_block RKEY
    (184) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (185) functions_queue -> . queue_enqueue
    (186) functions_queue -> . queue_dequeue
    (187) functions_queue -> . queue_clear
    (188) functions_queue -> . queue_isEmpty
    (173) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (174) functions_stack -> . stack_push
    (175) functions_stack -> . stack_pop
    (176) functions_stack -> . stack_clear
    (177) functions_stack -> . stack_peek
    (178) functions_stack -> . stack_isEmpty
    (137) block_if -> . IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if
    (121) block_for -> . for_anidado
    (122) block_for -> . for_each
    (129) block_try_catch -> . try_catch_simply
    (130) block_try_catch -> . try_catch_finally
    (133) block_while -> . normal_while
    (134) block_while -> . do_while
    (89) constant_assignation -> . access_modifiers CONST data_type assignation_key_value DOTANDCOMMA
    (90) constant_assignation -> . CONST data_type assignation_key_value DOTANDCOMMA
    (91) constant_assignation -> . access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (92) constant_assignation -> . CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (93) variable_assignation -> . access_modifiers data_type assignation_key_value DOTANDCOMMA
    (94) variable_assignation -> . data_type assignation_key_value DOTANDCOMMA
    (95) variable_assignation -> . access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA
    (96) variable_assignation -> . data_type assignation_key_value_multiple DOTANDCOMMA
    (97) late_initialization -> . access_modifiers data_type VARIABLE DOTANDCOMMA
    (98) late_initialization -> . data_type VARIABLE DOTANDCOMMA
    (99) late_initialization -> . assignation_key_value DOTANDCOMMA
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET
    (157) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (158) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (160) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (169) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (170) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (171) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (172) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (144) dict_empty -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (145) dict_full -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA
    (153) dict_func_put -> . VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA
    (154) dict_func_remove -> . VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA
    (206) method_declaration -> . METHOD IDENTIFIER LPARENT RPARENT DOTANDCOMMA
    (189) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (190) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (191) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (193) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (179) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (180) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (181) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (182) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (183) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (125) for_anidado -> . for_simple
    (126) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY
    (127) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY
    (128) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (131) try_catch_simply -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY
    (132) try_catch_finally -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY
    (135) normal_while -> . WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY
    (136) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT
    (84) access_modifiers -> . PUBLIC
    (85) access_modifiers -> . PRIVATE
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (100) assignation_key_value -> . VARIABLE ASSIGNATION value
    (101) assignation_key_value -> . READ LPARENT RPARENT
    (123) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (124) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    PRINT           shift and go to state 124
    READ            shift and go to state 126
    VARIABLE        shift and go to state 125
    QUEUE           shift and go to state 141
    STACK           shift and go to state 147
    IF              shift and go to state 153
    CONST           shift and go to state 161
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164
    CHARTYPE        shift and go to state 165
    STRINGTYPE      shift and go to state 166
    FLOATTYPE       shift and go to state 167
    DECIMALTYPE     shift and go to state 168
    INTTYPE         shift and go to state 169
    BOOLTYPE        shift and go to state 170
    LIST            shift and go to state 171
    DICTIONARY      shift and go to state 172
    METHOD          shift and go to state 97
    FOR             shift and go to state 174
    FOREACH         shift and go to state 175
    TRY             shift and go to state 176
    WHILE           shift and go to state 177
    DO              shift and go to state 178
    PUBLIC          shift and go to state 179
    PRIVATE         shift and go to state 20

    access_modifiers               shift and go to state 160
    all_block_code                 shift and go to state 236
    block_code                     shift and go to state 99
    def_const_or_var               shift and go to state 100
    print_data                     shift and go to state 101
    read_data                      shift and go to state 102
    arithmetic_operation           shift and go to state 103
    logic_operation                shift and go to state 104
    array_assignation              shift and go to state 105
    array_value_assign             shift and go to state 106
    array_indexing                 shift and go to state 107
    lists                          shift and go to state 108
    functions_list                 shift and go to state 109
    dict_estruct                   shift and go to state 110
    functions_dict                 shift and go to state 111
    concurrent_method              shift and go to state 112
    queue_struct                   shift and go to state 113
    functions_queue                shift and go to state 114
    stack_struct                   shift and go to state 115
    functions_stack                shift and go to state 116
    block_if                       shift and go to state 117
    block_for                      shift and go to state 118
    block_try_catch                shift and go to state 119
    block_while                    shift and go to state 120
    constant_assignation           shift and go to state 121
    variable_assignation           shift and go to state 122
    late_initialization            shift and go to state 123
    value_numeric                  shift and go to state 127
    array_type                     shift and go to state 129
    list_empty                     shift and go to state 130
    list_full                      shift and go to state 131
    list_func_clear                shift and go to state 132
    list_func_count                shift and go to state 133
    list_func_add                  shift and go to state 134
    list_func_removeat             shift and go to state 135
    dict_empty                     shift and go to state 136
    dict_full                      shift and go to state 137
    dict_func_put                  shift and go to state 138
    dict_func_remove               shift and go to state 139
    method_declaration             shift and go to state 140
    data_type                      shift and go to state 142
    queue_enqueue                  shift and go to state 143
    queue_dequeue                  shift and go to state 144
    queue_clear                    shift and go to state 145
    queue_isEmpty                  shift and go to state 146
    stack_push                     shift and go to state 148
    stack_pop                      shift and go to state 149
    stack_clear                    shift and go to state 150
    stack_peek                     shift and go to state 151
    stack_isEmpty                  shift and go to state 152
    for_anidado                    shift and go to state 154
    for_each                       shift and go to state 155
    try_catch_simply               shift and go to state 156
    try_catch_finally              shift and go to state 157
    normal_while                   shift and go to state 158
    do_while                       shift and go to state 159
    assignation_key_value          shift and go to state 162
    for_simple                     shift and go to state 173

state 183

    (204) declaration_lambda -> ACTION SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION VARIABLE ARROW . LKEY block_code RKEY

    LKEY            shift and go to state 237


state 184

    (203) declaration_async -> PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT . TASK DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY

    TASK            shift and go to state 238


state 185

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT . LKEY all_block_code RKEY

    LKEY            shift and go to state 239


state 186

    (206) method_declaration -> METHOD IDENTIFIER . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 240


state 187

    (195) simple_method -> STATIC VOID METHOD LPARENT function_arguments RPARENT LKEY all_block_code RKEY .

    STATIC          reduce using rule 195 (simple_method -> STATIC VOID METHOD LPARENT function_arguments RPARENT LKEY all_block_code RKEY .)
    PUBLIC          reduce using rule 195 (simple_method -> STATIC VOID METHOD LPARENT function_arguments RPARENT LKEY all_block_code RKEY .)
    ACTION          reduce using rule 195 (simple_method -> STATIC VOID METHOD LPARENT function_arguments RPARENT LKEY all_block_code RKEY .)
    PRIVATE         reduce using rule 195 (simple_method -> STATIC VOID METHOD LPARENT function_arguments RPARENT LKEY all_block_code RKEY .)


state 188

    (27) all_block_code -> block_code all_block_code .

    RKEY            reduce using rule 27 (all_block_code -> block_code all_block_code .)
    RETURN          reduce using rule 27 (all_block_code -> block_code all_block_code .)


state 189

    (33) print_data -> PRINT LPARENT . STRING RPARENT DOTANDCOMMA
    (34) print_data -> PRINT LPARENT . VARIABLE RPARENT DOTANDCOMMA

    STRING          shift and go to state 241
    VARIABLE        shift and go to state 242


state 190

    (66) arithmetic_operation -> VARIABLE arithmetic_operator . arithmetic_operation
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation

    VARIABLE        shift and go to state 243
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164

    arithmetic_operation           shift and go to state 244
    value_numeric                  shift and go to state 245

state 191

    (68) logic_operation -> VARIABLE logic_operator . INTEGER

    INTEGER         shift and go to state 246


state 192

    (50) array_value_assign -> VARIABLE LBRACKET . VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (51) array_value_assign -> VARIABLE LBRACKET . INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (48) array_indexing -> VARIABLE LBRACKET . VARIABLE RBRACKET
    (49) array_indexing -> VARIABLE LBRACKET . INTEGER RBRACKET

    VARIABLE        shift and go to state 247
    INTEGER         shift and go to state 248


state 193

    (100) assignation_key_value -> VARIABLE ASSIGNATION . value
    (38) value -> . value_numeric
    (39) value -> . value_logic
    (40) value -> . value_string
    (41) value -> . read_data
    (42) value -> . METHOD
    (43) value -> . array
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (56) value_logic -> . BOOLTRUE
    (57) value_logic -> . BOOLFALSE
    (58) value_logic -> . logic_operation
    (52) value_string -> . STRING
    (53) value_string -> . CHAR
    (54) value_string -> . VARIABLE
    (55) value_string -> . concatenation
    (35) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (45) array -> . LBRACKET array_content RBRACKET
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (36) concatenation -> . STRING
    (37) concatenation -> . STRING PLUS concatenation

    METHOD          shift and go to state 255
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164
    BOOLTRUE        shift and go to state 258
    BOOLFALSE       shift and go to state 259
    STRING          shift and go to state 261
    CHAR            shift and go to state 262
    VARIABLE        shift and go to state 249
    READ            shift and go to state 264
    LBRACKET        shift and go to state 265

    value                          shift and go to state 250
    value_numeric                  shift and go to state 251
    value_logic                    shift and go to state 252
    value_string                   shift and go to state 253
    read_data                      shift and go to state 254
    array                          shift and go to state 256
    arithmetic_operation           shift and go to state 257
    logic_operation                shift and go to state 260
    concatenation                  shift and go to state 263

state 194

    (169) list_func_clear -> VARIABLE DOT . CLEAR LPARENT RPARENT DOTANDCOMMA
    (170) list_func_count -> VARIABLE DOT . COUNT LPARENT RPARENT DOTANDCOMMA
    (171) list_func_add -> VARIABLE DOT . ADD LPARENT STRING RPARENT DOTANDCOMMA
    (172) list_func_removeat -> VARIABLE DOT . REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (153) dict_func_put -> VARIABLE DOT . PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA
    (154) dict_func_remove -> VARIABLE DOT . REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA
    (189) queue_enqueue -> VARIABLE DOT . ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (190) queue_dequeue -> VARIABLE DOT . DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (191) queue_clear -> VARIABLE DOT . CLEAR LPARENT RPARENT DOTANDCOMMA
    (193) queue_isEmpty -> VARIABLE DOT . ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (179) stack_push -> VARIABLE DOT . PUSH LPARENT value RPARENT DOTANDCOMMA
    (180) stack_pop -> VARIABLE DOT . POP LPARENT RPARENT DOTANDCOMMA
    (181) stack_clear -> VARIABLE DOT . CLEAR LPARENT RPARENT DOTANDCOMMA
    (182) stack_peek -> VARIABLE DOT . PEEK LPARENT RPARENT DOTANDCOMMA
    (183) stack_isEmpty -> VARIABLE DOT . ISEMPTY LPARENT RPARENT DOTANDCOMMA

    CLEAR           shift and go to state 266
    COUNT           shift and go to state 267
    ADD             shift and go to state 268
    REMOVEAT        shift and go to state 269
    PUT             shift and go to state 270
    REMOVE          shift and go to state 271
    ENQUEUE         shift and go to state 272
    DEQUEUE         shift and go to state 273
    ISEMPTY         shift and go to state 274
    PUSH            shift and go to state 275
    POP             shift and go to state 276
    PEEK            shift and go to state 277


state 195

    (79) arithmetic_operator -> PLUS .

    VARIABLE        reduce using rule 79 (arithmetic_operator -> PLUS .)
    INTEGER         reduce using rule 79 (arithmetic_operator -> PLUS .)
    FLOAT_NUMBER    reduce using rule 79 (arithmetic_operator -> PLUS .)
    DECIMAL_NUMBER  reduce using rule 79 (arithmetic_operator -> PLUS .)


state 196

    (80) arithmetic_operator -> MINUS .

    VARIABLE        reduce using rule 80 (arithmetic_operator -> MINUS .)
    INTEGER         reduce using rule 80 (arithmetic_operator -> MINUS .)
    FLOAT_NUMBER    reduce using rule 80 (arithmetic_operator -> MINUS .)
    DECIMAL_NUMBER  reduce using rule 80 (arithmetic_operator -> MINUS .)


state 197

    (81) arithmetic_operator -> TIMES .

    VARIABLE        reduce using rule 81 (arithmetic_operator -> TIMES .)
    INTEGER         reduce using rule 81 (arithmetic_operator -> TIMES .)
    FLOAT_NUMBER    reduce using rule 81 (arithmetic_operator -> TIMES .)
    DECIMAL_NUMBER  reduce using rule 81 (arithmetic_operator -> TIMES .)


state 198

    (82) arithmetic_operator -> DIVIDE .

    VARIABLE        reduce using rule 82 (arithmetic_operator -> DIVIDE .)
    INTEGER         reduce using rule 82 (arithmetic_operator -> DIVIDE .)
    FLOAT_NUMBER    reduce using rule 82 (arithmetic_operator -> DIVIDE .)
    DECIMAL_NUMBER  reduce using rule 82 (arithmetic_operator -> DIVIDE .)


state 199

    (83) arithmetic_operator -> PERCENT .

    VARIABLE        reduce using rule 83 (arithmetic_operator -> PERCENT .)
    INTEGER         reduce using rule 83 (arithmetic_operator -> PERCENT .)
    FLOAT_NUMBER    reduce using rule 83 (arithmetic_operator -> PERCENT .)
    DECIMAL_NUMBER  reduce using rule 83 (arithmetic_operator -> PERCENT .)


state 200

    (69) logic_operator -> GREATER_THAN .

    INTEGER         reduce using rule 69 (logic_operator -> GREATER_THAN .)
    VARIABLE        reduce using rule 69 (logic_operator -> GREATER_THAN .)
    FLOAT_NUMBER    reduce using rule 69 (logic_operator -> GREATER_THAN .)
    DECIMAL_NUMBER  reduce using rule 69 (logic_operator -> GREATER_THAN .)


state 201

    (70) logic_operator -> SMALLER_THAN .

    INTEGER         reduce using rule 70 (logic_operator -> SMALLER_THAN .)
    VARIABLE        reduce using rule 70 (logic_operator -> SMALLER_THAN .)
    FLOAT_NUMBER    reduce using rule 70 (logic_operator -> SMALLER_THAN .)
    DECIMAL_NUMBER  reduce using rule 70 (logic_operator -> SMALLER_THAN .)


state 202

    (71) logic_operator -> EQUAL_COMPARATION .

    INTEGER         reduce using rule 71 (logic_operator -> EQUAL_COMPARATION .)
    VARIABLE        reduce using rule 71 (logic_operator -> EQUAL_COMPARATION .)
    FLOAT_NUMBER    reduce using rule 71 (logic_operator -> EQUAL_COMPARATION .)
    DECIMAL_NUMBER  reduce using rule 71 (logic_operator -> EQUAL_COMPARATION .)


state 203

    (72) logic_operator -> INEQUALITY .

    INTEGER         reduce using rule 72 (logic_operator -> INEQUALITY .)
    VARIABLE        reduce using rule 72 (logic_operator -> INEQUALITY .)
    FLOAT_NUMBER    reduce using rule 72 (logic_operator -> INEQUALITY .)
    DECIMAL_NUMBER  reduce using rule 72 (logic_operator -> INEQUALITY .)


state 204

    (73) logic_operator -> GREATER_THAN_OR_EQUAL .

    INTEGER         reduce using rule 73 (logic_operator -> GREATER_THAN_OR_EQUAL .)
    VARIABLE        reduce using rule 73 (logic_operator -> GREATER_THAN_OR_EQUAL .)
    FLOAT_NUMBER    reduce using rule 73 (logic_operator -> GREATER_THAN_OR_EQUAL .)
    DECIMAL_NUMBER  reduce using rule 73 (logic_operator -> GREATER_THAN_OR_EQUAL .)


state 205

    (74) logic_operator -> SMALLER_THAN_OR_EQUAL .

    INTEGER         reduce using rule 74 (logic_operator -> SMALLER_THAN_OR_EQUAL .)
    VARIABLE        reduce using rule 74 (logic_operator -> SMALLER_THAN_OR_EQUAL .)
    FLOAT_NUMBER    reduce using rule 74 (logic_operator -> SMALLER_THAN_OR_EQUAL .)
    DECIMAL_NUMBER  reduce using rule 74 (logic_operator -> SMALLER_THAN_OR_EQUAL .)


state 206

    (75) logic_operator -> LOGICAND .

    INTEGER         reduce using rule 75 (logic_operator -> LOGICAND .)
    VARIABLE        reduce using rule 75 (logic_operator -> LOGICAND .)
    FLOAT_NUMBER    reduce using rule 75 (logic_operator -> LOGICAND .)
    DECIMAL_NUMBER  reduce using rule 75 (logic_operator -> LOGICAND .)


state 207

    (76) logic_operator -> LOGICOR .

    INTEGER         reduce using rule 76 (logic_operator -> LOGICOR .)
    VARIABLE        reduce using rule 76 (logic_operator -> LOGICOR .)
    FLOAT_NUMBER    reduce using rule 76 (logic_operator -> LOGICOR .)
    DECIMAL_NUMBER  reduce using rule 76 (logic_operator -> LOGICOR .)


state 208

    (77) logic_operator -> LOGICNOT .

    INTEGER         reduce using rule 77 (logic_operator -> LOGICNOT .)
    VARIABLE        reduce using rule 77 (logic_operator -> LOGICNOT .)
    FLOAT_NUMBER    reduce using rule 77 (logic_operator -> LOGICNOT .)
    DECIMAL_NUMBER  reduce using rule 77 (logic_operator -> LOGICNOT .)


state 209

    (78) logic_operator -> LOGICXOR .

    INTEGER         reduce using rule 78 (logic_operator -> LOGICXOR .)
    VARIABLE        reduce using rule 78 (logic_operator -> LOGICXOR .)
    FLOAT_NUMBER    reduce using rule 78 (logic_operator -> LOGICXOR .)
    DECIMAL_NUMBER  reduce using rule 78 (logic_operator -> LOGICXOR .)


state 210

    (35) read_data -> READ LPARENT . RPARENT DOTANDCOMMA
    (101) assignation_key_value -> READ LPARENT . RPARENT

    RPARENT         shift and go to state 278


state 211

    (65) arithmetic_operation -> value_numeric arithmetic_operator . arithmetic_operation
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation

    VARIABLE        shift and go to state 243
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164

    value_numeric                  shift and go to state 245
    arithmetic_operation           shift and go to state 279

state 212

    (67) logic_operation -> value_numeric logic_operator . INTEGER

    INTEGER         shift and go to state 280


state 213

    (44) array_assignation -> array_type VARIABLE . ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA

    ASSIGNATION     shift and go to state 281


state 214

    (205) concurrent_method -> method_declaration CONCURRENT . LKEY concurrent_block RKEY

    LKEY            shift and go to state 282


state 215

    (184) queue_struct -> QUEUE SMALLER_THAN . data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET

    CHARTYPE        shift and go to state 30
    STRINGTYPE      shift and go to state 28
    FLOATTYPE       shift and go to state 31
    DECIMALTYPE     shift and go to state 32
    INTTYPE         shift and go to state 33
    BOOLTYPE        shift and go to state 34

    data_type                      shift and go to state 283
    array_type                     shift and go to state 35

state 216

    (94) variable_assignation -> data_type assignation_key_value . DOTANDCOMMA
    (102) assignation_key_value_multiple -> assignation_key_value .
    (103) assignation_key_value_multiple -> assignation_key_value . COMMA assignation_key_value_multiple

  ! shift/reduce conflict for DOTANDCOMMA resolved as shift
    DOTANDCOMMA     shift and go to state 284
    COMMA           shift and go to state 285

  ! DOTANDCOMMA     [ reduce using rule 102 (assignation_key_value_multiple -> assignation_key_value .) ]


state 217

    (96) variable_assignation -> data_type assignation_key_value_multiple . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 286


state 218

    (98) late_initialization -> data_type VARIABLE . DOTANDCOMMA
    (100) assignation_key_value -> VARIABLE . ASSIGNATION value

    DOTANDCOMMA     shift and go to state 287
    ASSIGNATION     shift and go to state 193


state 219

    (101) assignation_key_value -> READ . LPARENT RPARENT

    LPARENT         shift and go to state 288


state 220

    (173) stack_struct -> STACK VARIABLE . ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA

    ASSIGNATION     shift and go to state 289


state 221

    (137) block_if -> IF LPARENT . logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation

    VARIABLE        shift and go to state 292
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164

    logic_operation                shift and go to state 290
    value_numeric                  shift and go to state 291
    arithmetic_operation           shift and go to state 257

state 222

    (89) constant_assignation -> access_modifiers CONST . data_type assignation_key_value DOTANDCOMMA
    (91) constant_assignation -> access_modifiers CONST . data_type assignation_key_value_multiple DOTANDCOMMA
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET

    CHARTYPE        shift and go to state 30
    STRINGTYPE      shift and go to state 28
    FLOATTYPE       shift and go to state 31
    DECIMALTYPE     shift and go to state 32
    INTTYPE         shift and go to state 33
    BOOLTYPE        shift and go to state 34

    data_type                      shift and go to state 293
    array_type                     shift and go to state 35

state 223

    (93) variable_assignation -> access_modifiers data_type . assignation_key_value DOTANDCOMMA
    (95) variable_assignation -> access_modifiers data_type . assignation_key_value_multiple DOTANDCOMMA
    (97) late_initialization -> access_modifiers data_type . VARIABLE DOTANDCOMMA
    (100) assignation_key_value -> . VARIABLE ASSIGNATION value
    (101) assignation_key_value -> . READ LPARENT RPARENT
    (102) assignation_key_value_multiple -> . assignation_key_value
    (103) assignation_key_value_multiple -> . assignation_key_value COMMA assignation_key_value_multiple

    VARIABLE        shift and go to state 296
    READ            shift and go to state 219

    assignation_key_value          shift and go to state 294
    assignation_key_value_multiple shift and go to state 295

state 224

    (90) constant_assignation -> CONST data_type . assignation_key_value DOTANDCOMMA
    (92) constant_assignation -> CONST data_type . assignation_key_value_multiple DOTANDCOMMA
    (100) assignation_key_value -> . VARIABLE ASSIGNATION value
    (101) assignation_key_value -> . READ LPARENT RPARENT
    (102) assignation_key_value_multiple -> . assignation_key_value
    (103) assignation_key_value_multiple -> . assignation_key_value COMMA assignation_key_value_multiple

    VARIABLE        shift and go to state 299
    READ            shift and go to state 219

    assignation_key_value          shift and go to state 297
    assignation_key_value_multiple shift and go to state 298

state 225

    (99) late_initialization -> assignation_key_value DOTANDCOMMA .

    PRINT           reduce using rule 99 (late_initialization -> assignation_key_value DOTANDCOMMA .)
    READ            reduce using rule 99 (late_initialization -> assignation_key_value DOTANDCOMMA .)
    VARIABLE        reduce using rule 99 (late_initialization -> assignation_key_value DOTANDCOMMA .)
    QUEUE           reduce using rule 99 (late_initialization -> assignation_key_value DOTANDCOMMA .)
    STACK           reduce using rule 99 (late_initialization -> assignation_key_value DOTANDCOMMA .)
    IF              reduce using rule 99 (late_initialization -> assignation_key_value DOTANDCOMMA .)
    CONST           reduce using rule 99 (late_initialization -> assignation_key_value DOTANDCOMMA .)
    INTEGER         reduce using rule 99 (late_initialization -> assignation_key_value DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 99 (late_initialization -> assignation_key_value DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 99 (late_initialization -> assignation_key_value DOTANDCOMMA .)
    CHARTYPE        reduce using rule 99 (late_initialization -> assignation_key_value DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 99 (late_initialization -> assignation_key_value DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 99 (late_initialization -> assignation_key_value DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 99 (late_initialization -> assignation_key_value DOTANDCOMMA .)
    INTTYPE         reduce using rule 99 (late_initialization -> assignation_key_value DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 99 (late_initialization -> assignation_key_value DOTANDCOMMA .)
    LIST            reduce using rule 99 (late_initialization -> assignation_key_value DOTANDCOMMA .)
    DICTIONARY      reduce using rule 99 (late_initialization -> assignation_key_value DOTANDCOMMA .)
    METHOD          reduce using rule 99 (late_initialization -> assignation_key_value DOTANDCOMMA .)
    FOR             reduce using rule 99 (late_initialization -> assignation_key_value DOTANDCOMMA .)
    FOREACH         reduce using rule 99 (late_initialization -> assignation_key_value DOTANDCOMMA .)
    TRY             reduce using rule 99 (late_initialization -> assignation_key_value DOTANDCOMMA .)
    WHILE           reduce using rule 99 (late_initialization -> assignation_key_value DOTANDCOMMA .)
    DO              reduce using rule 99 (late_initialization -> assignation_key_value DOTANDCOMMA .)
    PUBLIC          reduce using rule 99 (late_initialization -> assignation_key_value DOTANDCOMMA .)
    PRIVATE         reduce using rule 99 (late_initialization -> assignation_key_value DOTANDCOMMA .)
    RKEY            reduce using rule 99 (late_initialization -> assignation_key_value DOTANDCOMMA .)
    RETURN          reduce using rule 99 (late_initialization -> assignation_key_value DOTANDCOMMA .)


state 226

    (157) list_empty -> LIST SMALLER_THAN . STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (158) list_empty -> LIST SMALLER_THAN . INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> LIST SMALLER_THAN . STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (160) list_full -> LIST SMALLER_THAN . INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    STRINGTYPE      shift and go to state 300
    INTTYPE         shift and go to state 301


state 227

    (144) dict_empty -> DICTIONARY SMALLER_THAN . GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (145) dict_full -> DICTIONARY SMALLER_THAN . GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA

    GREATER_THAN    shift and go to state 302


state 228

    (126) for_anidado -> FOR LPARENT . assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY
    (127) for_anidado -> FOR LPARENT . assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY
    (123) for_simple -> FOR LPARENT . assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (124) for_simple -> FOR LPARENT . assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (104) assignation_with_datatype -> . data_type assignation_key_value DOTANDCOMMA
    (105) assignation_with_datatype -> . data_type assignation_key_value COMMA assignation_with_datatype
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET

    CHARTYPE        shift and go to state 30
    STRINGTYPE      shift and go to state 28
    FLOATTYPE       shift and go to state 31
    DECIMALTYPE     shift and go to state 32
    INTTYPE         shift and go to state 33
    BOOLTYPE        shift and go to state 34

    assignation_with_datatype      shift and go to state 303
    data_type                      shift and go to state 304
    array_type                     shift and go to state 35

state 229

    (128) for_each -> FOREACH LPARENT . data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET

    CHARTYPE        shift and go to state 30
    STRINGTYPE      shift and go to state 28
    FLOATTYPE       shift and go to state 31
    DECIMALTYPE     shift and go to state 32
    INTTYPE         shift and go to state 33
    BOOLTYPE        shift and go to state 34

    data_type                      shift and go to state 305
    array_type                     shift and go to state 35

state 230

    (131) try_catch_simply -> TRY LKEY . all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY
    (132) try_catch_finally -> TRY LKEY . all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY
    (26) all_block_code -> . block_code
    (27) all_block_code -> . block_code all_block_code
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . read_data
    (8) block_code -> . arithmetic_operation
    (9) block_code -> . logic_operation
    (10) block_code -> . array_assignation
    (11) block_code -> . array_value_assign
    (12) block_code -> . array_indexing
    (13) block_code -> . lists
    (14) block_code -> . functions_list
    (15) block_code -> . dict_estruct
    (16) block_code -> . functions_dict
    (17) block_code -> . concurrent_method
    (18) block_code -> . queue_struct
    (19) block_code -> . functions_queue
    (20) block_code -> . stack_struct
    (21) block_code -> . functions_stack
    (22) block_code -> . block_if
    (23) block_code -> . block_for
    (24) block_code -> . block_try_catch
    (25) block_code -> . block_while
    (86) def_const_or_var -> . constant_assignation
    (87) def_const_or_var -> . variable_assignation
    (88) def_const_or_var -> . late_initialization
    (33) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (34) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (35) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (44) array_assignation -> . array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA
    (50) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (51) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (48) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (49) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (155) lists -> . list_empty
    (156) lists -> . list_full
    (165) functions_list -> . list_func_clear
    (166) functions_list -> . list_func_count
    (167) functions_list -> . list_func_add
    (168) functions_list -> . list_func_removeat
    (142) dict_estruct -> . dict_empty
    (143) dict_estruct -> . dict_full
    (151) functions_dict -> . dict_func_put
    (152) functions_dict -> . dict_func_remove
    (205) concurrent_method -> . method_declaration CONCURRENT LKEY concurrent_block RKEY
    (184) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (185) functions_queue -> . queue_enqueue
    (186) functions_queue -> . queue_dequeue
    (187) functions_queue -> . queue_clear
    (188) functions_queue -> . queue_isEmpty
    (173) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (174) functions_stack -> . stack_push
    (175) functions_stack -> . stack_pop
    (176) functions_stack -> . stack_clear
    (177) functions_stack -> . stack_peek
    (178) functions_stack -> . stack_isEmpty
    (137) block_if -> . IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if
    (121) block_for -> . for_anidado
    (122) block_for -> . for_each
    (129) block_try_catch -> . try_catch_simply
    (130) block_try_catch -> . try_catch_finally
    (133) block_while -> . normal_while
    (134) block_while -> . do_while
    (89) constant_assignation -> . access_modifiers CONST data_type assignation_key_value DOTANDCOMMA
    (90) constant_assignation -> . CONST data_type assignation_key_value DOTANDCOMMA
    (91) constant_assignation -> . access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (92) constant_assignation -> . CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (93) variable_assignation -> . access_modifiers data_type assignation_key_value DOTANDCOMMA
    (94) variable_assignation -> . data_type assignation_key_value DOTANDCOMMA
    (95) variable_assignation -> . access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA
    (96) variable_assignation -> . data_type assignation_key_value_multiple DOTANDCOMMA
    (97) late_initialization -> . access_modifiers data_type VARIABLE DOTANDCOMMA
    (98) late_initialization -> . data_type VARIABLE DOTANDCOMMA
    (99) late_initialization -> . assignation_key_value DOTANDCOMMA
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET
    (157) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (158) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (160) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (169) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (170) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (171) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (172) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (144) dict_empty -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (145) dict_full -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA
    (153) dict_func_put -> . VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA
    (154) dict_func_remove -> . VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA
    (206) method_declaration -> . METHOD IDENTIFIER LPARENT RPARENT DOTANDCOMMA
    (189) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (190) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (191) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (193) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (179) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (180) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (181) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (182) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (183) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (125) for_anidado -> . for_simple
    (126) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY
    (127) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY
    (128) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (131) try_catch_simply -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY
    (132) try_catch_finally -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY
    (135) normal_while -> . WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY
    (136) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT
    (84) access_modifiers -> . PUBLIC
    (85) access_modifiers -> . PRIVATE
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (100) assignation_key_value -> . VARIABLE ASSIGNATION value
    (101) assignation_key_value -> . READ LPARENT RPARENT
    (123) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (124) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    PRINT           shift and go to state 124
    READ            shift and go to state 126
    VARIABLE        shift and go to state 125
    QUEUE           shift and go to state 141
    STACK           shift and go to state 147
    IF              shift and go to state 153
    CONST           shift and go to state 161
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164
    CHARTYPE        shift and go to state 165
    STRINGTYPE      shift and go to state 166
    FLOATTYPE       shift and go to state 167
    DECIMALTYPE     shift and go to state 168
    INTTYPE         shift and go to state 169
    BOOLTYPE        shift and go to state 170
    LIST            shift and go to state 171
    DICTIONARY      shift and go to state 172
    METHOD          shift and go to state 97
    FOR             shift and go to state 174
    FOREACH         shift and go to state 175
    TRY             shift and go to state 176
    WHILE           shift and go to state 177
    DO              shift and go to state 178
    PUBLIC          shift and go to state 179
    PRIVATE         shift and go to state 20

    all_block_code                 shift and go to state 306
    block_code                     shift and go to state 99
    def_const_or_var               shift and go to state 100
    print_data                     shift and go to state 101
    read_data                      shift and go to state 102
    arithmetic_operation           shift and go to state 103
    logic_operation                shift and go to state 104
    array_assignation              shift and go to state 105
    array_value_assign             shift and go to state 106
    array_indexing                 shift and go to state 107
    lists                          shift and go to state 108
    functions_list                 shift and go to state 109
    dict_estruct                   shift and go to state 110
    functions_dict                 shift and go to state 111
    concurrent_method              shift and go to state 112
    queue_struct                   shift and go to state 113
    functions_queue                shift and go to state 114
    stack_struct                   shift and go to state 115
    functions_stack                shift and go to state 116
    block_if                       shift and go to state 117
    block_for                      shift and go to state 118
    block_try_catch                shift and go to state 119
    block_while                    shift and go to state 120
    constant_assignation           shift and go to state 121
    variable_assignation           shift and go to state 122
    late_initialization            shift and go to state 123
    value_numeric                  shift and go to state 127
    array_type                     shift and go to state 129
    list_empty                     shift and go to state 130
    list_full                      shift and go to state 131
    list_func_clear                shift and go to state 132
    list_func_count                shift and go to state 133
    list_func_add                  shift and go to state 134
    list_func_removeat             shift and go to state 135
    dict_empty                     shift and go to state 136
    dict_full                      shift and go to state 137
    dict_func_put                  shift and go to state 138
    dict_func_remove               shift and go to state 139
    method_declaration             shift and go to state 140
    data_type                      shift and go to state 142
    queue_enqueue                  shift and go to state 143
    queue_dequeue                  shift and go to state 144
    queue_clear                    shift and go to state 145
    queue_isEmpty                  shift and go to state 146
    stack_push                     shift and go to state 148
    stack_pop                      shift and go to state 149
    stack_clear                    shift and go to state 150
    stack_peek                     shift and go to state 151
    stack_isEmpty                  shift and go to state 152
    for_anidado                    shift and go to state 154
    for_each                       shift and go to state 155
    try_catch_simply               shift and go to state 156
    try_catch_finally              shift and go to state 157
    normal_while                   shift and go to state 158
    do_while                       shift and go to state 159
    access_modifiers               shift and go to state 160
    assignation_key_value          shift and go to state 162
    for_simple                     shift and go to state 173

state 231

    (135) normal_while -> WHILE LPARENT . logic_operation RPARENT LKEY all_block_code RKEY
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation

    VARIABLE        shift and go to state 292
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164

    logic_operation                shift and go to state 307
    value_numeric                  shift and go to state 291
    arithmetic_operation           shift and go to state 257

state 232

    (136) do_while -> DO LKEY . all_block_code RKEY WHILE LPARENT logic_operation RPARENT
    (26) all_block_code -> . block_code
    (27) all_block_code -> . block_code all_block_code
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . read_data
    (8) block_code -> . arithmetic_operation
    (9) block_code -> . logic_operation
    (10) block_code -> . array_assignation
    (11) block_code -> . array_value_assign
    (12) block_code -> . array_indexing
    (13) block_code -> . lists
    (14) block_code -> . functions_list
    (15) block_code -> . dict_estruct
    (16) block_code -> . functions_dict
    (17) block_code -> . concurrent_method
    (18) block_code -> . queue_struct
    (19) block_code -> . functions_queue
    (20) block_code -> . stack_struct
    (21) block_code -> . functions_stack
    (22) block_code -> . block_if
    (23) block_code -> . block_for
    (24) block_code -> . block_try_catch
    (25) block_code -> . block_while
    (86) def_const_or_var -> . constant_assignation
    (87) def_const_or_var -> . variable_assignation
    (88) def_const_or_var -> . late_initialization
    (33) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (34) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (35) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (44) array_assignation -> . array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA
    (50) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (51) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (48) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (49) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (155) lists -> . list_empty
    (156) lists -> . list_full
    (165) functions_list -> . list_func_clear
    (166) functions_list -> . list_func_count
    (167) functions_list -> . list_func_add
    (168) functions_list -> . list_func_removeat
    (142) dict_estruct -> . dict_empty
    (143) dict_estruct -> . dict_full
    (151) functions_dict -> . dict_func_put
    (152) functions_dict -> . dict_func_remove
    (205) concurrent_method -> . method_declaration CONCURRENT LKEY concurrent_block RKEY
    (184) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (185) functions_queue -> . queue_enqueue
    (186) functions_queue -> . queue_dequeue
    (187) functions_queue -> . queue_clear
    (188) functions_queue -> . queue_isEmpty
    (173) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (174) functions_stack -> . stack_push
    (175) functions_stack -> . stack_pop
    (176) functions_stack -> . stack_clear
    (177) functions_stack -> . stack_peek
    (178) functions_stack -> . stack_isEmpty
    (137) block_if -> . IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if
    (121) block_for -> . for_anidado
    (122) block_for -> . for_each
    (129) block_try_catch -> . try_catch_simply
    (130) block_try_catch -> . try_catch_finally
    (133) block_while -> . normal_while
    (134) block_while -> . do_while
    (89) constant_assignation -> . access_modifiers CONST data_type assignation_key_value DOTANDCOMMA
    (90) constant_assignation -> . CONST data_type assignation_key_value DOTANDCOMMA
    (91) constant_assignation -> . access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (92) constant_assignation -> . CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (93) variable_assignation -> . access_modifiers data_type assignation_key_value DOTANDCOMMA
    (94) variable_assignation -> . data_type assignation_key_value DOTANDCOMMA
    (95) variable_assignation -> . access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA
    (96) variable_assignation -> . data_type assignation_key_value_multiple DOTANDCOMMA
    (97) late_initialization -> . access_modifiers data_type VARIABLE DOTANDCOMMA
    (98) late_initialization -> . data_type VARIABLE DOTANDCOMMA
    (99) late_initialization -> . assignation_key_value DOTANDCOMMA
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET
    (157) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (158) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (160) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (169) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (170) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (171) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (172) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (144) dict_empty -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (145) dict_full -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA
    (153) dict_func_put -> . VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA
    (154) dict_func_remove -> . VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA
    (206) method_declaration -> . METHOD IDENTIFIER LPARENT RPARENT DOTANDCOMMA
    (189) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (190) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (191) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (193) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (179) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (180) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (181) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (182) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (183) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (125) for_anidado -> . for_simple
    (126) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY
    (127) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY
    (128) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (131) try_catch_simply -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY
    (132) try_catch_finally -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY
    (135) normal_while -> . WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY
    (136) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT
    (84) access_modifiers -> . PUBLIC
    (85) access_modifiers -> . PRIVATE
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (100) assignation_key_value -> . VARIABLE ASSIGNATION value
    (101) assignation_key_value -> . READ LPARENT RPARENT
    (123) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (124) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    PRINT           shift and go to state 124
    READ            shift and go to state 126
    VARIABLE        shift and go to state 125
    QUEUE           shift and go to state 141
    STACK           shift and go to state 147
    IF              shift and go to state 153
    CONST           shift and go to state 161
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164
    CHARTYPE        shift and go to state 165
    STRINGTYPE      shift and go to state 166
    FLOATTYPE       shift and go to state 167
    DECIMALTYPE     shift and go to state 168
    INTTYPE         shift and go to state 169
    BOOLTYPE        shift and go to state 170
    LIST            shift and go to state 171
    DICTIONARY      shift and go to state 172
    METHOD          shift and go to state 97
    FOR             shift and go to state 174
    FOREACH         shift and go to state 175
    TRY             shift and go to state 176
    WHILE           shift and go to state 177
    DO              shift and go to state 178
    PUBLIC          shift and go to state 179
    PRIVATE         shift and go to state 20

    all_block_code                 shift and go to state 308
    logic_operation                shift and go to state 104
    block_code                     shift and go to state 99
    def_const_or_var               shift and go to state 100
    print_data                     shift and go to state 101
    read_data                      shift and go to state 102
    arithmetic_operation           shift and go to state 103
    array_assignation              shift and go to state 105
    array_value_assign             shift and go to state 106
    array_indexing                 shift and go to state 107
    lists                          shift and go to state 108
    functions_list                 shift and go to state 109
    dict_estruct                   shift and go to state 110
    functions_dict                 shift and go to state 111
    concurrent_method              shift and go to state 112
    queue_struct                   shift and go to state 113
    functions_queue                shift and go to state 114
    stack_struct                   shift and go to state 115
    functions_stack                shift and go to state 116
    block_if                       shift and go to state 117
    block_for                      shift and go to state 118
    block_try_catch                shift and go to state 119
    block_while                    shift and go to state 120
    constant_assignation           shift and go to state 121
    variable_assignation           shift and go to state 122
    late_initialization            shift and go to state 123
    value_numeric                  shift and go to state 127
    array_type                     shift and go to state 129
    list_empty                     shift and go to state 130
    list_full                      shift and go to state 131
    list_func_clear                shift and go to state 132
    list_func_count                shift and go to state 133
    list_func_add                  shift and go to state 134
    list_func_removeat             shift and go to state 135
    dict_empty                     shift and go to state 136
    dict_full                      shift and go to state 137
    dict_func_put                  shift and go to state 138
    dict_func_remove               shift and go to state 139
    method_declaration             shift and go to state 140
    data_type                      shift and go to state 142
    queue_enqueue                  shift and go to state 143
    queue_dequeue                  shift and go to state 144
    queue_clear                    shift and go to state 145
    queue_isEmpty                  shift and go to state 146
    stack_push                     shift and go to state 148
    stack_pop                      shift and go to state 149
    stack_clear                    shift and go to state 150
    stack_peek                     shift and go to state 151
    stack_isEmpty                  shift and go to state 152
    for_anidado                    shift and go to state 154
    for_each                       shift and go to state 155
    try_catch_simply               shift and go to state 156
    try_catch_finally              shift and go to state 157
    normal_while                   shift and go to state 158
    do_while                       shift and go to state 159
    access_modifiers               shift and go to state 160
    assignation_key_value          shift and go to state 162
    for_simple                     shift and go to state 173

state 233

    (194) simple_method -> STATIC data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return . RKEY

    RKEY            shift and go to state 309


state 234

    (198) function_return -> RETURN . value DOTANDCOMMA
    (38) value -> . value_numeric
    (39) value -> . value_logic
    (40) value -> . value_string
    (41) value -> . read_data
    (42) value -> . METHOD
    (43) value -> . array
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (56) value_logic -> . BOOLTRUE
    (57) value_logic -> . BOOLFALSE
    (58) value_logic -> . logic_operation
    (52) value_string -> . STRING
    (53) value_string -> . CHAR
    (54) value_string -> . VARIABLE
    (55) value_string -> . concatenation
    (35) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (45) array -> . LBRACKET array_content RBRACKET
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (36) concatenation -> . STRING
    (37) concatenation -> . STRING PLUS concatenation

    METHOD          shift and go to state 255
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164
    BOOLTRUE        shift and go to state 258
    BOOLFALSE       shift and go to state 259
    STRING          shift and go to state 261
    CHAR            shift and go to state 262
    VARIABLE        shift and go to state 249
    READ            shift and go to state 264
    LBRACKET        shift and go to state 265

    value                          shift and go to state 310
    value_numeric                  shift and go to state 251
    value_logic                    shift and go to state 252
    value_string                   shift and go to state 253
    read_data                      shift and go to state 254
    array                          shift and go to state 256
    arithmetic_operation           shift and go to state 257
    logic_operation                shift and go to state 260
    concatenation                  shift and go to state 263

state 235

    (196) simple_method -> access_modifiers STATIC data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code . function_return RKEY
    (198) function_return -> . RETURN value DOTANDCOMMA

    RETURN          shift and go to state 234

    function_return                shift and go to state 311

state 236

    (197) simple_method -> access_modifiers STATIC VOID METHOD LPARENT function_arguments RPARENT LKEY all_block_code . RKEY

    RKEY            shift and go to state 312


state 237

    (204) declaration_lambda -> ACTION SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION VARIABLE ARROW LKEY . block_code RKEY
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . read_data
    (8) block_code -> . arithmetic_operation
    (9) block_code -> . logic_operation
    (10) block_code -> . array_assignation
    (11) block_code -> . array_value_assign
    (12) block_code -> . array_indexing
    (13) block_code -> . lists
    (14) block_code -> . functions_list
    (15) block_code -> . dict_estruct
    (16) block_code -> . functions_dict
    (17) block_code -> . concurrent_method
    (18) block_code -> . queue_struct
    (19) block_code -> . functions_queue
    (20) block_code -> . stack_struct
    (21) block_code -> . functions_stack
    (22) block_code -> . block_if
    (23) block_code -> . block_for
    (24) block_code -> . block_try_catch
    (25) block_code -> . block_while
    (86) def_const_or_var -> . constant_assignation
    (87) def_const_or_var -> . variable_assignation
    (88) def_const_or_var -> . late_initialization
    (33) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (34) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (35) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (44) array_assignation -> . array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA
    (50) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (51) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (48) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (49) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (155) lists -> . list_empty
    (156) lists -> . list_full
    (165) functions_list -> . list_func_clear
    (166) functions_list -> . list_func_count
    (167) functions_list -> . list_func_add
    (168) functions_list -> . list_func_removeat
    (142) dict_estruct -> . dict_empty
    (143) dict_estruct -> . dict_full
    (151) functions_dict -> . dict_func_put
    (152) functions_dict -> . dict_func_remove
    (205) concurrent_method -> . method_declaration CONCURRENT LKEY concurrent_block RKEY
    (184) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (185) functions_queue -> . queue_enqueue
    (186) functions_queue -> . queue_dequeue
    (187) functions_queue -> . queue_clear
    (188) functions_queue -> . queue_isEmpty
    (173) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (174) functions_stack -> . stack_push
    (175) functions_stack -> . stack_pop
    (176) functions_stack -> . stack_clear
    (177) functions_stack -> . stack_peek
    (178) functions_stack -> . stack_isEmpty
    (137) block_if -> . IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if
    (121) block_for -> . for_anidado
    (122) block_for -> . for_each
    (129) block_try_catch -> . try_catch_simply
    (130) block_try_catch -> . try_catch_finally
    (133) block_while -> . normal_while
    (134) block_while -> . do_while
    (89) constant_assignation -> . access_modifiers CONST data_type assignation_key_value DOTANDCOMMA
    (90) constant_assignation -> . CONST data_type assignation_key_value DOTANDCOMMA
    (91) constant_assignation -> . access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (92) constant_assignation -> . CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (93) variable_assignation -> . access_modifiers data_type assignation_key_value DOTANDCOMMA
    (94) variable_assignation -> . data_type assignation_key_value DOTANDCOMMA
    (95) variable_assignation -> . access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA
    (96) variable_assignation -> . data_type assignation_key_value_multiple DOTANDCOMMA
    (97) late_initialization -> . access_modifiers data_type VARIABLE DOTANDCOMMA
    (98) late_initialization -> . data_type VARIABLE DOTANDCOMMA
    (99) late_initialization -> . assignation_key_value DOTANDCOMMA
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET
    (157) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (158) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (160) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (169) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (170) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (171) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (172) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (144) dict_empty -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (145) dict_full -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA
    (153) dict_func_put -> . VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA
    (154) dict_func_remove -> . VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA
    (206) method_declaration -> . METHOD IDENTIFIER LPARENT RPARENT DOTANDCOMMA
    (189) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (190) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (191) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (193) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (179) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (180) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (181) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (182) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (183) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (125) for_anidado -> . for_simple
    (126) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY
    (127) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY
    (128) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (131) try_catch_simply -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY
    (132) try_catch_finally -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY
    (135) normal_while -> . WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY
    (136) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT
    (84) access_modifiers -> . PUBLIC
    (85) access_modifiers -> . PRIVATE
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (100) assignation_key_value -> . VARIABLE ASSIGNATION value
    (101) assignation_key_value -> . READ LPARENT RPARENT
    (123) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (124) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    PRINT           shift and go to state 124
    READ            shift and go to state 126
    VARIABLE        shift and go to state 125
    QUEUE           shift and go to state 141
    STACK           shift and go to state 147
    IF              shift and go to state 153
    CONST           shift and go to state 161
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164
    CHARTYPE        shift and go to state 165
    STRINGTYPE      shift and go to state 166
    FLOATTYPE       shift and go to state 167
    DECIMALTYPE     shift and go to state 168
    INTTYPE         shift and go to state 169
    BOOLTYPE        shift and go to state 170
    LIST            shift and go to state 171
    DICTIONARY      shift and go to state 172
    METHOD          shift and go to state 97
    FOR             shift and go to state 174
    FOREACH         shift and go to state 175
    TRY             shift and go to state 176
    WHILE           shift and go to state 177
    DO              shift and go to state 178
    PUBLIC          shift and go to state 179
    PRIVATE         shift and go to state 20

    block_code                     shift and go to state 313
    def_const_or_var               shift and go to state 100
    print_data                     shift and go to state 101
    read_data                      shift and go to state 102
    arithmetic_operation           shift and go to state 103
    logic_operation                shift and go to state 104
    array_assignation              shift and go to state 105
    array_value_assign             shift and go to state 106
    array_indexing                 shift and go to state 107
    lists                          shift and go to state 108
    functions_list                 shift and go to state 109
    dict_estruct                   shift and go to state 110
    functions_dict                 shift and go to state 111
    concurrent_method              shift and go to state 112
    queue_struct                   shift and go to state 113
    functions_queue                shift and go to state 114
    stack_struct                   shift and go to state 115
    functions_stack                shift and go to state 116
    block_if                       shift and go to state 117
    block_for                      shift and go to state 118
    block_try_catch                shift and go to state 119
    block_while                    shift and go to state 120
    constant_assignation           shift and go to state 121
    variable_assignation           shift and go to state 122
    late_initialization            shift and go to state 123
    value_numeric                  shift and go to state 127
    array_type                     shift and go to state 129
    list_empty                     shift and go to state 130
    list_full                      shift and go to state 131
    list_func_clear                shift and go to state 132
    list_func_count                shift and go to state 133
    list_func_add                  shift and go to state 134
    list_func_removeat             shift and go to state 135
    dict_empty                     shift and go to state 136
    dict_full                      shift and go to state 137
    dict_func_put                  shift and go to state 138
    dict_func_remove               shift and go to state 139
    method_declaration             shift and go to state 140
    data_type                      shift and go to state 142
    queue_enqueue                  shift and go to state 143
    queue_dequeue                  shift and go to state 144
    queue_clear                    shift and go to state 145
    queue_isEmpty                  shift and go to state 146
    stack_push                     shift and go to state 148
    stack_pop                      shift and go to state 149
    stack_clear                    shift and go to state 150
    stack_peek                     shift and go to state 151
    stack_isEmpty                  shift and go to state 152
    for_anidado                    shift and go to state 154
    for_each                       shift and go to state 155
    try_catch_simply               shift and go to state 156
    try_catch_finally              shift and go to state 157
    normal_while                   shift and go to state 158
    do_while                       shift and go to state 159
    access_modifiers               shift and go to state 160
    assignation_key_value          shift and go to state 162
    for_simple                     shift and go to state 173

state 238

    (203) declaration_async -> PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT TASK . DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY

    DOT             shift and go to state 314


state 239

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY . all_block_code RKEY
    (26) all_block_code -> . block_code
    (27) all_block_code -> . block_code all_block_code
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . read_data
    (8) block_code -> . arithmetic_operation
    (9) block_code -> . logic_operation
    (10) block_code -> . array_assignation
    (11) block_code -> . array_value_assign
    (12) block_code -> . array_indexing
    (13) block_code -> . lists
    (14) block_code -> . functions_list
    (15) block_code -> . dict_estruct
    (16) block_code -> . functions_dict
    (17) block_code -> . concurrent_method
    (18) block_code -> . queue_struct
    (19) block_code -> . functions_queue
    (20) block_code -> . stack_struct
    (21) block_code -> . functions_stack
    (22) block_code -> . block_if
    (23) block_code -> . block_for
    (24) block_code -> . block_try_catch
    (25) block_code -> . block_while
    (86) def_const_or_var -> . constant_assignation
    (87) def_const_or_var -> . variable_assignation
    (88) def_const_or_var -> . late_initialization
    (33) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (34) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (35) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (44) array_assignation -> . array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA
    (50) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (51) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (48) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (49) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (155) lists -> . list_empty
    (156) lists -> . list_full
    (165) functions_list -> . list_func_clear
    (166) functions_list -> . list_func_count
    (167) functions_list -> . list_func_add
    (168) functions_list -> . list_func_removeat
    (142) dict_estruct -> . dict_empty
    (143) dict_estruct -> . dict_full
    (151) functions_dict -> . dict_func_put
    (152) functions_dict -> . dict_func_remove
    (205) concurrent_method -> . method_declaration CONCURRENT LKEY concurrent_block RKEY
    (184) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (185) functions_queue -> . queue_enqueue
    (186) functions_queue -> . queue_dequeue
    (187) functions_queue -> . queue_clear
    (188) functions_queue -> . queue_isEmpty
    (173) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (174) functions_stack -> . stack_push
    (175) functions_stack -> . stack_pop
    (176) functions_stack -> . stack_clear
    (177) functions_stack -> . stack_peek
    (178) functions_stack -> . stack_isEmpty
    (137) block_if -> . IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if
    (121) block_for -> . for_anidado
    (122) block_for -> . for_each
    (129) block_try_catch -> . try_catch_simply
    (130) block_try_catch -> . try_catch_finally
    (133) block_while -> . normal_while
    (134) block_while -> . do_while
    (89) constant_assignation -> . access_modifiers CONST data_type assignation_key_value DOTANDCOMMA
    (90) constant_assignation -> . CONST data_type assignation_key_value DOTANDCOMMA
    (91) constant_assignation -> . access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (92) constant_assignation -> . CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (93) variable_assignation -> . access_modifiers data_type assignation_key_value DOTANDCOMMA
    (94) variable_assignation -> . data_type assignation_key_value DOTANDCOMMA
    (95) variable_assignation -> . access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA
    (96) variable_assignation -> . data_type assignation_key_value_multiple DOTANDCOMMA
    (97) late_initialization -> . access_modifiers data_type VARIABLE DOTANDCOMMA
    (98) late_initialization -> . data_type VARIABLE DOTANDCOMMA
    (99) late_initialization -> . assignation_key_value DOTANDCOMMA
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET
    (157) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (158) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (160) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (169) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (170) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (171) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (172) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (144) dict_empty -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (145) dict_full -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA
    (153) dict_func_put -> . VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA
    (154) dict_func_remove -> . VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA
    (206) method_declaration -> . METHOD IDENTIFIER LPARENT RPARENT DOTANDCOMMA
    (189) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (190) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (191) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (193) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (179) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (180) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (181) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (182) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (183) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (125) for_anidado -> . for_simple
    (126) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY
    (127) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY
    (128) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (131) try_catch_simply -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY
    (132) try_catch_finally -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY
    (135) normal_while -> . WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY
    (136) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT
    (84) access_modifiers -> . PUBLIC
    (85) access_modifiers -> . PRIVATE
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (100) assignation_key_value -> . VARIABLE ASSIGNATION value
    (101) assignation_key_value -> . READ LPARENT RPARENT
    (123) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (124) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    PRINT           shift and go to state 124
    READ            shift and go to state 126
    VARIABLE        shift and go to state 125
    QUEUE           shift and go to state 141
    STACK           shift and go to state 147
    IF              shift and go to state 153
    CONST           shift and go to state 161
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164
    CHARTYPE        shift and go to state 165
    STRINGTYPE      shift and go to state 166
    FLOATTYPE       shift and go to state 167
    DECIMALTYPE     shift and go to state 168
    INTTYPE         shift and go to state 169
    BOOLTYPE        shift and go to state 170
    LIST            shift and go to state 171
    DICTIONARY      shift and go to state 172
    METHOD          shift and go to state 97
    FOR             shift and go to state 174
    FOREACH         shift and go to state 175
    TRY             shift and go to state 176
    WHILE           shift and go to state 177
    DO              shift and go to state 178
    PUBLIC          shift and go to state 179
    PRIVATE         shift and go to state 20

    all_block_code                 shift and go to state 315
    block_code                     shift and go to state 99
    def_const_or_var               shift and go to state 100
    print_data                     shift and go to state 101
    read_data                      shift and go to state 102
    arithmetic_operation           shift and go to state 103
    logic_operation                shift and go to state 104
    array_assignation              shift and go to state 105
    array_value_assign             shift and go to state 106
    array_indexing                 shift and go to state 107
    lists                          shift and go to state 108
    functions_list                 shift and go to state 109
    dict_estruct                   shift and go to state 110
    functions_dict                 shift and go to state 111
    concurrent_method              shift and go to state 112
    queue_struct                   shift and go to state 113
    functions_queue                shift and go to state 114
    stack_struct                   shift and go to state 115
    functions_stack                shift and go to state 116
    block_if                       shift and go to state 117
    block_for                      shift and go to state 118
    block_try_catch                shift and go to state 119
    block_while                    shift and go to state 120
    constant_assignation           shift and go to state 121
    variable_assignation           shift and go to state 122
    late_initialization            shift and go to state 123
    value_numeric                  shift and go to state 127
    array_type                     shift and go to state 129
    list_empty                     shift and go to state 130
    list_full                      shift and go to state 131
    list_func_clear                shift and go to state 132
    list_func_count                shift and go to state 133
    list_func_add                  shift and go to state 134
    list_func_removeat             shift and go to state 135
    dict_empty                     shift and go to state 136
    dict_full                      shift and go to state 137
    dict_func_put                  shift and go to state 138
    dict_func_remove               shift and go to state 139
    method_declaration             shift and go to state 140
    data_type                      shift and go to state 142
    queue_enqueue                  shift and go to state 143
    queue_dequeue                  shift and go to state 144
    queue_clear                    shift and go to state 145
    queue_isEmpty                  shift and go to state 146
    stack_push                     shift and go to state 148
    stack_pop                      shift and go to state 149
    stack_clear                    shift and go to state 150
    stack_peek                     shift and go to state 151
    stack_isEmpty                  shift and go to state 152
    for_anidado                    shift and go to state 154
    for_each                       shift and go to state 155
    try_catch_simply               shift and go to state 156
    try_catch_finally              shift and go to state 157
    normal_while                   shift and go to state 158
    do_while                       shift and go to state 159
    access_modifiers               shift and go to state 160
    assignation_key_value          shift and go to state 162
    for_simple                     shift and go to state 173

state 240

    (206) method_declaration -> METHOD IDENTIFIER LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 316


state 241

    (33) print_data -> PRINT LPARENT STRING . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 317


state 242

    (34) print_data -> PRINT LPARENT VARIABLE . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 318


state 243

    (64) arithmetic_operation -> VARIABLE .
    (66) arithmetic_operation -> VARIABLE . arithmetic_operator arithmetic_operation
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . MINUS
    (81) arithmetic_operator -> . TIMES
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
    PRINT           reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    READ            reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    VARIABLE        reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    QUEUE           reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    STACK           reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    IF              reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    CONST           reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    INTEGER         reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    FLOAT_NUMBER    reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    DECIMAL_NUMBER  reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    CHARTYPE        reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    STRINGTYPE      reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    FLOATTYPE       reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    DECIMALTYPE     reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    INTTYPE         reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    BOOLTYPE        reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    LIST            reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    DICTIONARY      reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    METHOD          reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    FOR             reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    FOREACH         reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    TRY             reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    WHILE           reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    DO              reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    PUBLIC          reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    PRIVATE         reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    RKEY            reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    GREATER_THAN    reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    SMALLER_THAN    reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    EQUAL_COMPARATION reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    INEQUALITY      reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    GREATER_THAN_OR_EQUAL reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    SMALLER_THAN_OR_EQUAL reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    LOGICAND        reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    LOGICOR         reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    LOGICNOT        reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    LOGICXOR        reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    RETURN          reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    COMMA           reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    RBRACKET        reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    RPARENT         reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    PERCENT         shift and go to state 199

  ! PLUS            [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! TIMES           [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! PERCENT         [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]

    arithmetic_operator            shift and go to state 190

state 244

    (66) arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .
    (62) value_numeric -> arithmetic_operation .

  ! reduce/reduce conflict for PRINT resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for READ resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for QUEUE resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for STACK resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for IF resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for CONST resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for INTEGER resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for FLOAT_NUMBER resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for DECIMAL_NUMBER resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for CHARTYPE resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for STRINGTYPE resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for FLOATTYPE resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for DECIMALTYPE resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for INTTYPE resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for BOOLTYPE resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for LIST resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for DICTIONARY resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for METHOD resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for FOR resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for FOREACH resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for TRY resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for WHILE resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for DO resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for RKEY resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for PLUS resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for MINUS resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for TIMES resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for PERCENT resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for SMALLER_THAN resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for EQUAL_COMPARATION resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for INEQUALITY resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUAL resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for SMALLER_THAN_OR_EQUAL resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for LOGICAND resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for LOGICOR resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for LOGICNOT resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for LOGICXOR resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for RETURN resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for COMMA resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for RPARENT resolved using rule 62 (value_numeric -> arithmetic_operation .)
    PRINT           reduce using rule 62 (value_numeric -> arithmetic_operation .)
    READ            reduce using rule 62 (value_numeric -> arithmetic_operation .)
    VARIABLE        reduce using rule 62 (value_numeric -> arithmetic_operation .)
    QUEUE           reduce using rule 62 (value_numeric -> arithmetic_operation .)
    STACK           reduce using rule 62 (value_numeric -> arithmetic_operation .)
    IF              reduce using rule 62 (value_numeric -> arithmetic_operation .)
    CONST           reduce using rule 62 (value_numeric -> arithmetic_operation .)
    INTEGER         reduce using rule 62 (value_numeric -> arithmetic_operation .)
    FLOAT_NUMBER    reduce using rule 62 (value_numeric -> arithmetic_operation .)
    DECIMAL_NUMBER  reduce using rule 62 (value_numeric -> arithmetic_operation .)
    CHARTYPE        reduce using rule 62 (value_numeric -> arithmetic_operation .)
    STRINGTYPE      reduce using rule 62 (value_numeric -> arithmetic_operation .)
    FLOATTYPE       reduce using rule 62 (value_numeric -> arithmetic_operation .)
    DECIMALTYPE     reduce using rule 62 (value_numeric -> arithmetic_operation .)
    INTTYPE         reduce using rule 62 (value_numeric -> arithmetic_operation .)
    BOOLTYPE        reduce using rule 62 (value_numeric -> arithmetic_operation .)
    LIST            reduce using rule 62 (value_numeric -> arithmetic_operation .)
    DICTIONARY      reduce using rule 62 (value_numeric -> arithmetic_operation .)
    METHOD          reduce using rule 62 (value_numeric -> arithmetic_operation .)
    FOR             reduce using rule 62 (value_numeric -> arithmetic_operation .)
    FOREACH         reduce using rule 62 (value_numeric -> arithmetic_operation .)
    TRY             reduce using rule 62 (value_numeric -> arithmetic_operation .)
    WHILE           reduce using rule 62 (value_numeric -> arithmetic_operation .)
    DO              reduce using rule 62 (value_numeric -> arithmetic_operation .)
    PUBLIC          reduce using rule 62 (value_numeric -> arithmetic_operation .)
    PRIVATE         reduce using rule 62 (value_numeric -> arithmetic_operation .)
    RKEY            reduce using rule 62 (value_numeric -> arithmetic_operation .)
    PLUS            reduce using rule 62 (value_numeric -> arithmetic_operation .)
    MINUS           reduce using rule 62 (value_numeric -> arithmetic_operation .)
    TIMES           reduce using rule 62 (value_numeric -> arithmetic_operation .)
    DIVIDE          reduce using rule 62 (value_numeric -> arithmetic_operation .)
    PERCENT         reduce using rule 62 (value_numeric -> arithmetic_operation .)
    GREATER_THAN    reduce using rule 62 (value_numeric -> arithmetic_operation .)
    SMALLER_THAN    reduce using rule 62 (value_numeric -> arithmetic_operation .)
    EQUAL_COMPARATION reduce using rule 62 (value_numeric -> arithmetic_operation .)
    INEQUALITY      reduce using rule 62 (value_numeric -> arithmetic_operation .)
    GREATER_THAN_OR_EQUAL reduce using rule 62 (value_numeric -> arithmetic_operation .)
    SMALLER_THAN_OR_EQUAL reduce using rule 62 (value_numeric -> arithmetic_operation .)
    LOGICAND        reduce using rule 62 (value_numeric -> arithmetic_operation .)
    LOGICOR         reduce using rule 62 (value_numeric -> arithmetic_operation .)
    LOGICNOT        reduce using rule 62 (value_numeric -> arithmetic_operation .)
    LOGICXOR        reduce using rule 62 (value_numeric -> arithmetic_operation .)
    RETURN          reduce using rule 62 (value_numeric -> arithmetic_operation .)
    DOTANDCOMMA     reduce using rule 62 (value_numeric -> arithmetic_operation .)
    COMMA           reduce using rule 62 (value_numeric -> arithmetic_operation .)
    RBRACKET        reduce using rule 62 (value_numeric -> arithmetic_operation .)
    RPARENT         reduce using rule 62 (value_numeric -> arithmetic_operation .)

  ! PRINT           [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! READ            [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! VARIABLE        [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! QUEUE           [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! STACK           [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! IF              [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! CONST           [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! INTEGER         [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! FLOAT_NUMBER    [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! DECIMAL_NUMBER  [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! CHARTYPE        [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! STRINGTYPE      [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! FLOATTYPE       [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! DECIMALTYPE     [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! INTTYPE         [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! BOOLTYPE        [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! LIST            [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! DICTIONARY      [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! METHOD          [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! FOR             [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! FOREACH         [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! TRY             [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! WHILE           [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! DO              [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! PUBLIC          [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! PRIVATE         [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! RKEY            [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! PLUS            [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! MINUS           [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! TIMES           [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! DIVIDE          [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! PERCENT         [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! GREATER_THAN    [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! SMALLER_THAN    [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! EQUAL_COMPARATION [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! INEQUALITY      [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! SMALLER_THAN_OR_EQUAL [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! LOGICAND        [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! LOGICOR         [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! LOGICNOT        [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! LOGICXOR        [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! RETURN          [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! DOTANDCOMMA     [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! COMMA           [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! RBRACKET        [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]
  ! RPARENT         [ reduce using rule 66 (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation .) ]


state 245

    (63) arithmetic_operation -> value_numeric .
    (65) arithmetic_operation -> value_numeric . arithmetic_operator arithmetic_operation
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . MINUS
    (81) arithmetic_operator -> . TIMES
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
    PRINT           reduce using rule 63 (arithmetic_operation -> value_numeric .)
    READ            reduce using rule 63 (arithmetic_operation -> value_numeric .)
    VARIABLE        reduce using rule 63 (arithmetic_operation -> value_numeric .)
    QUEUE           reduce using rule 63 (arithmetic_operation -> value_numeric .)
    STACK           reduce using rule 63 (arithmetic_operation -> value_numeric .)
    IF              reduce using rule 63 (arithmetic_operation -> value_numeric .)
    CONST           reduce using rule 63 (arithmetic_operation -> value_numeric .)
    INTEGER         reduce using rule 63 (arithmetic_operation -> value_numeric .)
    FLOAT_NUMBER    reduce using rule 63 (arithmetic_operation -> value_numeric .)
    DECIMAL_NUMBER  reduce using rule 63 (arithmetic_operation -> value_numeric .)
    CHARTYPE        reduce using rule 63 (arithmetic_operation -> value_numeric .)
    STRINGTYPE      reduce using rule 63 (arithmetic_operation -> value_numeric .)
    FLOATTYPE       reduce using rule 63 (arithmetic_operation -> value_numeric .)
    DECIMALTYPE     reduce using rule 63 (arithmetic_operation -> value_numeric .)
    INTTYPE         reduce using rule 63 (arithmetic_operation -> value_numeric .)
    BOOLTYPE        reduce using rule 63 (arithmetic_operation -> value_numeric .)
    LIST            reduce using rule 63 (arithmetic_operation -> value_numeric .)
    DICTIONARY      reduce using rule 63 (arithmetic_operation -> value_numeric .)
    METHOD          reduce using rule 63 (arithmetic_operation -> value_numeric .)
    FOR             reduce using rule 63 (arithmetic_operation -> value_numeric .)
    FOREACH         reduce using rule 63 (arithmetic_operation -> value_numeric .)
    TRY             reduce using rule 63 (arithmetic_operation -> value_numeric .)
    WHILE           reduce using rule 63 (arithmetic_operation -> value_numeric .)
    DO              reduce using rule 63 (arithmetic_operation -> value_numeric .)
    PUBLIC          reduce using rule 63 (arithmetic_operation -> value_numeric .)
    PRIVATE         reduce using rule 63 (arithmetic_operation -> value_numeric .)
    RKEY            reduce using rule 63 (arithmetic_operation -> value_numeric .)
    GREATER_THAN    reduce using rule 63 (arithmetic_operation -> value_numeric .)
    SMALLER_THAN    reduce using rule 63 (arithmetic_operation -> value_numeric .)
    EQUAL_COMPARATION reduce using rule 63 (arithmetic_operation -> value_numeric .)
    INEQUALITY      reduce using rule 63 (arithmetic_operation -> value_numeric .)
    GREATER_THAN_OR_EQUAL reduce using rule 63 (arithmetic_operation -> value_numeric .)
    SMALLER_THAN_OR_EQUAL reduce using rule 63 (arithmetic_operation -> value_numeric .)
    LOGICAND        reduce using rule 63 (arithmetic_operation -> value_numeric .)
    LOGICOR         reduce using rule 63 (arithmetic_operation -> value_numeric .)
    LOGICNOT        reduce using rule 63 (arithmetic_operation -> value_numeric .)
    LOGICXOR        reduce using rule 63 (arithmetic_operation -> value_numeric .)
    RETURN          reduce using rule 63 (arithmetic_operation -> value_numeric .)
    DOTANDCOMMA     reduce using rule 63 (arithmetic_operation -> value_numeric .)
    COMMA           reduce using rule 63 (arithmetic_operation -> value_numeric .)
    RBRACKET        reduce using rule 63 (arithmetic_operation -> value_numeric .)
    RPARENT         reduce using rule 63 (arithmetic_operation -> value_numeric .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    PERCENT         shift and go to state 199

  ! PLUS            [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! MINUS           [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! TIMES           [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! DIVIDE          [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! PERCENT         [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]

    arithmetic_operator            shift and go to state 211

state 246

    (68) logic_operation -> VARIABLE logic_operator INTEGER .

    PRINT           reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    READ            reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    VARIABLE        reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    QUEUE           reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    STACK           reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    IF              reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    CONST           reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    INTEGER         reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    FLOAT_NUMBER    reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    DECIMAL_NUMBER  reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    CHARTYPE        reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    STRINGTYPE      reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    FLOATTYPE       reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    DECIMALTYPE     reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    INTTYPE         reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    BOOLTYPE        reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    LIST            reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    DICTIONARY      reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    METHOD          reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    FOR             reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    FOREACH         reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    TRY             reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    WHILE           reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    DO              reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    PUBLIC          reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    PRIVATE         reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    RKEY            reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    RETURN          reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    DOTANDCOMMA     reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    COMMA           reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    RPARENT         reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)
    RBRACKET        reduce using rule 68 (logic_operation -> VARIABLE logic_operator INTEGER .)


state 247

    (50) array_value_assign -> VARIABLE LBRACKET VARIABLE . RBRACKET ASSIGNATION value DOTANDCOMMA
    (48) array_indexing -> VARIABLE LBRACKET VARIABLE . RBRACKET

    RBRACKET        shift and go to state 319


state 248

    (51) array_value_assign -> VARIABLE LBRACKET INTEGER . RBRACKET ASSIGNATION value DOTANDCOMMA
    (49) array_indexing -> VARIABLE LBRACKET INTEGER . RBRACKET

    RBRACKET        shift and go to state 320


state 249

    (54) value_string -> VARIABLE .
    (64) arithmetic_operation -> VARIABLE .
    (66) arithmetic_operation -> VARIABLE . arithmetic_operator arithmetic_operation
    (68) logic_operation -> VARIABLE . logic_operator INTEGER
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . MINUS
    (81) arithmetic_operator -> . TIMES
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT
    (69) logic_operator -> . GREATER_THAN
    (70) logic_operator -> . SMALLER_THAN
    (71) logic_operator -> . EQUAL_COMPARATION
    (72) logic_operator -> . INEQUALITY
    (73) logic_operator -> . GREATER_THAN_OR_EQUAL
    (74) logic_operator -> . SMALLER_THAN_OR_EQUAL
    (75) logic_operator -> . LOGICAND
    (76) logic_operator -> . LOGICOR
    (77) logic_operator -> . LOGICNOT
    (78) logic_operator -> . LOGICXOR

  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 54 (value_string -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 54 (value_string -> VARIABLE .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 54 (value_string -> VARIABLE .)
  ! reduce/reduce conflict for RPARENT resolved using rule 54 (value_string -> VARIABLE .)
  ! reduce/reduce conflict for RKEY resolved using rule 54 (value_string -> VARIABLE .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for SMALLER_THAN resolved as shift
  ! shift/reduce conflict for EQUAL_COMPARATION resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUAL resolved as shift
  ! shift/reduce conflict for SMALLER_THAN_OR_EQUAL resolved as shift
  ! shift/reduce conflict for LOGICAND resolved as shift
  ! shift/reduce conflict for LOGICOR resolved as shift
  ! shift/reduce conflict for LOGICNOT resolved as shift
  ! shift/reduce conflict for LOGICXOR resolved as shift
    DOTANDCOMMA     reduce using rule 54 (value_string -> VARIABLE .)
    COMMA           reduce using rule 54 (value_string -> VARIABLE .)
    RBRACKET        reduce using rule 54 (value_string -> VARIABLE .)
    RPARENT         reduce using rule 54 (value_string -> VARIABLE .)
    RKEY            reduce using rule 54 (value_string -> VARIABLE .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    PERCENT         shift and go to state 199
    GREATER_THAN    shift and go to state 200
    SMALLER_THAN    shift and go to state 201
    EQUAL_COMPARATION shift and go to state 202
    INEQUALITY      shift and go to state 203
    GREATER_THAN_OR_EQUAL shift and go to state 204
    SMALLER_THAN_OR_EQUAL shift and go to state 205
    LOGICAND        shift and go to state 206
    LOGICOR         shift and go to state 207
    LOGICNOT        shift and go to state 208
    LOGICXOR        shift and go to state 209

  ! PLUS            [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! TIMES           [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! PERCENT         [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! GREATER_THAN    [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! SMALLER_THAN    [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! EQUAL_COMPARATION [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! INEQUALITY      [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! SMALLER_THAN_OR_EQUAL [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! LOGICAND        [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! LOGICOR         [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! LOGICNOT        [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! LOGICXOR        [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! RBRACKET        [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! RPARENT         [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! RKEY            [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]

    arithmetic_operator            shift and go to state 190
    logic_operator                 shift and go to state 191

state 250

    (100) assignation_key_value -> VARIABLE ASSIGNATION value .

    DOTANDCOMMA     reduce using rule 100 (assignation_key_value -> VARIABLE ASSIGNATION value .)
    COMMA           reduce using rule 100 (assignation_key_value -> VARIABLE ASSIGNATION value .)


state 251

    (38) value -> value_numeric .
    (63) arithmetic_operation -> value_numeric .
    (65) arithmetic_operation -> value_numeric . arithmetic_operator arithmetic_operation
    (67) logic_operation -> value_numeric . logic_operator INTEGER
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . MINUS
    (81) arithmetic_operator -> . TIMES
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT
    (69) logic_operator -> . GREATER_THAN
    (70) logic_operator -> . SMALLER_THAN
    (71) logic_operator -> . EQUAL_COMPARATION
    (72) logic_operator -> . INEQUALITY
    (73) logic_operator -> . GREATER_THAN_OR_EQUAL
    (74) logic_operator -> . SMALLER_THAN_OR_EQUAL
    (75) logic_operator -> . LOGICAND
    (76) logic_operator -> . LOGICOR
    (77) logic_operator -> . LOGICNOT
    (78) logic_operator -> . LOGICXOR

  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 38 (value -> value_numeric .)
  ! reduce/reduce conflict for COMMA resolved using rule 38 (value -> value_numeric .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 38 (value -> value_numeric .)
  ! reduce/reduce conflict for RPARENT resolved using rule 38 (value -> value_numeric .)
  ! reduce/reduce conflict for RKEY resolved using rule 38 (value -> value_numeric .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for SMALLER_THAN resolved as shift
  ! shift/reduce conflict for EQUAL_COMPARATION resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUAL resolved as shift
  ! shift/reduce conflict for SMALLER_THAN_OR_EQUAL resolved as shift
  ! shift/reduce conflict for LOGICAND resolved as shift
  ! shift/reduce conflict for LOGICOR resolved as shift
  ! shift/reduce conflict for LOGICNOT resolved as shift
  ! shift/reduce conflict for LOGICXOR resolved as shift
    DOTANDCOMMA     reduce using rule 38 (value -> value_numeric .)
    COMMA           reduce using rule 38 (value -> value_numeric .)
    RBRACKET        reduce using rule 38 (value -> value_numeric .)
    RPARENT         reduce using rule 38 (value -> value_numeric .)
    RKEY            reduce using rule 38 (value -> value_numeric .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    PERCENT         shift and go to state 199
    GREATER_THAN    shift and go to state 200
    SMALLER_THAN    shift and go to state 201
    EQUAL_COMPARATION shift and go to state 202
    INEQUALITY      shift and go to state 203
    GREATER_THAN_OR_EQUAL shift and go to state 204
    SMALLER_THAN_OR_EQUAL shift and go to state 205
    LOGICAND        shift and go to state 206
    LOGICOR         shift and go to state 207
    LOGICNOT        shift and go to state 208
    LOGICXOR        shift and go to state 209

  ! PLUS            [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! MINUS           [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! TIMES           [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! DIVIDE          [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! PERCENT         [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! GREATER_THAN    [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! SMALLER_THAN    [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! EQUAL_COMPARATION [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! INEQUALITY      [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! SMALLER_THAN_OR_EQUAL [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! LOGICAND        [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! LOGICOR         [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! LOGICNOT        [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! LOGICXOR        [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! DOTANDCOMMA     [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! COMMA           [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! RBRACKET        [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! RPARENT         [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! RKEY            [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]

    arithmetic_operator            shift and go to state 211
    logic_operator                 shift and go to state 212

state 252

    (39) value -> value_logic .

    DOTANDCOMMA     reduce using rule 39 (value -> value_logic .)
    COMMA           reduce using rule 39 (value -> value_logic .)
    RBRACKET        reduce using rule 39 (value -> value_logic .)
    RPARENT         reduce using rule 39 (value -> value_logic .)
    RKEY            reduce using rule 39 (value -> value_logic .)


state 253

    (40) value -> value_string .

    DOTANDCOMMA     reduce using rule 40 (value -> value_string .)
    COMMA           reduce using rule 40 (value -> value_string .)
    RBRACKET        reduce using rule 40 (value -> value_string .)
    RPARENT         reduce using rule 40 (value -> value_string .)
    RKEY            reduce using rule 40 (value -> value_string .)


state 254

    (41) value -> read_data .

    DOTANDCOMMA     reduce using rule 41 (value -> read_data .)
    COMMA           reduce using rule 41 (value -> read_data .)
    RBRACKET        reduce using rule 41 (value -> read_data .)
    RPARENT         reduce using rule 41 (value -> read_data .)
    RKEY            reduce using rule 41 (value -> read_data .)


state 255

    (42) value -> METHOD .

    DOTANDCOMMA     reduce using rule 42 (value -> METHOD .)
    COMMA           reduce using rule 42 (value -> METHOD .)
    RBRACKET        reduce using rule 42 (value -> METHOD .)
    RPARENT         reduce using rule 42 (value -> METHOD .)
    RKEY            reduce using rule 42 (value -> METHOD .)


state 256

    (43) value -> array .

    DOTANDCOMMA     reduce using rule 43 (value -> array .)
    COMMA           reduce using rule 43 (value -> array .)
    RBRACKET        reduce using rule 43 (value -> array .)
    RPARENT         reduce using rule 43 (value -> array .)
    RKEY            reduce using rule 43 (value -> array .)


state 257

    (62) value_numeric -> arithmetic_operation .

    PLUS            reduce using rule 62 (value_numeric -> arithmetic_operation .)
    MINUS           reduce using rule 62 (value_numeric -> arithmetic_operation .)
    TIMES           reduce using rule 62 (value_numeric -> arithmetic_operation .)
    DIVIDE          reduce using rule 62 (value_numeric -> arithmetic_operation .)
    PERCENT         reduce using rule 62 (value_numeric -> arithmetic_operation .)
    GREATER_THAN    reduce using rule 62 (value_numeric -> arithmetic_operation .)
    SMALLER_THAN    reduce using rule 62 (value_numeric -> arithmetic_operation .)
    EQUAL_COMPARATION reduce using rule 62 (value_numeric -> arithmetic_operation .)
    INEQUALITY      reduce using rule 62 (value_numeric -> arithmetic_operation .)
    GREATER_THAN_OR_EQUAL reduce using rule 62 (value_numeric -> arithmetic_operation .)
    SMALLER_THAN_OR_EQUAL reduce using rule 62 (value_numeric -> arithmetic_operation .)
    LOGICAND        reduce using rule 62 (value_numeric -> arithmetic_operation .)
    LOGICOR         reduce using rule 62 (value_numeric -> arithmetic_operation .)
    LOGICNOT        reduce using rule 62 (value_numeric -> arithmetic_operation .)
    LOGICXOR        reduce using rule 62 (value_numeric -> arithmetic_operation .)
    DOTANDCOMMA     reduce using rule 62 (value_numeric -> arithmetic_operation .)
    COMMA           reduce using rule 62 (value_numeric -> arithmetic_operation .)
    RBRACKET        reduce using rule 62 (value_numeric -> arithmetic_operation .)
    RPARENT         reduce using rule 62 (value_numeric -> arithmetic_operation .)
    RKEY            reduce using rule 62 (value_numeric -> arithmetic_operation .)


state 258

    (56) value_logic -> BOOLTRUE .

    DOTANDCOMMA     reduce using rule 56 (value_logic -> BOOLTRUE .)
    COMMA           reduce using rule 56 (value_logic -> BOOLTRUE .)
    RBRACKET        reduce using rule 56 (value_logic -> BOOLTRUE .)
    RPARENT         reduce using rule 56 (value_logic -> BOOLTRUE .)
    RKEY            reduce using rule 56 (value_logic -> BOOLTRUE .)


state 259

    (57) value_logic -> BOOLFALSE .

    DOTANDCOMMA     reduce using rule 57 (value_logic -> BOOLFALSE .)
    COMMA           reduce using rule 57 (value_logic -> BOOLFALSE .)
    RBRACKET        reduce using rule 57 (value_logic -> BOOLFALSE .)
    RPARENT         reduce using rule 57 (value_logic -> BOOLFALSE .)
    RKEY            reduce using rule 57 (value_logic -> BOOLFALSE .)


state 260

    (58) value_logic -> logic_operation .

    DOTANDCOMMA     reduce using rule 58 (value_logic -> logic_operation .)
    COMMA           reduce using rule 58 (value_logic -> logic_operation .)
    RBRACKET        reduce using rule 58 (value_logic -> logic_operation .)
    RPARENT         reduce using rule 58 (value_logic -> logic_operation .)
    RKEY            reduce using rule 58 (value_logic -> logic_operation .)


state 261

    (52) value_string -> STRING .
    (36) concatenation -> STRING .
    (37) concatenation -> STRING . PLUS concatenation

  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 36 (concatenation -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 36 (concatenation -> STRING .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 36 (concatenation -> STRING .)
  ! reduce/reduce conflict for RPARENT resolved using rule 36 (concatenation -> STRING .)
  ! reduce/reduce conflict for RKEY resolved using rule 36 (concatenation -> STRING .)
    DOTANDCOMMA     reduce using rule 36 (concatenation -> STRING .)
    COMMA           reduce using rule 36 (concatenation -> STRING .)
    RBRACKET        reduce using rule 36 (concatenation -> STRING .)
    RPARENT         reduce using rule 36 (concatenation -> STRING .)
    RKEY            reduce using rule 36 (concatenation -> STRING .)
    PLUS            shift and go to state 321

  ! DOTANDCOMMA     [ reduce using rule 52 (value_string -> STRING .) ]
  ! COMMA           [ reduce using rule 52 (value_string -> STRING .) ]
  ! RBRACKET        [ reduce using rule 52 (value_string -> STRING .) ]
  ! RPARENT         [ reduce using rule 52 (value_string -> STRING .) ]
  ! RKEY            [ reduce using rule 52 (value_string -> STRING .) ]


state 262

    (53) value_string -> CHAR .

    DOTANDCOMMA     reduce using rule 53 (value_string -> CHAR .)
    COMMA           reduce using rule 53 (value_string -> CHAR .)
    RBRACKET        reduce using rule 53 (value_string -> CHAR .)
    RPARENT         reduce using rule 53 (value_string -> CHAR .)
    RKEY            reduce using rule 53 (value_string -> CHAR .)


state 263

    (55) value_string -> concatenation .

    DOTANDCOMMA     reduce using rule 55 (value_string -> concatenation .)
    COMMA           reduce using rule 55 (value_string -> concatenation .)
    RBRACKET        reduce using rule 55 (value_string -> concatenation .)
    RPARENT         reduce using rule 55 (value_string -> concatenation .)
    RKEY            reduce using rule 55 (value_string -> concatenation .)


state 264

    (35) read_data -> READ . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 322


state 265

    (45) array -> LBRACKET . array_content RBRACKET
    (46) array_content -> . value
    (47) array_content -> . value COMMA array_content
    (38) value -> . value_numeric
    (39) value -> . value_logic
    (40) value -> . value_string
    (41) value -> . read_data
    (42) value -> . METHOD
    (43) value -> . array
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (56) value_logic -> . BOOLTRUE
    (57) value_logic -> . BOOLFALSE
    (58) value_logic -> . logic_operation
    (52) value_string -> . STRING
    (53) value_string -> . CHAR
    (54) value_string -> . VARIABLE
    (55) value_string -> . concatenation
    (35) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (45) array -> . LBRACKET array_content RBRACKET
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (36) concatenation -> . STRING
    (37) concatenation -> . STRING PLUS concatenation

    METHOD          shift and go to state 255
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164
    BOOLTRUE        shift and go to state 258
    BOOLFALSE       shift and go to state 259
    STRING          shift and go to state 261
    CHAR            shift and go to state 262
    VARIABLE        shift and go to state 249
    READ            shift and go to state 264
    LBRACKET        shift and go to state 265

    array_content                  shift and go to state 323
    value                          shift and go to state 324
    value_numeric                  shift and go to state 251
    value_logic                    shift and go to state 252
    value_string                   shift and go to state 253
    read_data                      shift and go to state 254
    array                          shift and go to state 256
    arithmetic_operation           shift and go to state 257
    logic_operation                shift and go to state 260
    concatenation                  shift and go to state 263

state 266

    (169) list_func_clear -> VARIABLE DOT CLEAR . LPARENT RPARENT DOTANDCOMMA
    (191) queue_clear -> VARIABLE DOT CLEAR . LPARENT RPARENT DOTANDCOMMA
    (181) stack_clear -> VARIABLE DOT CLEAR . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 325


state 267

    (170) list_func_count -> VARIABLE DOT COUNT . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 326


state 268

    (171) list_func_add -> VARIABLE DOT ADD . LPARENT STRING RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 327


state 269

    (172) list_func_removeat -> VARIABLE DOT REMOVEAT . LPARENT INTEGER RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 328


state 270

    (153) dict_func_put -> VARIABLE DOT PUT . LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 329


state 271

    (154) dict_func_remove -> VARIABLE DOT REMOVE . LPARENT VARIABLE RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 330


state 272

    (189) queue_enqueue -> VARIABLE DOT ENQUEUE . LPARENT value RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 331


state 273

    (190) queue_dequeue -> VARIABLE DOT DEQUEUE . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 332


state 274

    (193) queue_isEmpty -> VARIABLE DOT ISEMPTY . LPARENT RPARENT DOTANDCOMMA
    (183) stack_isEmpty -> VARIABLE DOT ISEMPTY . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 333


state 275

    (179) stack_push -> VARIABLE DOT PUSH . LPARENT value RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 334


state 276

    (180) stack_pop -> VARIABLE DOT POP . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 335


state 277

    (182) stack_peek -> VARIABLE DOT PEEK . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 336


state 278

    (35) read_data -> READ LPARENT RPARENT . DOTANDCOMMA
    (101) assignation_key_value -> READ LPARENT RPARENT .

  ! shift/reduce conflict for DOTANDCOMMA resolved as shift
    DOTANDCOMMA     shift and go to state 337

  ! DOTANDCOMMA     [ reduce using rule 101 (assignation_key_value -> READ LPARENT RPARENT .) ]


state 279

    (65) arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .
    (62) value_numeric -> arithmetic_operation .

  ! reduce/reduce conflict for PRINT resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for READ resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for QUEUE resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for STACK resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for IF resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for CONST resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for INTEGER resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for FLOAT_NUMBER resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for DECIMAL_NUMBER resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for CHARTYPE resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for STRINGTYPE resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for FLOATTYPE resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for DECIMALTYPE resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for INTTYPE resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for BOOLTYPE resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for LIST resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for DICTIONARY resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for METHOD resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for FOR resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for FOREACH resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for TRY resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for WHILE resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for DO resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for RKEY resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for PLUS resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for MINUS resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for TIMES resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for PERCENT resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for SMALLER_THAN resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for EQUAL_COMPARATION resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for INEQUALITY resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUAL resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for SMALLER_THAN_OR_EQUAL resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for LOGICAND resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for LOGICOR resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for LOGICNOT resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for LOGICXOR resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for RETURN resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for COMMA resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 62 (value_numeric -> arithmetic_operation .)
  ! reduce/reduce conflict for RPARENT resolved using rule 62 (value_numeric -> arithmetic_operation .)
    PRINT           reduce using rule 62 (value_numeric -> arithmetic_operation .)
    READ            reduce using rule 62 (value_numeric -> arithmetic_operation .)
    VARIABLE        reduce using rule 62 (value_numeric -> arithmetic_operation .)
    QUEUE           reduce using rule 62 (value_numeric -> arithmetic_operation .)
    STACK           reduce using rule 62 (value_numeric -> arithmetic_operation .)
    IF              reduce using rule 62 (value_numeric -> arithmetic_operation .)
    CONST           reduce using rule 62 (value_numeric -> arithmetic_operation .)
    INTEGER         reduce using rule 62 (value_numeric -> arithmetic_operation .)
    FLOAT_NUMBER    reduce using rule 62 (value_numeric -> arithmetic_operation .)
    DECIMAL_NUMBER  reduce using rule 62 (value_numeric -> arithmetic_operation .)
    CHARTYPE        reduce using rule 62 (value_numeric -> arithmetic_operation .)
    STRINGTYPE      reduce using rule 62 (value_numeric -> arithmetic_operation .)
    FLOATTYPE       reduce using rule 62 (value_numeric -> arithmetic_operation .)
    DECIMALTYPE     reduce using rule 62 (value_numeric -> arithmetic_operation .)
    INTTYPE         reduce using rule 62 (value_numeric -> arithmetic_operation .)
    BOOLTYPE        reduce using rule 62 (value_numeric -> arithmetic_operation .)
    LIST            reduce using rule 62 (value_numeric -> arithmetic_operation .)
    DICTIONARY      reduce using rule 62 (value_numeric -> arithmetic_operation .)
    METHOD          reduce using rule 62 (value_numeric -> arithmetic_operation .)
    FOR             reduce using rule 62 (value_numeric -> arithmetic_operation .)
    FOREACH         reduce using rule 62 (value_numeric -> arithmetic_operation .)
    TRY             reduce using rule 62 (value_numeric -> arithmetic_operation .)
    WHILE           reduce using rule 62 (value_numeric -> arithmetic_operation .)
    DO              reduce using rule 62 (value_numeric -> arithmetic_operation .)
    PUBLIC          reduce using rule 62 (value_numeric -> arithmetic_operation .)
    PRIVATE         reduce using rule 62 (value_numeric -> arithmetic_operation .)
    RKEY            reduce using rule 62 (value_numeric -> arithmetic_operation .)
    PLUS            reduce using rule 62 (value_numeric -> arithmetic_operation .)
    MINUS           reduce using rule 62 (value_numeric -> arithmetic_operation .)
    TIMES           reduce using rule 62 (value_numeric -> arithmetic_operation .)
    DIVIDE          reduce using rule 62 (value_numeric -> arithmetic_operation .)
    PERCENT         reduce using rule 62 (value_numeric -> arithmetic_operation .)
    GREATER_THAN    reduce using rule 62 (value_numeric -> arithmetic_operation .)
    SMALLER_THAN    reduce using rule 62 (value_numeric -> arithmetic_operation .)
    EQUAL_COMPARATION reduce using rule 62 (value_numeric -> arithmetic_operation .)
    INEQUALITY      reduce using rule 62 (value_numeric -> arithmetic_operation .)
    GREATER_THAN_OR_EQUAL reduce using rule 62 (value_numeric -> arithmetic_operation .)
    SMALLER_THAN_OR_EQUAL reduce using rule 62 (value_numeric -> arithmetic_operation .)
    LOGICAND        reduce using rule 62 (value_numeric -> arithmetic_operation .)
    LOGICOR         reduce using rule 62 (value_numeric -> arithmetic_operation .)
    LOGICNOT        reduce using rule 62 (value_numeric -> arithmetic_operation .)
    LOGICXOR        reduce using rule 62 (value_numeric -> arithmetic_operation .)
    RETURN          reduce using rule 62 (value_numeric -> arithmetic_operation .)
    DOTANDCOMMA     reduce using rule 62 (value_numeric -> arithmetic_operation .)
    COMMA           reduce using rule 62 (value_numeric -> arithmetic_operation .)
    RBRACKET        reduce using rule 62 (value_numeric -> arithmetic_operation .)
    RPARENT         reduce using rule 62 (value_numeric -> arithmetic_operation .)

  ! PRINT           [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! READ            [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! VARIABLE        [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! QUEUE           [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! STACK           [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! IF              [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! CONST           [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! INTEGER         [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! FLOAT_NUMBER    [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! DECIMAL_NUMBER  [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! CHARTYPE        [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! STRINGTYPE      [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! FLOATTYPE       [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! DECIMALTYPE     [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! INTTYPE         [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! BOOLTYPE        [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! LIST            [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! DICTIONARY      [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! METHOD          [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! FOR             [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! FOREACH         [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! TRY             [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! WHILE           [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! DO              [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! PUBLIC          [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! PRIVATE         [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! RKEY            [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! PLUS            [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! MINUS           [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! TIMES           [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! DIVIDE          [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! PERCENT         [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! GREATER_THAN    [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! SMALLER_THAN    [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! EQUAL_COMPARATION [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! INEQUALITY      [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! SMALLER_THAN_OR_EQUAL [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! LOGICAND        [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! LOGICOR         [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! LOGICNOT        [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! LOGICXOR        [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! RETURN          [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! DOTANDCOMMA     [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! COMMA           [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! RBRACKET        [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]
  ! RPARENT         [ reduce using rule 65 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .) ]


state 280

    (67) logic_operation -> value_numeric logic_operator INTEGER .

    PRINT           reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    READ            reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    VARIABLE        reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    QUEUE           reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    STACK           reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    IF              reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    CONST           reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    INTEGER         reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    FLOAT_NUMBER    reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    DECIMAL_NUMBER  reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    CHARTYPE        reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    STRINGTYPE      reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    FLOATTYPE       reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    DECIMALTYPE     reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    INTTYPE         reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    BOOLTYPE        reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    LIST            reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    DICTIONARY      reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    METHOD          reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    FOR             reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    FOREACH         reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    TRY             reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    WHILE           reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    DO              reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    PUBLIC          reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    PRIVATE         reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    RKEY            reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    RETURN          reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    DOTANDCOMMA     reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    COMMA           reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    RPARENT         reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)
    RBRACKET        reduce using rule 67 (logic_operation -> value_numeric logic_operator INTEGER .)


state 281

    (44) array_assignation -> array_type VARIABLE ASSIGNATION . LBRACKET array_content RBRACKET DOTANDCOMMA

    LBRACKET        shift and go to state 338


state 282

    (205) concurrent_method -> method_declaration CONCURRENT LKEY . concurrent_block RKEY
    (207) concurrent_block -> . statement_list
    (208) statement_list -> . statement
    (209) statement_list -> . statement_list statement
    (210) statement -> . assignment_concurrent
    (211) statement -> . if_statement_concurrent
    (212) statement -> . while_loop_concurrent
    (213) statement -> . method_call_concurrent
    (214) statement -> . return_statement_concurrent
    (215) assignment_concurrent -> . VARIABLE ASSIGNATION expression DOTANDCOMMA
    (216) if_statement_concurrent -> . IF LPARENT condition RPARENT LKEY concurrent_block RKEY
    (217) while_loop_concurrent -> . WHILE LPARENT condition RPARENT LKEY concurrent_block RKEY
    (218) method_call_concurrent -> . IDENTIFIER LPARENT RPARENT DOTANDCOMMA
    (219) return_statement_concurrent -> . RETURN expression DOTANDCOMMA

    VARIABLE        shift and go to state 347
    IF              shift and go to state 348
    WHILE           shift and go to state 349
    IDENTIFIER      shift and go to state 350
    RETURN          shift and go to state 351

    concurrent_block               shift and go to state 339
    statement_list                 shift and go to state 340
    statement                      shift and go to state 341
    assignment_concurrent          shift and go to state 342
    if_statement_concurrent        shift and go to state 343
    while_loop_concurrent          shift and go to state 344
    method_call_concurrent         shift and go to state 345
    return_statement_concurrent    shift and go to state 346

state 283

    (184) queue_struct -> QUEUE SMALLER_THAN data_type . GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA

    GREATER_THAN    shift and go to state 352


state 284

    (94) variable_assignation -> data_type assignation_key_value DOTANDCOMMA .

    PRINT           reduce using rule 94 (variable_assignation -> data_type assignation_key_value DOTANDCOMMA .)
    READ            reduce using rule 94 (variable_assignation -> data_type assignation_key_value DOTANDCOMMA .)
    VARIABLE        reduce using rule 94 (variable_assignation -> data_type assignation_key_value DOTANDCOMMA .)
    QUEUE           reduce using rule 94 (variable_assignation -> data_type assignation_key_value DOTANDCOMMA .)
    STACK           reduce using rule 94 (variable_assignation -> data_type assignation_key_value DOTANDCOMMA .)
    IF              reduce using rule 94 (variable_assignation -> data_type assignation_key_value DOTANDCOMMA .)
    CONST           reduce using rule 94 (variable_assignation -> data_type assignation_key_value DOTANDCOMMA .)
    INTEGER         reduce using rule 94 (variable_assignation -> data_type assignation_key_value DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 94 (variable_assignation -> data_type assignation_key_value DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 94 (variable_assignation -> data_type assignation_key_value DOTANDCOMMA .)
    CHARTYPE        reduce using rule 94 (variable_assignation -> data_type assignation_key_value DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 94 (variable_assignation -> data_type assignation_key_value DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 94 (variable_assignation -> data_type assignation_key_value DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 94 (variable_assignation -> data_type assignation_key_value DOTANDCOMMA .)
    INTTYPE         reduce using rule 94 (variable_assignation -> data_type assignation_key_value DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 94 (variable_assignation -> data_type assignation_key_value DOTANDCOMMA .)
    LIST            reduce using rule 94 (variable_assignation -> data_type assignation_key_value DOTANDCOMMA .)
    DICTIONARY      reduce using rule 94 (variable_assignation -> data_type assignation_key_value DOTANDCOMMA .)
    METHOD          reduce using rule 94 (variable_assignation -> data_type assignation_key_value DOTANDCOMMA .)
    FOR             reduce using rule 94 (variable_assignation -> data_type assignation_key_value DOTANDCOMMA .)
    FOREACH         reduce using rule 94 (variable_assignation -> data_type assignation_key_value DOTANDCOMMA .)
    TRY             reduce using rule 94 (variable_assignation -> data_type assignation_key_value DOTANDCOMMA .)
    WHILE           reduce using rule 94 (variable_assignation -> data_type assignation_key_value DOTANDCOMMA .)
    DO              reduce using rule 94 (variable_assignation -> data_type assignation_key_value DOTANDCOMMA .)
    PUBLIC          reduce using rule 94 (variable_assignation -> data_type assignation_key_value DOTANDCOMMA .)
    PRIVATE         reduce using rule 94 (variable_assignation -> data_type assignation_key_value DOTANDCOMMA .)
    RKEY            reduce using rule 94 (variable_assignation -> data_type assignation_key_value DOTANDCOMMA .)
    RETURN          reduce using rule 94 (variable_assignation -> data_type assignation_key_value DOTANDCOMMA .)


state 285

    (103) assignation_key_value_multiple -> assignation_key_value COMMA . assignation_key_value_multiple
    (102) assignation_key_value_multiple -> . assignation_key_value
    (103) assignation_key_value_multiple -> . assignation_key_value COMMA assignation_key_value_multiple
    (100) assignation_key_value -> . VARIABLE ASSIGNATION value
    (101) assignation_key_value -> . READ LPARENT RPARENT

    VARIABLE        shift and go to state 299
    READ            shift and go to state 219

    assignation_key_value          shift and go to state 353
    assignation_key_value_multiple shift and go to state 354

state 286

    (96) variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA .

    PRINT           reduce using rule 96 (variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA .)
    READ            reduce using rule 96 (variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA .)
    VARIABLE        reduce using rule 96 (variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA .)
    QUEUE           reduce using rule 96 (variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA .)
    STACK           reduce using rule 96 (variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA .)
    IF              reduce using rule 96 (variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA .)
    CONST           reduce using rule 96 (variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA .)
    INTEGER         reduce using rule 96 (variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 96 (variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 96 (variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA .)
    CHARTYPE        reduce using rule 96 (variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 96 (variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 96 (variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 96 (variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA .)
    INTTYPE         reduce using rule 96 (variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 96 (variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA .)
    LIST            reduce using rule 96 (variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA .)
    DICTIONARY      reduce using rule 96 (variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA .)
    METHOD          reduce using rule 96 (variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA .)
    FOR             reduce using rule 96 (variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA .)
    FOREACH         reduce using rule 96 (variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA .)
    TRY             reduce using rule 96 (variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA .)
    WHILE           reduce using rule 96 (variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA .)
    DO              reduce using rule 96 (variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA .)
    PUBLIC          reduce using rule 96 (variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA .)
    PRIVATE         reduce using rule 96 (variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA .)
    RKEY            reduce using rule 96 (variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA .)
    RETURN          reduce using rule 96 (variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA .)


state 287

    (98) late_initialization -> data_type VARIABLE DOTANDCOMMA .

    PRINT           reduce using rule 98 (late_initialization -> data_type VARIABLE DOTANDCOMMA .)
    READ            reduce using rule 98 (late_initialization -> data_type VARIABLE DOTANDCOMMA .)
    VARIABLE        reduce using rule 98 (late_initialization -> data_type VARIABLE DOTANDCOMMA .)
    QUEUE           reduce using rule 98 (late_initialization -> data_type VARIABLE DOTANDCOMMA .)
    STACK           reduce using rule 98 (late_initialization -> data_type VARIABLE DOTANDCOMMA .)
    IF              reduce using rule 98 (late_initialization -> data_type VARIABLE DOTANDCOMMA .)
    CONST           reduce using rule 98 (late_initialization -> data_type VARIABLE DOTANDCOMMA .)
    INTEGER         reduce using rule 98 (late_initialization -> data_type VARIABLE DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 98 (late_initialization -> data_type VARIABLE DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 98 (late_initialization -> data_type VARIABLE DOTANDCOMMA .)
    CHARTYPE        reduce using rule 98 (late_initialization -> data_type VARIABLE DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 98 (late_initialization -> data_type VARIABLE DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 98 (late_initialization -> data_type VARIABLE DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 98 (late_initialization -> data_type VARIABLE DOTANDCOMMA .)
    INTTYPE         reduce using rule 98 (late_initialization -> data_type VARIABLE DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 98 (late_initialization -> data_type VARIABLE DOTANDCOMMA .)
    LIST            reduce using rule 98 (late_initialization -> data_type VARIABLE DOTANDCOMMA .)
    DICTIONARY      reduce using rule 98 (late_initialization -> data_type VARIABLE DOTANDCOMMA .)
    METHOD          reduce using rule 98 (late_initialization -> data_type VARIABLE DOTANDCOMMA .)
    FOR             reduce using rule 98 (late_initialization -> data_type VARIABLE DOTANDCOMMA .)
    FOREACH         reduce using rule 98 (late_initialization -> data_type VARIABLE DOTANDCOMMA .)
    TRY             reduce using rule 98 (late_initialization -> data_type VARIABLE DOTANDCOMMA .)
    WHILE           reduce using rule 98 (late_initialization -> data_type VARIABLE DOTANDCOMMA .)
    DO              reduce using rule 98 (late_initialization -> data_type VARIABLE DOTANDCOMMA .)
    PUBLIC          reduce using rule 98 (late_initialization -> data_type VARIABLE DOTANDCOMMA .)
    PRIVATE         reduce using rule 98 (late_initialization -> data_type VARIABLE DOTANDCOMMA .)
    RKEY            reduce using rule 98 (late_initialization -> data_type VARIABLE DOTANDCOMMA .)
    RETURN          reduce using rule 98 (late_initialization -> data_type VARIABLE DOTANDCOMMA .)


state 288

    (101) assignation_key_value -> READ LPARENT . RPARENT

    RPARENT         shift and go to state 355


state 289

    (173) stack_struct -> STACK VARIABLE ASSIGNATION . NEW STACK LPARENT RPARENT DOTANDCOMMA

    NEW             shift and go to state 356


state 290

    (137) block_if -> IF LPARENT logic_operation . RPARENT LKEY not_yes_nested_if RKEY other_if

    RPARENT         shift and go to state 357


state 291

    (67) logic_operation -> value_numeric . logic_operator INTEGER
    (63) arithmetic_operation -> value_numeric .
    (65) arithmetic_operation -> value_numeric . arithmetic_operator arithmetic_operation
    (69) logic_operator -> . GREATER_THAN
    (70) logic_operator -> . SMALLER_THAN
    (71) logic_operator -> . EQUAL_COMPARATION
    (72) logic_operator -> . INEQUALITY
    (73) logic_operator -> . GREATER_THAN_OR_EQUAL
    (74) logic_operator -> . SMALLER_THAN_OR_EQUAL
    (75) logic_operator -> . LOGICAND
    (76) logic_operator -> . LOGICOR
    (77) logic_operator -> . LOGICNOT
    (78) logic_operator -> . LOGICXOR
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . MINUS
    (81) arithmetic_operator -> . TIMES
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT

  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for SMALLER_THAN resolved as shift
  ! shift/reduce conflict for EQUAL_COMPARATION resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUAL resolved as shift
  ! shift/reduce conflict for SMALLER_THAN_OR_EQUAL resolved as shift
  ! shift/reduce conflict for LOGICAND resolved as shift
  ! shift/reduce conflict for LOGICOR resolved as shift
  ! shift/reduce conflict for LOGICNOT resolved as shift
  ! shift/reduce conflict for LOGICXOR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
    GREATER_THAN    shift and go to state 200
    SMALLER_THAN    shift and go to state 201
    EQUAL_COMPARATION shift and go to state 202
    INEQUALITY      shift and go to state 203
    GREATER_THAN_OR_EQUAL shift and go to state 204
    SMALLER_THAN_OR_EQUAL shift and go to state 205
    LOGICAND        shift and go to state 206
    LOGICOR         shift and go to state 207
    LOGICNOT        shift and go to state 208
    LOGICXOR        shift and go to state 209
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    PERCENT         shift and go to state 199

  ! GREATER_THAN    [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! SMALLER_THAN    [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! EQUAL_COMPARATION [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! INEQUALITY      [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! SMALLER_THAN_OR_EQUAL [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! LOGICAND        [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! LOGICOR         [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! LOGICNOT        [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! LOGICXOR        [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! PLUS            [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! MINUS           [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! TIMES           [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! DIVIDE          [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! PERCENT         [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]

    logic_operator                 shift and go to state 212
    arithmetic_operator            shift and go to state 211

state 292

    (68) logic_operation -> VARIABLE . logic_operator INTEGER
    (64) arithmetic_operation -> VARIABLE .
    (66) arithmetic_operation -> VARIABLE . arithmetic_operator arithmetic_operation
    (69) logic_operator -> . GREATER_THAN
    (70) logic_operator -> . SMALLER_THAN
    (71) logic_operator -> . EQUAL_COMPARATION
    (72) logic_operator -> . INEQUALITY
    (73) logic_operator -> . GREATER_THAN_OR_EQUAL
    (74) logic_operator -> . SMALLER_THAN_OR_EQUAL
    (75) logic_operator -> . LOGICAND
    (76) logic_operator -> . LOGICOR
    (77) logic_operator -> . LOGICNOT
    (78) logic_operator -> . LOGICXOR
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . MINUS
    (81) arithmetic_operator -> . TIMES
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT

  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for SMALLER_THAN resolved as shift
  ! shift/reduce conflict for EQUAL_COMPARATION resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUAL resolved as shift
  ! shift/reduce conflict for SMALLER_THAN_OR_EQUAL resolved as shift
  ! shift/reduce conflict for LOGICAND resolved as shift
  ! shift/reduce conflict for LOGICOR resolved as shift
  ! shift/reduce conflict for LOGICNOT resolved as shift
  ! shift/reduce conflict for LOGICXOR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
    GREATER_THAN    shift and go to state 200
    SMALLER_THAN    shift and go to state 201
    EQUAL_COMPARATION shift and go to state 202
    INEQUALITY      shift and go to state 203
    GREATER_THAN_OR_EQUAL shift and go to state 204
    SMALLER_THAN_OR_EQUAL shift and go to state 205
    LOGICAND        shift and go to state 206
    LOGICOR         shift and go to state 207
    LOGICNOT        shift and go to state 208
    LOGICXOR        shift and go to state 209
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    PERCENT         shift and go to state 199

  ! GREATER_THAN    [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! SMALLER_THAN    [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! EQUAL_COMPARATION [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! INEQUALITY      [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! SMALLER_THAN_OR_EQUAL [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! LOGICAND        [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! LOGICOR         [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! LOGICNOT        [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! LOGICXOR        [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! PLUS            [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! TIMES           [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! PERCENT         [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]

    logic_operator                 shift and go to state 191
    arithmetic_operator            shift and go to state 190

state 293

    (89) constant_assignation -> access_modifiers CONST data_type . assignation_key_value DOTANDCOMMA
    (91) constant_assignation -> access_modifiers CONST data_type . assignation_key_value_multiple DOTANDCOMMA
    (100) assignation_key_value -> . VARIABLE ASSIGNATION value
    (101) assignation_key_value -> . READ LPARENT RPARENT
    (102) assignation_key_value_multiple -> . assignation_key_value
    (103) assignation_key_value_multiple -> . assignation_key_value COMMA assignation_key_value_multiple

    VARIABLE        shift and go to state 299
    READ            shift and go to state 219

    assignation_key_value          shift and go to state 358
    assignation_key_value_multiple shift and go to state 359

state 294

    (93) variable_assignation -> access_modifiers data_type assignation_key_value . DOTANDCOMMA
    (102) assignation_key_value_multiple -> assignation_key_value .
    (103) assignation_key_value_multiple -> assignation_key_value . COMMA assignation_key_value_multiple

  ! shift/reduce conflict for DOTANDCOMMA resolved as shift
    DOTANDCOMMA     shift and go to state 360
    COMMA           shift and go to state 285

  ! DOTANDCOMMA     [ reduce using rule 102 (assignation_key_value_multiple -> assignation_key_value .) ]


state 295

    (95) variable_assignation -> access_modifiers data_type assignation_key_value_multiple . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 361


state 296

    (97) late_initialization -> access_modifiers data_type VARIABLE . DOTANDCOMMA
    (100) assignation_key_value -> VARIABLE . ASSIGNATION value

    DOTANDCOMMA     shift and go to state 362
    ASSIGNATION     shift and go to state 193


state 297

    (90) constant_assignation -> CONST data_type assignation_key_value . DOTANDCOMMA
    (102) assignation_key_value_multiple -> assignation_key_value .
    (103) assignation_key_value_multiple -> assignation_key_value . COMMA assignation_key_value_multiple

  ! shift/reduce conflict for DOTANDCOMMA resolved as shift
    DOTANDCOMMA     shift and go to state 363
    COMMA           shift and go to state 285

  ! DOTANDCOMMA     [ reduce using rule 102 (assignation_key_value_multiple -> assignation_key_value .) ]


state 298

    (92) constant_assignation -> CONST data_type assignation_key_value_multiple . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 364


state 299

    (100) assignation_key_value -> VARIABLE . ASSIGNATION value

    ASSIGNATION     shift and go to state 193


state 300

    (157) list_empty -> LIST SMALLER_THAN STRINGTYPE . GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> LIST SMALLER_THAN STRINGTYPE . GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    GREATER_THAN    shift and go to state 365


state 301

    (158) list_empty -> LIST SMALLER_THAN INTTYPE . GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (160) list_full -> LIST SMALLER_THAN INTTYPE . GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    GREATER_THAN    shift and go to state 366


state 302

    (144) dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN . VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (145) dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN . VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA

    VARIABLE        shift and go to state 367


state 303

    (126) for_anidado -> FOR LPARENT assignation_with_datatype . logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY
    (127) for_anidado -> FOR LPARENT assignation_with_datatype . logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY
    (123) for_simple -> FOR LPARENT assignation_with_datatype . logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (124) for_simple -> FOR LPARENT assignation_with_datatype . logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (119) logic_operations -> . logic_operation DOTANDCOMMA
    (120) logic_operations -> . logic_operation COMMA logic_operations
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation

    VARIABLE        shift and go to state 292
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164

    logic_operations               shift and go to state 368
    logic_operation                shift and go to state 369
    value_numeric                  shift and go to state 291
    arithmetic_operation           shift and go to state 257

state 304

    (104) assignation_with_datatype -> data_type . assignation_key_value DOTANDCOMMA
    (105) assignation_with_datatype -> data_type . assignation_key_value COMMA assignation_with_datatype
    (100) assignation_key_value -> . VARIABLE ASSIGNATION value
    (101) assignation_key_value -> . READ LPARENT RPARENT

    VARIABLE        shift and go to state 299
    READ            shift and go to state 219

    assignation_key_value          shift and go to state 370

state 305

    (128) for_each -> FOREACH LPARENT data_type . VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY

    VARIABLE        shift and go to state 371


state 306

    (131) try_catch_simply -> TRY LKEY all_block_code . RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY
    (132) try_catch_finally -> TRY LKEY all_block_code . RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY

    RKEY            shift and go to state 372


state 307

    (135) normal_while -> WHILE LPARENT logic_operation . RPARENT LKEY all_block_code RKEY

    RPARENT         shift and go to state 373


state 308

    (136) do_while -> DO LKEY all_block_code . RKEY WHILE LPARENT logic_operation RPARENT

    RKEY            shift and go to state 374


state 309

    (194) simple_method -> STATIC data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY .

    STATIC          reduce using rule 194 (simple_method -> STATIC data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY .)
    PUBLIC          reduce using rule 194 (simple_method -> STATIC data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY .)
    ACTION          reduce using rule 194 (simple_method -> STATIC data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY .)
    PRIVATE         reduce using rule 194 (simple_method -> STATIC data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY .)


state 310

    (198) function_return -> RETURN value . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 375


state 311

    (196) simple_method -> access_modifiers STATIC data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return . RKEY

    RKEY            shift and go to state 376


state 312

    (197) simple_method -> access_modifiers STATIC VOID METHOD LPARENT function_arguments RPARENT LKEY all_block_code RKEY .

    STATIC          reduce using rule 197 (simple_method -> access_modifiers STATIC VOID METHOD LPARENT function_arguments RPARENT LKEY all_block_code RKEY .)
    PUBLIC          reduce using rule 197 (simple_method -> access_modifiers STATIC VOID METHOD LPARENT function_arguments RPARENT LKEY all_block_code RKEY .)
    ACTION          reduce using rule 197 (simple_method -> access_modifiers STATIC VOID METHOD LPARENT function_arguments RPARENT LKEY all_block_code RKEY .)
    PRIVATE         reduce using rule 197 (simple_method -> access_modifiers STATIC VOID METHOD LPARENT function_arguments RPARENT LKEY all_block_code RKEY .)


state 313

    (204) declaration_lambda -> ACTION SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION VARIABLE ARROW LKEY block_code . RKEY

    RKEY            shift and go to state 377


state 314

    (203) declaration_async -> PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT TASK DOT . METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY

    METHOD          shift and go to state 378


state 315

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code . RKEY

    RKEY            shift and go to state 379


state 316

    (206) method_declaration -> METHOD IDENTIFIER LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 380


state 317

    (33) print_data -> PRINT LPARENT STRING RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 381


state 318

    (34) print_data -> PRINT LPARENT VARIABLE RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 382


state 319

    (50) array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET . ASSIGNATION value DOTANDCOMMA
    (48) array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .

    ASSIGNATION     shift and go to state 383
    PRINT           reduce using rule 48 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    READ            reduce using rule 48 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    VARIABLE        reduce using rule 48 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    QUEUE           reduce using rule 48 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    STACK           reduce using rule 48 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    IF              reduce using rule 48 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    CONST           reduce using rule 48 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    INTEGER         reduce using rule 48 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    FLOAT_NUMBER    reduce using rule 48 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    DECIMAL_NUMBER  reduce using rule 48 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    CHARTYPE        reduce using rule 48 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    STRINGTYPE      reduce using rule 48 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    FLOATTYPE       reduce using rule 48 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    DECIMALTYPE     reduce using rule 48 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    INTTYPE         reduce using rule 48 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    BOOLTYPE        reduce using rule 48 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    LIST            reduce using rule 48 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    DICTIONARY      reduce using rule 48 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    METHOD          reduce using rule 48 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    FOR             reduce using rule 48 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    FOREACH         reduce using rule 48 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    TRY             reduce using rule 48 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    WHILE           reduce using rule 48 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    DO              reduce using rule 48 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    PUBLIC          reduce using rule 48 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    PRIVATE         reduce using rule 48 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    RKEY            reduce using rule 48 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    RETURN          reduce using rule 48 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)


state 320

    (51) array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET . ASSIGNATION value DOTANDCOMMA
    (49) array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .

    ASSIGNATION     shift and go to state 384
    PRINT           reduce using rule 49 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    READ            reduce using rule 49 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    VARIABLE        reduce using rule 49 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    QUEUE           reduce using rule 49 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    STACK           reduce using rule 49 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    IF              reduce using rule 49 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    CONST           reduce using rule 49 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    INTEGER         reduce using rule 49 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    FLOAT_NUMBER    reduce using rule 49 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    DECIMAL_NUMBER  reduce using rule 49 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    CHARTYPE        reduce using rule 49 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    STRINGTYPE      reduce using rule 49 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    FLOATTYPE       reduce using rule 49 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    DECIMALTYPE     reduce using rule 49 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    INTTYPE         reduce using rule 49 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    BOOLTYPE        reduce using rule 49 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    LIST            reduce using rule 49 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    DICTIONARY      reduce using rule 49 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    METHOD          reduce using rule 49 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    FOR             reduce using rule 49 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    FOREACH         reduce using rule 49 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    TRY             reduce using rule 49 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    WHILE           reduce using rule 49 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    DO              reduce using rule 49 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    PUBLIC          reduce using rule 49 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    PRIVATE         reduce using rule 49 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    RKEY            reduce using rule 49 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    RETURN          reduce using rule 49 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)


state 321

    (37) concatenation -> STRING PLUS . concatenation
    (36) concatenation -> . STRING
    (37) concatenation -> . STRING PLUS concatenation

    STRING          shift and go to state 385

    concatenation                  shift and go to state 386

state 322

    (35) read_data -> READ LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 387


state 323

    (45) array -> LBRACKET array_content . RBRACKET

    RBRACKET        shift and go to state 388


state 324

    (46) array_content -> value .
    (47) array_content -> value . COMMA array_content

    RBRACKET        reduce using rule 46 (array_content -> value .)
    COMMA           shift and go to state 389


state 325

    (169) list_func_clear -> VARIABLE DOT CLEAR LPARENT . RPARENT DOTANDCOMMA
    (191) queue_clear -> VARIABLE DOT CLEAR LPARENT . RPARENT DOTANDCOMMA
    (181) stack_clear -> VARIABLE DOT CLEAR LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 390


state 326

    (170) list_func_count -> VARIABLE DOT COUNT LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 391


state 327

    (171) list_func_add -> VARIABLE DOT ADD LPARENT . STRING RPARENT DOTANDCOMMA

    STRING          shift and go to state 392


state 328

    (172) list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT . INTEGER RPARENT DOTANDCOMMA

    INTEGER         shift and go to state 393


state 329

    (153) dict_func_put -> VARIABLE DOT PUT LPARENT . STRING COMMA VARIABLE RPARENT DOTANDCOMMA

    STRING          shift and go to state 394


state 330

    (154) dict_func_remove -> VARIABLE DOT REMOVE LPARENT . VARIABLE RPARENT DOTANDCOMMA

    VARIABLE        shift and go to state 395


state 331

    (189) queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT . value RPARENT DOTANDCOMMA
    (38) value -> . value_numeric
    (39) value -> . value_logic
    (40) value -> . value_string
    (41) value -> . read_data
    (42) value -> . METHOD
    (43) value -> . array
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (56) value_logic -> . BOOLTRUE
    (57) value_logic -> . BOOLFALSE
    (58) value_logic -> . logic_operation
    (52) value_string -> . STRING
    (53) value_string -> . CHAR
    (54) value_string -> . VARIABLE
    (55) value_string -> . concatenation
    (35) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (45) array -> . LBRACKET array_content RBRACKET
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (36) concatenation -> . STRING
    (37) concatenation -> . STRING PLUS concatenation

    METHOD          shift and go to state 255
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164
    BOOLTRUE        shift and go to state 258
    BOOLFALSE       shift and go to state 259
    STRING          shift and go to state 261
    CHAR            shift and go to state 262
    VARIABLE        shift and go to state 249
    READ            shift and go to state 264
    LBRACKET        shift and go to state 265

    value                          shift and go to state 396
    value_numeric                  shift and go to state 251
    value_logic                    shift and go to state 252
    value_string                   shift and go to state 253
    read_data                      shift and go to state 254
    array                          shift and go to state 256
    arithmetic_operation           shift and go to state 257
    logic_operation                shift and go to state 260
    concatenation                  shift and go to state 263

state 332

    (190) queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 397


state 333

    (193) queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT . RPARENT DOTANDCOMMA
    (183) stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 398


state 334

    (179) stack_push -> VARIABLE DOT PUSH LPARENT . value RPARENT DOTANDCOMMA
    (38) value -> . value_numeric
    (39) value -> . value_logic
    (40) value -> . value_string
    (41) value -> . read_data
    (42) value -> . METHOD
    (43) value -> . array
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (56) value_logic -> . BOOLTRUE
    (57) value_logic -> . BOOLFALSE
    (58) value_logic -> . logic_operation
    (52) value_string -> . STRING
    (53) value_string -> . CHAR
    (54) value_string -> . VARIABLE
    (55) value_string -> . concatenation
    (35) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (45) array -> . LBRACKET array_content RBRACKET
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (36) concatenation -> . STRING
    (37) concatenation -> . STRING PLUS concatenation

    METHOD          shift and go to state 255
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164
    BOOLTRUE        shift and go to state 258
    BOOLFALSE       shift and go to state 259
    STRING          shift and go to state 261
    CHAR            shift and go to state 262
    VARIABLE        shift and go to state 249
    READ            shift and go to state 264
    LBRACKET        shift and go to state 265

    value                          shift and go to state 399
    value_numeric                  shift and go to state 251
    value_logic                    shift and go to state 252
    value_string                   shift and go to state 253
    read_data                      shift and go to state 254
    array                          shift and go to state 256
    arithmetic_operation           shift and go to state 257
    logic_operation                shift and go to state 260
    concatenation                  shift and go to state 263

state 335

    (180) stack_pop -> VARIABLE DOT POP LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 400


state 336

    (182) stack_peek -> VARIABLE DOT PEEK LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 401


state 337

    (35) read_data -> READ LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    READ            reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    INTEGER         reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    DICTIONARY      reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    METHOD          reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    RETURN          reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    DOTANDCOMMA     reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    COMMA           reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    RBRACKET        reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    RPARENT         reduce using rule 35 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)


state 338

    (44) array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET . array_content RBRACKET DOTANDCOMMA
    (46) array_content -> . value
    (47) array_content -> . value COMMA array_content
    (38) value -> . value_numeric
    (39) value -> . value_logic
    (40) value -> . value_string
    (41) value -> . read_data
    (42) value -> . METHOD
    (43) value -> . array
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (56) value_logic -> . BOOLTRUE
    (57) value_logic -> . BOOLFALSE
    (58) value_logic -> . logic_operation
    (52) value_string -> . STRING
    (53) value_string -> . CHAR
    (54) value_string -> . VARIABLE
    (55) value_string -> . concatenation
    (35) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (45) array -> . LBRACKET array_content RBRACKET
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (36) concatenation -> . STRING
    (37) concatenation -> . STRING PLUS concatenation

    METHOD          shift and go to state 255
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164
    BOOLTRUE        shift and go to state 258
    BOOLFALSE       shift and go to state 259
    STRING          shift and go to state 261
    CHAR            shift and go to state 262
    VARIABLE        shift and go to state 249
    READ            shift and go to state 264
    LBRACKET        shift and go to state 265

    array_content                  shift and go to state 402
    value                          shift and go to state 324
    value_numeric                  shift and go to state 251
    value_logic                    shift and go to state 252
    value_string                   shift and go to state 253
    read_data                      shift and go to state 254
    array                          shift and go to state 256
    arithmetic_operation           shift and go to state 257
    logic_operation                shift and go to state 260
    concatenation                  shift and go to state 263

state 339

    (205) concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block . RKEY

    RKEY            shift and go to state 403


state 340

    (207) concurrent_block -> statement_list .
    (209) statement_list -> statement_list . statement
    (210) statement -> . assignment_concurrent
    (211) statement -> . if_statement_concurrent
    (212) statement -> . while_loop_concurrent
    (213) statement -> . method_call_concurrent
    (214) statement -> . return_statement_concurrent
    (215) assignment_concurrent -> . VARIABLE ASSIGNATION expression DOTANDCOMMA
    (216) if_statement_concurrent -> . IF LPARENT condition RPARENT LKEY concurrent_block RKEY
    (217) while_loop_concurrent -> . WHILE LPARENT condition RPARENT LKEY concurrent_block RKEY
    (218) method_call_concurrent -> . IDENTIFIER LPARENT RPARENT DOTANDCOMMA
    (219) return_statement_concurrent -> . RETURN expression DOTANDCOMMA

    RKEY            reduce using rule 207 (concurrent_block -> statement_list .)
    VARIABLE        shift and go to state 347
    IF              shift and go to state 348
    WHILE           shift and go to state 349
    IDENTIFIER      shift and go to state 350
    RETURN          shift and go to state 351

    statement                      shift and go to state 404
    assignment_concurrent          shift and go to state 342
    if_statement_concurrent        shift and go to state 343
    while_loop_concurrent          shift and go to state 344
    method_call_concurrent         shift and go to state 345
    return_statement_concurrent    shift and go to state 346

state 341

    (208) statement_list -> statement .

    VARIABLE        reduce using rule 208 (statement_list -> statement .)
    IF              reduce using rule 208 (statement_list -> statement .)
    WHILE           reduce using rule 208 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 208 (statement_list -> statement .)
    RETURN          reduce using rule 208 (statement_list -> statement .)
    RKEY            reduce using rule 208 (statement_list -> statement .)


state 342

    (210) statement -> assignment_concurrent .

    VARIABLE        reduce using rule 210 (statement -> assignment_concurrent .)
    IF              reduce using rule 210 (statement -> assignment_concurrent .)
    WHILE           reduce using rule 210 (statement -> assignment_concurrent .)
    IDENTIFIER      reduce using rule 210 (statement -> assignment_concurrent .)
    RETURN          reduce using rule 210 (statement -> assignment_concurrent .)
    RKEY            reduce using rule 210 (statement -> assignment_concurrent .)


state 343

    (211) statement -> if_statement_concurrent .

    VARIABLE        reduce using rule 211 (statement -> if_statement_concurrent .)
    IF              reduce using rule 211 (statement -> if_statement_concurrent .)
    WHILE           reduce using rule 211 (statement -> if_statement_concurrent .)
    IDENTIFIER      reduce using rule 211 (statement -> if_statement_concurrent .)
    RETURN          reduce using rule 211 (statement -> if_statement_concurrent .)
    RKEY            reduce using rule 211 (statement -> if_statement_concurrent .)


state 344

    (212) statement -> while_loop_concurrent .

    VARIABLE        reduce using rule 212 (statement -> while_loop_concurrent .)
    IF              reduce using rule 212 (statement -> while_loop_concurrent .)
    WHILE           reduce using rule 212 (statement -> while_loop_concurrent .)
    IDENTIFIER      reduce using rule 212 (statement -> while_loop_concurrent .)
    RETURN          reduce using rule 212 (statement -> while_loop_concurrent .)
    RKEY            reduce using rule 212 (statement -> while_loop_concurrent .)


state 345

    (213) statement -> method_call_concurrent .

    VARIABLE        reduce using rule 213 (statement -> method_call_concurrent .)
    IF              reduce using rule 213 (statement -> method_call_concurrent .)
    WHILE           reduce using rule 213 (statement -> method_call_concurrent .)
    IDENTIFIER      reduce using rule 213 (statement -> method_call_concurrent .)
    RETURN          reduce using rule 213 (statement -> method_call_concurrent .)
    RKEY            reduce using rule 213 (statement -> method_call_concurrent .)


state 346

    (214) statement -> return_statement_concurrent .

    VARIABLE        reduce using rule 214 (statement -> return_statement_concurrent .)
    IF              reduce using rule 214 (statement -> return_statement_concurrent .)
    WHILE           reduce using rule 214 (statement -> return_statement_concurrent .)
    IDENTIFIER      reduce using rule 214 (statement -> return_statement_concurrent .)
    RETURN          reduce using rule 214 (statement -> return_statement_concurrent .)
    RKEY            reduce using rule 214 (statement -> return_statement_concurrent .)


state 347

    (215) assignment_concurrent -> VARIABLE . ASSIGNATION expression DOTANDCOMMA

    ASSIGNATION     shift and go to state 405


state 348

    (216) if_statement_concurrent -> IF . LPARENT condition RPARENT LKEY concurrent_block RKEY

    LPARENT         shift and go to state 406


state 349

    (217) while_loop_concurrent -> WHILE . LPARENT condition RPARENT LKEY concurrent_block RKEY

    LPARENT         shift and go to state 407


state 350

    (218) method_call_concurrent -> IDENTIFIER . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 408


state 351

    (219) return_statement_concurrent -> RETURN . expression DOTANDCOMMA
    (220) expression -> . value_numeric
    (221) expression -> . VARIABLE
    (222) expression -> . value_numeric arithmetic_operator expression
    (223) expression -> . VARIABLE arithmetic_operator expression
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation

    VARIABLE        shift and go to state 411
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164

    expression                     shift and go to state 409
    value_numeric                  shift and go to state 410
    arithmetic_operation           shift and go to state 257

state 352

    (184) queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN . VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA

    VARIABLE        shift and go to state 412


state 353

    (102) assignation_key_value_multiple -> assignation_key_value .
    (103) assignation_key_value_multiple -> assignation_key_value . COMMA assignation_key_value_multiple

    DOTANDCOMMA     reduce using rule 102 (assignation_key_value_multiple -> assignation_key_value .)
    COMMA           shift and go to state 285


state 354

    (103) assignation_key_value_multiple -> assignation_key_value COMMA assignation_key_value_multiple .

    DOTANDCOMMA     reduce using rule 103 (assignation_key_value_multiple -> assignation_key_value COMMA assignation_key_value_multiple .)


state 355

    (101) assignation_key_value -> READ LPARENT RPARENT .

    DOTANDCOMMA     reduce using rule 101 (assignation_key_value -> READ LPARENT RPARENT .)
    COMMA           reduce using rule 101 (assignation_key_value -> READ LPARENT RPARENT .)


state 356

    (173) stack_struct -> STACK VARIABLE ASSIGNATION NEW . STACK LPARENT RPARENT DOTANDCOMMA

    STACK           shift and go to state 413


state 357

    (137) block_if -> IF LPARENT logic_operation RPARENT . LKEY not_yes_nested_if RKEY other_if

    LKEY            shift and go to state 414


state 358

    (89) constant_assignation -> access_modifiers CONST data_type assignation_key_value . DOTANDCOMMA
    (102) assignation_key_value_multiple -> assignation_key_value .
    (103) assignation_key_value_multiple -> assignation_key_value . COMMA assignation_key_value_multiple

  ! shift/reduce conflict for DOTANDCOMMA resolved as shift
    DOTANDCOMMA     shift and go to state 415
    COMMA           shift and go to state 285

  ! DOTANDCOMMA     [ reduce using rule 102 (assignation_key_value_multiple -> assignation_key_value .) ]


state 359

    (91) constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 416


state 360

    (93) variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA .

    PRINT           reduce using rule 93 (variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA .)
    READ            reduce using rule 93 (variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA .)
    VARIABLE        reduce using rule 93 (variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA .)
    QUEUE           reduce using rule 93 (variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA .)
    STACK           reduce using rule 93 (variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA .)
    IF              reduce using rule 93 (variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA .)
    CONST           reduce using rule 93 (variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA .)
    INTEGER         reduce using rule 93 (variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 93 (variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 93 (variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA .)
    CHARTYPE        reduce using rule 93 (variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 93 (variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 93 (variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 93 (variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA .)
    INTTYPE         reduce using rule 93 (variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 93 (variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA .)
    LIST            reduce using rule 93 (variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA .)
    DICTIONARY      reduce using rule 93 (variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA .)
    METHOD          reduce using rule 93 (variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA .)
    FOR             reduce using rule 93 (variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA .)
    FOREACH         reduce using rule 93 (variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA .)
    TRY             reduce using rule 93 (variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA .)
    WHILE           reduce using rule 93 (variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA .)
    DO              reduce using rule 93 (variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA .)
    PUBLIC          reduce using rule 93 (variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA .)
    PRIVATE         reduce using rule 93 (variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA .)
    RKEY            reduce using rule 93 (variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA .)
    RETURN          reduce using rule 93 (variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA .)


state 361

    (95) variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA .

    PRINT           reduce using rule 95 (variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA .)
    READ            reduce using rule 95 (variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA .)
    VARIABLE        reduce using rule 95 (variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA .)
    QUEUE           reduce using rule 95 (variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA .)
    STACK           reduce using rule 95 (variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA .)
    IF              reduce using rule 95 (variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA .)
    CONST           reduce using rule 95 (variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA .)
    INTEGER         reduce using rule 95 (variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 95 (variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 95 (variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA .)
    CHARTYPE        reduce using rule 95 (variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 95 (variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 95 (variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 95 (variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA .)
    INTTYPE         reduce using rule 95 (variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 95 (variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA .)
    LIST            reduce using rule 95 (variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA .)
    DICTIONARY      reduce using rule 95 (variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA .)
    METHOD          reduce using rule 95 (variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA .)
    FOR             reduce using rule 95 (variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA .)
    FOREACH         reduce using rule 95 (variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA .)
    TRY             reduce using rule 95 (variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA .)
    WHILE           reduce using rule 95 (variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA .)
    DO              reduce using rule 95 (variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA .)
    PUBLIC          reduce using rule 95 (variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA .)
    PRIVATE         reduce using rule 95 (variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA .)
    RKEY            reduce using rule 95 (variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA .)
    RETURN          reduce using rule 95 (variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA .)


state 362

    (97) late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA .

    PRINT           reduce using rule 97 (late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA .)
    READ            reduce using rule 97 (late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA .)
    VARIABLE        reduce using rule 97 (late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA .)
    QUEUE           reduce using rule 97 (late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA .)
    STACK           reduce using rule 97 (late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA .)
    IF              reduce using rule 97 (late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA .)
    CONST           reduce using rule 97 (late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA .)
    INTEGER         reduce using rule 97 (late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 97 (late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 97 (late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA .)
    CHARTYPE        reduce using rule 97 (late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 97 (late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 97 (late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 97 (late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA .)
    INTTYPE         reduce using rule 97 (late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 97 (late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA .)
    LIST            reduce using rule 97 (late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA .)
    DICTIONARY      reduce using rule 97 (late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA .)
    METHOD          reduce using rule 97 (late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA .)
    FOR             reduce using rule 97 (late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA .)
    FOREACH         reduce using rule 97 (late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA .)
    TRY             reduce using rule 97 (late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA .)
    WHILE           reduce using rule 97 (late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA .)
    DO              reduce using rule 97 (late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA .)
    PUBLIC          reduce using rule 97 (late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA .)
    PRIVATE         reduce using rule 97 (late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA .)
    RKEY            reduce using rule 97 (late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA .)
    RETURN          reduce using rule 97 (late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA .)


state 363

    (90) constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA .

    PRINT           reduce using rule 90 (constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA .)
    READ            reduce using rule 90 (constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA .)
    VARIABLE        reduce using rule 90 (constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA .)
    QUEUE           reduce using rule 90 (constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA .)
    STACK           reduce using rule 90 (constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA .)
    IF              reduce using rule 90 (constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA .)
    CONST           reduce using rule 90 (constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA .)
    INTEGER         reduce using rule 90 (constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 90 (constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 90 (constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA .)
    CHARTYPE        reduce using rule 90 (constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 90 (constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 90 (constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 90 (constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA .)
    INTTYPE         reduce using rule 90 (constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 90 (constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA .)
    LIST            reduce using rule 90 (constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA .)
    DICTIONARY      reduce using rule 90 (constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA .)
    METHOD          reduce using rule 90 (constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA .)
    FOR             reduce using rule 90 (constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA .)
    FOREACH         reduce using rule 90 (constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA .)
    TRY             reduce using rule 90 (constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA .)
    WHILE           reduce using rule 90 (constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA .)
    DO              reduce using rule 90 (constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA .)
    PUBLIC          reduce using rule 90 (constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA .)
    PRIVATE         reduce using rule 90 (constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA .)
    RKEY            reduce using rule 90 (constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA .)
    RETURN          reduce using rule 90 (constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA .)


state 364

    (92) constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA .

    PRINT           reduce using rule 92 (constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    READ            reduce using rule 92 (constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    VARIABLE        reduce using rule 92 (constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    QUEUE           reduce using rule 92 (constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    STACK           reduce using rule 92 (constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    IF              reduce using rule 92 (constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    CONST           reduce using rule 92 (constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    INTEGER         reduce using rule 92 (constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 92 (constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 92 (constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    CHARTYPE        reduce using rule 92 (constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 92 (constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 92 (constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 92 (constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    INTTYPE         reduce using rule 92 (constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 92 (constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    LIST            reduce using rule 92 (constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    DICTIONARY      reduce using rule 92 (constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    METHOD          reduce using rule 92 (constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    FOR             reduce using rule 92 (constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    FOREACH         reduce using rule 92 (constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    TRY             reduce using rule 92 (constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    WHILE           reduce using rule 92 (constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    DO              reduce using rule 92 (constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    PUBLIC          reduce using rule 92 (constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    PRIVATE         reduce using rule 92 (constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    RKEY            reduce using rule 92 (constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    RETURN          reduce using rule 92 (constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA .)


state 365

    (157) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN . VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN . VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    VARIABLE        shift and go to state 417


state 366

    (158) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN . VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (160) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN . VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    VARIABLE        shift and go to state 418


state 367

    (144) dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE . ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (145) dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE . ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA

    ASSIGNATION     shift and go to state 419


state 368

    (126) for_anidado -> FOR LPARENT assignation_with_datatype logic_operations . DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY
    (127) for_anidado -> FOR LPARENT assignation_with_datatype logic_operations . DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY
    (123) for_simple -> FOR LPARENT assignation_with_datatype logic_operations . DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (124) for_simple -> FOR LPARENT assignation_with_datatype logic_operations . DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    DOTANDCOMMA     shift and go to state 420


state 369

    (119) logic_operations -> logic_operation . DOTANDCOMMA
    (120) logic_operations -> logic_operation . COMMA logic_operations

    DOTANDCOMMA     shift and go to state 421
    COMMA           shift and go to state 422


state 370

    (104) assignation_with_datatype -> data_type assignation_key_value . DOTANDCOMMA
    (105) assignation_with_datatype -> data_type assignation_key_value . COMMA assignation_with_datatype

    DOTANDCOMMA     shift and go to state 423
    COMMA           shift and go to state 424


state 371

    (128) for_each -> FOREACH LPARENT data_type VARIABLE . IN VARIABLE RPARENT LKEY all_block_code RKEY

    IN              shift and go to state 425


state 372

    (131) try_catch_simply -> TRY LKEY all_block_code RKEY . CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY
    (132) try_catch_finally -> TRY LKEY all_block_code RKEY . CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY

    CATCH           shift and go to state 426


state 373

    (135) normal_while -> WHILE LPARENT logic_operation RPARENT . LKEY all_block_code RKEY

    LKEY            shift and go to state 427


state 374

    (136) do_while -> DO LKEY all_block_code RKEY . WHILE LPARENT logic_operation RPARENT

    WHILE           shift and go to state 428


state 375

    (198) function_return -> RETURN value DOTANDCOMMA .

    RKEY            reduce using rule 198 (function_return -> RETURN value DOTANDCOMMA .)


state 376

    (196) simple_method -> access_modifiers STATIC data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY .

    STATIC          reduce using rule 196 (simple_method -> access_modifiers STATIC data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY .)
    PUBLIC          reduce using rule 196 (simple_method -> access_modifiers STATIC data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY .)
    ACTION          reduce using rule 196 (simple_method -> access_modifiers STATIC data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY .)
    PRIVATE         reduce using rule 196 (simple_method -> access_modifiers STATIC data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY .)


state 377

    (204) declaration_lambda -> ACTION SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION VARIABLE ARROW LKEY block_code RKEY .

    STATIC          reduce using rule 204 (declaration_lambda -> ACTION SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION VARIABLE ARROW LKEY block_code RKEY .)
    PUBLIC          reduce using rule 204 (declaration_lambda -> ACTION SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION VARIABLE ARROW LKEY block_code RKEY .)
    ACTION          reduce using rule 204 (declaration_lambda -> ACTION SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION VARIABLE ARROW LKEY block_code RKEY .)
    PRIVATE         reduce using rule 204 (declaration_lambda -> ACTION SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION VARIABLE ARROW LKEY block_code RKEY .)


state 378

    (203) declaration_async -> PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT TASK DOT METHOD . LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY

    LPARENT         shift and go to state 429


state 379

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY .

    RKEY            reduce using rule 4 (block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY .)


state 380

    (206) method_declaration -> METHOD IDENTIFIER LPARENT RPARENT DOTANDCOMMA .

    CONCURRENT      reduce using rule 206 (method_declaration -> METHOD IDENTIFIER LPARENT RPARENT DOTANDCOMMA .)


state 381

    (33) print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 33 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    READ            reduce using rule 33 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 33 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 33 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 33 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    IF              reduce using rule 33 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 33 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    INTEGER         reduce using rule 33 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 33 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 33 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 33 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 33 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 33 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 33 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 33 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 33 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 33 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    DICTIONARY      reduce using rule 33 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    METHOD          reduce using rule 33 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 33 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 33 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 33 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 33 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    DO              reduce using rule 33 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 33 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 33 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 33 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    RETURN          reduce using rule 33 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)


state 382

    (34) print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 34 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    READ            reduce using rule 34 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 34 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 34 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 34 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    IF              reduce using rule 34 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 34 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    INTEGER         reduce using rule 34 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 34 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 34 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 34 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 34 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 34 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 34 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 34 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 34 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 34 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    DICTIONARY      reduce using rule 34 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    METHOD          reduce using rule 34 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 34 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 34 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 34 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 34 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    DO              reduce using rule 34 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 34 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 34 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 34 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    RETURN          reduce using rule 34 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)


state 383

    (50) array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION . value DOTANDCOMMA
    (38) value -> . value_numeric
    (39) value -> . value_logic
    (40) value -> . value_string
    (41) value -> . read_data
    (42) value -> . METHOD
    (43) value -> . array
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (56) value_logic -> . BOOLTRUE
    (57) value_logic -> . BOOLFALSE
    (58) value_logic -> . logic_operation
    (52) value_string -> . STRING
    (53) value_string -> . CHAR
    (54) value_string -> . VARIABLE
    (55) value_string -> . concatenation
    (35) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (45) array -> . LBRACKET array_content RBRACKET
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (36) concatenation -> . STRING
    (37) concatenation -> . STRING PLUS concatenation

    METHOD          shift and go to state 255
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164
    BOOLTRUE        shift and go to state 258
    BOOLFALSE       shift and go to state 259
    STRING          shift and go to state 261
    CHAR            shift and go to state 262
    VARIABLE        shift and go to state 249
    READ            shift and go to state 264
    LBRACKET        shift and go to state 265

    value                          shift and go to state 430
    value_numeric                  shift and go to state 251
    value_logic                    shift and go to state 252
    value_string                   shift and go to state 253
    read_data                      shift and go to state 254
    array                          shift and go to state 256
    arithmetic_operation           shift and go to state 257
    logic_operation                shift and go to state 260
    concatenation                  shift and go to state 263

state 384

    (51) array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION . value DOTANDCOMMA
    (38) value -> . value_numeric
    (39) value -> . value_logic
    (40) value -> . value_string
    (41) value -> . read_data
    (42) value -> . METHOD
    (43) value -> . array
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (56) value_logic -> . BOOLTRUE
    (57) value_logic -> . BOOLFALSE
    (58) value_logic -> . logic_operation
    (52) value_string -> . STRING
    (53) value_string -> . CHAR
    (54) value_string -> . VARIABLE
    (55) value_string -> . concatenation
    (35) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (45) array -> . LBRACKET array_content RBRACKET
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (36) concatenation -> . STRING
    (37) concatenation -> . STRING PLUS concatenation

    METHOD          shift and go to state 255
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164
    BOOLTRUE        shift and go to state 258
    BOOLFALSE       shift and go to state 259
    STRING          shift and go to state 261
    CHAR            shift and go to state 262
    VARIABLE        shift and go to state 249
    READ            shift and go to state 264
    LBRACKET        shift and go to state 265

    value                          shift and go to state 431
    value_numeric                  shift and go to state 251
    value_logic                    shift and go to state 252
    value_string                   shift and go to state 253
    read_data                      shift and go to state 254
    array                          shift and go to state 256
    arithmetic_operation           shift and go to state 257
    logic_operation                shift and go to state 260
    concatenation                  shift and go to state 263

state 385

    (36) concatenation -> STRING .
    (37) concatenation -> STRING . PLUS concatenation

    DOTANDCOMMA     reduce using rule 36 (concatenation -> STRING .)
    COMMA           reduce using rule 36 (concatenation -> STRING .)
    RBRACKET        reduce using rule 36 (concatenation -> STRING .)
    RPARENT         reduce using rule 36 (concatenation -> STRING .)
    RKEY            reduce using rule 36 (concatenation -> STRING .)
    PLUS            shift and go to state 321


state 386

    (37) concatenation -> STRING PLUS concatenation .

    DOTANDCOMMA     reduce using rule 37 (concatenation -> STRING PLUS concatenation .)
    COMMA           reduce using rule 37 (concatenation -> STRING PLUS concatenation .)
    RBRACKET        reduce using rule 37 (concatenation -> STRING PLUS concatenation .)
    RPARENT         reduce using rule 37 (concatenation -> STRING PLUS concatenation .)
    RKEY            reduce using rule 37 (concatenation -> STRING PLUS concatenation .)


state 387

    (35) read_data -> READ LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 337


state 388

    (45) array -> LBRACKET array_content RBRACKET .

    DOTANDCOMMA     reduce using rule 45 (array -> LBRACKET array_content RBRACKET .)
    COMMA           reduce using rule 45 (array -> LBRACKET array_content RBRACKET .)
    RBRACKET        reduce using rule 45 (array -> LBRACKET array_content RBRACKET .)
    RPARENT         reduce using rule 45 (array -> LBRACKET array_content RBRACKET .)
    RKEY            reduce using rule 45 (array -> LBRACKET array_content RBRACKET .)


state 389

    (47) array_content -> value COMMA . array_content
    (46) array_content -> . value
    (47) array_content -> . value COMMA array_content
    (38) value -> . value_numeric
    (39) value -> . value_logic
    (40) value -> . value_string
    (41) value -> . read_data
    (42) value -> . METHOD
    (43) value -> . array
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (56) value_logic -> . BOOLTRUE
    (57) value_logic -> . BOOLFALSE
    (58) value_logic -> . logic_operation
    (52) value_string -> . STRING
    (53) value_string -> . CHAR
    (54) value_string -> . VARIABLE
    (55) value_string -> . concatenation
    (35) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (45) array -> . LBRACKET array_content RBRACKET
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (36) concatenation -> . STRING
    (37) concatenation -> . STRING PLUS concatenation

    METHOD          shift and go to state 255
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164
    BOOLTRUE        shift and go to state 258
    BOOLFALSE       shift and go to state 259
    STRING          shift and go to state 261
    CHAR            shift and go to state 262
    VARIABLE        shift and go to state 249
    READ            shift and go to state 264
    LBRACKET        shift and go to state 265

    value                          shift and go to state 324
    array_content                  shift and go to state 432
    value_numeric                  shift and go to state 251
    value_logic                    shift and go to state 252
    value_string                   shift and go to state 253
    read_data                      shift and go to state 254
    array                          shift and go to state 256
    arithmetic_operation           shift and go to state 257
    logic_operation                shift and go to state 260
    concatenation                  shift and go to state 263

state 390

    (169) list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT . DOTANDCOMMA
    (191) queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT . DOTANDCOMMA
    (181) stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 433


state 391

    (170) list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 434


state 392

    (171) list_func_add -> VARIABLE DOT ADD LPARENT STRING . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 435


state 393

    (172) list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 436


state 394

    (153) dict_func_put -> VARIABLE DOT PUT LPARENT STRING . COMMA VARIABLE RPARENT DOTANDCOMMA

    COMMA           shift and go to state 437


state 395

    (154) dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 438


state 396

    (189) queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 439


state 397

    (190) queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 440


state 398

    (193) queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT . DOTANDCOMMA
    (183) stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 441


state 399

    (179) stack_push -> VARIABLE DOT PUSH LPARENT value . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 442


state 400

    (180) stack_pop -> VARIABLE DOT POP LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 443


state 401

    (182) stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 444


state 402

    (44) array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content . RBRACKET DOTANDCOMMA

    RBRACKET        shift and go to state 445


state 403

    (205) concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY .

    PRINT           reduce using rule 205 (concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY .)
    READ            reduce using rule 205 (concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY .)
    VARIABLE        reduce using rule 205 (concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY .)
    QUEUE           reduce using rule 205 (concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY .)
    STACK           reduce using rule 205 (concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY .)
    IF              reduce using rule 205 (concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY .)
    CONST           reduce using rule 205 (concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY .)
    INTEGER         reduce using rule 205 (concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY .)
    FLOAT_NUMBER    reduce using rule 205 (concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY .)
    DECIMAL_NUMBER  reduce using rule 205 (concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY .)
    CHARTYPE        reduce using rule 205 (concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY .)
    STRINGTYPE      reduce using rule 205 (concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY .)
    FLOATTYPE       reduce using rule 205 (concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY .)
    DECIMALTYPE     reduce using rule 205 (concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY .)
    INTTYPE         reduce using rule 205 (concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY .)
    BOOLTYPE        reduce using rule 205 (concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY .)
    LIST            reduce using rule 205 (concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY .)
    DICTIONARY      reduce using rule 205 (concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY .)
    METHOD          reduce using rule 205 (concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY .)
    FOR             reduce using rule 205 (concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY .)
    FOREACH         reduce using rule 205 (concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY .)
    TRY             reduce using rule 205 (concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY .)
    WHILE           reduce using rule 205 (concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY .)
    DO              reduce using rule 205 (concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY .)
    PUBLIC          reduce using rule 205 (concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY .)
    PRIVATE         reduce using rule 205 (concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY .)
    RKEY            reduce using rule 205 (concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY .)
    RETURN          reduce using rule 205 (concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY .)


state 404

    (209) statement_list -> statement_list statement .

    VARIABLE        reduce using rule 209 (statement_list -> statement_list statement .)
    IF              reduce using rule 209 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 209 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 209 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 209 (statement_list -> statement_list statement .)
    RKEY            reduce using rule 209 (statement_list -> statement_list statement .)


state 405

    (215) assignment_concurrent -> VARIABLE ASSIGNATION . expression DOTANDCOMMA
    (220) expression -> . value_numeric
    (221) expression -> . VARIABLE
    (222) expression -> . value_numeric arithmetic_operator expression
    (223) expression -> . VARIABLE arithmetic_operator expression
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation

    VARIABLE        shift and go to state 411
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164

    expression                     shift and go to state 446
    value_numeric                  shift and go to state 410
    arithmetic_operation           shift and go to state 257

state 406

    (216) if_statement_concurrent -> IF LPARENT . condition RPARENT LKEY concurrent_block RKEY
    (224) condition -> . value_numeric logic_operator value_numeric
    (225) condition -> . VARIABLE logic_operator value_numeric
    (226) condition -> . value_numeric logic_operator VARIABLE
    (227) condition -> . VARIABLE logic_operator VARIABLE
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation

    VARIABLE        shift and go to state 449
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164

    condition                      shift and go to state 447
    value_numeric                  shift and go to state 448
    arithmetic_operation           shift and go to state 257

state 407

    (217) while_loop_concurrent -> WHILE LPARENT . condition RPARENT LKEY concurrent_block RKEY
    (224) condition -> . value_numeric logic_operator value_numeric
    (225) condition -> . VARIABLE logic_operator value_numeric
    (226) condition -> . value_numeric logic_operator VARIABLE
    (227) condition -> . VARIABLE logic_operator VARIABLE
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation

    VARIABLE        shift and go to state 449
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164

    condition                      shift and go to state 450
    value_numeric                  shift and go to state 448
    arithmetic_operation           shift and go to state 257

state 408

    (218) method_call_concurrent -> IDENTIFIER LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 451


state 409

    (219) return_statement_concurrent -> RETURN expression . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 452


state 410

    (220) expression -> value_numeric .
    (222) expression -> value_numeric . arithmetic_operator expression
    (63) arithmetic_operation -> value_numeric .
    (65) arithmetic_operation -> value_numeric . arithmetic_operator arithmetic_operation
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . MINUS
    (81) arithmetic_operator -> . TIMES
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT

  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 63 (arithmetic_operation -> value_numeric .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
    DOTANDCOMMA     reduce using rule 63 (arithmetic_operation -> value_numeric .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    PERCENT         shift and go to state 199

  ! DOTANDCOMMA     [ reduce using rule 220 (expression -> value_numeric .) ]
  ! PLUS            [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! MINUS           [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! TIMES           [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! DIVIDE          [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! PERCENT         [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]

    arithmetic_operator            shift and go to state 453

state 411

    (221) expression -> VARIABLE .
    (223) expression -> VARIABLE . arithmetic_operator expression
    (64) arithmetic_operation -> VARIABLE .
    (66) arithmetic_operation -> VARIABLE . arithmetic_operator arithmetic_operation
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . MINUS
    (81) arithmetic_operator -> . TIMES
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT

  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 64 (arithmetic_operation -> VARIABLE .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
    DOTANDCOMMA     reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    PERCENT         shift and go to state 199

  ! DOTANDCOMMA     [ reduce using rule 221 (expression -> VARIABLE .) ]
  ! PLUS            [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! TIMES           [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! PERCENT         [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]

    arithmetic_operator            shift and go to state 454

state 412

    (184) queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE . ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA

    ASSIGNATION     shift and go to state 455


state 413

    (173) stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 456


state 414

    (137) block_if -> IF LPARENT logic_operation RPARENT LKEY . not_yes_nested_if RKEY other_if
    (140) not_yes_nested_if -> . block_if
    (141) not_yes_nested_if -> . block_code
    (137) block_if -> . IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . read_data
    (8) block_code -> . arithmetic_operation
    (9) block_code -> . logic_operation
    (10) block_code -> . array_assignation
    (11) block_code -> . array_value_assign
    (12) block_code -> . array_indexing
    (13) block_code -> . lists
    (14) block_code -> . functions_list
    (15) block_code -> . dict_estruct
    (16) block_code -> . functions_dict
    (17) block_code -> . concurrent_method
    (18) block_code -> . queue_struct
    (19) block_code -> . functions_queue
    (20) block_code -> . stack_struct
    (21) block_code -> . functions_stack
    (22) block_code -> . block_if
    (23) block_code -> . block_for
    (24) block_code -> . block_try_catch
    (25) block_code -> . block_while
    (86) def_const_or_var -> . constant_assignation
    (87) def_const_or_var -> . variable_assignation
    (88) def_const_or_var -> . late_initialization
    (33) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (34) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (35) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (44) array_assignation -> . array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA
    (50) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (51) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (48) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (49) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (155) lists -> . list_empty
    (156) lists -> . list_full
    (165) functions_list -> . list_func_clear
    (166) functions_list -> . list_func_count
    (167) functions_list -> . list_func_add
    (168) functions_list -> . list_func_removeat
    (142) dict_estruct -> . dict_empty
    (143) dict_estruct -> . dict_full
    (151) functions_dict -> . dict_func_put
    (152) functions_dict -> . dict_func_remove
    (205) concurrent_method -> . method_declaration CONCURRENT LKEY concurrent_block RKEY
    (184) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (185) functions_queue -> . queue_enqueue
    (186) functions_queue -> . queue_dequeue
    (187) functions_queue -> . queue_clear
    (188) functions_queue -> . queue_isEmpty
    (173) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (174) functions_stack -> . stack_push
    (175) functions_stack -> . stack_pop
    (176) functions_stack -> . stack_clear
    (177) functions_stack -> . stack_peek
    (178) functions_stack -> . stack_isEmpty
    (121) block_for -> . for_anidado
    (122) block_for -> . for_each
    (129) block_try_catch -> . try_catch_simply
    (130) block_try_catch -> . try_catch_finally
    (133) block_while -> . normal_while
    (134) block_while -> . do_while
    (89) constant_assignation -> . access_modifiers CONST data_type assignation_key_value DOTANDCOMMA
    (90) constant_assignation -> . CONST data_type assignation_key_value DOTANDCOMMA
    (91) constant_assignation -> . access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (92) constant_assignation -> . CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (93) variable_assignation -> . access_modifiers data_type assignation_key_value DOTANDCOMMA
    (94) variable_assignation -> . data_type assignation_key_value DOTANDCOMMA
    (95) variable_assignation -> . access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA
    (96) variable_assignation -> . data_type assignation_key_value_multiple DOTANDCOMMA
    (97) late_initialization -> . access_modifiers data_type VARIABLE DOTANDCOMMA
    (98) late_initialization -> . data_type VARIABLE DOTANDCOMMA
    (99) late_initialization -> . assignation_key_value DOTANDCOMMA
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET
    (157) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (158) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (160) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (169) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (170) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (171) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (172) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (144) dict_empty -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (145) dict_full -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA
    (153) dict_func_put -> . VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA
    (154) dict_func_remove -> . VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA
    (206) method_declaration -> . METHOD IDENTIFIER LPARENT RPARENT DOTANDCOMMA
    (189) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (190) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (191) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (193) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (179) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (180) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (181) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (182) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (183) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (125) for_anidado -> . for_simple
    (126) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY
    (127) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY
    (128) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (131) try_catch_simply -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY
    (132) try_catch_finally -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY
    (135) normal_while -> . WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY
    (136) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT
    (84) access_modifiers -> . PUBLIC
    (85) access_modifiers -> . PRIVATE
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (100) assignation_key_value -> . VARIABLE ASSIGNATION value
    (101) assignation_key_value -> . READ LPARENT RPARENT
    (123) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (124) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    IF              shift and go to state 153
    PRINT           shift and go to state 124
    READ            shift and go to state 126
    VARIABLE        shift and go to state 125
    QUEUE           shift and go to state 141
    STACK           shift and go to state 147
    CONST           shift and go to state 161
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164
    CHARTYPE        shift and go to state 165
    STRINGTYPE      shift and go to state 166
    FLOATTYPE       shift and go to state 167
    DECIMALTYPE     shift and go to state 168
    INTTYPE         shift and go to state 169
    BOOLTYPE        shift and go to state 170
    LIST            shift and go to state 171
    DICTIONARY      shift and go to state 172
    METHOD          shift and go to state 97
    FOR             shift and go to state 174
    FOREACH         shift and go to state 175
    TRY             shift and go to state 176
    WHILE           shift and go to state 177
    DO              shift and go to state 178
    PUBLIC          shift and go to state 179
    PRIVATE         shift and go to state 20

    logic_operation                shift and go to state 104
    not_yes_nested_if              shift and go to state 457
    block_if                       shift and go to state 458
    block_code                     shift and go to state 459
    def_const_or_var               shift and go to state 100
    print_data                     shift and go to state 101
    read_data                      shift and go to state 102
    arithmetic_operation           shift and go to state 103
    array_assignation              shift and go to state 105
    array_value_assign             shift and go to state 106
    array_indexing                 shift and go to state 107
    lists                          shift and go to state 108
    functions_list                 shift and go to state 109
    dict_estruct                   shift and go to state 110
    functions_dict                 shift and go to state 111
    concurrent_method              shift and go to state 112
    queue_struct                   shift and go to state 113
    functions_queue                shift and go to state 114
    stack_struct                   shift and go to state 115
    functions_stack                shift and go to state 116
    block_for                      shift and go to state 118
    block_try_catch                shift and go to state 119
    block_while                    shift and go to state 120
    constant_assignation           shift and go to state 121
    variable_assignation           shift and go to state 122
    late_initialization            shift and go to state 123
    value_numeric                  shift and go to state 127
    array_type                     shift and go to state 129
    list_empty                     shift and go to state 130
    list_full                      shift and go to state 131
    list_func_clear                shift and go to state 132
    list_func_count                shift and go to state 133
    list_func_add                  shift and go to state 134
    list_func_removeat             shift and go to state 135
    dict_empty                     shift and go to state 136
    dict_full                      shift and go to state 137
    dict_func_put                  shift and go to state 138
    dict_func_remove               shift and go to state 139
    method_declaration             shift and go to state 140
    data_type                      shift and go to state 142
    queue_enqueue                  shift and go to state 143
    queue_dequeue                  shift and go to state 144
    queue_clear                    shift and go to state 145
    queue_isEmpty                  shift and go to state 146
    stack_push                     shift and go to state 148
    stack_pop                      shift and go to state 149
    stack_clear                    shift and go to state 150
    stack_peek                     shift and go to state 151
    stack_isEmpty                  shift and go to state 152
    for_anidado                    shift and go to state 154
    for_each                       shift and go to state 155
    try_catch_simply               shift and go to state 156
    try_catch_finally              shift and go to state 157
    normal_while                   shift and go to state 158
    do_while                       shift and go to state 159
    access_modifiers               shift and go to state 160
    assignation_key_value          shift and go to state 162
    for_simple                     shift and go to state 173

state 415

    (89) constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA .

    PRINT           reduce using rule 89 (constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA .)
    READ            reduce using rule 89 (constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA .)
    VARIABLE        reduce using rule 89 (constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA .)
    QUEUE           reduce using rule 89 (constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA .)
    STACK           reduce using rule 89 (constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA .)
    IF              reduce using rule 89 (constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA .)
    CONST           reduce using rule 89 (constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA .)
    INTEGER         reduce using rule 89 (constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 89 (constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 89 (constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA .)
    CHARTYPE        reduce using rule 89 (constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 89 (constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 89 (constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 89 (constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA .)
    INTTYPE         reduce using rule 89 (constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 89 (constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA .)
    LIST            reduce using rule 89 (constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA .)
    DICTIONARY      reduce using rule 89 (constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA .)
    METHOD          reduce using rule 89 (constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA .)
    FOR             reduce using rule 89 (constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA .)
    FOREACH         reduce using rule 89 (constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA .)
    TRY             reduce using rule 89 (constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA .)
    WHILE           reduce using rule 89 (constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA .)
    DO              reduce using rule 89 (constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA .)
    PUBLIC          reduce using rule 89 (constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA .)
    PRIVATE         reduce using rule 89 (constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA .)
    RKEY            reduce using rule 89 (constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA .)
    RETURN          reduce using rule 89 (constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA .)


state 416

    (91) constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA .

    PRINT           reduce using rule 91 (constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    READ            reduce using rule 91 (constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    VARIABLE        reduce using rule 91 (constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    QUEUE           reduce using rule 91 (constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    STACK           reduce using rule 91 (constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    IF              reduce using rule 91 (constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    CONST           reduce using rule 91 (constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    INTEGER         reduce using rule 91 (constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 91 (constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 91 (constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    CHARTYPE        reduce using rule 91 (constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 91 (constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 91 (constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 91 (constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    INTTYPE         reduce using rule 91 (constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 91 (constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    LIST            reduce using rule 91 (constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    DICTIONARY      reduce using rule 91 (constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    METHOD          reduce using rule 91 (constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    FOR             reduce using rule 91 (constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    FOREACH         reduce using rule 91 (constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    TRY             reduce using rule 91 (constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    WHILE           reduce using rule 91 (constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    DO              reduce using rule 91 (constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    PUBLIC          reduce using rule 91 (constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    PRIVATE         reduce using rule 91 (constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    RKEY            reduce using rule 91 (constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA .)
    RETURN          reduce using rule 91 (constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA .)


state 417

    (157) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE . ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE . ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    ASSIGNATION     shift and go to state 460


state 418

    (158) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE . ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (160) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE . ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    ASSIGNATION     shift and go to state 461


state 419

    (144) dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION . NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (145) dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION . NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA

    NEW             shift and go to state 462


state 420

    (126) for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA . VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY
    (127) for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA . VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY
    (123) for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA . VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (124) for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA . VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    VARIABLE        shift and go to state 463


state 421

    (119) logic_operations -> logic_operation DOTANDCOMMA .

    DOTANDCOMMA     reduce using rule 119 (logic_operations -> logic_operation DOTANDCOMMA .)


state 422

    (120) logic_operations -> logic_operation COMMA . logic_operations
    (119) logic_operations -> . logic_operation DOTANDCOMMA
    (120) logic_operations -> . logic_operation COMMA logic_operations
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation

    VARIABLE        shift and go to state 292
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164

    logic_operation                shift and go to state 369
    logic_operations               shift and go to state 464
    value_numeric                  shift and go to state 291
    arithmetic_operation           shift and go to state 257

state 423

    (104) assignation_with_datatype -> data_type assignation_key_value DOTANDCOMMA .

    VARIABLE        reduce using rule 104 (assignation_with_datatype -> data_type assignation_key_value DOTANDCOMMA .)
    INTEGER         reduce using rule 104 (assignation_with_datatype -> data_type assignation_key_value DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 104 (assignation_with_datatype -> data_type assignation_key_value DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 104 (assignation_with_datatype -> data_type assignation_key_value DOTANDCOMMA .)


state 424

    (105) assignation_with_datatype -> data_type assignation_key_value COMMA . assignation_with_datatype
    (104) assignation_with_datatype -> . data_type assignation_key_value DOTANDCOMMA
    (105) assignation_with_datatype -> . data_type assignation_key_value COMMA assignation_with_datatype
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET

    CHARTYPE        shift and go to state 30
    STRINGTYPE      shift and go to state 28
    FLOATTYPE       shift and go to state 31
    DECIMALTYPE     shift and go to state 32
    INTTYPE         shift and go to state 33
    BOOLTYPE        shift and go to state 34

    data_type                      shift and go to state 304
    assignation_with_datatype      shift and go to state 465
    array_type                     shift and go to state 35

state 425

    (128) for_each -> FOREACH LPARENT data_type VARIABLE IN . VARIABLE RPARENT LKEY all_block_code RKEY

    VARIABLE        shift and go to state 466


state 426

    (131) try_catch_simply -> TRY LKEY all_block_code RKEY CATCH . LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY
    (132) try_catch_finally -> TRY LKEY all_block_code RKEY CATCH . LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY

    LPARENT         shift and go to state 467


state 427

    (135) normal_while -> WHILE LPARENT logic_operation RPARENT LKEY . all_block_code RKEY
    (26) all_block_code -> . block_code
    (27) all_block_code -> . block_code all_block_code
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . read_data
    (8) block_code -> . arithmetic_operation
    (9) block_code -> . logic_operation
    (10) block_code -> . array_assignation
    (11) block_code -> . array_value_assign
    (12) block_code -> . array_indexing
    (13) block_code -> . lists
    (14) block_code -> . functions_list
    (15) block_code -> . dict_estruct
    (16) block_code -> . functions_dict
    (17) block_code -> . concurrent_method
    (18) block_code -> . queue_struct
    (19) block_code -> . functions_queue
    (20) block_code -> . stack_struct
    (21) block_code -> . functions_stack
    (22) block_code -> . block_if
    (23) block_code -> . block_for
    (24) block_code -> . block_try_catch
    (25) block_code -> . block_while
    (86) def_const_or_var -> . constant_assignation
    (87) def_const_or_var -> . variable_assignation
    (88) def_const_or_var -> . late_initialization
    (33) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (34) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (35) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (44) array_assignation -> . array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA
    (50) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (51) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (48) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (49) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (155) lists -> . list_empty
    (156) lists -> . list_full
    (165) functions_list -> . list_func_clear
    (166) functions_list -> . list_func_count
    (167) functions_list -> . list_func_add
    (168) functions_list -> . list_func_removeat
    (142) dict_estruct -> . dict_empty
    (143) dict_estruct -> . dict_full
    (151) functions_dict -> . dict_func_put
    (152) functions_dict -> . dict_func_remove
    (205) concurrent_method -> . method_declaration CONCURRENT LKEY concurrent_block RKEY
    (184) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (185) functions_queue -> . queue_enqueue
    (186) functions_queue -> . queue_dequeue
    (187) functions_queue -> . queue_clear
    (188) functions_queue -> . queue_isEmpty
    (173) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (174) functions_stack -> . stack_push
    (175) functions_stack -> . stack_pop
    (176) functions_stack -> . stack_clear
    (177) functions_stack -> . stack_peek
    (178) functions_stack -> . stack_isEmpty
    (137) block_if -> . IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if
    (121) block_for -> . for_anidado
    (122) block_for -> . for_each
    (129) block_try_catch -> . try_catch_simply
    (130) block_try_catch -> . try_catch_finally
    (133) block_while -> . normal_while
    (134) block_while -> . do_while
    (89) constant_assignation -> . access_modifiers CONST data_type assignation_key_value DOTANDCOMMA
    (90) constant_assignation -> . CONST data_type assignation_key_value DOTANDCOMMA
    (91) constant_assignation -> . access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (92) constant_assignation -> . CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (93) variable_assignation -> . access_modifiers data_type assignation_key_value DOTANDCOMMA
    (94) variable_assignation -> . data_type assignation_key_value DOTANDCOMMA
    (95) variable_assignation -> . access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA
    (96) variable_assignation -> . data_type assignation_key_value_multiple DOTANDCOMMA
    (97) late_initialization -> . access_modifiers data_type VARIABLE DOTANDCOMMA
    (98) late_initialization -> . data_type VARIABLE DOTANDCOMMA
    (99) late_initialization -> . assignation_key_value DOTANDCOMMA
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET
    (157) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (158) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (160) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (169) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (170) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (171) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (172) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (144) dict_empty -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (145) dict_full -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA
    (153) dict_func_put -> . VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA
    (154) dict_func_remove -> . VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA
    (206) method_declaration -> . METHOD IDENTIFIER LPARENT RPARENT DOTANDCOMMA
    (189) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (190) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (191) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (193) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (179) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (180) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (181) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (182) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (183) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (125) for_anidado -> . for_simple
    (126) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY
    (127) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY
    (128) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (131) try_catch_simply -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY
    (132) try_catch_finally -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY
    (135) normal_while -> . WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY
    (136) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT
    (84) access_modifiers -> . PUBLIC
    (85) access_modifiers -> . PRIVATE
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (100) assignation_key_value -> . VARIABLE ASSIGNATION value
    (101) assignation_key_value -> . READ LPARENT RPARENT
    (123) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (124) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    PRINT           shift and go to state 124
    READ            shift and go to state 126
    VARIABLE        shift and go to state 125
    QUEUE           shift and go to state 141
    STACK           shift and go to state 147
    IF              shift and go to state 153
    CONST           shift and go to state 161
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164
    CHARTYPE        shift and go to state 165
    STRINGTYPE      shift and go to state 166
    FLOATTYPE       shift and go to state 167
    DECIMALTYPE     shift and go to state 168
    INTTYPE         shift and go to state 169
    BOOLTYPE        shift and go to state 170
    LIST            shift and go to state 171
    DICTIONARY      shift and go to state 172
    METHOD          shift and go to state 97
    FOR             shift and go to state 174
    FOREACH         shift and go to state 175
    TRY             shift and go to state 176
    WHILE           shift and go to state 177
    DO              shift and go to state 178
    PUBLIC          shift and go to state 179
    PRIVATE         shift and go to state 20

    logic_operation                shift and go to state 104
    all_block_code                 shift and go to state 468
    block_code                     shift and go to state 99
    def_const_or_var               shift and go to state 100
    print_data                     shift and go to state 101
    read_data                      shift and go to state 102
    arithmetic_operation           shift and go to state 103
    array_assignation              shift and go to state 105
    array_value_assign             shift and go to state 106
    array_indexing                 shift and go to state 107
    lists                          shift and go to state 108
    functions_list                 shift and go to state 109
    dict_estruct                   shift and go to state 110
    functions_dict                 shift and go to state 111
    concurrent_method              shift and go to state 112
    queue_struct                   shift and go to state 113
    functions_queue                shift and go to state 114
    stack_struct                   shift and go to state 115
    functions_stack                shift and go to state 116
    block_if                       shift and go to state 117
    block_for                      shift and go to state 118
    block_try_catch                shift and go to state 119
    block_while                    shift and go to state 120
    constant_assignation           shift and go to state 121
    variable_assignation           shift and go to state 122
    late_initialization            shift and go to state 123
    value_numeric                  shift and go to state 127
    array_type                     shift and go to state 129
    list_empty                     shift and go to state 130
    list_full                      shift and go to state 131
    list_func_clear                shift and go to state 132
    list_func_count                shift and go to state 133
    list_func_add                  shift and go to state 134
    list_func_removeat             shift and go to state 135
    dict_empty                     shift and go to state 136
    dict_full                      shift and go to state 137
    dict_func_put                  shift and go to state 138
    dict_func_remove               shift and go to state 139
    method_declaration             shift and go to state 140
    data_type                      shift and go to state 142
    queue_enqueue                  shift and go to state 143
    queue_dequeue                  shift and go to state 144
    queue_clear                    shift and go to state 145
    queue_isEmpty                  shift and go to state 146
    stack_push                     shift and go to state 148
    stack_pop                      shift and go to state 149
    stack_clear                    shift and go to state 150
    stack_peek                     shift and go to state 151
    stack_isEmpty                  shift and go to state 152
    for_anidado                    shift and go to state 154
    for_each                       shift and go to state 155
    try_catch_simply               shift and go to state 156
    try_catch_finally              shift and go to state 157
    normal_while                   shift and go to state 158
    do_while                       shift and go to state 159
    access_modifiers               shift and go to state 160
    assignation_key_value          shift and go to state 162
    for_simple                     shift and go to state 173

state 428

    (136) do_while -> DO LKEY all_block_code RKEY WHILE . LPARENT logic_operation RPARENT

    LPARENT         shift and go to state 469


state 429

    (203) declaration_async -> PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT TASK DOT METHOD LPARENT . LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY

    LPARENT         shift and go to state 470


state 430

    (50) array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 471


state 431

    (51) array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 472


state 432

    (47) array_content -> value COMMA array_content .

    RBRACKET        reduce using rule 47 (array_content -> value COMMA array_content .)


state 433

    (169) list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .
    (191) queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .
    (181) stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .

  ! reduce/reduce conflict for PRINT resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for READ resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for QUEUE resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STACK resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for IF resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for CONST resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for INTEGER resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FLOAT_NUMBER resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DECIMAL_NUMBER resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for CHARTYPE resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STRINGTYPE resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FLOATTYPE resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DECIMALTYPE resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for INTTYPE resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for BOOLTYPE resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for LIST resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DICTIONARY resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for METHOD resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FOR resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FOREACH resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for TRY resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WHILE resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DO resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for RKEY resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for RETURN resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PRINT resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for READ resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for QUEUE resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STACK resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for IF resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for CONST resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for INTEGER resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FLOAT_NUMBER resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DECIMAL_NUMBER resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for CHARTYPE resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STRINGTYPE resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FLOATTYPE resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DECIMALTYPE resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for INTTYPE resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for BOOLTYPE resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for LIST resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DICTIONARY resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for METHOD resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FOR resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FOREACH resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for TRY resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WHILE resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DO resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for RKEY resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for RETURN resolved using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    PRINT           reduce using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    READ            reduce using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    INTEGER         reduce using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    DICTIONARY      reduce using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    METHOD          reduce using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    RETURN          reduce using rule 169 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)

  ! PRINT           [ reduce using rule 191 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! READ            [ reduce using rule 191 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! VARIABLE        [ reduce using rule 191 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! QUEUE           [ reduce using rule 191 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! STACK           [ reduce using rule 191 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! IF              [ reduce using rule 191 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! CONST           [ reduce using rule 191 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! INTEGER         [ reduce using rule 191 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! FLOAT_NUMBER    [ reduce using rule 191 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! DECIMAL_NUMBER  [ reduce using rule 191 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! CHARTYPE        [ reduce using rule 191 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! STRINGTYPE      [ reduce using rule 191 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! FLOATTYPE       [ reduce using rule 191 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! DECIMALTYPE     [ reduce using rule 191 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! INTTYPE         [ reduce using rule 191 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! BOOLTYPE        [ reduce using rule 191 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! LIST            [ reduce using rule 191 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! DICTIONARY      [ reduce using rule 191 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! METHOD          [ reduce using rule 191 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! FOR             [ reduce using rule 191 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! FOREACH         [ reduce using rule 191 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! TRY             [ reduce using rule 191 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! WHILE           [ reduce using rule 191 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! DO              [ reduce using rule 191 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! PUBLIC          [ reduce using rule 191 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! PRIVATE         [ reduce using rule 191 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! RKEY            [ reduce using rule 191 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! RETURN          [ reduce using rule 191 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! PRINT           [ reduce using rule 181 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! READ            [ reduce using rule 181 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! VARIABLE        [ reduce using rule 181 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! QUEUE           [ reduce using rule 181 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! STACK           [ reduce using rule 181 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! IF              [ reduce using rule 181 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! CONST           [ reduce using rule 181 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! INTEGER         [ reduce using rule 181 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! FLOAT_NUMBER    [ reduce using rule 181 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! DECIMAL_NUMBER  [ reduce using rule 181 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! CHARTYPE        [ reduce using rule 181 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! STRINGTYPE      [ reduce using rule 181 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! FLOATTYPE       [ reduce using rule 181 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! DECIMALTYPE     [ reduce using rule 181 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! INTTYPE         [ reduce using rule 181 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! BOOLTYPE        [ reduce using rule 181 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! LIST            [ reduce using rule 181 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! DICTIONARY      [ reduce using rule 181 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! METHOD          [ reduce using rule 181 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! FOR             [ reduce using rule 181 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! FOREACH         [ reduce using rule 181 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! TRY             [ reduce using rule 181 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! WHILE           [ reduce using rule 181 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! DO              [ reduce using rule 181 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! PUBLIC          [ reduce using rule 181 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! PRIVATE         [ reduce using rule 181 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! RKEY            [ reduce using rule 181 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! RETURN          [ reduce using rule 181 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]


state 434

    (170) list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 170 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    READ            reduce using rule 170 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 170 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 170 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 170 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 170 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 170 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    INTEGER         reduce using rule 170 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 170 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 170 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 170 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 170 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 170 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 170 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 170 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 170 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 170 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    DICTIONARY      reduce using rule 170 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    METHOD          reduce using rule 170 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 170 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 170 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 170 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 170 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 170 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 170 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 170 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 170 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    RETURN          reduce using rule 170 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)


state 435

    (171) list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 473


state 436

    (172) list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 474


state 437

    (153) dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA . VARIABLE RPARENT DOTANDCOMMA

    VARIABLE        shift and go to state 475


state 438

    (154) dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 476


state 439

    (189) queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 477


state 440

    (190) queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 190 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    READ            reduce using rule 190 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 190 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 190 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 190 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 190 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 190 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    INTEGER         reduce using rule 190 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 190 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 190 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 190 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 190 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 190 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 190 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 190 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 190 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 190 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    DICTIONARY      reduce using rule 190 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    METHOD          reduce using rule 190 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 190 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 190 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 190 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 190 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 190 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 190 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 190 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 190 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    RETURN          reduce using rule 190 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)


state 441

    (193) queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .
    (183) stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .

  ! reduce/reduce conflict for PRINT resolved using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for READ resolved using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for QUEUE resolved using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STACK resolved using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for IF resolved using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for CONST resolved using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for INTEGER resolved using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FLOAT_NUMBER resolved using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DECIMAL_NUMBER resolved using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for CHARTYPE resolved using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STRINGTYPE resolved using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FLOATTYPE resolved using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DECIMALTYPE resolved using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for INTTYPE resolved using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for BOOLTYPE resolved using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for LIST resolved using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DICTIONARY resolved using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for METHOD resolved using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FOR resolved using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FOREACH resolved using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for TRY resolved using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WHILE resolved using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DO resolved using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for RKEY resolved using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for RETURN resolved using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    PRINT           reduce using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    READ            reduce using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    INTEGER         reduce using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    DICTIONARY      reduce using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    METHOD          reduce using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    RETURN          reduce using rule 183 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)

  ! PRINT           [ reduce using rule 193 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! READ            [ reduce using rule 193 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! VARIABLE        [ reduce using rule 193 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! QUEUE           [ reduce using rule 193 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! STACK           [ reduce using rule 193 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! IF              [ reduce using rule 193 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! CONST           [ reduce using rule 193 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! INTEGER         [ reduce using rule 193 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! FLOAT_NUMBER    [ reduce using rule 193 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! DECIMAL_NUMBER  [ reduce using rule 193 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! CHARTYPE        [ reduce using rule 193 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! STRINGTYPE      [ reduce using rule 193 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! FLOATTYPE       [ reduce using rule 193 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! DECIMALTYPE     [ reduce using rule 193 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! INTTYPE         [ reduce using rule 193 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! BOOLTYPE        [ reduce using rule 193 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! LIST            [ reduce using rule 193 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! DICTIONARY      [ reduce using rule 193 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! METHOD          [ reduce using rule 193 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! FOR             [ reduce using rule 193 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! FOREACH         [ reduce using rule 193 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! TRY             [ reduce using rule 193 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! WHILE           [ reduce using rule 193 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! DO              [ reduce using rule 193 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! PUBLIC          [ reduce using rule 193 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! PRIVATE         [ reduce using rule 193 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! RKEY            [ reduce using rule 193 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! RETURN          [ reduce using rule 193 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]


state 442

    (179) stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 478


state 443

    (180) stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 180 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    READ            reduce using rule 180 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 180 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 180 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 180 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 180 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 180 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    INTEGER         reduce using rule 180 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 180 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 180 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 180 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 180 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 180 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 180 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 180 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 180 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 180 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    DICTIONARY      reduce using rule 180 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    METHOD          reduce using rule 180 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 180 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 180 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 180 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 180 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 180 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 180 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 180 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 180 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    RETURN          reduce using rule 180 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)


state 444

    (182) stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 182 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    READ            reduce using rule 182 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 182 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 182 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 182 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 182 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 182 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    INTEGER         reduce using rule 182 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 182 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 182 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 182 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 182 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 182 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 182 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 182 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 182 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 182 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    DICTIONARY      reduce using rule 182 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    METHOD          reduce using rule 182 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 182 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 182 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 182 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 182 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 182 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 182 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 182 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 182 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    RETURN          reduce using rule 182 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)


state 445

    (44) array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 479


state 446

    (215) assignment_concurrent -> VARIABLE ASSIGNATION expression . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 480


state 447

    (216) if_statement_concurrent -> IF LPARENT condition . RPARENT LKEY concurrent_block RKEY

    RPARENT         shift and go to state 481


state 448

    (224) condition -> value_numeric . logic_operator value_numeric
    (226) condition -> value_numeric . logic_operator VARIABLE
    (63) arithmetic_operation -> value_numeric .
    (65) arithmetic_operation -> value_numeric . arithmetic_operator arithmetic_operation
    (69) logic_operator -> . GREATER_THAN
    (70) logic_operator -> . SMALLER_THAN
    (71) logic_operator -> . EQUAL_COMPARATION
    (72) logic_operator -> . INEQUALITY
    (73) logic_operator -> . GREATER_THAN_OR_EQUAL
    (74) logic_operator -> . SMALLER_THAN_OR_EQUAL
    (75) logic_operator -> . LOGICAND
    (76) logic_operator -> . LOGICOR
    (77) logic_operator -> . LOGICNOT
    (78) logic_operator -> . LOGICXOR
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . MINUS
    (81) arithmetic_operator -> . TIMES
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT

  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for SMALLER_THAN resolved as shift
  ! shift/reduce conflict for EQUAL_COMPARATION resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUAL resolved as shift
  ! shift/reduce conflict for SMALLER_THAN_OR_EQUAL resolved as shift
  ! shift/reduce conflict for LOGICAND resolved as shift
  ! shift/reduce conflict for LOGICOR resolved as shift
  ! shift/reduce conflict for LOGICNOT resolved as shift
  ! shift/reduce conflict for LOGICXOR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
    GREATER_THAN    shift and go to state 200
    SMALLER_THAN    shift and go to state 201
    EQUAL_COMPARATION shift and go to state 202
    INEQUALITY      shift and go to state 203
    GREATER_THAN_OR_EQUAL shift and go to state 204
    SMALLER_THAN_OR_EQUAL shift and go to state 205
    LOGICAND        shift and go to state 206
    LOGICOR         shift and go to state 207
    LOGICNOT        shift and go to state 208
    LOGICXOR        shift and go to state 209
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    PERCENT         shift and go to state 199

  ! GREATER_THAN    [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! SMALLER_THAN    [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! EQUAL_COMPARATION [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! INEQUALITY      [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! SMALLER_THAN_OR_EQUAL [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! LOGICAND        [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! LOGICOR         [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! LOGICNOT        [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! LOGICXOR        [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! PLUS            [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! MINUS           [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! TIMES           [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! DIVIDE          [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! PERCENT         [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]

    logic_operator                 shift and go to state 482
    arithmetic_operator            shift and go to state 211

state 449

    (225) condition -> VARIABLE . logic_operator value_numeric
    (227) condition -> VARIABLE . logic_operator VARIABLE
    (64) arithmetic_operation -> VARIABLE .
    (66) arithmetic_operation -> VARIABLE . arithmetic_operator arithmetic_operation
    (69) logic_operator -> . GREATER_THAN
    (70) logic_operator -> . SMALLER_THAN
    (71) logic_operator -> . EQUAL_COMPARATION
    (72) logic_operator -> . INEQUALITY
    (73) logic_operator -> . GREATER_THAN_OR_EQUAL
    (74) logic_operator -> . SMALLER_THAN_OR_EQUAL
    (75) logic_operator -> . LOGICAND
    (76) logic_operator -> . LOGICOR
    (77) logic_operator -> . LOGICNOT
    (78) logic_operator -> . LOGICXOR
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . MINUS
    (81) arithmetic_operator -> . TIMES
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT

  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for SMALLER_THAN resolved as shift
  ! shift/reduce conflict for EQUAL_COMPARATION resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUAL resolved as shift
  ! shift/reduce conflict for SMALLER_THAN_OR_EQUAL resolved as shift
  ! shift/reduce conflict for LOGICAND resolved as shift
  ! shift/reduce conflict for LOGICOR resolved as shift
  ! shift/reduce conflict for LOGICNOT resolved as shift
  ! shift/reduce conflict for LOGICXOR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
    GREATER_THAN    shift and go to state 200
    SMALLER_THAN    shift and go to state 201
    EQUAL_COMPARATION shift and go to state 202
    INEQUALITY      shift and go to state 203
    GREATER_THAN_OR_EQUAL shift and go to state 204
    SMALLER_THAN_OR_EQUAL shift and go to state 205
    LOGICAND        shift and go to state 206
    LOGICOR         shift and go to state 207
    LOGICNOT        shift and go to state 208
    LOGICXOR        shift and go to state 209
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    PERCENT         shift and go to state 199

  ! GREATER_THAN    [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! SMALLER_THAN    [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! EQUAL_COMPARATION [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! INEQUALITY      [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! SMALLER_THAN_OR_EQUAL [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! LOGICAND        [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! LOGICOR         [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! LOGICNOT        [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! LOGICXOR        [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! PLUS            [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! TIMES           [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! PERCENT         [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]

    logic_operator                 shift and go to state 483
    arithmetic_operator            shift and go to state 190

state 450

    (217) while_loop_concurrent -> WHILE LPARENT condition . RPARENT LKEY concurrent_block RKEY

    RPARENT         shift and go to state 484


state 451

    (218) method_call_concurrent -> IDENTIFIER LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 485


state 452

    (219) return_statement_concurrent -> RETURN expression DOTANDCOMMA .

    VARIABLE        reduce using rule 219 (return_statement_concurrent -> RETURN expression DOTANDCOMMA .)
    IF              reduce using rule 219 (return_statement_concurrent -> RETURN expression DOTANDCOMMA .)
    WHILE           reduce using rule 219 (return_statement_concurrent -> RETURN expression DOTANDCOMMA .)
    IDENTIFIER      reduce using rule 219 (return_statement_concurrent -> RETURN expression DOTANDCOMMA .)
    RETURN          reduce using rule 219 (return_statement_concurrent -> RETURN expression DOTANDCOMMA .)
    RKEY            reduce using rule 219 (return_statement_concurrent -> RETURN expression DOTANDCOMMA .)


state 453

    (222) expression -> value_numeric arithmetic_operator . expression
    (65) arithmetic_operation -> value_numeric arithmetic_operator . arithmetic_operation
    (220) expression -> . value_numeric
    (221) expression -> . VARIABLE
    (222) expression -> . value_numeric arithmetic_operator expression
    (223) expression -> . VARIABLE arithmetic_operator expression
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation

    VARIABLE        shift and go to state 411
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164

    value_numeric                  shift and go to state 410
    expression                     shift and go to state 486
    arithmetic_operation           shift and go to state 279

state 454

    (223) expression -> VARIABLE arithmetic_operator . expression
    (66) arithmetic_operation -> VARIABLE arithmetic_operator . arithmetic_operation
    (220) expression -> . value_numeric
    (221) expression -> . VARIABLE
    (222) expression -> . value_numeric arithmetic_operator expression
    (223) expression -> . VARIABLE arithmetic_operator expression
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation

    VARIABLE        shift and go to state 411
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164

    expression                     shift and go to state 487
    arithmetic_operation           shift and go to state 244
    value_numeric                  shift and go to state 410

state 455

    (184) queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION . NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA

    NEW             shift and go to state 488


state 456

    (173) stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 489


state 457

    (137) block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if . RKEY other_if

    RKEY            shift and go to state 490


state 458

    (140) not_yes_nested_if -> block_if .
    (22) block_code -> block_if .

  ! reduce/reduce conflict for RKEY resolved using rule 22 (block_code -> block_if .)
    RKEY            reduce using rule 22 (block_code -> block_if .)

  ! RKEY            [ reduce using rule 140 (not_yes_nested_if -> block_if .) ]


state 459

    (141) not_yes_nested_if -> block_code .

    RKEY            reduce using rule 141 (not_yes_nested_if -> block_code .)


state 460

    (157) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION . NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION . NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    NEW             shift and go to state 491


state 461

    (158) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION . NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (160) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION . NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    NEW             shift and go to state 492


state 462

    (144) dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW . DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (145) dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW . DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA

    DICTIONARY      shift and go to state 493


state 463

    (126) for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE . INCREMENT RPARENT LKEY for_anidado RKEY
    (127) for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE . DECREMENT RPARENT LKEY for_anidado RKEY
    (123) for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE . INCREMENT RPARENT LKEY all_block_code RKEY
    (124) for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE . DECREMENT RPARENT LKEY all_block_code RKEY

    INCREMENT       shift and go to state 494
    DECREMENT       shift and go to state 495


state 464

    (120) logic_operations -> logic_operation COMMA logic_operations .

    DOTANDCOMMA     reduce using rule 120 (logic_operations -> logic_operation COMMA logic_operations .)


state 465

    (105) assignation_with_datatype -> data_type assignation_key_value COMMA assignation_with_datatype .

    VARIABLE        reduce using rule 105 (assignation_with_datatype -> data_type assignation_key_value COMMA assignation_with_datatype .)
    INTEGER         reduce using rule 105 (assignation_with_datatype -> data_type assignation_key_value COMMA assignation_with_datatype .)
    FLOAT_NUMBER    reduce using rule 105 (assignation_with_datatype -> data_type assignation_key_value COMMA assignation_with_datatype .)
    DECIMAL_NUMBER  reduce using rule 105 (assignation_with_datatype -> data_type assignation_key_value COMMA assignation_with_datatype .)


state 466

    (128) for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE . RPARENT LKEY all_block_code RKEY

    RPARENT         shift and go to state 496


state 467

    (131) try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT . EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY
    (132) try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT . EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY

    EXCEPTION       shift and go to state 497


state 468

    (135) normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code . RKEY

    RKEY            shift and go to state 498


state 469

    (136) do_while -> DO LKEY all_block_code RKEY WHILE LPARENT . logic_operation RPARENT
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation

    VARIABLE        shift and go to state 292
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164

    logic_operation                shift and go to state 499
    value_numeric                  shift and go to state 291
    arithmetic_operation           shift and go to state 257

state 470

    (203) declaration_async -> PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT TASK DOT METHOD LPARENT LPARENT . RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY

    RPARENT         shift and go to state 500


state 471

    (50) array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .

    PRINT           reduce using rule 50 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    READ            reduce using rule 50 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    VARIABLE        reduce using rule 50 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    QUEUE           reduce using rule 50 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    STACK           reduce using rule 50 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    IF              reduce using rule 50 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    CONST           reduce using rule 50 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    INTEGER         reduce using rule 50 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 50 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 50 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    CHARTYPE        reduce using rule 50 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 50 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 50 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 50 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    INTTYPE         reduce using rule 50 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 50 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    LIST            reduce using rule 50 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    DICTIONARY      reduce using rule 50 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    METHOD          reduce using rule 50 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    FOR             reduce using rule 50 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    FOREACH         reduce using rule 50 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    TRY             reduce using rule 50 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    WHILE           reduce using rule 50 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    DO              reduce using rule 50 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    PUBLIC          reduce using rule 50 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    PRIVATE         reduce using rule 50 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    RKEY            reduce using rule 50 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    RETURN          reduce using rule 50 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)


state 472

    (51) array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .

    PRINT           reduce using rule 51 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    READ            reduce using rule 51 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    VARIABLE        reduce using rule 51 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    QUEUE           reduce using rule 51 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    STACK           reduce using rule 51 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    IF              reduce using rule 51 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    CONST           reduce using rule 51 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    INTEGER         reduce using rule 51 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 51 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 51 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    CHARTYPE        reduce using rule 51 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 51 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 51 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 51 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    INTTYPE         reduce using rule 51 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 51 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    LIST            reduce using rule 51 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    DICTIONARY      reduce using rule 51 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    METHOD          reduce using rule 51 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    FOR             reduce using rule 51 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    FOREACH         reduce using rule 51 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    TRY             reduce using rule 51 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    WHILE           reduce using rule 51 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    DO              reduce using rule 51 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    PUBLIC          reduce using rule 51 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    PRIVATE         reduce using rule 51 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    RKEY            reduce using rule 51 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    RETURN          reduce using rule 51 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)


state 473

    (171) list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 171 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    READ            reduce using rule 171 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 171 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 171 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 171 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    IF              reduce using rule 171 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 171 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    INTEGER         reduce using rule 171 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 171 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 171 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 171 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 171 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 171 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 171 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 171 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 171 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 171 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    DICTIONARY      reduce using rule 171 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    METHOD          reduce using rule 171 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 171 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 171 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 171 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 171 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    DO              reduce using rule 171 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 171 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 171 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 171 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    RETURN          reduce using rule 171 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)


state 474

    (172) list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 172 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    READ            reduce using rule 172 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 172 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 172 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 172 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    IF              reduce using rule 172 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 172 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    INTEGER         reduce using rule 172 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 172 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 172 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 172 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 172 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 172 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 172 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 172 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 172 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 172 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    DICTIONARY      reduce using rule 172 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    METHOD          reduce using rule 172 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 172 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 172 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 172 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 172 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    DO              reduce using rule 172 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 172 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 172 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 172 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    RETURN          reduce using rule 172 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)


state 475

    (153) dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 501


state 476

    (154) dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 154 (dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    READ            reduce using rule 154 (dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 154 (dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 154 (dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 154 (dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    IF              reduce using rule 154 (dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 154 (dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    INTEGER         reduce using rule 154 (dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 154 (dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 154 (dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 154 (dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 154 (dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 154 (dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 154 (dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 154 (dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 154 (dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 154 (dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    DICTIONARY      reduce using rule 154 (dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    METHOD          reduce using rule 154 (dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 154 (dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 154 (dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 154 (dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 154 (dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    DO              reduce using rule 154 (dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 154 (dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 154 (dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 154 (dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    RETURN          reduce using rule 154 (dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA .)


state 477

    (189) queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 189 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    READ            reduce using rule 189 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 189 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 189 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 189 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    IF              reduce using rule 189 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 189 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    INTEGER         reduce using rule 189 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 189 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 189 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 189 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 189 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 189 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 189 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 189 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 189 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 189 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    DICTIONARY      reduce using rule 189 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    METHOD          reduce using rule 189 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 189 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 189 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 189 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 189 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    DO              reduce using rule 189 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 189 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 189 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 189 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    RETURN          reduce using rule 189 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)


state 478

    (179) stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 179 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    READ            reduce using rule 179 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 179 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 179 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 179 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    IF              reduce using rule 179 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 179 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    INTEGER         reduce using rule 179 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 179 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 179 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 179 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 179 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 179 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 179 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 179 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 179 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 179 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    DICTIONARY      reduce using rule 179 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    METHOD          reduce using rule 179 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 179 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 179 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 179 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 179 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    DO              reduce using rule 179 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 179 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 179 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 179 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    RETURN          reduce using rule 179 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)


state 479

    (44) array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA .

    PRINT           reduce using rule 44 (array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA .)
    READ            reduce using rule 44 (array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA .)
    VARIABLE        reduce using rule 44 (array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA .)
    QUEUE           reduce using rule 44 (array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA .)
    STACK           reduce using rule 44 (array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA .)
    IF              reduce using rule 44 (array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA .)
    CONST           reduce using rule 44 (array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA .)
    INTEGER         reduce using rule 44 (array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 44 (array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 44 (array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA .)
    CHARTYPE        reduce using rule 44 (array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 44 (array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 44 (array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 44 (array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA .)
    INTTYPE         reduce using rule 44 (array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 44 (array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA .)
    LIST            reduce using rule 44 (array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA .)
    DICTIONARY      reduce using rule 44 (array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA .)
    METHOD          reduce using rule 44 (array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA .)
    FOR             reduce using rule 44 (array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA .)
    FOREACH         reduce using rule 44 (array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA .)
    TRY             reduce using rule 44 (array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA .)
    WHILE           reduce using rule 44 (array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA .)
    DO              reduce using rule 44 (array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA .)
    PUBLIC          reduce using rule 44 (array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA .)
    PRIVATE         reduce using rule 44 (array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA .)
    RKEY            reduce using rule 44 (array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA .)
    RETURN          reduce using rule 44 (array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA .)


state 480

    (215) assignment_concurrent -> VARIABLE ASSIGNATION expression DOTANDCOMMA .

    VARIABLE        reduce using rule 215 (assignment_concurrent -> VARIABLE ASSIGNATION expression DOTANDCOMMA .)
    IF              reduce using rule 215 (assignment_concurrent -> VARIABLE ASSIGNATION expression DOTANDCOMMA .)
    WHILE           reduce using rule 215 (assignment_concurrent -> VARIABLE ASSIGNATION expression DOTANDCOMMA .)
    IDENTIFIER      reduce using rule 215 (assignment_concurrent -> VARIABLE ASSIGNATION expression DOTANDCOMMA .)
    RETURN          reduce using rule 215 (assignment_concurrent -> VARIABLE ASSIGNATION expression DOTANDCOMMA .)
    RKEY            reduce using rule 215 (assignment_concurrent -> VARIABLE ASSIGNATION expression DOTANDCOMMA .)


state 481

    (216) if_statement_concurrent -> IF LPARENT condition RPARENT . LKEY concurrent_block RKEY

    LKEY            shift and go to state 502


state 482

    (224) condition -> value_numeric logic_operator . value_numeric
    (226) condition -> value_numeric logic_operator . VARIABLE
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation

    VARIABLE        shift and go to state 504
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164

    value_numeric                  shift and go to state 503
    arithmetic_operation           shift and go to state 257

state 483

    (225) condition -> VARIABLE logic_operator . value_numeric
    (227) condition -> VARIABLE logic_operator . VARIABLE
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation

    VARIABLE        shift and go to state 505
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164

    value_numeric                  shift and go to state 506
    arithmetic_operation           shift and go to state 257

state 484

    (217) while_loop_concurrent -> WHILE LPARENT condition RPARENT . LKEY concurrent_block RKEY

    LKEY            shift and go to state 507


state 485

    (218) method_call_concurrent -> IDENTIFIER LPARENT RPARENT DOTANDCOMMA .

    VARIABLE        reduce using rule 218 (method_call_concurrent -> IDENTIFIER LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 218 (method_call_concurrent -> IDENTIFIER LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 218 (method_call_concurrent -> IDENTIFIER LPARENT RPARENT DOTANDCOMMA .)
    IDENTIFIER      reduce using rule 218 (method_call_concurrent -> IDENTIFIER LPARENT RPARENT DOTANDCOMMA .)
    RETURN          reduce using rule 218 (method_call_concurrent -> IDENTIFIER LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 218 (method_call_concurrent -> IDENTIFIER LPARENT RPARENT DOTANDCOMMA .)


state 486

    (222) expression -> value_numeric arithmetic_operator expression .

    DOTANDCOMMA     reduce using rule 222 (expression -> value_numeric arithmetic_operator expression .)


state 487

    (223) expression -> VARIABLE arithmetic_operator expression .

    DOTANDCOMMA     reduce using rule 223 (expression -> VARIABLE arithmetic_operator expression .)


state 488

    (184) queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW . QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA

    QUEUE           shift and go to state 508


state 489

    (173) stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 509


state 490

    (137) block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY . other_if
    (138) other_if -> . ELSE LKEY not_yes_nested_if RKEY
    (139) other_if -> . ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if

    ELSE            shift and go to state 511
    ELSE_IF         shift and go to state 512

    other_if                       shift and go to state 510

state 491

    (157) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW . LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW . LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    LIST            shift and go to state 513


state 492

    (158) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW . LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (160) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW . LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    LIST            shift and go to state 514


state 493

    (144) dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY . SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (145) dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY . SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA

    SMALLER_THAN    shift and go to state 515


state 494

    (126) for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT . RPARENT LKEY for_anidado RKEY
    (123) for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT . RPARENT LKEY all_block_code RKEY

    RPARENT         shift and go to state 516


state 495

    (127) for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT . RPARENT LKEY for_anidado RKEY
    (124) for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT . RPARENT LKEY all_block_code RKEY

    RPARENT         shift and go to state 517


state 496

    (128) for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT . LKEY all_block_code RKEY

    LKEY            shift and go to state 518


state 497

    (131) try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION . VARIABLE RPARENT LKEY all_block_code RKEY
    (132) try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION . VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY

    VARIABLE        shift and go to state 519


state 498

    (135) normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY .

    PRINT           reduce using rule 135 (normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY .)
    READ            reduce using rule 135 (normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY .)
    VARIABLE        reduce using rule 135 (normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY .)
    QUEUE           reduce using rule 135 (normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY .)
    STACK           reduce using rule 135 (normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY .)
    IF              reduce using rule 135 (normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY .)
    CONST           reduce using rule 135 (normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY .)
    INTEGER         reduce using rule 135 (normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY .)
    FLOAT_NUMBER    reduce using rule 135 (normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY .)
    DECIMAL_NUMBER  reduce using rule 135 (normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY .)
    CHARTYPE        reduce using rule 135 (normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY .)
    STRINGTYPE      reduce using rule 135 (normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY .)
    FLOATTYPE       reduce using rule 135 (normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY .)
    DECIMALTYPE     reduce using rule 135 (normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY .)
    INTTYPE         reduce using rule 135 (normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY .)
    BOOLTYPE        reduce using rule 135 (normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY .)
    LIST            reduce using rule 135 (normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY .)
    DICTIONARY      reduce using rule 135 (normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY .)
    METHOD          reduce using rule 135 (normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY .)
    FOR             reduce using rule 135 (normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY .)
    FOREACH         reduce using rule 135 (normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY .)
    TRY             reduce using rule 135 (normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY .)
    WHILE           reduce using rule 135 (normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY .)
    DO              reduce using rule 135 (normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY .)
    PUBLIC          reduce using rule 135 (normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY .)
    PRIVATE         reduce using rule 135 (normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY .)
    RKEY            reduce using rule 135 (normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY .)
    RETURN          reduce using rule 135 (normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY .)


state 499

    (136) do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation . RPARENT

    RPARENT         shift and go to state 520


state 500

    (203) declaration_async -> PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT . ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY

    ARROW           shift and go to state 521


state 501

    (153) dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 522


state 502

    (216) if_statement_concurrent -> IF LPARENT condition RPARENT LKEY . concurrent_block RKEY
    (207) concurrent_block -> . statement_list
    (208) statement_list -> . statement
    (209) statement_list -> . statement_list statement
    (210) statement -> . assignment_concurrent
    (211) statement -> . if_statement_concurrent
    (212) statement -> . while_loop_concurrent
    (213) statement -> . method_call_concurrent
    (214) statement -> . return_statement_concurrent
    (215) assignment_concurrent -> . VARIABLE ASSIGNATION expression DOTANDCOMMA
    (216) if_statement_concurrent -> . IF LPARENT condition RPARENT LKEY concurrent_block RKEY
    (217) while_loop_concurrent -> . WHILE LPARENT condition RPARENT LKEY concurrent_block RKEY
    (218) method_call_concurrent -> . IDENTIFIER LPARENT RPARENT DOTANDCOMMA
    (219) return_statement_concurrent -> . RETURN expression DOTANDCOMMA

    VARIABLE        shift and go to state 347
    IF              shift and go to state 348
    WHILE           shift and go to state 349
    IDENTIFIER      shift and go to state 350
    RETURN          shift and go to state 351

    concurrent_block               shift and go to state 523
    statement_list                 shift and go to state 340
    statement                      shift and go to state 341
    assignment_concurrent          shift and go to state 342
    if_statement_concurrent        shift and go to state 343
    while_loop_concurrent          shift and go to state 344
    method_call_concurrent         shift and go to state 345
    return_statement_concurrent    shift and go to state 346

state 503

    (224) condition -> value_numeric logic_operator value_numeric .
    (63) arithmetic_operation -> value_numeric .
    (65) arithmetic_operation -> value_numeric . arithmetic_operator arithmetic_operation
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . MINUS
    (81) arithmetic_operator -> . TIMES
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT

  ! reduce/reduce conflict for RPARENT resolved using rule 63 (arithmetic_operation -> value_numeric .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
    RPARENT         reduce using rule 63 (arithmetic_operation -> value_numeric .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    PERCENT         shift and go to state 199

  ! RPARENT         [ reduce using rule 224 (condition -> value_numeric logic_operator value_numeric .) ]
  ! PLUS            [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! MINUS           [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! TIMES           [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! DIVIDE          [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! PERCENT         [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]

    arithmetic_operator            shift and go to state 211

state 504

    (226) condition -> value_numeric logic_operator VARIABLE .
    (64) arithmetic_operation -> VARIABLE .
    (66) arithmetic_operation -> VARIABLE . arithmetic_operator arithmetic_operation
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . MINUS
    (81) arithmetic_operator -> . TIMES
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT

  ! reduce/reduce conflict for RPARENT resolved using rule 64 (arithmetic_operation -> VARIABLE .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
    RPARENT         reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    PERCENT         shift and go to state 199

  ! RPARENT         [ reduce using rule 226 (condition -> value_numeric logic_operator VARIABLE .) ]
  ! PLUS            [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! TIMES           [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! PERCENT         [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]

    arithmetic_operator            shift and go to state 190

state 505

    (227) condition -> VARIABLE logic_operator VARIABLE .
    (64) arithmetic_operation -> VARIABLE .
    (66) arithmetic_operation -> VARIABLE . arithmetic_operator arithmetic_operation
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . MINUS
    (81) arithmetic_operator -> . TIMES
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT

  ! reduce/reduce conflict for RPARENT resolved using rule 64 (arithmetic_operation -> VARIABLE .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
    RPARENT         reduce using rule 64 (arithmetic_operation -> VARIABLE .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    PERCENT         shift and go to state 199

  ! RPARENT         [ reduce using rule 227 (condition -> VARIABLE logic_operator VARIABLE .) ]
  ! PLUS            [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! TIMES           [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]
  ! PERCENT         [ reduce using rule 64 (arithmetic_operation -> VARIABLE .) ]

    arithmetic_operator            shift and go to state 190

state 506

    (225) condition -> VARIABLE logic_operator value_numeric .
    (63) arithmetic_operation -> value_numeric .
    (65) arithmetic_operation -> value_numeric . arithmetic_operator arithmetic_operation
    (79) arithmetic_operator -> . PLUS
    (80) arithmetic_operator -> . MINUS
    (81) arithmetic_operator -> . TIMES
    (82) arithmetic_operator -> . DIVIDE
    (83) arithmetic_operator -> . PERCENT

  ! reduce/reduce conflict for RPARENT resolved using rule 63 (arithmetic_operation -> value_numeric .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PERCENT resolved as shift
    RPARENT         reduce using rule 63 (arithmetic_operation -> value_numeric .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196
    TIMES           shift and go to state 197
    DIVIDE          shift and go to state 198
    PERCENT         shift and go to state 199

  ! RPARENT         [ reduce using rule 225 (condition -> VARIABLE logic_operator value_numeric .) ]
  ! PLUS            [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! MINUS           [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! TIMES           [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! DIVIDE          [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]
  ! PERCENT         [ reduce using rule 63 (arithmetic_operation -> value_numeric .) ]

    arithmetic_operator            shift and go to state 211

state 507

    (217) while_loop_concurrent -> WHILE LPARENT condition RPARENT LKEY . concurrent_block RKEY
    (207) concurrent_block -> . statement_list
    (208) statement_list -> . statement
    (209) statement_list -> . statement_list statement
    (210) statement -> . assignment_concurrent
    (211) statement -> . if_statement_concurrent
    (212) statement -> . while_loop_concurrent
    (213) statement -> . method_call_concurrent
    (214) statement -> . return_statement_concurrent
    (215) assignment_concurrent -> . VARIABLE ASSIGNATION expression DOTANDCOMMA
    (216) if_statement_concurrent -> . IF LPARENT condition RPARENT LKEY concurrent_block RKEY
    (217) while_loop_concurrent -> . WHILE LPARENT condition RPARENT LKEY concurrent_block RKEY
    (218) method_call_concurrent -> . IDENTIFIER LPARENT RPARENT DOTANDCOMMA
    (219) return_statement_concurrent -> . RETURN expression DOTANDCOMMA

    VARIABLE        shift and go to state 347
    IF              shift and go to state 348
    WHILE           shift and go to state 349
    IDENTIFIER      shift and go to state 350
    RETURN          shift and go to state 351

    concurrent_block               shift and go to state 524
    statement_list                 shift and go to state 340
    statement                      shift and go to state 341
    assignment_concurrent          shift and go to state 342
    if_statement_concurrent        shift and go to state 343
    while_loop_concurrent          shift and go to state 344
    method_call_concurrent         shift and go to state 345
    return_statement_concurrent    shift and go to state 346

state 508

    (184) queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE . SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA

    SMALLER_THAN    shift and go to state 525


state 509

    (173) stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 173 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    READ            reduce using rule 173 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 173 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 173 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 173 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 173 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 173 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    INTEGER         reduce using rule 173 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 173 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 173 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 173 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 173 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 173 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 173 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 173 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 173 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 173 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    DICTIONARY      reduce using rule 173 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    METHOD          reduce using rule 173 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 173 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 173 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 173 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 173 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 173 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 173 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 173 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 173 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    RETURN          reduce using rule 173 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)


state 510

    (137) block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .

    PRINT           reduce using rule 137 (block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    READ            reduce using rule 137 (block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    VARIABLE        reduce using rule 137 (block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    QUEUE           reduce using rule 137 (block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    STACK           reduce using rule 137 (block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    IF              reduce using rule 137 (block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    CONST           reduce using rule 137 (block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    INTEGER         reduce using rule 137 (block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    FLOAT_NUMBER    reduce using rule 137 (block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    DECIMAL_NUMBER  reduce using rule 137 (block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    CHARTYPE        reduce using rule 137 (block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    STRINGTYPE      reduce using rule 137 (block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    FLOATTYPE       reduce using rule 137 (block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    DECIMALTYPE     reduce using rule 137 (block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    INTTYPE         reduce using rule 137 (block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    BOOLTYPE        reduce using rule 137 (block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    LIST            reduce using rule 137 (block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    DICTIONARY      reduce using rule 137 (block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    METHOD          reduce using rule 137 (block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    FOR             reduce using rule 137 (block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    FOREACH         reduce using rule 137 (block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    TRY             reduce using rule 137 (block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    WHILE           reduce using rule 137 (block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    DO              reduce using rule 137 (block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    PUBLIC          reduce using rule 137 (block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    PRIVATE         reduce using rule 137 (block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    RKEY            reduce using rule 137 (block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    RETURN          reduce using rule 137 (block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)


state 511

    (138) other_if -> ELSE . LKEY not_yes_nested_if RKEY

    LKEY            shift and go to state 526


state 512

    (139) other_if -> ELSE_IF . LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if

    LPARENT         shift and go to state 527


state 513

    (157) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST . SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST . SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    SMALLER_THAN    shift and go to state 528


state 514

    (158) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST . SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (160) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST . SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    SMALLER_THAN    shift and go to state 529


state 515

    (144) dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN . GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (145) dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN . GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA

    GREATER_THAN    shift and go to state 530


state 516

    (126) for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT . LKEY for_anidado RKEY
    (123) for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT . LKEY all_block_code RKEY

    LKEY            shift and go to state 531


state 517

    (127) for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT . LKEY for_anidado RKEY
    (124) for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT . LKEY all_block_code RKEY

    LKEY            shift and go to state 532


state 518

    (128) for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY . all_block_code RKEY
    (26) all_block_code -> . block_code
    (27) all_block_code -> . block_code all_block_code
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . read_data
    (8) block_code -> . arithmetic_operation
    (9) block_code -> . logic_operation
    (10) block_code -> . array_assignation
    (11) block_code -> . array_value_assign
    (12) block_code -> . array_indexing
    (13) block_code -> . lists
    (14) block_code -> . functions_list
    (15) block_code -> . dict_estruct
    (16) block_code -> . functions_dict
    (17) block_code -> . concurrent_method
    (18) block_code -> . queue_struct
    (19) block_code -> . functions_queue
    (20) block_code -> . stack_struct
    (21) block_code -> . functions_stack
    (22) block_code -> . block_if
    (23) block_code -> . block_for
    (24) block_code -> . block_try_catch
    (25) block_code -> . block_while
    (86) def_const_or_var -> . constant_assignation
    (87) def_const_or_var -> . variable_assignation
    (88) def_const_or_var -> . late_initialization
    (33) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (34) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (35) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (44) array_assignation -> . array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA
    (50) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (51) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (48) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (49) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (155) lists -> . list_empty
    (156) lists -> . list_full
    (165) functions_list -> . list_func_clear
    (166) functions_list -> . list_func_count
    (167) functions_list -> . list_func_add
    (168) functions_list -> . list_func_removeat
    (142) dict_estruct -> . dict_empty
    (143) dict_estruct -> . dict_full
    (151) functions_dict -> . dict_func_put
    (152) functions_dict -> . dict_func_remove
    (205) concurrent_method -> . method_declaration CONCURRENT LKEY concurrent_block RKEY
    (184) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (185) functions_queue -> . queue_enqueue
    (186) functions_queue -> . queue_dequeue
    (187) functions_queue -> . queue_clear
    (188) functions_queue -> . queue_isEmpty
    (173) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (174) functions_stack -> . stack_push
    (175) functions_stack -> . stack_pop
    (176) functions_stack -> . stack_clear
    (177) functions_stack -> . stack_peek
    (178) functions_stack -> . stack_isEmpty
    (137) block_if -> . IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if
    (121) block_for -> . for_anidado
    (122) block_for -> . for_each
    (129) block_try_catch -> . try_catch_simply
    (130) block_try_catch -> . try_catch_finally
    (133) block_while -> . normal_while
    (134) block_while -> . do_while
    (89) constant_assignation -> . access_modifiers CONST data_type assignation_key_value DOTANDCOMMA
    (90) constant_assignation -> . CONST data_type assignation_key_value DOTANDCOMMA
    (91) constant_assignation -> . access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (92) constant_assignation -> . CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (93) variable_assignation -> . access_modifiers data_type assignation_key_value DOTANDCOMMA
    (94) variable_assignation -> . data_type assignation_key_value DOTANDCOMMA
    (95) variable_assignation -> . access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA
    (96) variable_assignation -> . data_type assignation_key_value_multiple DOTANDCOMMA
    (97) late_initialization -> . access_modifiers data_type VARIABLE DOTANDCOMMA
    (98) late_initialization -> . data_type VARIABLE DOTANDCOMMA
    (99) late_initialization -> . assignation_key_value DOTANDCOMMA
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET
    (157) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (158) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (160) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (169) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (170) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (171) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (172) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (144) dict_empty -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (145) dict_full -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA
    (153) dict_func_put -> . VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA
    (154) dict_func_remove -> . VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA
    (206) method_declaration -> . METHOD IDENTIFIER LPARENT RPARENT DOTANDCOMMA
    (189) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (190) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (191) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (193) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (179) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (180) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (181) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (182) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (183) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (125) for_anidado -> . for_simple
    (126) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY
    (127) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY
    (128) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (131) try_catch_simply -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY
    (132) try_catch_finally -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY
    (135) normal_while -> . WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY
    (136) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT
    (84) access_modifiers -> . PUBLIC
    (85) access_modifiers -> . PRIVATE
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (100) assignation_key_value -> . VARIABLE ASSIGNATION value
    (101) assignation_key_value -> . READ LPARENT RPARENT
    (123) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (124) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    PRINT           shift and go to state 124
    READ            shift and go to state 126
    VARIABLE        shift and go to state 125
    QUEUE           shift and go to state 141
    STACK           shift and go to state 147
    IF              shift and go to state 153
    CONST           shift and go to state 161
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164
    CHARTYPE        shift and go to state 165
    STRINGTYPE      shift and go to state 166
    FLOATTYPE       shift and go to state 167
    DECIMALTYPE     shift and go to state 168
    INTTYPE         shift and go to state 169
    BOOLTYPE        shift and go to state 170
    LIST            shift and go to state 171
    DICTIONARY      shift and go to state 172
    METHOD          shift and go to state 97
    FOR             shift and go to state 174
    FOREACH         shift and go to state 175
    TRY             shift and go to state 176
    WHILE           shift and go to state 177
    DO              shift and go to state 178
    PUBLIC          shift and go to state 179
    PRIVATE         shift and go to state 20

    data_type                      shift and go to state 142
    all_block_code                 shift and go to state 533
    block_code                     shift and go to state 99
    def_const_or_var               shift and go to state 100
    print_data                     shift and go to state 101
    read_data                      shift and go to state 102
    arithmetic_operation           shift and go to state 103
    logic_operation                shift and go to state 104
    array_assignation              shift and go to state 105
    array_value_assign             shift and go to state 106
    array_indexing                 shift and go to state 107
    lists                          shift and go to state 108
    functions_list                 shift and go to state 109
    dict_estruct                   shift and go to state 110
    functions_dict                 shift and go to state 111
    concurrent_method              shift and go to state 112
    queue_struct                   shift and go to state 113
    functions_queue                shift and go to state 114
    stack_struct                   shift and go to state 115
    functions_stack                shift and go to state 116
    block_if                       shift and go to state 117
    block_for                      shift and go to state 118
    block_try_catch                shift and go to state 119
    block_while                    shift and go to state 120
    constant_assignation           shift and go to state 121
    variable_assignation           shift and go to state 122
    late_initialization            shift and go to state 123
    value_numeric                  shift and go to state 127
    array_type                     shift and go to state 129
    list_empty                     shift and go to state 130
    list_full                      shift and go to state 131
    list_func_clear                shift and go to state 132
    list_func_count                shift and go to state 133
    list_func_add                  shift and go to state 134
    list_func_removeat             shift and go to state 135
    dict_empty                     shift and go to state 136
    dict_full                      shift and go to state 137
    dict_func_put                  shift and go to state 138
    dict_func_remove               shift and go to state 139
    method_declaration             shift and go to state 140
    queue_enqueue                  shift and go to state 143
    queue_dequeue                  shift and go to state 144
    queue_clear                    shift and go to state 145
    queue_isEmpty                  shift and go to state 146
    stack_push                     shift and go to state 148
    stack_pop                      shift and go to state 149
    stack_clear                    shift and go to state 150
    stack_peek                     shift and go to state 151
    stack_isEmpty                  shift and go to state 152
    for_anidado                    shift and go to state 154
    for_each                       shift and go to state 155
    try_catch_simply               shift and go to state 156
    try_catch_finally              shift and go to state 157
    normal_while                   shift and go to state 158
    do_while                       shift and go to state 159
    access_modifiers               shift and go to state 160
    assignation_key_value          shift and go to state 162
    for_simple                     shift and go to state 173

state 519

    (131) try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE . RPARENT LKEY all_block_code RKEY
    (132) try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE . RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY

    RPARENT         shift and go to state 534


state 520

    (136) do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT .

    PRINT           reduce using rule 136 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT .)
    READ            reduce using rule 136 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT .)
    VARIABLE        reduce using rule 136 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT .)
    QUEUE           reduce using rule 136 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT .)
    STACK           reduce using rule 136 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT .)
    IF              reduce using rule 136 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT .)
    CONST           reduce using rule 136 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT .)
    INTEGER         reduce using rule 136 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT .)
    FLOAT_NUMBER    reduce using rule 136 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT .)
    DECIMAL_NUMBER  reduce using rule 136 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT .)
    CHARTYPE        reduce using rule 136 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT .)
    STRINGTYPE      reduce using rule 136 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT .)
    FLOATTYPE       reduce using rule 136 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT .)
    DECIMALTYPE     reduce using rule 136 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT .)
    INTTYPE         reduce using rule 136 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT .)
    BOOLTYPE        reduce using rule 136 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT .)
    LIST            reduce using rule 136 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT .)
    DICTIONARY      reduce using rule 136 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT .)
    METHOD          reduce using rule 136 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT .)
    FOR             reduce using rule 136 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT .)
    FOREACH         reduce using rule 136 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT .)
    TRY             reduce using rule 136 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT .)
    WHILE           reduce using rule 136 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT .)
    DO              reduce using rule 136 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT .)
    PUBLIC          reduce using rule 136 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT .)
    PRIVATE         reduce using rule 136 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT .)
    RKEY            reduce using rule 136 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT .)
    RETURN          reduce using rule 136 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT .)


state 521

    (203) declaration_async -> PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT ARROW . LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY

    LKEY            shift and go to state 535


state 522

    (153) dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 153 (dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA .)
    READ            reduce using rule 153 (dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 153 (dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 153 (dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 153 (dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA .)
    IF              reduce using rule 153 (dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 153 (dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA .)
    INTEGER         reduce using rule 153 (dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 153 (dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 153 (dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 153 (dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 153 (dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 153 (dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 153 (dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 153 (dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 153 (dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 153 (dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA .)
    DICTIONARY      reduce using rule 153 (dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA .)
    METHOD          reduce using rule 153 (dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 153 (dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 153 (dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 153 (dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 153 (dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA .)
    DO              reduce using rule 153 (dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 153 (dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 153 (dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 153 (dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA .)
    RETURN          reduce using rule 153 (dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA .)


state 523

    (216) if_statement_concurrent -> IF LPARENT condition RPARENT LKEY concurrent_block . RKEY

    RKEY            shift and go to state 536


state 524

    (217) while_loop_concurrent -> WHILE LPARENT condition RPARENT LKEY concurrent_block . RKEY

    RKEY            shift and go to state 537


state 525

    (184) queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN . data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET

    CHARTYPE        shift and go to state 30
    STRINGTYPE      shift and go to state 28
    FLOATTYPE       shift and go to state 31
    DECIMALTYPE     shift and go to state 32
    INTTYPE         shift and go to state 33
    BOOLTYPE        shift and go to state 34

    data_type                      shift and go to state 538
    array_type                     shift and go to state 35

state 526

    (138) other_if -> ELSE LKEY . not_yes_nested_if RKEY
    (140) not_yes_nested_if -> . block_if
    (141) not_yes_nested_if -> . block_code
    (137) block_if -> . IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . read_data
    (8) block_code -> . arithmetic_operation
    (9) block_code -> . logic_operation
    (10) block_code -> . array_assignation
    (11) block_code -> . array_value_assign
    (12) block_code -> . array_indexing
    (13) block_code -> . lists
    (14) block_code -> . functions_list
    (15) block_code -> . dict_estruct
    (16) block_code -> . functions_dict
    (17) block_code -> . concurrent_method
    (18) block_code -> . queue_struct
    (19) block_code -> . functions_queue
    (20) block_code -> . stack_struct
    (21) block_code -> . functions_stack
    (22) block_code -> . block_if
    (23) block_code -> . block_for
    (24) block_code -> . block_try_catch
    (25) block_code -> . block_while
    (86) def_const_or_var -> . constant_assignation
    (87) def_const_or_var -> . variable_assignation
    (88) def_const_or_var -> . late_initialization
    (33) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (34) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (35) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (44) array_assignation -> . array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA
    (50) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (51) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (48) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (49) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (155) lists -> . list_empty
    (156) lists -> . list_full
    (165) functions_list -> . list_func_clear
    (166) functions_list -> . list_func_count
    (167) functions_list -> . list_func_add
    (168) functions_list -> . list_func_removeat
    (142) dict_estruct -> . dict_empty
    (143) dict_estruct -> . dict_full
    (151) functions_dict -> . dict_func_put
    (152) functions_dict -> . dict_func_remove
    (205) concurrent_method -> . method_declaration CONCURRENT LKEY concurrent_block RKEY
    (184) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (185) functions_queue -> . queue_enqueue
    (186) functions_queue -> . queue_dequeue
    (187) functions_queue -> . queue_clear
    (188) functions_queue -> . queue_isEmpty
    (173) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (174) functions_stack -> . stack_push
    (175) functions_stack -> . stack_pop
    (176) functions_stack -> . stack_clear
    (177) functions_stack -> . stack_peek
    (178) functions_stack -> . stack_isEmpty
    (121) block_for -> . for_anidado
    (122) block_for -> . for_each
    (129) block_try_catch -> . try_catch_simply
    (130) block_try_catch -> . try_catch_finally
    (133) block_while -> . normal_while
    (134) block_while -> . do_while
    (89) constant_assignation -> . access_modifiers CONST data_type assignation_key_value DOTANDCOMMA
    (90) constant_assignation -> . CONST data_type assignation_key_value DOTANDCOMMA
    (91) constant_assignation -> . access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (92) constant_assignation -> . CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (93) variable_assignation -> . access_modifiers data_type assignation_key_value DOTANDCOMMA
    (94) variable_assignation -> . data_type assignation_key_value DOTANDCOMMA
    (95) variable_assignation -> . access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA
    (96) variable_assignation -> . data_type assignation_key_value_multiple DOTANDCOMMA
    (97) late_initialization -> . access_modifiers data_type VARIABLE DOTANDCOMMA
    (98) late_initialization -> . data_type VARIABLE DOTANDCOMMA
    (99) late_initialization -> . assignation_key_value DOTANDCOMMA
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET
    (157) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (158) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (160) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (169) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (170) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (171) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (172) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (144) dict_empty -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (145) dict_full -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA
    (153) dict_func_put -> . VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA
    (154) dict_func_remove -> . VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA
    (206) method_declaration -> . METHOD IDENTIFIER LPARENT RPARENT DOTANDCOMMA
    (189) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (190) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (191) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (193) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (179) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (180) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (181) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (182) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (183) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (125) for_anidado -> . for_simple
    (126) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY
    (127) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY
    (128) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (131) try_catch_simply -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY
    (132) try_catch_finally -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY
    (135) normal_while -> . WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY
    (136) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT
    (84) access_modifiers -> . PUBLIC
    (85) access_modifiers -> . PRIVATE
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (100) assignation_key_value -> . VARIABLE ASSIGNATION value
    (101) assignation_key_value -> . READ LPARENT RPARENT
    (123) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (124) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    IF              shift and go to state 153
    PRINT           shift and go to state 124
    READ            shift and go to state 126
    VARIABLE        shift and go to state 125
    QUEUE           shift and go to state 141
    STACK           shift and go to state 147
    CONST           shift and go to state 161
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164
    CHARTYPE        shift and go to state 165
    STRINGTYPE      shift and go to state 166
    FLOATTYPE       shift and go to state 167
    DECIMALTYPE     shift and go to state 168
    INTTYPE         shift and go to state 169
    BOOLTYPE        shift and go to state 170
    LIST            shift and go to state 171
    DICTIONARY      shift and go to state 172
    METHOD          shift and go to state 97
    FOR             shift and go to state 174
    FOREACH         shift and go to state 175
    TRY             shift and go to state 176
    WHILE           shift and go to state 177
    DO              shift and go to state 178
    PUBLIC          shift and go to state 179
    PRIVATE         shift and go to state 20

    not_yes_nested_if              shift and go to state 539
    block_if                       shift and go to state 458
    block_code                     shift and go to state 459
    logic_operation                shift and go to state 104
    def_const_or_var               shift and go to state 100
    print_data                     shift and go to state 101
    read_data                      shift and go to state 102
    arithmetic_operation           shift and go to state 103
    array_assignation              shift and go to state 105
    array_value_assign             shift and go to state 106
    array_indexing                 shift and go to state 107
    lists                          shift and go to state 108
    functions_list                 shift and go to state 109
    dict_estruct                   shift and go to state 110
    functions_dict                 shift and go to state 111
    concurrent_method              shift and go to state 112
    queue_struct                   shift and go to state 113
    functions_queue                shift and go to state 114
    stack_struct                   shift and go to state 115
    functions_stack                shift and go to state 116
    block_for                      shift and go to state 118
    block_try_catch                shift and go to state 119
    block_while                    shift and go to state 120
    constant_assignation           shift and go to state 121
    variable_assignation           shift and go to state 122
    late_initialization            shift and go to state 123
    value_numeric                  shift and go to state 127
    array_type                     shift and go to state 129
    list_empty                     shift and go to state 130
    list_full                      shift and go to state 131
    list_func_clear                shift and go to state 132
    list_func_count                shift and go to state 133
    list_func_add                  shift and go to state 134
    list_func_removeat             shift and go to state 135
    dict_empty                     shift and go to state 136
    dict_full                      shift and go to state 137
    dict_func_put                  shift and go to state 138
    dict_func_remove               shift and go to state 139
    method_declaration             shift and go to state 140
    data_type                      shift and go to state 142
    queue_enqueue                  shift and go to state 143
    queue_dequeue                  shift and go to state 144
    queue_clear                    shift and go to state 145
    queue_isEmpty                  shift and go to state 146
    stack_push                     shift and go to state 148
    stack_pop                      shift and go to state 149
    stack_clear                    shift and go to state 150
    stack_peek                     shift and go to state 151
    stack_isEmpty                  shift and go to state 152
    for_anidado                    shift and go to state 154
    for_each                       shift and go to state 155
    try_catch_simply               shift and go to state 156
    try_catch_finally              shift and go to state 157
    normal_while                   shift and go to state 158
    do_while                       shift and go to state 159
    access_modifiers               shift and go to state 160
    assignation_key_value          shift and go to state 162
    for_simple                     shift and go to state 173

state 527

    (139) other_if -> ELSE_IF LPARENT . logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation

    VARIABLE        shift and go to state 292
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164

    logic_operation                shift and go to state 540
    value_numeric                  shift and go to state 291
    arithmetic_operation           shift and go to state 257

state 528

    (157) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN . STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN . STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    STRINGTYPE      shift and go to state 541


state 529

    (158) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN . INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (160) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN . INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    INTTYPE         shift and go to state 542


state 530

    (144) dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN . LPARENT RPARENT DOTANDCOMMA
    (145) dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN . LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA

    LPARENT         shift and go to state 543


state 531

    (126) for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY . for_anidado RKEY
    (123) for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY . all_block_code RKEY
    (125) for_anidado -> . for_simple
    (126) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY
    (127) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY
    (26) all_block_code -> . block_code
    (27) all_block_code -> . block_code all_block_code
    (123) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (124) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . read_data
    (8) block_code -> . arithmetic_operation
    (9) block_code -> . logic_operation
    (10) block_code -> . array_assignation
    (11) block_code -> . array_value_assign
    (12) block_code -> . array_indexing
    (13) block_code -> . lists
    (14) block_code -> . functions_list
    (15) block_code -> . dict_estruct
    (16) block_code -> . functions_dict
    (17) block_code -> . concurrent_method
    (18) block_code -> . queue_struct
    (19) block_code -> . functions_queue
    (20) block_code -> . stack_struct
    (21) block_code -> . functions_stack
    (22) block_code -> . block_if
    (23) block_code -> . block_for
    (24) block_code -> . block_try_catch
    (25) block_code -> . block_while
    (86) def_const_or_var -> . constant_assignation
    (87) def_const_or_var -> . variable_assignation
    (88) def_const_or_var -> . late_initialization
    (33) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (34) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (35) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (44) array_assignation -> . array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA
    (50) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (51) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (48) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (49) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (155) lists -> . list_empty
    (156) lists -> . list_full
    (165) functions_list -> . list_func_clear
    (166) functions_list -> . list_func_count
    (167) functions_list -> . list_func_add
    (168) functions_list -> . list_func_removeat
    (142) dict_estruct -> . dict_empty
    (143) dict_estruct -> . dict_full
    (151) functions_dict -> . dict_func_put
    (152) functions_dict -> . dict_func_remove
    (205) concurrent_method -> . method_declaration CONCURRENT LKEY concurrent_block RKEY
    (184) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (185) functions_queue -> . queue_enqueue
    (186) functions_queue -> . queue_dequeue
    (187) functions_queue -> . queue_clear
    (188) functions_queue -> . queue_isEmpty
    (173) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (174) functions_stack -> . stack_push
    (175) functions_stack -> . stack_pop
    (176) functions_stack -> . stack_clear
    (177) functions_stack -> . stack_peek
    (178) functions_stack -> . stack_isEmpty
    (137) block_if -> . IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if
    (121) block_for -> . for_anidado
    (122) block_for -> . for_each
    (129) block_try_catch -> . try_catch_simply
    (130) block_try_catch -> . try_catch_finally
    (133) block_while -> . normal_while
    (134) block_while -> . do_while
    (89) constant_assignation -> . access_modifiers CONST data_type assignation_key_value DOTANDCOMMA
    (90) constant_assignation -> . CONST data_type assignation_key_value DOTANDCOMMA
    (91) constant_assignation -> . access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (92) constant_assignation -> . CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (93) variable_assignation -> . access_modifiers data_type assignation_key_value DOTANDCOMMA
    (94) variable_assignation -> . data_type assignation_key_value DOTANDCOMMA
    (95) variable_assignation -> . access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA
    (96) variable_assignation -> . data_type assignation_key_value_multiple DOTANDCOMMA
    (97) late_initialization -> . access_modifiers data_type VARIABLE DOTANDCOMMA
    (98) late_initialization -> . data_type VARIABLE DOTANDCOMMA
    (99) late_initialization -> . assignation_key_value DOTANDCOMMA
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET
    (157) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (158) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (160) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (169) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (170) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (171) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (172) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (144) dict_empty -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (145) dict_full -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA
    (153) dict_func_put -> . VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA
    (154) dict_func_remove -> . VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA
    (206) method_declaration -> . METHOD IDENTIFIER LPARENT RPARENT DOTANDCOMMA
    (189) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (190) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (191) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (193) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (179) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (180) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (181) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (182) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (183) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (128) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (131) try_catch_simply -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY
    (132) try_catch_finally -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY
    (135) normal_while -> . WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY
    (136) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT
    (84) access_modifiers -> . PUBLIC
    (85) access_modifiers -> . PRIVATE
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (100) assignation_key_value -> . VARIABLE ASSIGNATION value
    (101) assignation_key_value -> . READ LPARENT RPARENT

    FOR             shift and go to state 174
    PRINT           shift and go to state 124
    READ            shift and go to state 126
    VARIABLE        shift and go to state 125
    QUEUE           shift and go to state 141
    STACK           shift and go to state 147
    IF              shift and go to state 153
    CONST           shift and go to state 161
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164
    CHARTYPE        shift and go to state 165
    STRINGTYPE      shift and go to state 166
    FLOATTYPE       shift and go to state 167
    DECIMALTYPE     shift and go to state 168
    INTTYPE         shift and go to state 169
    BOOLTYPE        shift and go to state 170
    LIST            shift and go to state 171
    DICTIONARY      shift and go to state 172
    METHOD          shift and go to state 97
    FOREACH         shift and go to state 175
    TRY             shift and go to state 176
    WHILE           shift and go to state 177
    DO              shift and go to state 178
    PUBLIC          shift and go to state 179
    PRIVATE         shift and go to state 20

    for_anidado                    shift and go to state 544
    all_block_code                 shift and go to state 545
    for_simple                     shift and go to state 173
    block_code                     shift and go to state 99
    def_const_or_var               shift and go to state 100
    print_data                     shift and go to state 101
    read_data                      shift and go to state 102
    arithmetic_operation           shift and go to state 103
    logic_operation                shift and go to state 104
    array_assignation              shift and go to state 105
    array_value_assign             shift and go to state 106
    array_indexing                 shift and go to state 107
    lists                          shift and go to state 108
    functions_list                 shift and go to state 109
    dict_estruct                   shift and go to state 110
    functions_dict                 shift and go to state 111
    concurrent_method              shift and go to state 112
    queue_struct                   shift and go to state 113
    functions_queue                shift and go to state 114
    stack_struct                   shift and go to state 115
    functions_stack                shift and go to state 116
    block_if                       shift and go to state 117
    block_for                      shift and go to state 118
    block_try_catch                shift and go to state 119
    block_while                    shift and go to state 120
    constant_assignation           shift and go to state 121
    variable_assignation           shift and go to state 122
    late_initialization            shift and go to state 123
    value_numeric                  shift and go to state 127
    array_type                     shift and go to state 129
    list_empty                     shift and go to state 130
    list_full                      shift and go to state 131
    list_func_clear                shift and go to state 132
    list_func_count                shift and go to state 133
    list_func_add                  shift and go to state 134
    list_func_removeat             shift and go to state 135
    dict_empty                     shift and go to state 136
    dict_full                      shift and go to state 137
    dict_func_put                  shift and go to state 138
    dict_func_remove               shift and go to state 139
    method_declaration             shift and go to state 140
    data_type                      shift and go to state 142
    queue_enqueue                  shift and go to state 143
    queue_dequeue                  shift and go to state 144
    queue_clear                    shift and go to state 145
    queue_isEmpty                  shift and go to state 146
    stack_push                     shift and go to state 148
    stack_pop                      shift and go to state 149
    stack_clear                    shift and go to state 150
    stack_peek                     shift and go to state 151
    stack_isEmpty                  shift and go to state 152
    for_each                       shift and go to state 155
    try_catch_simply               shift and go to state 156
    try_catch_finally              shift and go to state 157
    normal_while                   shift and go to state 158
    do_while                       shift and go to state 159
    access_modifiers               shift and go to state 160
    assignation_key_value          shift and go to state 162

state 532

    (127) for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY . for_anidado RKEY
    (124) for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY . all_block_code RKEY
    (125) for_anidado -> . for_simple
    (126) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY
    (127) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY
    (26) all_block_code -> . block_code
    (27) all_block_code -> . block_code all_block_code
    (123) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (124) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . read_data
    (8) block_code -> . arithmetic_operation
    (9) block_code -> . logic_operation
    (10) block_code -> . array_assignation
    (11) block_code -> . array_value_assign
    (12) block_code -> . array_indexing
    (13) block_code -> . lists
    (14) block_code -> . functions_list
    (15) block_code -> . dict_estruct
    (16) block_code -> . functions_dict
    (17) block_code -> . concurrent_method
    (18) block_code -> . queue_struct
    (19) block_code -> . functions_queue
    (20) block_code -> . stack_struct
    (21) block_code -> . functions_stack
    (22) block_code -> . block_if
    (23) block_code -> . block_for
    (24) block_code -> . block_try_catch
    (25) block_code -> . block_while
    (86) def_const_or_var -> . constant_assignation
    (87) def_const_or_var -> . variable_assignation
    (88) def_const_or_var -> . late_initialization
    (33) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (34) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (35) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (44) array_assignation -> . array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA
    (50) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (51) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (48) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (49) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (155) lists -> . list_empty
    (156) lists -> . list_full
    (165) functions_list -> . list_func_clear
    (166) functions_list -> . list_func_count
    (167) functions_list -> . list_func_add
    (168) functions_list -> . list_func_removeat
    (142) dict_estruct -> . dict_empty
    (143) dict_estruct -> . dict_full
    (151) functions_dict -> . dict_func_put
    (152) functions_dict -> . dict_func_remove
    (205) concurrent_method -> . method_declaration CONCURRENT LKEY concurrent_block RKEY
    (184) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (185) functions_queue -> . queue_enqueue
    (186) functions_queue -> . queue_dequeue
    (187) functions_queue -> . queue_clear
    (188) functions_queue -> . queue_isEmpty
    (173) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (174) functions_stack -> . stack_push
    (175) functions_stack -> . stack_pop
    (176) functions_stack -> . stack_clear
    (177) functions_stack -> . stack_peek
    (178) functions_stack -> . stack_isEmpty
    (137) block_if -> . IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if
    (121) block_for -> . for_anidado
    (122) block_for -> . for_each
    (129) block_try_catch -> . try_catch_simply
    (130) block_try_catch -> . try_catch_finally
    (133) block_while -> . normal_while
    (134) block_while -> . do_while
    (89) constant_assignation -> . access_modifiers CONST data_type assignation_key_value DOTANDCOMMA
    (90) constant_assignation -> . CONST data_type assignation_key_value DOTANDCOMMA
    (91) constant_assignation -> . access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (92) constant_assignation -> . CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (93) variable_assignation -> . access_modifiers data_type assignation_key_value DOTANDCOMMA
    (94) variable_assignation -> . data_type assignation_key_value DOTANDCOMMA
    (95) variable_assignation -> . access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA
    (96) variable_assignation -> . data_type assignation_key_value_multiple DOTANDCOMMA
    (97) late_initialization -> . access_modifiers data_type VARIABLE DOTANDCOMMA
    (98) late_initialization -> . data_type VARIABLE DOTANDCOMMA
    (99) late_initialization -> . assignation_key_value DOTANDCOMMA
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET
    (157) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (158) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (160) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (169) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (170) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (171) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (172) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (144) dict_empty -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (145) dict_full -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA
    (153) dict_func_put -> . VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA
    (154) dict_func_remove -> . VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA
    (206) method_declaration -> . METHOD IDENTIFIER LPARENT RPARENT DOTANDCOMMA
    (189) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (190) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (191) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (193) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (179) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (180) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (181) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (182) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (183) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (128) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (131) try_catch_simply -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY
    (132) try_catch_finally -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY
    (135) normal_while -> . WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY
    (136) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT
    (84) access_modifiers -> . PUBLIC
    (85) access_modifiers -> . PRIVATE
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (100) assignation_key_value -> . VARIABLE ASSIGNATION value
    (101) assignation_key_value -> . READ LPARENT RPARENT

    FOR             shift and go to state 174
    PRINT           shift and go to state 124
    READ            shift and go to state 126
    VARIABLE        shift and go to state 125
    QUEUE           shift and go to state 141
    STACK           shift and go to state 147
    IF              shift and go to state 153
    CONST           shift and go to state 161
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164
    CHARTYPE        shift and go to state 165
    STRINGTYPE      shift and go to state 166
    FLOATTYPE       shift and go to state 167
    DECIMALTYPE     shift and go to state 168
    INTTYPE         shift and go to state 169
    BOOLTYPE        shift and go to state 170
    LIST            shift and go to state 171
    DICTIONARY      shift and go to state 172
    METHOD          shift and go to state 97
    FOREACH         shift and go to state 175
    TRY             shift and go to state 176
    WHILE           shift and go to state 177
    DO              shift and go to state 178
    PUBLIC          shift and go to state 179
    PRIVATE         shift and go to state 20

    for_anidado                    shift and go to state 546
    all_block_code                 shift and go to state 547
    for_simple                     shift and go to state 173
    block_code                     shift and go to state 99
    def_const_or_var               shift and go to state 100
    print_data                     shift and go to state 101
    read_data                      shift and go to state 102
    arithmetic_operation           shift and go to state 103
    logic_operation                shift and go to state 104
    array_assignation              shift and go to state 105
    array_value_assign             shift and go to state 106
    array_indexing                 shift and go to state 107
    lists                          shift and go to state 108
    functions_list                 shift and go to state 109
    dict_estruct                   shift and go to state 110
    functions_dict                 shift and go to state 111
    concurrent_method              shift and go to state 112
    queue_struct                   shift and go to state 113
    functions_queue                shift and go to state 114
    stack_struct                   shift and go to state 115
    functions_stack                shift and go to state 116
    block_if                       shift and go to state 117
    block_for                      shift and go to state 118
    block_try_catch                shift and go to state 119
    block_while                    shift and go to state 120
    constant_assignation           shift and go to state 121
    variable_assignation           shift and go to state 122
    late_initialization            shift and go to state 123
    value_numeric                  shift and go to state 127
    array_type                     shift and go to state 129
    list_empty                     shift and go to state 130
    list_full                      shift and go to state 131
    list_func_clear                shift and go to state 132
    list_func_count                shift and go to state 133
    list_func_add                  shift and go to state 134
    list_func_removeat             shift and go to state 135
    dict_empty                     shift and go to state 136
    dict_full                      shift and go to state 137
    dict_func_put                  shift and go to state 138
    dict_func_remove               shift and go to state 139
    method_declaration             shift and go to state 140
    data_type                      shift and go to state 142
    queue_enqueue                  shift and go to state 143
    queue_dequeue                  shift and go to state 144
    queue_clear                    shift and go to state 145
    queue_isEmpty                  shift and go to state 146
    stack_push                     shift and go to state 148
    stack_pop                      shift and go to state 149
    stack_clear                    shift and go to state 150
    stack_peek                     shift and go to state 151
    stack_isEmpty                  shift and go to state 152
    for_each                       shift and go to state 155
    try_catch_simply               shift and go to state 156
    try_catch_finally              shift and go to state 157
    normal_while                   shift and go to state 158
    do_while                       shift and go to state 159
    access_modifiers               shift and go to state 160
    assignation_key_value          shift and go to state 162

state 533

    (128) for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code . RKEY

    RKEY            shift and go to state 548


state 534

    (131) try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT . LKEY all_block_code RKEY
    (132) try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT . LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY

    LKEY            shift and go to state 549


state 535

    (203) declaration_async -> PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY . block_code RKEY RPARENT DOTANDCOMMA RKEY
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . read_data
    (8) block_code -> . arithmetic_operation
    (9) block_code -> . logic_operation
    (10) block_code -> . array_assignation
    (11) block_code -> . array_value_assign
    (12) block_code -> . array_indexing
    (13) block_code -> . lists
    (14) block_code -> . functions_list
    (15) block_code -> . dict_estruct
    (16) block_code -> . functions_dict
    (17) block_code -> . concurrent_method
    (18) block_code -> . queue_struct
    (19) block_code -> . functions_queue
    (20) block_code -> . stack_struct
    (21) block_code -> . functions_stack
    (22) block_code -> . block_if
    (23) block_code -> . block_for
    (24) block_code -> . block_try_catch
    (25) block_code -> . block_while
    (86) def_const_or_var -> . constant_assignation
    (87) def_const_or_var -> . variable_assignation
    (88) def_const_or_var -> . late_initialization
    (33) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (34) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (35) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (44) array_assignation -> . array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA
    (50) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (51) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (48) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (49) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (155) lists -> . list_empty
    (156) lists -> . list_full
    (165) functions_list -> . list_func_clear
    (166) functions_list -> . list_func_count
    (167) functions_list -> . list_func_add
    (168) functions_list -> . list_func_removeat
    (142) dict_estruct -> . dict_empty
    (143) dict_estruct -> . dict_full
    (151) functions_dict -> . dict_func_put
    (152) functions_dict -> . dict_func_remove
    (205) concurrent_method -> . method_declaration CONCURRENT LKEY concurrent_block RKEY
    (184) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (185) functions_queue -> . queue_enqueue
    (186) functions_queue -> . queue_dequeue
    (187) functions_queue -> . queue_clear
    (188) functions_queue -> . queue_isEmpty
    (173) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (174) functions_stack -> . stack_push
    (175) functions_stack -> . stack_pop
    (176) functions_stack -> . stack_clear
    (177) functions_stack -> . stack_peek
    (178) functions_stack -> . stack_isEmpty
    (137) block_if -> . IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if
    (121) block_for -> . for_anidado
    (122) block_for -> . for_each
    (129) block_try_catch -> . try_catch_simply
    (130) block_try_catch -> . try_catch_finally
    (133) block_while -> . normal_while
    (134) block_while -> . do_while
    (89) constant_assignation -> . access_modifiers CONST data_type assignation_key_value DOTANDCOMMA
    (90) constant_assignation -> . CONST data_type assignation_key_value DOTANDCOMMA
    (91) constant_assignation -> . access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (92) constant_assignation -> . CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (93) variable_assignation -> . access_modifiers data_type assignation_key_value DOTANDCOMMA
    (94) variable_assignation -> . data_type assignation_key_value DOTANDCOMMA
    (95) variable_assignation -> . access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA
    (96) variable_assignation -> . data_type assignation_key_value_multiple DOTANDCOMMA
    (97) late_initialization -> . access_modifiers data_type VARIABLE DOTANDCOMMA
    (98) late_initialization -> . data_type VARIABLE DOTANDCOMMA
    (99) late_initialization -> . assignation_key_value DOTANDCOMMA
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET
    (157) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (158) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (160) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (169) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (170) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (171) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (172) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (144) dict_empty -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (145) dict_full -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA
    (153) dict_func_put -> . VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA
    (154) dict_func_remove -> . VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA
    (206) method_declaration -> . METHOD IDENTIFIER LPARENT RPARENT DOTANDCOMMA
    (189) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (190) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (191) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (193) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (179) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (180) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (181) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (182) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (183) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (125) for_anidado -> . for_simple
    (126) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY
    (127) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY
    (128) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (131) try_catch_simply -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY
    (132) try_catch_finally -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY
    (135) normal_while -> . WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY
    (136) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT
    (84) access_modifiers -> . PUBLIC
    (85) access_modifiers -> . PRIVATE
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (100) assignation_key_value -> . VARIABLE ASSIGNATION value
    (101) assignation_key_value -> . READ LPARENT RPARENT
    (123) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (124) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    PRINT           shift and go to state 124
    READ            shift and go to state 126
    VARIABLE        shift and go to state 125
    QUEUE           shift and go to state 141
    STACK           shift and go to state 147
    IF              shift and go to state 153
    CONST           shift and go to state 161
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164
    CHARTYPE        shift and go to state 165
    STRINGTYPE      shift and go to state 166
    FLOATTYPE       shift and go to state 167
    DECIMALTYPE     shift and go to state 168
    INTTYPE         shift and go to state 169
    BOOLTYPE        shift and go to state 170
    LIST            shift and go to state 171
    DICTIONARY      shift and go to state 172
    METHOD          shift and go to state 97
    FOR             shift and go to state 174
    FOREACH         shift and go to state 175
    TRY             shift and go to state 176
    WHILE           shift and go to state 177
    DO              shift and go to state 178
    PUBLIC          shift and go to state 179
    PRIVATE         shift and go to state 20

    block_code                     shift and go to state 550
    def_const_or_var               shift and go to state 100
    print_data                     shift and go to state 101
    read_data                      shift and go to state 102
    arithmetic_operation           shift and go to state 103
    logic_operation                shift and go to state 104
    array_assignation              shift and go to state 105
    array_value_assign             shift and go to state 106
    array_indexing                 shift and go to state 107
    lists                          shift and go to state 108
    functions_list                 shift and go to state 109
    dict_estruct                   shift and go to state 110
    functions_dict                 shift and go to state 111
    concurrent_method              shift and go to state 112
    queue_struct                   shift and go to state 113
    functions_queue                shift and go to state 114
    stack_struct                   shift and go to state 115
    functions_stack                shift and go to state 116
    block_if                       shift and go to state 117
    block_for                      shift and go to state 118
    block_try_catch                shift and go to state 119
    block_while                    shift and go to state 120
    constant_assignation           shift and go to state 121
    variable_assignation           shift and go to state 122
    late_initialization            shift and go to state 123
    value_numeric                  shift and go to state 127
    array_type                     shift and go to state 129
    list_empty                     shift and go to state 130
    list_full                      shift and go to state 131
    list_func_clear                shift and go to state 132
    list_func_count                shift and go to state 133
    list_func_add                  shift and go to state 134
    list_func_removeat             shift and go to state 135
    dict_empty                     shift and go to state 136
    dict_full                      shift and go to state 137
    dict_func_put                  shift and go to state 138
    dict_func_remove               shift and go to state 139
    method_declaration             shift and go to state 140
    data_type                      shift and go to state 142
    queue_enqueue                  shift and go to state 143
    queue_dequeue                  shift and go to state 144
    queue_clear                    shift and go to state 145
    queue_isEmpty                  shift and go to state 146
    stack_push                     shift and go to state 148
    stack_pop                      shift and go to state 149
    stack_clear                    shift and go to state 150
    stack_peek                     shift and go to state 151
    stack_isEmpty                  shift and go to state 152
    for_anidado                    shift and go to state 154
    for_each                       shift and go to state 155
    try_catch_simply               shift and go to state 156
    try_catch_finally              shift and go to state 157
    normal_while                   shift and go to state 158
    do_while                       shift and go to state 159
    access_modifiers               shift and go to state 160
    assignation_key_value          shift and go to state 162
    for_simple                     shift and go to state 173

state 536

    (216) if_statement_concurrent -> IF LPARENT condition RPARENT LKEY concurrent_block RKEY .

    VARIABLE        reduce using rule 216 (if_statement_concurrent -> IF LPARENT condition RPARENT LKEY concurrent_block RKEY .)
    IF              reduce using rule 216 (if_statement_concurrent -> IF LPARENT condition RPARENT LKEY concurrent_block RKEY .)
    WHILE           reduce using rule 216 (if_statement_concurrent -> IF LPARENT condition RPARENT LKEY concurrent_block RKEY .)
    IDENTIFIER      reduce using rule 216 (if_statement_concurrent -> IF LPARENT condition RPARENT LKEY concurrent_block RKEY .)
    RETURN          reduce using rule 216 (if_statement_concurrent -> IF LPARENT condition RPARENT LKEY concurrent_block RKEY .)
    RKEY            reduce using rule 216 (if_statement_concurrent -> IF LPARENT condition RPARENT LKEY concurrent_block RKEY .)


state 537

    (217) while_loop_concurrent -> WHILE LPARENT condition RPARENT LKEY concurrent_block RKEY .

    VARIABLE        reduce using rule 217 (while_loop_concurrent -> WHILE LPARENT condition RPARENT LKEY concurrent_block RKEY .)
    IF              reduce using rule 217 (while_loop_concurrent -> WHILE LPARENT condition RPARENT LKEY concurrent_block RKEY .)
    WHILE           reduce using rule 217 (while_loop_concurrent -> WHILE LPARENT condition RPARENT LKEY concurrent_block RKEY .)
    IDENTIFIER      reduce using rule 217 (while_loop_concurrent -> WHILE LPARENT condition RPARENT LKEY concurrent_block RKEY .)
    RETURN          reduce using rule 217 (while_loop_concurrent -> WHILE LPARENT condition RPARENT LKEY concurrent_block RKEY .)
    RKEY            reduce using rule 217 (while_loop_concurrent -> WHILE LPARENT condition RPARENT LKEY concurrent_block RKEY .)


state 538

    (184) queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type . GREATER_THAN LPARENT RPARENT DOTANDCOMMA

    GREATER_THAN    shift and go to state 551


state 539

    (138) other_if -> ELSE LKEY not_yes_nested_if . RKEY

    RKEY            shift and go to state 552


state 540

    (139) other_if -> ELSE_IF LPARENT logic_operation . RPARENT LKEY not_yes_nested_if RKEY other_if

    RPARENT         shift and go to state 553


state 541

    (157) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE . GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE . GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    GREATER_THAN    shift and go to state 554


state 542

    (158) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE . GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (160) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE . GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    GREATER_THAN    shift and go to state 555


state 543

    (144) dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT . RPARENT DOTANDCOMMA
    (145) dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT . RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA

    RPARENT         shift and go to state 556


state 544

    (126) for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado . RKEY
    (121) block_for -> for_anidado .

  ! shift/reduce conflict for RKEY resolved as shift
    RKEY            shift and go to state 557
    PRINT           reduce using rule 121 (block_for -> for_anidado .)
    READ            reduce using rule 121 (block_for -> for_anidado .)
    VARIABLE        reduce using rule 121 (block_for -> for_anidado .)
    QUEUE           reduce using rule 121 (block_for -> for_anidado .)
    STACK           reduce using rule 121 (block_for -> for_anidado .)
    IF              reduce using rule 121 (block_for -> for_anidado .)
    CONST           reduce using rule 121 (block_for -> for_anidado .)
    INTEGER         reduce using rule 121 (block_for -> for_anidado .)
    FLOAT_NUMBER    reduce using rule 121 (block_for -> for_anidado .)
    DECIMAL_NUMBER  reduce using rule 121 (block_for -> for_anidado .)
    CHARTYPE        reduce using rule 121 (block_for -> for_anidado .)
    STRINGTYPE      reduce using rule 121 (block_for -> for_anidado .)
    FLOATTYPE       reduce using rule 121 (block_for -> for_anidado .)
    DECIMALTYPE     reduce using rule 121 (block_for -> for_anidado .)
    INTTYPE         reduce using rule 121 (block_for -> for_anidado .)
    BOOLTYPE        reduce using rule 121 (block_for -> for_anidado .)
    LIST            reduce using rule 121 (block_for -> for_anidado .)
    DICTIONARY      reduce using rule 121 (block_for -> for_anidado .)
    METHOD          reduce using rule 121 (block_for -> for_anidado .)
    FOR             reduce using rule 121 (block_for -> for_anidado .)
    FOREACH         reduce using rule 121 (block_for -> for_anidado .)
    TRY             reduce using rule 121 (block_for -> for_anidado .)
    WHILE           reduce using rule 121 (block_for -> for_anidado .)
    DO              reduce using rule 121 (block_for -> for_anidado .)
    PUBLIC          reduce using rule 121 (block_for -> for_anidado .)
    PRIVATE         reduce using rule 121 (block_for -> for_anidado .)

  ! RKEY            [ reduce using rule 121 (block_for -> for_anidado .) ]


state 545

    (123) for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code . RKEY

    RKEY            shift and go to state 558


state 546

    (127) for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado . RKEY
    (121) block_for -> for_anidado .

  ! shift/reduce conflict for RKEY resolved as shift
    RKEY            shift and go to state 559
    PRINT           reduce using rule 121 (block_for -> for_anidado .)
    READ            reduce using rule 121 (block_for -> for_anidado .)
    VARIABLE        reduce using rule 121 (block_for -> for_anidado .)
    QUEUE           reduce using rule 121 (block_for -> for_anidado .)
    STACK           reduce using rule 121 (block_for -> for_anidado .)
    IF              reduce using rule 121 (block_for -> for_anidado .)
    CONST           reduce using rule 121 (block_for -> for_anidado .)
    INTEGER         reduce using rule 121 (block_for -> for_anidado .)
    FLOAT_NUMBER    reduce using rule 121 (block_for -> for_anidado .)
    DECIMAL_NUMBER  reduce using rule 121 (block_for -> for_anidado .)
    CHARTYPE        reduce using rule 121 (block_for -> for_anidado .)
    STRINGTYPE      reduce using rule 121 (block_for -> for_anidado .)
    FLOATTYPE       reduce using rule 121 (block_for -> for_anidado .)
    DECIMALTYPE     reduce using rule 121 (block_for -> for_anidado .)
    INTTYPE         reduce using rule 121 (block_for -> for_anidado .)
    BOOLTYPE        reduce using rule 121 (block_for -> for_anidado .)
    LIST            reduce using rule 121 (block_for -> for_anidado .)
    DICTIONARY      reduce using rule 121 (block_for -> for_anidado .)
    METHOD          reduce using rule 121 (block_for -> for_anidado .)
    FOR             reduce using rule 121 (block_for -> for_anidado .)
    FOREACH         reduce using rule 121 (block_for -> for_anidado .)
    TRY             reduce using rule 121 (block_for -> for_anidado .)
    WHILE           reduce using rule 121 (block_for -> for_anidado .)
    DO              reduce using rule 121 (block_for -> for_anidado .)
    PUBLIC          reduce using rule 121 (block_for -> for_anidado .)
    PRIVATE         reduce using rule 121 (block_for -> for_anidado .)

  ! RKEY            [ reduce using rule 121 (block_for -> for_anidado .) ]


state 547

    (124) for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code . RKEY

    RKEY            shift and go to state 560


state 548

    (128) for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .

    PRINT           reduce using rule 128 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    READ            reduce using rule 128 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    VARIABLE        reduce using rule 128 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    QUEUE           reduce using rule 128 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    STACK           reduce using rule 128 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    IF              reduce using rule 128 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    CONST           reduce using rule 128 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    INTEGER         reduce using rule 128 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    FLOAT_NUMBER    reduce using rule 128 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    DECIMAL_NUMBER  reduce using rule 128 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    CHARTYPE        reduce using rule 128 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    STRINGTYPE      reduce using rule 128 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    FLOATTYPE       reduce using rule 128 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    DECIMALTYPE     reduce using rule 128 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    INTTYPE         reduce using rule 128 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    BOOLTYPE        reduce using rule 128 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    LIST            reduce using rule 128 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    DICTIONARY      reduce using rule 128 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    METHOD          reduce using rule 128 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    FOR             reduce using rule 128 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    FOREACH         reduce using rule 128 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    TRY             reduce using rule 128 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    WHILE           reduce using rule 128 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    DO              reduce using rule 128 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    PUBLIC          reduce using rule 128 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    PRIVATE         reduce using rule 128 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    RKEY            reduce using rule 128 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    RETURN          reduce using rule 128 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)


state 549

    (131) try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY . all_block_code RKEY
    (132) try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY . all_block_code RKEY FINALLY LKEY all_block_code RKEY
    (26) all_block_code -> . block_code
    (27) all_block_code -> . block_code all_block_code
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . read_data
    (8) block_code -> . arithmetic_operation
    (9) block_code -> . logic_operation
    (10) block_code -> . array_assignation
    (11) block_code -> . array_value_assign
    (12) block_code -> . array_indexing
    (13) block_code -> . lists
    (14) block_code -> . functions_list
    (15) block_code -> . dict_estruct
    (16) block_code -> . functions_dict
    (17) block_code -> . concurrent_method
    (18) block_code -> . queue_struct
    (19) block_code -> . functions_queue
    (20) block_code -> . stack_struct
    (21) block_code -> . functions_stack
    (22) block_code -> . block_if
    (23) block_code -> . block_for
    (24) block_code -> . block_try_catch
    (25) block_code -> . block_while
    (86) def_const_or_var -> . constant_assignation
    (87) def_const_or_var -> . variable_assignation
    (88) def_const_or_var -> . late_initialization
    (33) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (34) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (35) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (44) array_assignation -> . array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA
    (50) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (51) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (48) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (49) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (155) lists -> . list_empty
    (156) lists -> . list_full
    (165) functions_list -> . list_func_clear
    (166) functions_list -> . list_func_count
    (167) functions_list -> . list_func_add
    (168) functions_list -> . list_func_removeat
    (142) dict_estruct -> . dict_empty
    (143) dict_estruct -> . dict_full
    (151) functions_dict -> . dict_func_put
    (152) functions_dict -> . dict_func_remove
    (205) concurrent_method -> . method_declaration CONCURRENT LKEY concurrent_block RKEY
    (184) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (185) functions_queue -> . queue_enqueue
    (186) functions_queue -> . queue_dequeue
    (187) functions_queue -> . queue_clear
    (188) functions_queue -> . queue_isEmpty
    (173) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (174) functions_stack -> . stack_push
    (175) functions_stack -> . stack_pop
    (176) functions_stack -> . stack_clear
    (177) functions_stack -> . stack_peek
    (178) functions_stack -> . stack_isEmpty
    (137) block_if -> . IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if
    (121) block_for -> . for_anidado
    (122) block_for -> . for_each
    (129) block_try_catch -> . try_catch_simply
    (130) block_try_catch -> . try_catch_finally
    (133) block_while -> . normal_while
    (134) block_while -> . do_while
    (89) constant_assignation -> . access_modifiers CONST data_type assignation_key_value DOTANDCOMMA
    (90) constant_assignation -> . CONST data_type assignation_key_value DOTANDCOMMA
    (91) constant_assignation -> . access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (92) constant_assignation -> . CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (93) variable_assignation -> . access_modifiers data_type assignation_key_value DOTANDCOMMA
    (94) variable_assignation -> . data_type assignation_key_value DOTANDCOMMA
    (95) variable_assignation -> . access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA
    (96) variable_assignation -> . data_type assignation_key_value_multiple DOTANDCOMMA
    (97) late_initialization -> . access_modifiers data_type VARIABLE DOTANDCOMMA
    (98) late_initialization -> . data_type VARIABLE DOTANDCOMMA
    (99) late_initialization -> . assignation_key_value DOTANDCOMMA
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET
    (157) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (158) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (160) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (169) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (170) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (171) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (172) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (144) dict_empty -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (145) dict_full -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA
    (153) dict_func_put -> . VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA
    (154) dict_func_remove -> . VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA
    (206) method_declaration -> . METHOD IDENTIFIER LPARENT RPARENT DOTANDCOMMA
    (189) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (190) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (191) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (193) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (179) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (180) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (181) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (182) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (183) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (125) for_anidado -> . for_simple
    (126) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY
    (127) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY
    (128) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (131) try_catch_simply -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY
    (132) try_catch_finally -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY
    (135) normal_while -> . WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY
    (136) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT
    (84) access_modifiers -> . PUBLIC
    (85) access_modifiers -> . PRIVATE
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (100) assignation_key_value -> . VARIABLE ASSIGNATION value
    (101) assignation_key_value -> . READ LPARENT RPARENT
    (123) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (124) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    PRINT           shift and go to state 124
    READ            shift and go to state 126
    VARIABLE        shift and go to state 125
    QUEUE           shift and go to state 141
    STACK           shift and go to state 147
    IF              shift and go to state 153
    CONST           shift and go to state 161
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164
    CHARTYPE        shift and go to state 165
    STRINGTYPE      shift and go to state 166
    FLOATTYPE       shift and go to state 167
    DECIMALTYPE     shift and go to state 168
    INTTYPE         shift and go to state 169
    BOOLTYPE        shift and go to state 170
    LIST            shift and go to state 171
    DICTIONARY      shift and go to state 172
    METHOD          shift and go to state 97
    FOR             shift and go to state 174
    FOREACH         shift and go to state 175
    TRY             shift and go to state 176
    WHILE           shift and go to state 177
    DO              shift and go to state 178
    PUBLIC          shift and go to state 179
    PRIVATE         shift and go to state 20

    all_block_code                 shift and go to state 561
    block_code                     shift and go to state 99
    def_const_or_var               shift and go to state 100
    print_data                     shift and go to state 101
    read_data                      shift and go to state 102
    arithmetic_operation           shift and go to state 103
    logic_operation                shift and go to state 104
    array_assignation              shift and go to state 105
    array_value_assign             shift and go to state 106
    array_indexing                 shift and go to state 107
    lists                          shift and go to state 108
    functions_list                 shift and go to state 109
    dict_estruct                   shift and go to state 110
    functions_dict                 shift and go to state 111
    concurrent_method              shift and go to state 112
    queue_struct                   shift and go to state 113
    functions_queue                shift and go to state 114
    stack_struct                   shift and go to state 115
    functions_stack                shift and go to state 116
    block_if                       shift and go to state 117
    block_for                      shift and go to state 118
    block_try_catch                shift and go to state 119
    block_while                    shift and go to state 120
    constant_assignation           shift and go to state 121
    variable_assignation           shift and go to state 122
    late_initialization            shift and go to state 123
    value_numeric                  shift and go to state 127
    array_type                     shift and go to state 129
    list_empty                     shift and go to state 130
    list_full                      shift and go to state 131
    list_func_clear                shift and go to state 132
    list_func_count                shift and go to state 133
    list_func_add                  shift and go to state 134
    list_func_removeat             shift and go to state 135
    dict_empty                     shift and go to state 136
    dict_full                      shift and go to state 137
    dict_func_put                  shift and go to state 138
    dict_func_remove               shift and go to state 139
    method_declaration             shift and go to state 140
    data_type                      shift and go to state 142
    queue_enqueue                  shift and go to state 143
    queue_dequeue                  shift and go to state 144
    queue_clear                    shift and go to state 145
    queue_isEmpty                  shift and go to state 146
    stack_push                     shift and go to state 148
    stack_pop                      shift and go to state 149
    stack_clear                    shift and go to state 150
    stack_peek                     shift and go to state 151
    stack_isEmpty                  shift and go to state 152
    for_anidado                    shift and go to state 154
    for_each                       shift and go to state 155
    try_catch_simply               shift and go to state 156
    try_catch_finally              shift and go to state 157
    normal_while                   shift and go to state 158
    do_while                       shift and go to state 159
    access_modifiers               shift and go to state 160
    assignation_key_value          shift and go to state 162
    for_simple                     shift and go to state 173

state 550

    (203) declaration_async -> PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code . RKEY RPARENT DOTANDCOMMA RKEY

    RKEY            shift and go to state 562


state 551

    (184) queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 563


state 552

    (138) other_if -> ELSE LKEY not_yes_nested_if RKEY .

    PRINT           reduce using rule 138 (other_if -> ELSE LKEY not_yes_nested_if RKEY .)
    READ            reduce using rule 138 (other_if -> ELSE LKEY not_yes_nested_if RKEY .)
    VARIABLE        reduce using rule 138 (other_if -> ELSE LKEY not_yes_nested_if RKEY .)
    QUEUE           reduce using rule 138 (other_if -> ELSE LKEY not_yes_nested_if RKEY .)
    STACK           reduce using rule 138 (other_if -> ELSE LKEY not_yes_nested_if RKEY .)
    IF              reduce using rule 138 (other_if -> ELSE LKEY not_yes_nested_if RKEY .)
    CONST           reduce using rule 138 (other_if -> ELSE LKEY not_yes_nested_if RKEY .)
    INTEGER         reduce using rule 138 (other_if -> ELSE LKEY not_yes_nested_if RKEY .)
    FLOAT_NUMBER    reduce using rule 138 (other_if -> ELSE LKEY not_yes_nested_if RKEY .)
    DECIMAL_NUMBER  reduce using rule 138 (other_if -> ELSE LKEY not_yes_nested_if RKEY .)
    CHARTYPE        reduce using rule 138 (other_if -> ELSE LKEY not_yes_nested_if RKEY .)
    STRINGTYPE      reduce using rule 138 (other_if -> ELSE LKEY not_yes_nested_if RKEY .)
    FLOATTYPE       reduce using rule 138 (other_if -> ELSE LKEY not_yes_nested_if RKEY .)
    DECIMALTYPE     reduce using rule 138 (other_if -> ELSE LKEY not_yes_nested_if RKEY .)
    INTTYPE         reduce using rule 138 (other_if -> ELSE LKEY not_yes_nested_if RKEY .)
    BOOLTYPE        reduce using rule 138 (other_if -> ELSE LKEY not_yes_nested_if RKEY .)
    LIST            reduce using rule 138 (other_if -> ELSE LKEY not_yes_nested_if RKEY .)
    DICTIONARY      reduce using rule 138 (other_if -> ELSE LKEY not_yes_nested_if RKEY .)
    METHOD          reduce using rule 138 (other_if -> ELSE LKEY not_yes_nested_if RKEY .)
    FOR             reduce using rule 138 (other_if -> ELSE LKEY not_yes_nested_if RKEY .)
    FOREACH         reduce using rule 138 (other_if -> ELSE LKEY not_yes_nested_if RKEY .)
    TRY             reduce using rule 138 (other_if -> ELSE LKEY not_yes_nested_if RKEY .)
    WHILE           reduce using rule 138 (other_if -> ELSE LKEY not_yes_nested_if RKEY .)
    DO              reduce using rule 138 (other_if -> ELSE LKEY not_yes_nested_if RKEY .)
    PUBLIC          reduce using rule 138 (other_if -> ELSE LKEY not_yes_nested_if RKEY .)
    PRIVATE         reduce using rule 138 (other_if -> ELSE LKEY not_yes_nested_if RKEY .)
    RKEY            reduce using rule 138 (other_if -> ELSE LKEY not_yes_nested_if RKEY .)
    RETURN          reduce using rule 138 (other_if -> ELSE LKEY not_yes_nested_if RKEY .)


state 553

    (139) other_if -> ELSE_IF LPARENT logic_operation RPARENT . LKEY not_yes_nested_if RKEY other_if

    LKEY            shift and go to state 564


state 554

    (157) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN . LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN . LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    LPARENT         shift and go to state 565


state 555

    (158) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN . LPARENT RPARENT DOTANDCOMMA
    (160) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN . LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    LPARENT         shift and go to state 566


state 556

    (144) dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT . DOTANDCOMMA
    (145) dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT . LKEY key_value_pairs RKEY DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 567
    LKEY            shift and go to state 568


state 557

    (126) for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY .

    PRINT           reduce using rule 126 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY .)
    READ            reduce using rule 126 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY .)
    VARIABLE        reduce using rule 126 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY .)
    QUEUE           reduce using rule 126 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY .)
    STACK           reduce using rule 126 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY .)
    IF              reduce using rule 126 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY .)
    CONST           reduce using rule 126 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY .)
    INTEGER         reduce using rule 126 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY .)
    FLOAT_NUMBER    reduce using rule 126 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY .)
    DECIMAL_NUMBER  reduce using rule 126 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY .)
    CHARTYPE        reduce using rule 126 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY .)
    STRINGTYPE      reduce using rule 126 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY .)
    FLOATTYPE       reduce using rule 126 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY .)
    DECIMALTYPE     reduce using rule 126 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY .)
    INTTYPE         reduce using rule 126 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY .)
    BOOLTYPE        reduce using rule 126 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY .)
    LIST            reduce using rule 126 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY .)
    DICTIONARY      reduce using rule 126 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY .)
    METHOD          reduce using rule 126 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY .)
    FOR             reduce using rule 126 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY .)
    FOREACH         reduce using rule 126 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY .)
    TRY             reduce using rule 126 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY .)
    WHILE           reduce using rule 126 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY .)
    DO              reduce using rule 126 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY .)
    PUBLIC          reduce using rule 126 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY .)
    PRIVATE         reduce using rule 126 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY .)
    RKEY            reduce using rule 126 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY .)
    RETURN          reduce using rule 126 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY .)


state 558

    (123) for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .

    PRINT           reduce using rule 123 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    READ            reduce using rule 123 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    VARIABLE        reduce using rule 123 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    QUEUE           reduce using rule 123 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    STACK           reduce using rule 123 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    IF              reduce using rule 123 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    CONST           reduce using rule 123 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    INTEGER         reduce using rule 123 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    FLOAT_NUMBER    reduce using rule 123 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    DECIMAL_NUMBER  reduce using rule 123 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    CHARTYPE        reduce using rule 123 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    STRINGTYPE      reduce using rule 123 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    FLOATTYPE       reduce using rule 123 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    DECIMALTYPE     reduce using rule 123 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    INTTYPE         reduce using rule 123 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    BOOLTYPE        reduce using rule 123 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    LIST            reduce using rule 123 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    DICTIONARY      reduce using rule 123 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    METHOD          reduce using rule 123 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    FOR             reduce using rule 123 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    FOREACH         reduce using rule 123 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    TRY             reduce using rule 123 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    WHILE           reduce using rule 123 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    DO              reduce using rule 123 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    PUBLIC          reduce using rule 123 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    PRIVATE         reduce using rule 123 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    RKEY            reduce using rule 123 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    RETURN          reduce using rule 123 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)


state 559

    (127) for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY .

    PRINT           reduce using rule 127 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY .)
    READ            reduce using rule 127 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY .)
    VARIABLE        reduce using rule 127 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY .)
    QUEUE           reduce using rule 127 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY .)
    STACK           reduce using rule 127 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY .)
    IF              reduce using rule 127 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY .)
    CONST           reduce using rule 127 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY .)
    INTEGER         reduce using rule 127 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY .)
    FLOAT_NUMBER    reduce using rule 127 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY .)
    DECIMAL_NUMBER  reduce using rule 127 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY .)
    CHARTYPE        reduce using rule 127 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY .)
    STRINGTYPE      reduce using rule 127 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY .)
    FLOATTYPE       reduce using rule 127 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY .)
    DECIMALTYPE     reduce using rule 127 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY .)
    INTTYPE         reduce using rule 127 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY .)
    BOOLTYPE        reduce using rule 127 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY .)
    LIST            reduce using rule 127 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY .)
    DICTIONARY      reduce using rule 127 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY .)
    METHOD          reduce using rule 127 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY .)
    FOR             reduce using rule 127 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY .)
    FOREACH         reduce using rule 127 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY .)
    TRY             reduce using rule 127 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY .)
    WHILE           reduce using rule 127 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY .)
    DO              reduce using rule 127 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY .)
    PUBLIC          reduce using rule 127 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY .)
    PRIVATE         reduce using rule 127 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY .)
    RKEY            reduce using rule 127 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY .)
    RETURN          reduce using rule 127 (for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY .)


state 560

    (124) for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .

    PRINT           reduce using rule 124 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    READ            reduce using rule 124 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    VARIABLE        reduce using rule 124 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    QUEUE           reduce using rule 124 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    STACK           reduce using rule 124 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    IF              reduce using rule 124 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    CONST           reduce using rule 124 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    INTEGER         reduce using rule 124 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    FLOAT_NUMBER    reduce using rule 124 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    DECIMAL_NUMBER  reduce using rule 124 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    CHARTYPE        reduce using rule 124 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    STRINGTYPE      reduce using rule 124 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    FLOATTYPE       reduce using rule 124 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    DECIMALTYPE     reduce using rule 124 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    INTTYPE         reduce using rule 124 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    BOOLTYPE        reduce using rule 124 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    LIST            reduce using rule 124 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    DICTIONARY      reduce using rule 124 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    METHOD          reduce using rule 124 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    FOR             reduce using rule 124 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    FOREACH         reduce using rule 124 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    TRY             reduce using rule 124 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    WHILE           reduce using rule 124 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    DO              reduce using rule 124 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    PUBLIC          reduce using rule 124 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    PRIVATE         reduce using rule 124 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    RKEY            reduce using rule 124 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    RETURN          reduce using rule 124 (for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)


state 561

    (131) try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code . RKEY
    (132) try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code . RKEY FINALLY LKEY all_block_code RKEY

    RKEY            shift and go to state 569


state 562

    (203) declaration_async -> PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY . RPARENT DOTANDCOMMA RKEY

    RPARENT         shift and go to state 570


state 563

    (184) queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 571


state 564

    (139) other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY . not_yes_nested_if RKEY other_if
    (140) not_yes_nested_if -> . block_if
    (141) not_yes_nested_if -> . block_code
    (137) block_if -> . IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . read_data
    (8) block_code -> . arithmetic_operation
    (9) block_code -> . logic_operation
    (10) block_code -> . array_assignation
    (11) block_code -> . array_value_assign
    (12) block_code -> . array_indexing
    (13) block_code -> . lists
    (14) block_code -> . functions_list
    (15) block_code -> . dict_estruct
    (16) block_code -> . functions_dict
    (17) block_code -> . concurrent_method
    (18) block_code -> . queue_struct
    (19) block_code -> . functions_queue
    (20) block_code -> . stack_struct
    (21) block_code -> . functions_stack
    (22) block_code -> . block_if
    (23) block_code -> . block_for
    (24) block_code -> . block_try_catch
    (25) block_code -> . block_while
    (86) def_const_or_var -> . constant_assignation
    (87) def_const_or_var -> . variable_assignation
    (88) def_const_or_var -> . late_initialization
    (33) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (34) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (35) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (44) array_assignation -> . array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA
    (50) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (51) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (48) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (49) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (155) lists -> . list_empty
    (156) lists -> . list_full
    (165) functions_list -> . list_func_clear
    (166) functions_list -> . list_func_count
    (167) functions_list -> . list_func_add
    (168) functions_list -> . list_func_removeat
    (142) dict_estruct -> . dict_empty
    (143) dict_estruct -> . dict_full
    (151) functions_dict -> . dict_func_put
    (152) functions_dict -> . dict_func_remove
    (205) concurrent_method -> . method_declaration CONCURRENT LKEY concurrent_block RKEY
    (184) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (185) functions_queue -> . queue_enqueue
    (186) functions_queue -> . queue_dequeue
    (187) functions_queue -> . queue_clear
    (188) functions_queue -> . queue_isEmpty
    (173) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (174) functions_stack -> . stack_push
    (175) functions_stack -> . stack_pop
    (176) functions_stack -> . stack_clear
    (177) functions_stack -> . stack_peek
    (178) functions_stack -> . stack_isEmpty
    (121) block_for -> . for_anidado
    (122) block_for -> . for_each
    (129) block_try_catch -> . try_catch_simply
    (130) block_try_catch -> . try_catch_finally
    (133) block_while -> . normal_while
    (134) block_while -> . do_while
    (89) constant_assignation -> . access_modifiers CONST data_type assignation_key_value DOTANDCOMMA
    (90) constant_assignation -> . CONST data_type assignation_key_value DOTANDCOMMA
    (91) constant_assignation -> . access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (92) constant_assignation -> . CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (93) variable_assignation -> . access_modifiers data_type assignation_key_value DOTANDCOMMA
    (94) variable_assignation -> . data_type assignation_key_value DOTANDCOMMA
    (95) variable_assignation -> . access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA
    (96) variable_assignation -> . data_type assignation_key_value_multiple DOTANDCOMMA
    (97) late_initialization -> . access_modifiers data_type VARIABLE DOTANDCOMMA
    (98) late_initialization -> . data_type VARIABLE DOTANDCOMMA
    (99) late_initialization -> . assignation_key_value DOTANDCOMMA
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET
    (157) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (158) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (160) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (169) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (170) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (171) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (172) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (144) dict_empty -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (145) dict_full -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA
    (153) dict_func_put -> . VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA
    (154) dict_func_remove -> . VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA
    (206) method_declaration -> . METHOD IDENTIFIER LPARENT RPARENT DOTANDCOMMA
    (189) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (190) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (191) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (193) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (179) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (180) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (181) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (182) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (183) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (125) for_anidado -> . for_simple
    (126) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY
    (127) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY
    (128) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (131) try_catch_simply -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY
    (132) try_catch_finally -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY
    (135) normal_while -> . WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY
    (136) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT
    (84) access_modifiers -> . PUBLIC
    (85) access_modifiers -> . PRIVATE
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (100) assignation_key_value -> . VARIABLE ASSIGNATION value
    (101) assignation_key_value -> . READ LPARENT RPARENT
    (123) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (124) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    IF              shift and go to state 153
    PRINT           shift and go to state 124
    READ            shift and go to state 126
    VARIABLE        shift and go to state 125
    QUEUE           shift and go to state 141
    STACK           shift and go to state 147
    CONST           shift and go to state 161
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164
    CHARTYPE        shift and go to state 165
    STRINGTYPE      shift and go to state 166
    FLOATTYPE       shift and go to state 167
    DECIMALTYPE     shift and go to state 168
    INTTYPE         shift and go to state 169
    BOOLTYPE        shift and go to state 170
    LIST            shift and go to state 171
    DICTIONARY      shift and go to state 172
    METHOD          shift and go to state 97
    FOR             shift and go to state 174
    FOREACH         shift and go to state 175
    TRY             shift and go to state 176
    WHILE           shift and go to state 177
    DO              shift and go to state 178
    PUBLIC          shift and go to state 179
    PRIVATE         shift and go to state 20

    logic_operation                shift and go to state 104
    not_yes_nested_if              shift and go to state 572
    block_if                       shift and go to state 458
    block_code                     shift and go to state 459
    def_const_or_var               shift and go to state 100
    print_data                     shift and go to state 101
    read_data                      shift and go to state 102
    arithmetic_operation           shift and go to state 103
    array_assignation              shift and go to state 105
    array_value_assign             shift and go to state 106
    array_indexing                 shift and go to state 107
    lists                          shift and go to state 108
    functions_list                 shift and go to state 109
    dict_estruct                   shift and go to state 110
    functions_dict                 shift and go to state 111
    concurrent_method              shift and go to state 112
    queue_struct                   shift and go to state 113
    functions_queue                shift and go to state 114
    stack_struct                   shift and go to state 115
    functions_stack                shift and go to state 116
    block_for                      shift and go to state 118
    block_try_catch                shift and go to state 119
    block_while                    shift and go to state 120
    constant_assignation           shift and go to state 121
    variable_assignation           shift and go to state 122
    late_initialization            shift and go to state 123
    value_numeric                  shift and go to state 127
    array_type                     shift and go to state 129
    list_empty                     shift and go to state 130
    list_full                      shift and go to state 131
    list_func_clear                shift and go to state 132
    list_func_count                shift and go to state 133
    list_func_add                  shift and go to state 134
    list_func_removeat             shift and go to state 135
    dict_empty                     shift and go to state 136
    dict_full                      shift and go to state 137
    dict_func_put                  shift and go to state 138
    dict_func_remove               shift and go to state 139
    method_declaration             shift and go to state 140
    data_type                      shift and go to state 142
    queue_enqueue                  shift and go to state 143
    queue_dequeue                  shift and go to state 144
    queue_clear                    shift and go to state 145
    queue_isEmpty                  shift and go to state 146
    stack_push                     shift and go to state 148
    stack_pop                      shift and go to state 149
    stack_clear                    shift and go to state 150
    stack_peek                     shift and go to state 151
    stack_isEmpty                  shift and go to state 152
    for_anidado                    shift and go to state 154
    for_each                       shift and go to state 155
    try_catch_simply               shift and go to state 156
    try_catch_finally              shift and go to state 157
    normal_while                   shift and go to state 158
    do_while                       shift and go to state 159
    access_modifiers               shift and go to state 160
    assignation_key_value          shift and go to state 162
    for_simple                     shift and go to state 173

state 565

    (157) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT . RPARENT DOTANDCOMMA
    (159) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT . RPARENT LKEY strings_list RKEY DOTANDCOMMA

    RPARENT         shift and go to state 573


state 566

    (158) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT . RPARENT DOTANDCOMMA
    (160) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT . RPARENT LKEY ints_list RKEY DOTANDCOMMA

    RPARENT         shift and go to state 574


state 567

    (144) dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 144 (dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    READ            reduce using rule 144 (dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 144 (dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 144 (dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 144 (dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 144 (dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 144 (dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    INTEGER         reduce using rule 144 (dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 144 (dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 144 (dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 144 (dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 144 (dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 144 (dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 144 (dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 144 (dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 144 (dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 144 (dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    DICTIONARY      reduce using rule 144 (dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    METHOD          reduce using rule 144 (dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 144 (dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 144 (dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 144 (dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 144 (dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 144 (dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 144 (dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 144 (dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 144 (dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    RETURN          reduce using rule 144 (dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)


state 568

    (145) dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY . key_value_pairs RKEY DOTANDCOMMA
    (146) key_value_pairs -> . key_value_pair
    (147) key_value_pairs -> . key_value_pair COMMA key_value_pairs
    (148) key_value_pair -> . LKEY VARIABLE COMMA value RKEY

    LKEY            shift and go to state 575

    key_value_pairs                shift and go to state 576
    key_value_pair                 shift and go to state 577

state 569

    (131) try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY .
    (132) try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY . FINALLY LKEY all_block_code RKEY

    PRINT           reduce using rule 131 (try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY .)
    READ            reduce using rule 131 (try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY .)
    VARIABLE        reduce using rule 131 (try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY .)
    QUEUE           reduce using rule 131 (try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY .)
    STACK           reduce using rule 131 (try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY .)
    IF              reduce using rule 131 (try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY .)
    CONST           reduce using rule 131 (try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY .)
    INTEGER         reduce using rule 131 (try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY .)
    FLOAT_NUMBER    reduce using rule 131 (try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY .)
    DECIMAL_NUMBER  reduce using rule 131 (try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY .)
    CHARTYPE        reduce using rule 131 (try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY .)
    STRINGTYPE      reduce using rule 131 (try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY .)
    FLOATTYPE       reduce using rule 131 (try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY .)
    DECIMALTYPE     reduce using rule 131 (try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY .)
    INTTYPE         reduce using rule 131 (try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY .)
    BOOLTYPE        reduce using rule 131 (try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY .)
    LIST            reduce using rule 131 (try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY .)
    DICTIONARY      reduce using rule 131 (try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY .)
    METHOD          reduce using rule 131 (try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY .)
    FOR             reduce using rule 131 (try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY .)
    FOREACH         reduce using rule 131 (try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY .)
    TRY             reduce using rule 131 (try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY .)
    WHILE           reduce using rule 131 (try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY .)
    DO              reduce using rule 131 (try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY .)
    PUBLIC          reduce using rule 131 (try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY .)
    PRIVATE         reduce using rule 131 (try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY .)
    RKEY            reduce using rule 131 (try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY .)
    RETURN          reduce using rule 131 (try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY .)
    FINALLY         shift and go to state 578


state 570

    (203) declaration_async -> PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT . DOTANDCOMMA RKEY

    DOTANDCOMMA     shift and go to state 579


state 571

    (184) queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 580


state 572

    (139) other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if . RKEY other_if

    RKEY            shift and go to state 581


state 573

    (157) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT . DOTANDCOMMA
    (159) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT . LKEY strings_list RKEY DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 582
    LKEY            shift and go to state 583


state 574

    (158) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT . DOTANDCOMMA
    (160) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT . LKEY ints_list RKEY DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 584
    LKEY            shift and go to state 585


state 575

    (148) key_value_pair -> LKEY . VARIABLE COMMA value RKEY

    VARIABLE        shift and go to state 586


state 576

    (145) dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs . RKEY DOTANDCOMMA

    RKEY            shift and go to state 587


state 577

    (146) key_value_pairs -> key_value_pair .
    (147) key_value_pairs -> key_value_pair . COMMA key_value_pairs

    RKEY            reduce using rule 146 (key_value_pairs -> key_value_pair .)
    COMMA           shift and go to state 588


state 578

    (132) try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY . LKEY all_block_code RKEY

    LKEY            shift and go to state 589


state 579

    (203) declaration_async -> PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA . RKEY

    RKEY            shift and go to state 590


state 580

    (184) queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 184 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    READ            reduce using rule 184 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 184 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 184 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 184 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 184 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 184 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    INTEGER         reduce using rule 184 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 184 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 184 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 184 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 184 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 184 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 184 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 184 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 184 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 184 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    DICTIONARY      reduce using rule 184 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    METHOD          reduce using rule 184 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 184 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 184 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 184 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 184 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 184 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 184 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 184 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 184 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    RETURN          reduce using rule 184 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)


state 581

    (139) other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY . other_if
    (138) other_if -> . ELSE LKEY not_yes_nested_if RKEY
    (139) other_if -> . ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if

    ELSE            shift and go to state 511
    ELSE_IF         shift and go to state 512

    other_if                       shift and go to state 591

state 582

    (157) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 157 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    READ            reduce using rule 157 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 157 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 157 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 157 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 157 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 157 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    INTEGER         reduce using rule 157 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 157 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 157 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 157 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 157 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 157 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 157 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 157 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 157 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 157 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    DICTIONARY      reduce using rule 157 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    METHOD          reduce using rule 157 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 157 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 157 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 157 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 157 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 157 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 157 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 157 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 157 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    RETURN          reduce using rule 157 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)


state 583

    (159) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY . strings_list RKEY DOTANDCOMMA
    (161) strings_list -> . STRING
    (162) strings_list -> . STRING COMMA strings_list

    STRING          shift and go to state 593

    strings_list                   shift and go to state 592

state 584

    (158) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 158 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    READ            reduce using rule 158 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 158 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 158 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 158 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 158 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 158 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    INTEGER         reduce using rule 158 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 158 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 158 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 158 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 158 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 158 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 158 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 158 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 158 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 158 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    DICTIONARY      reduce using rule 158 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    METHOD          reduce using rule 158 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 158 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 158 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 158 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 158 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 158 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 158 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 158 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 158 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    RETURN          reduce using rule 158 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)


state 585

    (160) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY . ints_list RKEY DOTANDCOMMA
    (163) ints_list -> . INTEGER
    (164) ints_list -> . INTEGER COMMA ints_list

    INTEGER         shift and go to state 595

    ints_list                      shift and go to state 594

state 586

    (148) key_value_pair -> LKEY VARIABLE . COMMA value RKEY

    COMMA           shift and go to state 596


state 587

    (145) dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 597


state 588

    (147) key_value_pairs -> key_value_pair COMMA . key_value_pairs
    (146) key_value_pairs -> . key_value_pair
    (147) key_value_pairs -> . key_value_pair COMMA key_value_pairs
    (148) key_value_pair -> . LKEY VARIABLE COMMA value RKEY

    LKEY            shift and go to state 575

    key_value_pair                 shift and go to state 577
    key_value_pairs                shift and go to state 598

state 589

    (132) try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY . all_block_code RKEY
    (26) all_block_code -> . block_code
    (27) all_block_code -> . block_code all_block_code
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . read_data
    (8) block_code -> . arithmetic_operation
    (9) block_code -> . logic_operation
    (10) block_code -> . array_assignation
    (11) block_code -> . array_value_assign
    (12) block_code -> . array_indexing
    (13) block_code -> . lists
    (14) block_code -> . functions_list
    (15) block_code -> . dict_estruct
    (16) block_code -> . functions_dict
    (17) block_code -> . concurrent_method
    (18) block_code -> . queue_struct
    (19) block_code -> . functions_queue
    (20) block_code -> . stack_struct
    (21) block_code -> . functions_stack
    (22) block_code -> . block_if
    (23) block_code -> . block_for
    (24) block_code -> . block_try_catch
    (25) block_code -> . block_while
    (86) def_const_or_var -> . constant_assignation
    (87) def_const_or_var -> . variable_assignation
    (88) def_const_or_var -> . late_initialization
    (33) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (34) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (35) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (44) array_assignation -> . array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA
    (50) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (51) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (48) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (49) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (155) lists -> . list_empty
    (156) lists -> . list_full
    (165) functions_list -> . list_func_clear
    (166) functions_list -> . list_func_count
    (167) functions_list -> . list_func_add
    (168) functions_list -> . list_func_removeat
    (142) dict_estruct -> . dict_empty
    (143) dict_estruct -> . dict_full
    (151) functions_dict -> . dict_func_put
    (152) functions_dict -> . dict_func_remove
    (205) concurrent_method -> . method_declaration CONCURRENT LKEY concurrent_block RKEY
    (184) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (185) functions_queue -> . queue_enqueue
    (186) functions_queue -> . queue_dequeue
    (187) functions_queue -> . queue_clear
    (188) functions_queue -> . queue_isEmpty
    (173) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (174) functions_stack -> . stack_push
    (175) functions_stack -> . stack_pop
    (176) functions_stack -> . stack_clear
    (177) functions_stack -> . stack_peek
    (178) functions_stack -> . stack_isEmpty
    (137) block_if -> . IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if
    (121) block_for -> . for_anidado
    (122) block_for -> . for_each
    (129) block_try_catch -> . try_catch_simply
    (130) block_try_catch -> . try_catch_finally
    (133) block_while -> . normal_while
    (134) block_while -> . do_while
    (89) constant_assignation -> . access_modifiers CONST data_type assignation_key_value DOTANDCOMMA
    (90) constant_assignation -> . CONST data_type assignation_key_value DOTANDCOMMA
    (91) constant_assignation -> . access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (92) constant_assignation -> . CONST data_type assignation_key_value_multiple DOTANDCOMMA
    (93) variable_assignation -> . access_modifiers data_type assignation_key_value DOTANDCOMMA
    (94) variable_assignation -> . data_type assignation_key_value DOTANDCOMMA
    (95) variable_assignation -> . access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA
    (96) variable_assignation -> . data_type assignation_key_value_multiple DOTANDCOMMA
    (97) late_initialization -> . access_modifiers data_type VARIABLE DOTANDCOMMA
    (98) late_initialization -> . data_type VARIABLE DOTANDCOMMA
    (99) late_initialization -> . assignation_key_value DOTANDCOMMA
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (113) array_type -> . CHARTYPE LBRACKET RBRACKET
    (114) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (115) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (116) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (117) array_type -> . INTTYPE LBRACKET RBRACKET
    (118) array_type -> . BOOLTYPE LBRACKET RBRACKET
    (157) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (158) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (159) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (160) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (169) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (170) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (171) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (172) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (144) dict_empty -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (145) dict_full -> . DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA
    (153) dict_func_put -> . VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA
    (154) dict_func_remove -> . VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA
    (206) method_declaration -> . METHOD IDENTIFIER LPARENT RPARENT DOTANDCOMMA
    (189) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (190) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (191) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (193) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (179) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (180) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (181) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (182) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (183) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (125) for_anidado -> . for_simple
    (126) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY
    (127) for_anidado -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY
    (128) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (131) try_catch_simply -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY
    (132) try_catch_finally -> . TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY
    (135) normal_while -> . WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY
    (136) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT
    (84) access_modifiers -> . PUBLIC
    (85) access_modifiers -> . PRIVATE
    (106) data_type -> . CHARTYPE
    (107) data_type -> . STRINGTYPE
    (108) data_type -> . FLOATTYPE
    (109) data_type -> . DECIMALTYPE
    (110) data_type -> . INTTYPE
    (111) data_type -> . BOOLTYPE
    (112) data_type -> . array_type
    (100) assignation_key_value -> . VARIABLE ASSIGNATION value
    (101) assignation_key_value -> . READ LPARENT RPARENT
    (123) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (124) for_simple -> . FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    PRINT           shift and go to state 124
    READ            shift and go to state 126
    VARIABLE        shift and go to state 125
    QUEUE           shift and go to state 141
    STACK           shift and go to state 147
    IF              shift and go to state 153
    CONST           shift and go to state 161
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164
    CHARTYPE        shift and go to state 165
    STRINGTYPE      shift and go to state 166
    FLOATTYPE       shift and go to state 167
    DECIMALTYPE     shift and go to state 168
    INTTYPE         shift and go to state 169
    BOOLTYPE        shift and go to state 170
    LIST            shift and go to state 171
    DICTIONARY      shift and go to state 172
    METHOD          shift and go to state 97
    FOR             shift and go to state 174
    FOREACH         shift and go to state 175
    TRY             shift and go to state 176
    WHILE           shift and go to state 177
    DO              shift and go to state 178
    PUBLIC          shift and go to state 179
    PRIVATE         shift and go to state 20

    all_block_code                 shift and go to state 599
    block_code                     shift and go to state 99
    def_const_or_var               shift and go to state 100
    print_data                     shift and go to state 101
    read_data                      shift and go to state 102
    arithmetic_operation           shift and go to state 103
    logic_operation                shift and go to state 104
    array_assignation              shift and go to state 105
    array_value_assign             shift and go to state 106
    array_indexing                 shift and go to state 107
    lists                          shift and go to state 108
    functions_list                 shift and go to state 109
    dict_estruct                   shift and go to state 110
    functions_dict                 shift and go to state 111
    concurrent_method              shift and go to state 112
    queue_struct                   shift and go to state 113
    functions_queue                shift and go to state 114
    stack_struct                   shift and go to state 115
    functions_stack                shift and go to state 116
    block_if                       shift and go to state 117
    block_for                      shift and go to state 118
    block_try_catch                shift and go to state 119
    block_while                    shift and go to state 120
    constant_assignation           shift and go to state 121
    variable_assignation           shift and go to state 122
    late_initialization            shift and go to state 123
    value_numeric                  shift and go to state 127
    array_type                     shift and go to state 129
    list_empty                     shift and go to state 130
    list_full                      shift and go to state 131
    list_func_clear                shift and go to state 132
    list_func_count                shift and go to state 133
    list_func_add                  shift and go to state 134
    list_func_removeat             shift and go to state 135
    dict_empty                     shift and go to state 136
    dict_full                      shift and go to state 137
    dict_func_put                  shift and go to state 138
    dict_func_remove               shift and go to state 139
    method_declaration             shift and go to state 140
    data_type                      shift and go to state 142
    queue_enqueue                  shift and go to state 143
    queue_dequeue                  shift and go to state 144
    queue_clear                    shift and go to state 145
    queue_isEmpty                  shift and go to state 146
    stack_push                     shift and go to state 148
    stack_pop                      shift and go to state 149
    stack_clear                    shift and go to state 150
    stack_peek                     shift and go to state 151
    stack_isEmpty                  shift and go to state 152
    for_anidado                    shift and go to state 154
    for_each                       shift and go to state 155
    try_catch_simply               shift and go to state 156
    try_catch_finally              shift and go to state 157
    normal_while                   shift and go to state 158
    do_while                       shift and go to state 159
    access_modifiers               shift and go to state 160
    assignation_key_value          shift and go to state 162
    for_simple                     shift and go to state 173

state 590

    (203) declaration_async -> PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY .

    STATIC          reduce using rule 203 (declaration_async -> PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY .)
    PUBLIC          reduce using rule 203 (declaration_async -> PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY .)
    ACTION          reduce using rule 203 (declaration_async -> PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY .)
    PRIVATE         reduce using rule 203 (declaration_async -> PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY .)


state 591

    (139) other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .

    PRINT           reduce using rule 139 (other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    READ            reduce using rule 139 (other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    VARIABLE        reduce using rule 139 (other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    QUEUE           reduce using rule 139 (other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    STACK           reduce using rule 139 (other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    IF              reduce using rule 139 (other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    CONST           reduce using rule 139 (other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    INTEGER         reduce using rule 139 (other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    FLOAT_NUMBER    reduce using rule 139 (other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    DECIMAL_NUMBER  reduce using rule 139 (other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    CHARTYPE        reduce using rule 139 (other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    STRINGTYPE      reduce using rule 139 (other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    FLOATTYPE       reduce using rule 139 (other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    DECIMALTYPE     reduce using rule 139 (other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    INTTYPE         reduce using rule 139 (other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    BOOLTYPE        reduce using rule 139 (other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    LIST            reduce using rule 139 (other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    DICTIONARY      reduce using rule 139 (other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    METHOD          reduce using rule 139 (other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    FOR             reduce using rule 139 (other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    FOREACH         reduce using rule 139 (other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    TRY             reduce using rule 139 (other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    WHILE           reduce using rule 139 (other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    DO              reduce using rule 139 (other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    PUBLIC          reduce using rule 139 (other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    PRIVATE         reduce using rule 139 (other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    RKEY            reduce using rule 139 (other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)
    RETURN          reduce using rule 139 (other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if .)


state 592

    (159) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list . RKEY DOTANDCOMMA

    RKEY            shift and go to state 600


state 593

    (161) strings_list -> STRING .
    (162) strings_list -> STRING . COMMA strings_list

    RKEY            reduce using rule 161 (strings_list -> STRING .)
    COMMA           shift and go to state 601


state 594

    (160) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list . RKEY DOTANDCOMMA

    RKEY            shift and go to state 602


state 595

    (163) ints_list -> INTEGER .
    (164) ints_list -> INTEGER . COMMA ints_list

    RKEY            reduce using rule 163 (ints_list -> INTEGER .)
    COMMA           shift and go to state 603


state 596

    (148) key_value_pair -> LKEY VARIABLE COMMA . value RKEY
    (38) value -> . value_numeric
    (39) value -> . value_logic
    (40) value -> . value_string
    (41) value -> . read_data
    (42) value -> . METHOD
    (43) value -> . array
    (59) value_numeric -> . INTEGER
    (60) value_numeric -> . FLOAT_NUMBER
    (61) value_numeric -> . DECIMAL_NUMBER
    (62) value_numeric -> . arithmetic_operation
    (56) value_logic -> . BOOLTRUE
    (57) value_logic -> . BOOLFALSE
    (58) value_logic -> . logic_operation
    (52) value_string -> . STRING
    (53) value_string -> . CHAR
    (54) value_string -> . VARIABLE
    (55) value_string -> . concatenation
    (35) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (45) array -> . LBRACKET array_content RBRACKET
    (63) arithmetic_operation -> . value_numeric
    (64) arithmetic_operation -> . VARIABLE
    (65) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (66) arithmetic_operation -> . VARIABLE arithmetic_operator arithmetic_operation
    (67) logic_operation -> . value_numeric logic_operator INTEGER
    (68) logic_operation -> . VARIABLE logic_operator INTEGER
    (36) concatenation -> . STRING
    (37) concatenation -> . STRING PLUS concatenation

    METHOD          shift and go to state 255
    INTEGER         shift and go to state 128
    FLOAT_NUMBER    shift and go to state 163
    DECIMAL_NUMBER  shift and go to state 164
    BOOLTRUE        shift and go to state 258
    BOOLFALSE       shift and go to state 259
    STRING          shift and go to state 261
    CHAR            shift and go to state 262
    VARIABLE        shift and go to state 249
    READ            shift and go to state 264
    LBRACKET        shift and go to state 265

    value                          shift and go to state 604
    value_numeric                  shift and go to state 251
    value_logic                    shift and go to state 252
    value_string                   shift and go to state 253
    read_data                      shift and go to state 254
    array                          shift and go to state 256
    arithmetic_operation           shift and go to state 257
    logic_operation                shift and go to state 260
    concatenation                  shift and go to state 263

state 597

    (145) dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA .

    PRINT           reduce using rule 145 (dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA .)
    READ            reduce using rule 145 (dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA .)
    VARIABLE        reduce using rule 145 (dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA .)
    QUEUE           reduce using rule 145 (dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA .)
    STACK           reduce using rule 145 (dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA .)
    IF              reduce using rule 145 (dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA .)
    CONST           reduce using rule 145 (dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA .)
    INTEGER         reduce using rule 145 (dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 145 (dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 145 (dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA .)
    CHARTYPE        reduce using rule 145 (dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 145 (dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 145 (dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 145 (dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA .)
    INTTYPE         reduce using rule 145 (dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 145 (dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA .)
    LIST            reduce using rule 145 (dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA .)
    DICTIONARY      reduce using rule 145 (dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA .)
    METHOD          reduce using rule 145 (dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA .)
    FOR             reduce using rule 145 (dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA .)
    FOREACH         reduce using rule 145 (dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA .)
    TRY             reduce using rule 145 (dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA .)
    WHILE           reduce using rule 145 (dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA .)
    DO              reduce using rule 145 (dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA .)
    PUBLIC          reduce using rule 145 (dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA .)
    PRIVATE         reduce using rule 145 (dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA .)
    RKEY            reduce using rule 145 (dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA .)
    RETURN          reduce using rule 145 (dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA .)


state 598

    (147) key_value_pairs -> key_value_pair COMMA key_value_pairs .

    RKEY            reduce using rule 147 (key_value_pairs -> key_value_pair COMMA key_value_pairs .)


state 599

    (132) try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code . RKEY

    RKEY            shift and go to state 605


state 600

    (159) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 606


state 601

    (162) strings_list -> STRING COMMA . strings_list
    (161) strings_list -> . STRING
    (162) strings_list -> . STRING COMMA strings_list

    STRING          shift and go to state 593

    strings_list                   shift and go to state 607

state 602

    (160) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 608


state 603

    (164) ints_list -> INTEGER COMMA . ints_list
    (163) ints_list -> . INTEGER
    (164) ints_list -> . INTEGER COMMA ints_list

    INTEGER         shift and go to state 595

    ints_list                      shift and go to state 609

state 604

    (148) key_value_pair -> LKEY VARIABLE COMMA value . RKEY

    RKEY            shift and go to state 610


state 605

    (132) try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY .

    PRINT           reduce using rule 132 (try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY .)
    READ            reduce using rule 132 (try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY .)
    VARIABLE        reduce using rule 132 (try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY .)
    QUEUE           reduce using rule 132 (try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY .)
    STACK           reduce using rule 132 (try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY .)
    IF              reduce using rule 132 (try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY .)
    CONST           reduce using rule 132 (try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY .)
    INTEGER         reduce using rule 132 (try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY .)
    FLOAT_NUMBER    reduce using rule 132 (try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY .)
    DECIMAL_NUMBER  reduce using rule 132 (try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY .)
    CHARTYPE        reduce using rule 132 (try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY .)
    STRINGTYPE      reduce using rule 132 (try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY .)
    FLOATTYPE       reduce using rule 132 (try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY .)
    DECIMALTYPE     reduce using rule 132 (try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY .)
    INTTYPE         reduce using rule 132 (try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY .)
    BOOLTYPE        reduce using rule 132 (try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY .)
    LIST            reduce using rule 132 (try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY .)
    DICTIONARY      reduce using rule 132 (try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY .)
    METHOD          reduce using rule 132 (try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY .)
    FOR             reduce using rule 132 (try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY .)
    FOREACH         reduce using rule 132 (try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY .)
    TRY             reduce using rule 132 (try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY .)
    WHILE           reduce using rule 132 (try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY .)
    DO              reduce using rule 132 (try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY .)
    PUBLIC          reduce using rule 132 (try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY .)
    PRIVATE         reduce using rule 132 (try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY .)
    RKEY            reduce using rule 132 (try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY .)
    RETURN          reduce using rule 132 (try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY .)


state 606

    (159) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .

    PRINT           reduce using rule 159 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    READ            reduce using rule 159 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    VARIABLE        reduce using rule 159 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    QUEUE           reduce using rule 159 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    STACK           reduce using rule 159 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    IF              reduce using rule 159 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    CONST           reduce using rule 159 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    INTEGER         reduce using rule 159 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 159 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 159 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    CHARTYPE        reduce using rule 159 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 159 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 159 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 159 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    INTTYPE         reduce using rule 159 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 159 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    LIST            reduce using rule 159 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    DICTIONARY      reduce using rule 159 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    METHOD          reduce using rule 159 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    FOR             reduce using rule 159 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    FOREACH         reduce using rule 159 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    TRY             reduce using rule 159 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    WHILE           reduce using rule 159 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    DO              reduce using rule 159 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    PUBLIC          reduce using rule 159 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    PRIVATE         reduce using rule 159 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    RKEY            reduce using rule 159 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    RETURN          reduce using rule 159 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)


state 607

    (162) strings_list -> STRING COMMA strings_list .

    RKEY            reduce using rule 162 (strings_list -> STRING COMMA strings_list .)


state 608

    (160) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .

    PRINT           reduce using rule 160 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    READ            reduce using rule 160 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    VARIABLE        reduce using rule 160 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    QUEUE           reduce using rule 160 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    STACK           reduce using rule 160 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    IF              reduce using rule 160 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    CONST           reduce using rule 160 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    INTEGER         reduce using rule 160 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    FLOAT_NUMBER    reduce using rule 160 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    DECIMAL_NUMBER  reduce using rule 160 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    CHARTYPE        reduce using rule 160 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 160 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 160 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 160 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    INTTYPE         reduce using rule 160 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 160 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    LIST            reduce using rule 160 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    DICTIONARY      reduce using rule 160 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    METHOD          reduce using rule 160 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    FOR             reduce using rule 160 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    FOREACH         reduce using rule 160 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    TRY             reduce using rule 160 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    WHILE           reduce using rule 160 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    DO              reduce using rule 160 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    PUBLIC          reduce using rule 160 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    PRIVATE         reduce using rule 160 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    RKEY            reduce using rule 160 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    RETURN          reduce using rule 160 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)


state 609

    (164) ints_list -> INTEGER COMMA ints_list .

    RKEY            reduce using rule 164 (ints_list -> INTEGER COMMA ints_list .)


state 610

    (148) key_value_pair -> LKEY VARIABLE COMMA value RKEY .

    COMMA           reduce using rule 148 (key_value_pair -> LKEY VARIABLE COMMA value RKEY .)
    RKEY            reduce using rule 148 (key_value_pair -> LKEY VARIABLE COMMA value RKEY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for STATIC in state 10 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 13 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 125 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 125 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 125 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 125 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 125 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 125 resolved as shift
WARNING: shift/reduce conflict for SMALLER_THAN in state 125 resolved as shift
WARNING: shift/reduce conflict for EQUAL_COMPARATION in state 125 resolved as shift
WARNING: shift/reduce conflict for INEQUALITY in state 125 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUAL in state 125 resolved as shift
WARNING: shift/reduce conflict for SMALLER_THAN_OR_EQUAL in state 125 resolved as shift
WARNING: shift/reduce conflict for LOGICAND in state 125 resolved as shift
WARNING: shift/reduce conflict for LOGICOR in state 125 resolved as shift
WARNING: shift/reduce conflict for LOGICNOT in state 125 resolved as shift
WARNING: shift/reduce conflict for LOGICXOR in state 125 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 127 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 127 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 127 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 127 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 127 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 127 resolved as shift
WARNING: shift/reduce conflict for SMALLER_THAN in state 127 resolved as shift
WARNING: shift/reduce conflict for EQUAL_COMPARATION in state 127 resolved as shift
WARNING: shift/reduce conflict for INEQUALITY in state 127 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUAL in state 127 resolved as shift
WARNING: shift/reduce conflict for SMALLER_THAN_OR_EQUAL in state 127 resolved as shift
WARNING: shift/reduce conflict for LOGICAND in state 127 resolved as shift
WARNING: shift/reduce conflict for LOGICOR in state 127 resolved as shift
WARNING: shift/reduce conflict for LOGICNOT in state 127 resolved as shift
WARNING: shift/reduce conflict for LOGICXOR in state 127 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 129 resolved as shift
WARNING: shift/reduce conflict for DOTANDCOMMA in state 216 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 243 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 243 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 243 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 243 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 243 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 245 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 245 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 245 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 245 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 245 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 249 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 249 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 249 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 249 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 249 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 249 resolved as shift
WARNING: shift/reduce conflict for SMALLER_THAN in state 249 resolved as shift
WARNING: shift/reduce conflict for EQUAL_COMPARATION in state 249 resolved as shift
WARNING: shift/reduce conflict for INEQUALITY in state 249 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUAL in state 249 resolved as shift
WARNING: shift/reduce conflict for SMALLER_THAN_OR_EQUAL in state 249 resolved as shift
WARNING: shift/reduce conflict for LOGICAND in state 249 resolved as shift
WARNING: shift/reduce conflict for LOGICOR in state 249 resolved as shift
WARNING: shift/reduce conflict for LOGICNOT in state 249 resolved as shift
WARNING: shift/reduce conflict for LOGICXOR in state 249 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 251 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 251 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 251 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 251 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 251 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 251 resolved as shift
WARNING: shift/reduce conflict for SMALLER_THAN in state 251 resolved as shift
WARNING: shift/reduce conflict for EQUAL_COMPARATION in state 251 resolved as shift
WARNING: shift/reduce conflict for INEQUALITY in state 251 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUAL in state 251 resolved as shift
WARNING: shift/reduce conflict for SMALLER_THAN_OR_EQUAL in state 251 resolved as shift
WARNING: shift/reduce conflict for LOGICAND in state 251 resolved as shift
WARNING: shift/reduce conflict for LOGICOR in state 251 resolved as shift
WARNING: shift/reduce conflict for LOGICNOT in state 251 resolved as shift
WARNING: shift/reduce conflict for LOGICXOR in state 251 resolved as shift
WARNING: shift/reduce conflict for DOTANDCOMMA in state 278 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 291 resolved as shift
WARNING: shift/reduce conflict for SMALLER_THAN in state 291 resolved as shift
WARNING: shift/reduce conflict for EQUAL_COMPARATION in state 291 resolved as shift
WARNING: shift/reduce conflict for INEQUALITY in state 291 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUAL in state 291 resolved as shift
WARNING: shift/reduce conflict for SMALLER_THAN_OR_EQUAL in state 291 resolved as shift
WARNING: shift/reduce conflict for LOGICAND in state 291 resolved as shift
WARNING: shift/reduce conflict for LOGICOR in state 291 resolved as shift
WARNING: shift/reduce conflict for LOGICNOT in state 291 resolved as shift
WARNING: shift/reduce conflict for LOGICXOR in state 291 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 291 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 291 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 291 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 291 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 291 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 292 resolved as shift
WARNING: shift/reduce conflict for SMALLER_THAN in state 292 resolved as shift
WARNING: shift/reduce conflict for EQUAL_COMPARATION in state 292 resolved as shift
WARNING: shift/reduce conflict for INEQUALITY in state 292 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUAL in state 292 resolved as shift
WARNING: shift/reduce conflict for SMALLER_THAN_OR_EQUAL in state 292 resolved as shift
WARNING: shift/reduce conflict for LOGICAND in state 292 resolved as shift
WARNING: shift/reduce conflict for LOGICOR in state 292 resolved as shift
WARNING: shift/reduce conflict for LOGICNOT in state 292 resolved as shift
WARNING: shift/reduce conflict for LOGICXOR in state 292 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 292 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 292 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 292 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 292 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 292 resolved as shift
WARNING: shift/reduce conflict for DOTANDCOMMA in state 294 resolved as shift
WARNING: shift/reduce conflict for DOTANDCOMMA in state 297 resolved as shift
WARNING: shift/reduce conflict for DOTANDCOMMA in state 358 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 410 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 410 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 410 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 410 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 410 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 411 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 411 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 411 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 411 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 411 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 448 resolved as shift
WARNING: shift/reduce conflict for SMALLER_THAN in state 448 resolved as shift
WARNING: shift/reduce conflict for EQUAL_COMPARATION in state 448 resolved as shift
WARNING: shift/reduce conflict for INEQUALITY in state 448 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUAL in state 448 resolved as shift
WARNING: shift/reduce conflict for SMALLER_THAN_OR_EQUAL in state 448 resolved as shift
WARNING: shift/reduce conflict for LOGICAND in state 448 resolved as shift
WARNING: shift/reduce conflict for LOGICOR in state 448 resolved as shift
WARNING: shift/reduce conflict for LOGICNOT in state 448 resolved as shift
WARNING: shift/reduce conflict for LOGICXOR in state 448 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 448 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 448 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 448 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 448 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 448 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 449 resolved as shift
WARNING: shift/reduce conflict for SMALLER_THAN in state 449 resolved as shift
WARNING: shift/reduce conflict for EQUAL_COMPARATION in state 449 resolved as shift
WARNING: shift/reduce conflict for INEQUALITY in state 449 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUAL in state 449 resolved as shift
WARNING: shift/reduce conflict for SMALLER_THAN_OR_EQUAL in state 449 resolved as shift
WARNING: shift/reduce conflict for LOGICAND in state 449 resolved as shift
WARNING: shift/reduce conflict for LOGICOR in state 449 resolved as shift
WARNING: shift/reduce conflict for LOGICNOT in state 449 resolved as shift
WARNING: shift/reduce conflict for LOGICXOR in state 449 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 449 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 449 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 449 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 449 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 449 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 503 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 503 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 503 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 503 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 503 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 504 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 504 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 504 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 504 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 504 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 505 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 505 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 505 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 505 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 505 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 506 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 506 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 506 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 506 resolved as shift
WARNING: shift/reduce conflict for PERCENT in state 506 resolved as shift
WARNING: shift/reduce conflict for RKEY in state 544 resolved as shift
WARNING: shift/reduce conflict for RKEY in state 546 resolved as shift
WARNING: reduce/reduce conflict in state 103 resolved using rule (block_code -> arithmetic_operation)
WARNING: rejected rule (value_numeric -> arithmetic_operation) in state 103
WARNING: reduce/reduce conflict in state 244 resolved using rule (value_numeric -> arithmetic_operation)
WARNING: rejected rule (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation) in state 244
WARNING: reduce/reduce conflict in state 249 resolved using rule (value_string -> VARIABLE)
WARNING: rejected rule (arithmetic_operation -> VARIABLE) in state 249
WARNING: reduce/reduce conflict in state 251 resolved using rule (value -> value_numeric)
WARNING: rejected rule (arithmetic_operation -> value_numeric) in state 251
WARNING: reduce/reduce conflict in state 261 resolved using rule (concatenation -> STRING)
WARNING: rejected rule (value_string -> STRING) in state 261
WARNING: reduce/reduce conflict in state 279 resolved using rule (value_numeric -> arithmetic_operation)
WARNING: rejected rule (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation) in state 279
WARNING: reduce/reduce conflict in state 410 resolved using rule (arithmetic_operation -> value_numeric)
WARNING: rejected rule (expression -> value_numeric) in state 410
WARNING: reduce/reduce conflict in state 411 resolved using rule (arithmetic_operation -> VARIABLE)
WARNING: rejected rule (expression -> VARIABLE) in state 411
WARNING: reduce/reduce conflict in state 433 resolved using rule (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA)
WARNING: rejected rule (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA) in state 433
WARNING: reduce/reduce conflict in state 433 resolved using rule (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA)
WARNING: rejected rule (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA) in state 433
WARNING: reduce/reduce conflict in state 441 resolved using rule (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA)
WARNING: rejected rule (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA) in state 441
WARNING: reduce/reduce conflict in state 458 resolved using rule (block_code -> block_if)
WARNING: rejected rule (not_yes_nested_if -> block_if) in state 458
WARNING: reduce/reduce conflict in state 503 resolved using rule (arithmetic_operation -> value_numeric)
WARNING: rejected rule (condition -> value_numeric logic_operator value_numeric) in state 503
WARNING: reduce/reduce conflict in state 504 resolved using rule (arithmetic_operation -> VARIABLE)
WARNING: rejected rule (condition -> value_numeric logic_operator VARIABLE) in state 504
WARNING: reduce/reduce conflict in state 505 resolved using rule (arithmetic_operation -> VARIABLE)
WARNING: rejected rule (condition -> VARIABLE logic_operator VARIABLE) in state 505
WARNING: reduce/reduce conflict in state 506 resolved using rule (arithmetic_operation -> value_numeric)
WARNING: rejected rule (condition -> VARIABLE logic_operator value_numeric) in state 506
WARNING: Rule (arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation) is never reduced
WARNING: Rule (value_string -> STRING) is never reduced
WARNING: Rule (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation) is never reduced
WARNING: Rule (expression -> value_numeric) is never reduced
WARNING: Rule (expression -> VARIABLE) is never reduced
WARNING: Rule (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA) is never reduced
WARNING: Rule (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA) is never reduced
WARNING: Rule (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA) is never reduced
WARNING: Rule (not_yes_nested_if -> block_if) is never reduced
WARNING: Rule (condition -> value_numeric logic_operator value_numeric) is never reduced
WARNING: Rule (condition -> value_numeric logic_operator VARIABLE) is never reduced
WARNING: Rule (condition -> VARIABLE logic_operator VARIABLE) is never reduced
WARNING: Rule (condition -> VARIABLE logic_operator value_numeric) is never reduced
