Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ACTION
    ADDITION_ASSIGNMENT
    ASYNC
    AWAIT
    BACK_SLASH
    BREAK
    CONCURRENT
    DICTIONARY
    DIVISION_ASSIGNMENT
    DOLLARSIGN
    DOUBLEPOINT
    DOUBLE_QUOTATION_MARKS
    ID
    IDENTIFIER
    JUMP_LINE
    LONG
    MODULE_ASSIGNMENT
    MULTIPLICATION_ASSIGNMENT
    NAMESPACE
    PIPE
    PUT
    REMOVE
    SIPLE_QUOTATION_MARKS
    SUBTRACTION_ASSIGNMENT
    SWITCH
    TABULATION
    TASK

Grammar

Rule 0     S' -> program
Rule 1     program -> USING SYSTEM DOTANDCOMMA block_publicClass
Rule 2     block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_main_method RKEY
Rule 3     block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
Rule 4     block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code
Rule 5     block_code -> def_const_or_var
Rule 6     block_code -> print_data
Rule 7     block_code -> array_assignation
Rule 8     block_code -> array_value_assign
Rule 9     block_code -> array_indexing
Rule 10    block_code -> thread_main
Rule 11    block_code -> concurrent_method
Rule 12    block_code -> method_definition
Rule 13    block_code -> block_try_catch
Rule 14    block_code -> lists
Rule 15    block_code -> functions_list
Rule 16    block_code -> statement_lambda
Rule 17    block_code -> enums
Rule 18    block_code -> normal_if
Rule 19    block_code -> block_for
Rule 20    block_code -> block_while
Rule 21    block_code -> stack_struct
Rule 22    block_code -> functions_stack
Rule 23    block_code -> queue_struct
Rule 24    block_code -> functions_queue
Rule 25    all_block_code -> block_code
Rule 26    all_block_code -> block_code all_block_code
Rule 27    data_type -> CHARTYPE
Rule 28    data_type -> STRINGTYPE
Rule 29    data_type -> FLOATTYPE
Rule 30    data_type -> DECIMALTYPE
Rule 31    data_type -> INTTYPE
Rule 32    data_type -> BOOLTYPE
Rule 33    data_type -> array_type
Rule 34    data_type -> METHOD
Rule 35    value_string -> STRING
Rule 36    value_string -> CHAR
Rule 37    value_string -> concatenation
Rule 38    value_boolean -> BOOLTRUE
Rule 39    value_boolean -> BOOLFALSE
Rule 40    value_boolean -> VARIABLE
Rule 41    value_boolean -> comparison_operation
Rule 42    value_numeric -> INTEGER
Rule 43    value_numeric -> FLOAT_NUMBER
Rule 44    value_numeric -> DECIMAL_NUMBER
Rule 45    value_numeric -> VARIABLE
Rule 46    print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA
Rule 47    print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
Rule 48    read_data -> READ LPARENT RPARENT DOTANDCOMMA
Rule 49    concatenation -> STRING
Rule 50    concatenation -> STRING PLUS concatenation
Rule 51    array_type -> CHARTYPE LBRACKET RBRACKET
Rule 52    array_type -> STRINGTYPE LBRACKET RBRACKET
Rule 53    array_type -> FLOATTYPE LBRACKET RBRACKET
Rule 54    array_type -> DECIMALTYPE LBRACKET RBRACKET
Rule 55    array_type -> INTTYPE LBRACKET RBRACKET
Rule 56    array_type -> BOOLTYPE LBRACKET RBRACKET
Rule 57    array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA
Rule 58    array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
Rule 59    array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
Rule 60    array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA
Rule 61    array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
Rule 62    array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
Rule 63    char_array_assignation -> VARIABLE ASSIGNATION LBRACKET char_content_multiple RBRACKET
Rule 64    char_content_multiple -> CHAR
Rule 65    char_content_multiple -> CHAR COMMA char_content_multiple
Rule 66    string_array_assignation -> VARIABLE ASSIGNATION LBRACKET string_content_multiple RBRACKET
Rule 67    string_content_multiple -> STRING
Rule 68    string_content_multiple -> STRING COMMA string_content_multiple
Rule 69    float_array_assignation -> VARIABLE ASSIGNATION LBRACKET float_content_multiple RBRACKET
Rule 70    float_content_multiple -> FLOAT_NUMBER
Rule 71    float_content_multiple -> FLOAT_NUMBER COMMA float_content_multiple
Rule 72    int_array_assignation -> VARIABLE ASSIGNATION LBRACKET int_content_multiple RBRACKET
Rule 73    int_content_multiple -> INTEGER
Rule 74    int_content_multiple -> INTEGER COMMA int_content_multiple
Rule 75    decimal_array_assignation -> VARIABLE ASSIGNATION LBRACKET decimal_content_multiple RBRACKET
Rule 76    decimal_content_multiple -> DECIMAL_NUMBER
Rule 77    decimal_content_multiple -> DECIMAL_NUMBER COMMA decimal_content_multiple
Rule 78    bool_array_assignation -> VARIABLE ASSIGNATION LBRACKET bool_content_multiple RBRACKET
Rule 79    bool_content_multiple -> BOOLTRUE
Rule 80    bool_content_multiple -> BOOLFALSE
Rule 81    bool_content_multiple -> BOOLTRUE COMMA bool_content_multiple
Rule 82    bool_content_multiple -> BOOLFALSE COMMA bool_content_multiple
Rule 83    array -> LBRACKET array_content RBRACKET
Rule 84    array_content -> value
Rule 85    array_content -> value COMMA array_content
Rule 86    array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET
Rule 87    array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET
Rule 88    array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
Rule 89    array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
Rule 90    value -> value_numeric
Rule 91    value -> value_boolean
Rule 92    value -> value_string
Rule 93    value -> VARIABLE
Rule 94    value -> read_data
Rule 95    value -> array
Rule 96    arithmetic_operation -> value_numeric
Rule 97    arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation
Rule 98    arithmetic_operator -> PLUS
Rule 99    arithmetic_operator -> MINUS
Rule 100   arithmetic_operator -> TIMES
Rule 101   arithmetic_operator -> DIVIDE
Rule 102   arithmetic_operator -> PERCENT
Rule 103   comparison_operation -> value_numeric
Rule 104   comparison_operation -> value_numeric comparison_operator comparison_operation
Rule 105   comparison_operator -> GREATER_THAN
Rule 106   comparison_operator -> SMALLER_THAN
Rule 107   comparison_operator -> EQUAL_COMPARATION
Rule 108   comparison_operator -> INEQUALITY
Rule 109   comparison_operator -> GREATER_THAN_OR_EQUAL
Rule 110   comparison_operator -> SMALLER_THAN_OR_EQUAL
Rule 111   boolean_operation -> value_boolean
Rule 112   boolean_operation -> LOGICNOT value_boolean
Rule 113   boolean_operation -> value_boolean boolean_operator boolean_operation
Rule 114   boolean_operator -> LOGICAND
Rule 115   boolean_operator -> LOGICOR
Rule 116   def_const_or_var -> constant_assignation
Rule 117   def_const_or_var -> variable_assignation
Rule 118   constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
Rule 119   constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA
Rule 120   variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA
Rule 121   variable_assignation -> assignation_type_value_multiple DOTANDCOMMA
Rule 122   access_modifiers -> PUBLIC
Rule 123   access_modifiers -> PRIVATE
Rule 124   assignation_type_value -> INTTYPE assignation_int
Rule 125   assignation_type_value -> STRINGTYPE assignation_string
Rule 126   assignation_type_value -> FLOATTYPE assignation_float
Rule 127   assignation_type_value -> BOOLTYPE assignation_true
Rule 128   assignation_type_value -> BOOLTYPE assignation_false
Rule 129   assignation_int -> VARIABLE ASSIGNATION INTEGER
Rule 130   assignation_int -> VARIABLE ASSIGNATION VARIABLE
Rule 131   assignation_int -> VARIABLE ASSIGNATION arithmetic_operation
Rule 132   assignation_string -> VARIABLE ASSIGNATION STRING
Rule 133   assignation_string -> VARIABLE ASSIGNATION VARIABLE
Rule 134   assignation_float -> VARIABLE ASSIGNATION FLOAT_NUMBER
Rule 135   assignation_float -> VARIABLE ASSIGNATION VARIABLE
Rule 136   assignation_float -> VARIABLE ASSIGNATION arithmetic_operation
Rule 137   assignation_true -> VARIABLE ASSIGNATION BOOLTRUE
Rule 138   assignation_true -> VARIABLE ASSIGNATION VARIABLE
Rule 139   assignation_true -> VARIABLE ASSIGNATION boolean_operation
Rule 140   assignation_false -> VARIABLE ASSIGNATION BOOLFALSE
Rule 141   assignation_false -> VARIABLE ASSIGNATION VARIABLE
Rule 142   assignation_false -> VARIABLE ASSIGNATION boolean_operation
Rule 143   assignation_type_value_multiple -> INTTYPE assignation_int_multiple
Rule 144   assignation_type_value_multiple -> STRINGTYPE assignation_string_multiple
Rule 145   assignation_type_value_multiple -> FLOATTYPE assignation_float_multiple
Rule 146   assignation_type_value_multiple -> BOOLTYPE assignation_true_multiple
Rule 147   assignation_type_value_multiple -> BOOLTYPE assignation_false_multiple
Rule 148   assignation_int_multiple -> assignation_int
Rule 149   assignation_int_multiple -> assignation_int COMMA assignation_int_multiple
Rule 150   assignation_string_multiple -> assignation_string
Rule 151   assignation_string_multiple -> assignation_string COMMA assignation_string_multiple
Rule 152   assignation_float_multiple -> assignation_float
Rule 153   assignation_float_multiple -> assignation_float COMMA assignation_float_multiple
Rule 154   assignation_true_multiple -> assignation_true
Rule 155   assignation_true_multiple -> assignation_true COMMA assignation_true_multiple
Rule 156   assignation_false_multiple -> assignation_false
Rule 157   assignation_false_multiple -> assignation_false COMMA assignation_false_multiple
Rule 158   method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
Rule 159   method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY
Rule 160   method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
Rule 161   method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY
Rule 162   method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
Rule 163   method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY
Rule 164   method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
Rule 165   method_definition -> STATIC VOID METHOD LPARENT RPARENT LKEY RKEY
Rule 166   func_parameter -> data_type VARIABLE
Rule 167   func_parameters -> func_parameter
Rule 168   func_parameters -> func_parameter COMMA func_parameters
Rule 169   thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
Rule 170   declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
Rule 171   declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
Rule 172   thread_init -> thread_identificator DOT START LPARENT RPARENT DOTANDCOMMA
Rule 173   thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA
Rule 174   concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
Rule 175   concurrent_method -> WRITE
Rule 176   thread_logic -> thread_sentence
Rule 177   thread_logic -> thread_logic thread_sentence
Rule 178   thread_sentence -> thread_expression DOTANDCOMMA
Rule 179   thread_expression -> thread_identificator DOT concurrent_method LPARENT RPARENT
Rule 180   thread_expression -> PRINT LPARENT STRING RPARENT
Rule 181   thread_arguments -> thread_expression
Rule 182   thread_arguments -> thread_arguments COMMA thread_expression
Rule 183   thread_identificator -> VARIABLE
Rule 184   statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
Rule 185   enums -> ENUM METHOD LKEY list_enums RKEY
Rule 186   list_enums -> METHOD
Rule 187   list_enums -> METHOD COMMA list_enums
Rule 188   block_try_catch -> try_catch_simply
Rule 189   block_try_catch -> try_catch_finally
Rule 190   try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
Rule 191   try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
Rule 192   block_code_try -> def_const_or_var
Rule 193   block_code_try -> print_data
Rule 194   all_block_code_try -> block_code_try
Rule 195   all_block_code_try -> block_code_try all_block_code_try
Rule 196   block_if -> normal_if
Rule 197   block_if -> all_block_code
Rule 198   normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
Rule 199   normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
Rule 200   other_if -> ELSE LKEY block_if RKEY
Rule 201   other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
Rule 202   block_while -> normal_while
Rule 203   block_while -> do_while
Rule 204   normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
Rule 205   do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
Rule 206   block_for -> for_simple
Rule 207   block_for -> for_each
Rule 208   for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
Rule 209   for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
Rule 210   for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
Rule 211   lists -> list_empty
Rule 212   lists -> list_full
Rule 213   list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
Rule 214   list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
Rule 215   list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
Rule 216   list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
Rule 217   strings_list -> STRING
Rule 218   strings_list -> STRING COMMA strings_list
Rule 219   ints_list -> INTEGER
Rule 220   ints_list -> INTEGER COMMA ints_list
Rule 221   functions_list -> list_func_clear
Rule 222   functions_list -> list_func_count
Rule 223   functions_list -> list_func_add
Rule 224   functions_list -> list_func_removeat
Rule 225   list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
Rule 226   list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
Rule 227   list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
Rule 228   list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
Rule 229   list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
Rule 230   list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
Rule 231   stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
Rule 232   functions_stack -> stack_push
Rule 233   functions_stack -> stack_pop
Rule 234   functions_stack -> stack_clear
Rule 235   functions_stack -> stack_peek
Rule 236   functions_stack -> stack_isEmpty
Rule 237   stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
Rule 238   stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
Rule 239   stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
Rule 240   stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
Rule 241   stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
Rule 242   queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
Rule 243   functions_queue -> queue_enqueue
Rule 244   functions_queue -> queue_dequeue
Rule 245   functions_queue -> queue_clear
Rule 246   functions_queue -> queue_isEmpty
Rule 247   functions_queue -> queue_peek
Rule 248   queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
Rule 249   queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
Rule 250   queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
Rule 251   queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
Rule 252   queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA

Terminals, with rules where they appear

ACTION               : 
ADD                  : 227 228
ADDITION_ASSIGNMENT  : 
ARROW                : 184
ASSIGNATION          : 63 66 69 72 75 78 88 89 129 130 131 132 133 134 135 136 137 138 139 140 141 142 170 171 213 214 215 216 231 242
ASYNC                : 
AWAIT                : 
BACK_SLASH           : 
BOOLFALSE            : 39 80 82 140
BOOLTRUE             : 38 79 81 137
BOOLTYPE             : 32 56 62 127 128 146 147
BREAK                : 
CATCH                : 190 191
CHAR                 : 36 64 65
CHARTYPE             : 27 51 57
CLASS                : 2
CLEAR                : 225 239 250
COMMA                : 65 68 71 74 77 81 82 85 149 151 153 155 157 168 182 187 218 220
CONCURRENT           : 
CONST                : 118 119
COUNT                : 226
DECIMALTYPE          : 30 54 60
DECIMAL_NUMBER       : 44 76 77
DECREMENT            : 209
DEQUEUE              : 249
DICTIONARY           : 
DIVIDE               : 101
DIVISION_ASSIGNMENT  : 
DO                   : 205
DOLLARSIGN           : 
DOT                  : 172 173 179 225 226 227 228 229 230 237 238 239 240 241 248 249 250 251 252
DOTANDCOMMA          : 1 46 47 48 57 58 59 60 61 62 88 89 118 119 120 121 158 160 162 164 170 171 172 173 178 190 191 208 208 209 209 213 214 215 216 225 226 227 228 229 230 231 237 238 239 240 241 242 248 249 250 251 252
DOUBLEPOINT          : 
DOUBLE_QUOTATION_MARKS : 
ELSE                 : 200
ELSE_IF              : 201
ENQUEUE              : 248
ENUM                 : 185
EQUAL_COMPARATION    : 107
ERROR                : 190 190 191 191
EXCEPTION            : 190 191
FINALLY              : 191
FLOATTYPE            : 29 53 59 126 145
FLOAT_NUMBER         : 43 70 71 134
FOR                  : 208 209
FOREACH              : 210
GREATER_THAN         : 105 213 213 214 214 215 215 216 216 242 242
GREATER_THAN_OR_EQUAL : 109
ID                   : 
IDENTIFIER           : 
IF                   : 198 199
IN                   : 210
INCREMENT            : 208
INEQUALITY           : 108
INTEGER              : 42 73 74 87 89 129 219 220 227 229
INTTYPE              : 31 55 61 124 143 208 209 214 214 216 216
ISEMPTY              : 241 252
JOIN                 : 173
JUMP_LINE            : 
LBRACKET             : 3 4 51 52 53 54 55 56 57 58 59 60 61 62 63 66 69 72 75 78 83 86 87 88 89
LIST                 : 213 213 214 214 215 215 216 216
LKEY                 : 2 3 4 158 159 160 161 162 163 164 165 174 184 185 190 190 191 191 191 198 199 200 201 204 205 208 209 210 215 216
LOGICAND             : 114
LOGICNOT             : 112
LOGICOR              : 115
LONG                 : 
LPARENT              : 3 4 46 47 48 158 159 160 161 162 163 164 165 170 171 172 173 174 179 180 184 190 190 191 191 198 199 201 204 205 208 209 210 213 214 215 216 225 226 227 228 229 230 231 237 238 239 240 241 242 248 249 250 251 252
MAIN                 : 3 4
METHOD               : 34 158 159 160 161 162 163 164 165 185 186 187
MINUS                : 99
MODULE_ASSIGNMENT    : 
MULTIPLICATION_ASSIGNMENT : 
NAMESPACE            : 
NEW                  : 170 171 213 214 215 216 231 242
PEEK                 : 240 251
PERCENT              : 102
PIPE                 : 
PLUS                 : 50 98
POP                  : 238
PRINT                : 46 47 180 190 191
PRIVATE              : 123
PUBLIC               : 2 122
PUSH                 : 237
PUT                  : 
QUEUE                : 242 242
RBRACKET             : 3 4 51 52 53 54 55 56 57 58 59 60 61 62 63 66 69 72 75 78 83 86 87 88 89
READ                 : 48
REMOVE               : 
REMOVEAT             : 229 230
RETURN               : 158 160 162 164
RKEY                 : 2 3 4 158 159 160 161 162 163 164 165 174 184 185 190 190 191 191 191 198 199 200 201 204 205 208 209 210 215 216
RPARENT              : 3 4 46 47 48 158 159 160 161 162 163 164 165 170 171 172 173 174 179 180 184 190 190 191 191 198 199 201 204 205 208 209 210 213 214 215 216 225 226 227 228 229 230 231 237 238 239 240 241 242 248 249 250 251 252
SIPLE_QUOTATION_MARKS : 
SMALLER_THAN         : 106 213 213 214 214 215 215 216 216 242 242
SMALLER_THAN_OR_EQUAL : 110
STACK                : 231 231
START                : 172
STATIC               : 3 4 158 159 160 161 162 163 164 165 174
STRING               : 35 46 49 50 67 68 132 180 217 218 228 230
STRINGTYPE           : 3 4 28 52 58 125 144 213 213 215 215
SUBTRACTION_ASSIGNMENT : 
SWITCH               : 
SYSTEM               : 1
TABULATION           : 
TASK                 : 
THREAD               : 170 170 171 171
TIMES                : 100
TRY                  : 190 191
USING                : 1
VARIABLE             : 2 3 4 40 45 47 63 66 69 72 75 78 86 86 87 88 88 89 93 129 130 130 131 132 133 133 134 135 135 136 137 138 138 139 140 141 141 142 158 160 162 164 166 183 184 208 209 210 210 213 214 215 216 225 226 227 228 229 230 231 237 238 239 240 241 242 248 249 250 251 252
VOID                 : 3 4 159 161 163 165 174
WHILE                : 204 205
WRITE                : 175
error                : 

Nonterminals, with rules where they appear

access_modifiers     : 118 120 158 159 162 163
all_block_code       : 3 4 4 26 184 197 204 205 208 209 210
all_block_code_try   : 190 191 191 195
arithmetic_operation : 97 131 136
arithmetic_operator  : 97
array                : 95
array_assignation    : 7
array_content        : 83 85
array_indexing       : 9
array_type           : 33
array_value_assign   : 8
assignation_false    : 128 156 157
assignation_false_multiple : 147 157
assignation_float    : 126 152 153
assignation_float_multiple : 145 153
assignation_int      : 124 148 149 208 209
assignation_int_multiple : 143 149
assignation_string   : 125 150 151
assignation_string_multiple : 144 151
assignation_true     : 127 154 155
assignation_true_multiple : 146 155
assignation_type_value : 
assignation_type_value_multiple : 118 119 120 121
block_code           : 25 26
block_code_try       : 194 195
block_for            : 19
block_if             : 198 199 200 201
block_main_method    : 2
block_publicClass    : 1
block_try_catch      : 13
block_while          : 20
bool_array_assignation : 62
bool_content_multiple : 78 81 82
boolean_operation    : 113 139 142 198 199 201 204 205
boolean_operator     : 113
char_array_assignation : 57
char_content_multiple : 63 65
comparison_operation : 41 104 208 209
comparison_operator  : 104
concatenation        : 37 50
concurrent_method    : 11 171 179
constant_assignation : 116
data_type            : 158 160 162 164 166 210 242
decimal_array_assignation : 60
decimal_content_multiple : 75 77
declaration_thread   : 169 169
def_const_or_var     : 5 192
do_while             : 203
enums                : 17
float_array_assignation : 59
float_content_multiple : 69 71
for_each             : 207
for_simple           : 206
func_parameter       : 167 168
func_parameters      : 158 159 160 161 168
functions_list       : 15
functions_queue      : 24
functions_stack      : 22
int_array_assignation : 61
int_content_multiple : 72 74
ints_list            : 216 220
list_empty           : 211
list_enums           : 185 187
list_full            : 212
list_func_add        : 223
list_func_clear      : 221
list_func_count      : 222
list_func_removeat   : 224
lists                : 14
method_definition    : 12
normal_if            : 18 196
normal_while         : 202
other_if             : 198 201
print_data           : 6 193
program              : 0
queue_clear          : 245
queue_dequeue        : 244
queue_enqueue        : 243
queue_isEmpty        : 246
queue_peek           : 247
queue_struct         : 23
read_data            : 94
stack_clear          : 234
stack_isEmpty        : 236
stack_peek           : 235
stack_pop            : 233
stack_push           : 232
stack_struct         : 21
statement_lambda     : 16
string_array_assignation : 58
string_content_multiple : 66 68
strings_list         : 215 218
thread_arguments     : 182
thread_expression    : 178 181 182
thread_identificator : 170 170 171 172 173 174 179
thread_init          : 169 169
thread_logic         : 174 177
thread_main          : 10
thread_sentence      : 176 177
thread_wait          : 169 169
try_catch_finally    : 189
try_catch_simply     : 188
value                : 84 85 88 89 237 248
value_boolean        : 91 111 112 113
value_numeric        : 90 96 97 103 104
value_string         : 92
variable_assignation : 117

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . USING SYSTEM DOTANDCOMMA block_publicClass

    USING           shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> USING . SYSTEM DOTANDCOMMA block_publicClass

    SYSTEM          shift and go to state 3


state 3

    (1) program -> USING SYSTEM . DOTANDCOMMA block_publicClass

    DOTANDCOMMA     shift and go to state 4


state 4

    (1) program -> USING SYSTEM DOTANDCOMMA . block_publicClass
    (2) block_publicClass -> . PUBLIC CLASS VARIABLE LKEY block_main_method RKEY

    PUBLIC          shift and go to state 6

    block_publicClass              shift and go to state 5

state 5

    (1) program -> USING SYSTEM DOTANDCOMMA block_publicClass .

    $end            reduce using rule 1 (program -> USING SYSTEM DOTANDCOMMA block_publicClass .)


state 6

    (2) block_publicClass -> PUBLIC . CLASS VARIABLE LKEY block_main_method RKEY

    CLASS           shift and go to state 7


state 7

    (2) block_publicClass -> PUBLIC CLASS . VARIABLE LKEY block_main_method RKEY

    VARIABLE        shift and go to state 8


state 8

    (2) block_publicClass -> PUBLIC CLASS VARIABLE . LKEY block_main_method RKEY

    LKEY            shift and go to state 9


state 9

    (2) block_publicClass -> PUBLIC CLASS VARIABLE LKEY . block_main_method RKEY
    (3) block_main_method -> . STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (4) block_main_method -> . STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    STATIC          shift and go to state 11

    block_main_method              shift and go to state 10

state 10

    (2) block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_main_method . RKEY

    RKEY            shift and go to state 12


state 11

    (3) block_main_method -> STATIC . VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (4) block_main_method -> STATIC . VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    VOID            shift and go to state 13


state 12

    (2) block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_main_method RKEY .

    $end            reduce using rule 2 (block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_main_method RKEY .)


state 13

    (3) block_main_method -> STATIC VOID . MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (4) block_main_method -> STATIC VOID . MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    MAIN            shift and go to state 14


state 14

    (3) block_main_method -> STATIC VOID MAIN . LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (4) block_main_method -> STATIC VOID MAIN . LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    LPARENT         shift and go to state 15


state 15

    (3) block_main_method -> STATIC VOID MAIN LPARENT . STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (4) block_main_method -> STATIC VOID MAIN LPARENT . STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    STRINGTYPE      shift and go to state 16


state 16

    (3) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE . LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE . LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    LBRACKET        shift and go to state 17


state 17

    (3) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET . RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET . RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    RBRACKET        shift and go to state 18


state 18

    (3) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET . VARIABLE RPARENT LKEY all_block_code RKEY
    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET . VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    VARIABLE        shift and go to state 19


state 19

    (3) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE . RPARENT LKEY all_block_code RKEY
    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE . RPARENT LKEY all_block_code RKEY all_block_code

    RPARENT         shift and go to state 20


state 20

    (3) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT . LKEY all_block_code RKEY
    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT . LKEY all_block_code RKEY all_block_code

    LKEY            shift and go to state 21


state 21

    (3) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY . all_block_code RKEY
    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY . all_block_code RKEY all_block_code
    (25) all_block_code -> . block_code
    (26) all_block_code -> . block_code all_block_code
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . array_assignation
    (8) block_code -> . array_value_assign
    (9) block_code -> . array_indexing
    (10) block_code -> . thread_main
    (11) block_code -> . concurrent_method
    (12) block_code -> . method_definition
    (13) block_code -> . block_try_catch
    (14) block_code -> . lists
    (15) block_code -> . functions_list
    (16) block_code -> . statement_lambda
    (17) block_code -> . enums
    (18) block_code -> . normal_if
    (19) block_code -> . block_for
    (20) block_code -> . block_while
    (21) block_code -> . stack_struct
    (22) block_code -> . functions_stack
    (23) block_code -> . queue_struct
    (24) block_code -> . functions_queue
    (116) def_const_or_var -> . constant_assignation
    (117) def_const_or_var -> . variable_assignation
    (46) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (47) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (57) array_assignation -> . CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA
    (58) array_assignation -> . STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
    (59) array_assignation -> . FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
    (60) array_assignation -> . DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA
    (61) array_assignation -> . INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
    (62) array_assignation -> . BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
    (88) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (89) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (86) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (87) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (169) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (174) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (175) concurrent_method -> . WRITE
    (158) method_definition -> . access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (159) method_definition -> . access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY
    (160) method_definition -> . STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (161) method_definition -> . STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY
    (162) method_definition -> . access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (163) method_definition -> . access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY
    (164) method_definition -> . STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (165) method_definition -> . STATIC VOID METHOD LPARENT RPARENT LKEY RKEY
    (188) block_try_catch -> . try_catch_simply
    (189) block_try_catch -> . try_catch_finally
    (211) lists -> . list_empty
    (212) lists -> . list_full
    (221) functions_list -> . list_func_clear
    (222) functions_list -> . list_func_count
    (223) functions_list -> . list_func_add
    (224) functions_list -> . list_func_removeat
    (184) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (185) enums -> . ENUM METHOD LKEY list_enums RKEY
    (198) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (199) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (206) block_for -> . for_simple
    (207) block_for -> . for_each
    (202) block_while -> . normal_while
    (203) block_while -> . do_while
    (231) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (232) functions_stack -> . stack_push
    (233) functions_stack -> . stack_pop
    (234) functions_stack -> . stack_clear
    (235) functions_stack -> . stack_peek
    (236) functions_stack -> . stack_isEmpty
    (242) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (243) functions_queue -> . queue_enqueue
    (244) functions_queue -> . queue_dequeue
    (245) functions_queue -> . queue_clear
    (246) functions_queue -> . queue_isEmpty
    (247) functions_queue -> . queue_peek
    (118) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (119) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (120) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (121) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (170) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (171) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (122) access_modifiers -> . PUBLIC
    (123) access_modifiers -> . PRIVATE
    (190) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (191) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (213) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (214) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (215) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (216) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (225) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (226) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (227) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (228) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (229) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (230) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (208) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (209) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (210) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (204) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (205) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (237) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (238) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (239) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (240) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (241) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (248) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (249) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (250) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (252) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (251) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (143) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (144) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (145) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (146) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (147) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 50
    CHARTYPE        shift and go to state 51
    STRINGTYPE      shift and go to state 24
    FLOATTYPE       shift and go to state 52
    DECIMALTYPE     shift and go to state 53
    INTTYPE         shift and go to state 54
    BOOLTYPE        shift and go to state 55
    VARIABLE        shift and go to state 25
    STATIC          shift and go to state 22
    WRITE           shift and go to state 57
    LPARENT         shift and go to state 23
    ENUM            shift and go to state 67
    IF              shift and go to state 68
    STACK           shift and go to state 73
    QUEUE           shift and go to state 79
    CONST           shift and go to state 85
    THREAD          shift and go to state 87
    PUBLIC          shift and go to state 88
    PRIVATE         shift and go to state 89
    TRY             shift and go to state 90
    LIST            shift and go to state 91
    FOR             shift and go to state 92
    FOREACH         shift and go to state 93
    WHILE           shift and go to state 94
    DO              shift and go to state 95

    all_block_code                 shift and go to state 26
    block_code                     shift and go to state 27
    def_const_or_var               shift and go to state 28
    print_data                     shift and go to state 29
    array_assignation              shift and go to state 30
    array_value_assign             shift and go to state 31
    array_indexing                 shift and go to state 32
    thread_main                    shift and go to state 33
    concurrent_method              shift and go to state 34
    method_definition              shift and go to state 35
    block_try_catch                shift and go to state 36
    lists                          shift and go to state 37
    functions_list                 shift and go to state 38
    statement_lambda               shift and go to state 39
    enums                          shift and go to state 40
    normal_if                      shift and go to state 41
    block_for                      shift and go to state 42
    block_while                    shift and go to state 43
    stack_struct                   shift and go to state 44
    functions_stack                shift and go to state 45
    queue_struct                   shift and go to state 46
    functions_queue                shift and go to state 47
    constant_assignation           shift and go to state 48
    variable_assignation           shift and go to state 49
    declaration_thread             shift and go to state 56
    access_modifiers               shift and go to state 58
    try_catch_simply               shift and go to state 59
    try_catch_finally              shift and go to state 60
    list_empty                     shift and go to state 61
    list_full                      shift and go to state 62
    list_func_clear                shift and go to state 63
    list_func_count                shift and go to state 64
    list_func_add                  shift and go to state 65
    list_func_removeat             shift and go to state 66
    for_simple                     shift and go to state 69
    for_each                       shift and go to state 70
    normal_while                   shift and go to state 71
    do_while                       shift and go to state 72
    stack_push                     shift and go to state 74
    stack_pop                      shift and go to state 75
    stack_clear                    shift and go to state 76
    stack_peek                     shift and go to state 77
    stack_isEmpty                  shift and go to state 78
    queue_enqueue                  shift and go to state 80
    queue_dequeue                  shift and go to state 81
    queue_clear                    shift and go to state 82
    queue_isEmpty                  shift and go to state 83
    queue_peek                     shift and go to state 84
    assignation_type_value_multiple shift and go to state 86

state 22

    (174) concurrent_method -> STATIC . VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (160) method_definition -> STATIC . data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (161) method_definition -> STATIC . VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY
    (164) method_definition -> STATIC . data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (165) method_definition -> STATIC . VOID METHOD LPARENT RPARENT LKEY RKEY
    (27) data_type -> . CHARTYPE
    (28) data_type -> . STRINGTYPE
    (29) data_type -> . FLOATTYPE
    (30) data_type -> . DECIMALTYPE
    (31) data_type -> . INTTYPE
    (32) data_type -> . BOOLTYPE
    (33) data_type -> . array_type
    (34) data_type -> . METHOD
    (51) array_type -> . CHARTYPE LBRACKET RBRACKET
    (52) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (53) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (54) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (55) array_type -> . INTTYPE LBRACKET RBRACKET
    (56) array_type -> . BOOLTYPE LBRACKET RBRACKET

    VOID            shift and go to state 96
    CHARTYPE        shift and go to state 99
    STRINGTYPE      shift and go to state 100
    FLOATTYPE       shift and go to state 101
    DECIMALTYPE     shift and go to state 102
    INTTYPE         shift and go to state 103
    BOOLTYPE        shift and go to state 104
    METHOD          shift and go to state 98

    data_type                      shift and go to state 97
    array_type                     shift and go to state 105

state 23

    (184) statement_lambda -> LPARENT . VARIABLE ARROW LKEY all_block_code RKEY RPARENT

    VARIABLE        shift and go to state 106


state 24

    (58) array_assignation -> STRINGTYPE . LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
    (144) assignation_type_value_multiple -> STRINGTYPE . assignation_string_multiple
    (150) assignation_string_multiple -> . assignation_string
    (151) assignation_string_multiple -> . assignation_string COMMA assignation_string_multiple
    (132) assignation_string -> . VARIABLE ASSIGNATION STRING
    (133) assignation_string -> . VARIABLE ASSIGNATION VARIABLE

    LBRACKET        shift and go to state 107
    VARIABLE        shift and go to state 110

    assignation_string_multiple    shift and go to state 108
    assignation_string             shift and go to state 109

state 25

    (88) array_value_assign -> VARIABLE . LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (89) array_value_assign -> VARIABLE . LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (86) array_indexing -> VARIABLE . LBRACKET VARIABLE RBRACKET
    (87) array_indexing -> VARIABLE . LBRACKET INTEGER RBRACKET
    (225) list_func_clear -> VARIABLE . DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (226) list_func_count -> VARIABLE . DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (227) list_func_add -> VARIABLE . DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (228) list_func_add -> VARIABLE . DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (229) list_func_removeat -> VARIABLE . DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (230) list_func_removeat -> VARIABLE . DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (237) stack_push -> VARIABLE . DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (238) stack_pop -> VARIABLE . DOT POP LPARENT RPARENT DOTANDCOMMA
    (239) stack_clear -> VARIABLE . DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (240) stack_peek -> VARIABLE . DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (241) stack_isEmpty -> VARIABLE . DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (248) queue_enqueue -> VARIABLE . DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (249) queue_dequeue -> VARIABLE . DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (250) queue_clear -> VARIABLE . DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (252) queue_isEmpty -> VARIABLE . DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (251) queue_peek -> VARIABLE . DOT PEEK LPARENT RPARENT DOTANDCOMMA

    LBRACKET        shift and go to state 111
    DOT             shift and go to state 112


state 26

    (3) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code . RKEY
    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code . RKEY all_block_code

    RKEY            shift and go to state 113


state 27

    (25) all_block_code -> block_code .
    (26) all_block_code -> block_code . all_block_code
    (25) all_block_code -> . block_code
    (26) all_block_code -> . block_code all_block_code
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . array_assignation
    (8) block_code -> . array_value_assign
    (9) block_code -> . array_indexing
    (10) block_code -> . thread_main
    (11) block_code -> . concurrent_method
    (12) block_code -> . method_definition
    (13) block_code -> . block_try_catch
    (14) block_code -> . lists
    (15) block_code -> . functions_list
    (16) block_code -> . statement_lambda
    (17) block_code -> . enums
    (18) block_code -> . normal_if
    (19) block_code -> . block_for
    (20) block_code -> . block_while
    (21) block_code -> . stack_struct
    (22) block_code -> . functions_stack
    (23) block_code -> . queue_struct
    (24) block_code -> . functions_queue
    (116) def_const_or_var -> . constant_assignation
    (117) def_const_or_var -> . variable_assignation
    (46) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (47) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (57) array_assignation -> . CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA
    (58) array_assignation -> . STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
    (59) array_assignation -> . FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
    (60) array_assignation -> . DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA
    (61) array_assignation -> . INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
    (62) array_assignation -> . BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
    (88) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (89) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (86) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (87) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (169) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (174) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (175) concurrent_method -> . WRITE
    (158) method_definition -> . access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (159) method_definition -> . access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY
    (160) method_definition -> . STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (161) method_definition -> . STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY
    (162) method_definition -> . access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (163) method_definition -> . access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY
    (164) method_definition -> . STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (165) method_definition -> . STATIC VOID METHOD LPARENT RPARENT LKEY RKEY
    (188) block_try_catch -> . try_catch_simply
    (189) block_try_catch -> . try_catch_finally
    (211) lists -> . list_empty
    (212) lists -> . list_full
    (221) functions_list -> . list_func_clear
    (222) functions_list -> . list_func_count
    (223) functions_list -> . list_func_add
    (224) functions_list -> . list_func_removeat
    (184) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (185) enums -> . ENUM METHOD LKEY list_enums RKEY
    (198) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (199) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (206) block_for -> . for_simple
    (207) block_for -> . for_each
    (202) block_while -> . normal_while
    (203) block_while -> . do_while
    (231) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (232) functions_stack -> . stack_push
    (233) functions_stack -> . stack_pop
    (234) functions_stack -> . stack_clear
    (235) functions_stack -> . stack_peek
    (236) functions_stack -> . stack_isEmpty
    (242) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (243) functions_queue -> . queue_enqueue
    (244) functions_queue -> . queue_dequeue
    (245) functions_queue -> . queue_clear
    (246) functions_queue -> . queue_isEmpty
    (247) functions_queue -> . queue_peek
    (118) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (119) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (120) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (121) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (170) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (171) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (122) access_modifiers -> . PUBLIC
    (123) access_modifiers -> . PRIVATE
    (190) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (191) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (213) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (214) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (215) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (216) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (225) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (226) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (227) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (228) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (229) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (230) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (208) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (209) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (210) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (204) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (205) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (237) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (238) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (239) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (240) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (241) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (248) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (249) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (250) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (252) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (251) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (143) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (144) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (145) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (146) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (147) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    RKEY            reduce using rule 25 (all_block_code -> block_code .)
    PRINT           shift and go to state 50
    CHARTYPE        shift and go to state 51
    STRINGTYPE      shift and go to state 24
    FLOATTYPE       shift and go to state 52
    DECIMALTYPE     shift and go to state 53
    INTTYPE         shift and go to state 54
    BOOLTYPE        shift and go to state 55
    VARIABLE        shift and go to state 25
    STATIC          shift and go to state 22
    WRITE           shift and go to state 57
    LPARENT         shift and go to state 23
    ENUM            shift and go to state 67
    IF              shift and go to state 68
    STACK           shift and go to state 73
    QUEUE           shift and go to state 79
    CONST           shift and go to state 85
    THREAD          shift and go to state 87
    PUBLIC          shift and go to state 88
    PRIVATE         shift and go to state 89
    TRY             shift and go to state 90
    LIST            shift and go to state 91
    FOR             shift and go to state 92
    FOREACH         shift and go to state 93
    WHILE           shift and go to state 94
    DO              shift and go to state 95

    block_code                     shift and go to state 27
    all_block_code                 shift and go to state 114
    def_const_or_var               shift and go to state 28
    print_data                     shift and go to state 29
    array_assignation              shift and go to state 30
    array_value_assign             shift and go to state 31
    array_indexing                 shift and go to state 32
    thread_main                    shift and go to state 33
    concurrent_method              shift and go to state 34
    method_definition              shift and go to state 35
    block_try_catch                shift and go to state 36
    lists                          shift and go to state 37
    functions_list                 shift and go to state 38
    statement_lambda               shift and go to state 39
    enums                          shift and go to state 40
    normal_if                      shift and go to state 41
    block_for                      shift and go to state 42
    block_while                    shift and go to state 43
    stack_struct                   shift and go to state 44
    functions_stack                shift and go to state 45
    queue_struct                   shift and go to state 46
    functions_queue                shift and go to state 47
    constant_assignation           shift and go to state 48
    variable_assignation           shift and go to state 49
    declaration_thread             shift and go to state 56
    access_modifiers               shift and go to state 58
    try_catch_simply               shift and go to state 59
    try_catch_finally              shift and go to state 60
    list_empty                     shift and go to state 61
    list_full                      shift and go to state 62
    list_func_clear                shift and go to state 63
    list_func_count                shift and go to state 64
    list_func_add                  shift and go to state 65
    list_func_removeat             shift and go to state 66
    for_simple                     shift and go to state 69
    for_each                       shift and go to state 70
    normal_while                   shift and go to state 71
    do_while                       shift and go to state 72
    stack_push                     shift and go to state 74
    stack_pop                      shift and go to state 75
    stack_clear                    shift and go to state 76
    stack_peek                     shift and go to state 77
    stack_isEmpty                  shift and go to state 78
    queue_enqueue                  shift and go to state 80
    queue_dequeue                  shift and go to state 81
    queue_clear                    shift and go to state 82
    queue_isEmpty                  shift and go to state 83
    queue_peek                     shift and go to state 84
    assignation_type_value_multiple shift and go to state 86

state 28

    (5) block_code -> def_const_or_var .

    PRINT           reduce using rule 5 (block_code -> def_const_or_var .)
    CHARTYPE        reduce using rule 5 (block_code -> def_const_or_var .)
    STRINGTYPE      reduce using rule 5 (block_code -> def_const_or_var .)
    FLOATTYPE       reduce using rule 5 (block_code -> def_const_or_var .)
    DECIMALTYPE     reduce using rule 5 (block_code -> def_const_or_var .)
    INTTYPE         reduce using rule 5 (block_code -> def_const_or_var .)
    BOOLTYPE        reduce using rule 5 (block_code -> def_const_or_var .)
    VARIABLE        reduce using rule 5 (block_code -> def_const_or_var .)
    STATIC          reduce using rule 5 (block_code -> def_const_or_var .)
    WRITE           reduce using rule 5 (block_code -> def_const_or_var .)
    LPARENT         reduce using rule 5 (block_code -> def_const_or_var .)
    ENUM            reduce using rule 5 (block_code -> def_const_or_var .)
    IF              reduce using rule 5 (block_code -> def_const_or_var .)
    STACK           reduce using rule 5 (block_code -> def_const_or_var .)
    QUEUE           reduce using rule 5 (block_code -> def_const_or_var .)
    CONST           reduce using rule 5 (block_code -> def_const_or_var .)
    THREAD          reduce using rule 5 (block_code -> def_const_or_var .)
    PUBLIC          reduce using rule 5 (block_code -> def_const_or_var .)
    PRIVATE         reduce using rule 5 (block_code -> def_const_or_var .)
    TRY             reduce using rule 5 (block_code -> def_const_or_var .)
    LIST            reduce using rule 5 (block_code -> def_const_or_var .)
    FOR             reduce using rule 5 (block_code -> def_const_or_var .)
    FOREACH         reduce using rule 5 (block_code -> def_const_or_var .)
    WHILE           reduce using rule 5 (block_code -> def_const_or_var .)
    DO              reduce using rule 5 (block_code -> def_const_or_var .)
    RKEY            reduce using rule 5 (block_code -> def_const_or_var .)


state 29

    (6) block_code -> print_data .

    PRINT           reduce using rule 6 (block_code -> print_data .)
    CHARTYPE        reduce using rule 6 (block_code -> print_data .)
    STRINGTYPE      reduce using rule 6 (block_code -> print_data .)
    FLOATTYPE       reduce using rule 6 (block_code -> print_data .)
    DECIMALTYPE     reduce using rule 6 (block_code -> print_data .)
    INTTYPE         reduce using rule 6 (block_code -> print_data .)
    BOOLTYPE        reduce using rule 6 (block_code -> print_data .)
    VARIABLE        reduce using rule 6 (block_code -> print_data .)
    STATIC          reduce using rule 6 (block_code -> print_data .)
    WRITE           reduce using rule 6 (block_code -> print_data .)
    LPARENT         reduce using rule 6 (block_code -> print_data .)
    ENUM            reduce using rule 6 (block_code -> print_data .)
    IF              reduce using rule 6 (block_code -> print_data .)
    STACK           reduce using rule 6 (block_code -> print_data .)
    QUEUE           reduce using rule 6 (block_code -> print_data .)
    CONST           reduce using rule 6 (block_code -> print_data .)
    THREAD          reduce using rule 6 (block_code -> print_data .)
    PUBLIC          reduce using rule 6 (block_code -> print_data .)
    PRIVATE         reduce using rule 6 (block_code -> print_data .)
    TRY             reduce using rule 6 (block_code -> print_data .)
    LIST            reduce using rule 6 (block_code -> print_data .)
    FOR             reduce using rule 6 (block_code -> print_data .)
    FOREACH         reduce using rule 6 (block_code -> print_data .)
    WHILE           reduce using rule 6 (block_code -> print_data .)
    DO              reduce using rule 6 (block_code -> print_data .)
    RKEY            reduce using rule 6 (block_code -> print_data .)


state 30

    (7) block_code -> array_assignation .

    PRINT           reduce using rule 7 (block_code -> array_assignation .)
    CHARTYPE        reduce using rule 7 (block_code -> array_assignation .)
    STRINGTYPE      reduce using rule 7 (block_code -> array_assignation .)
    FLOATTYPE       reduce using rule 7 (block_code -> array_assignation .)
    DECIMALTYPE     reduce using rule 7 (block_code -> array_assignation .)
    INTTYPE         reduce using rule 7 (block_code -> array_assignation .)
    BOOLTYPE        reduce using rule 7 (block_code -> array_assignation .)
    VARIABLE        reduce using rule 7 (block_code -> array_assignation .)
    STATIC          reduce using rule 7 (block_code -> array_assignation .)
    WRITE           reduce using rule 7 (block_code -> array_assignation .)
    LPARENT         reduce using rule 7 (block_code -> array_assignation .)
    ENUM            reduce using rule 7 (block_code -> array_assignation .)
    IF              reduce using rule 7 (block_code -> array_assignation .)
    STACK           reduce using rule 7 (block_code -> array_assignation .)
    QUEUE           reduce using rule 7 (block_code -> array_assignation .)
    CONST           reduce using rule 7 (block_code -> array_assignation .)
    THREAD          reduce using rule 7 (block_code -> array_assignation .)
    PUBLIC          reduce using rule 7 (block_code -> array_assignation .)
    PRIVATE         reduce using rule 7 (block_code -> array_assignation .)
    TRY             reduce using rule 7 (block_code -> array_assignation .)
    LIST            reduce using rule 7 (block_code -> array_assignation .)
    FOR             reduce using rule 7 (block_code -> array_assignation .)
    FOREACH         reduce using rule 7 (block_code -> array_assignation .)
    WHILE           reduce using rule 7 (block_code -> array_assignation .)
    DO              reduce using rule 7 (block_code -> array_assignation .)
    RKEY            reduce using rule 7 (block_code -> array_assignation .)


state 31

    (8) block_code -> array_value_assign .

    PRINT           reduce using rule 8 (block_code -> array_value_assign .)
    CHARTYPE        reduce using rule 8 (block_code -> array_value_assign .)
    STRINGTYPE      reduce using rule 8 (block_code -> array_value_assign .)
    FLOATTYPE       reduce using rule 8 (block_code -> array_value_assign .)
    DECIMALTYPE     reduce using rule 8 (block_code -> array_value_assign .)
    INTTYPE         reduce using rule 8 (block_code -> array_value_assign .)
    BOOLTYPE        reduce using rule 8 (block_code -> array_value_assign .)
    VARIABLE        reduce using rule 8 (block_code -> array_value_assign .)
    STATIC          reduce using rule 8 (block_code -> array_value_assign .)
    WRITE           reduce using rule 8 (block_code -> array_value_assign .)
    LPARENT         reduce using rule 8 (block_code -> array_value_assign .)
    ENUM            reduce using rule 8 (block_code -> array_value_assign .)
    IF              reduce using rule 8 (block_code -> array_value_assign .)
    STACK           reduce using rule 8 (block_code -> array_value_assign .)
    QUEUE           reduce using rule 8 (block_code -> array_value_assign .)
    CONST           reduce using rule 8 (block_code -> array_value_assign .)
    THREAD          reduce using rule 8 (block_code -> array_value_assign .)
    PUBLIC          reduce using rule 8 (block_code -> array_value_assign .)
    PRIVATE         reduce using rule 8 (block_code -> array_value_assign .)
    TRY             reduce using rule 8 (block_code -> array_value_assign .)
    LIST            reduce using rule 8 (block_code -> array_value_assign .)
    FOR             reduce using rule 8 (block_code -> array_value_assign .)
    FOREACH         reduce using rule 8 (block_code -> array_value_assign .)
    WHILE           reduce using rule 8 (block_code -> array_value_assign .)
    DO              reduce using rule 8 (block_code -> array_value_assign .)
    RKEY            reduce using rule 8 (block_code -> array_value_assign .)


state 32

    (9) block_code -> array_indexing .

    PRINT           reduce using rule 9 (block_code -> array_indexing .)
    CHARTYPE        reduce using rule 9 (block_code -> array_indexing .)
    STRINGTYPE      reduce using rule 9 (block_code -> array_indexing .)
    FLOATTYPE       reduce using rule 9 (block_code -> array_indexing .)
    DECIMALTYPE     reduce using rule 9 (block_code -> array_indexing .)
    INTTYPE         reduce using rule 9 (block_code -> array_indexing .)
    BOOLTYPE        reduce using rule 9 (block_code -> array_indexing .)
    VARIABLE        reduce using rule 9 (block_code -> array_indexing .)
    STATIC          reduce using rule 9 (block_code -> array_indexing .)
    WRITE           reduce using rule 9 (block_code -> array_indexing .)
    LPARENT         reduce using rule 9 (block_code -> array_indexing .)
    ENUM            reduce using rule 9 (block_code -> array_indexing .)
    IF              reduce using rule 9 (block_code -> array_indexing .)
    STACK           reduce using rule 9 (block_code -> array_indexing .)
    QUEUE           reduce using rule 9 (block_code -> array_indexing .)
    CONST           reduce using rule 9 (block_code -> array_indexing .)
    THREAD          reduce using rule 9 (block_code -> array_indexing .)
    PUBLIC          reduce using rule 9 (block_code -> array_indexing .)
    PRIVATE         reduce using rule 9 (block_code -> array_indexing .)
    TRY             reduce using rule 9 (block_code -> array_indexing .)
    LIST            reduce using rule 9 (block_code -> array_indexing .)
    FOR             reduce using rule 9 (block_code -> array_indexing .)
    FOREACH         reduce using rule 9 (block_code -> array_indexing .)
    WHILE           reduce using rule 9 (block_code -> array_indexing .)
    DO              reduce using rule 9 (block_code -> array_indexing .)
    RKEY            reduce using rule 9 (block_code -> array_indexing .)


state 33

    (10) block_code -> thread_main .

    PRINT           reduce using rule 10 (block_code -> thread_main .)
    CHARTYPE        reduce using rule 10 (block_code -> thread_main .)
    STRINGTYPE      reduce using rule 10 (block_code -> thread_main .)
    FLOATTYPE       reduce using rule 10 (block_code -> thread_main .)
    DECIMALTYPE     reduce using rule 10 (block_code -> thread_main .)
    INTTYPE         reduce using rule 10 (block_code -> thread_main .)
    BOOLTYPE        reduce using rule 10 (block_code -> thread_main .)
    VARIABLE        reduce using rule 10 (block_code -> thread_main .)
    STATIC          reduce using rule 10 (block_code -> thread_main .)
    WRITE           reduce using rule 10 (block_code -> thread_main .)
    LPARENT         reduce using rule 10 (block_code -> thread_main .)
    ENUM            reduce using rule 10 (block_code -> thread_main .)
    IF              reduce using rule 10 (block_code -> thread_main .)
    STACK           reduce using rule 10 (block_code -> thread_main .)
    QUEUE           reduce using rule 10 (block_code -> thread_main .)
    CONST           reduce using rule 10 (block_code -> thread_main .)
    THREAD          reduce using rule 10 (block_code -> thread_main .)
    PUBLIC          reduce using rule 10 (block_code -> thread_main .)
    PRIVATE         reduce using rule 10 (block_code -> thread_main .)
    TRY             reduce using rule 10 (block_code -> thread_main .)
    LIST            reduce using rule 10 (block_code -> thread_main .)
    FOR             reduce using rule 10 (block_code -> thread_main .)
    FOREACH         reduce using rule 10 (block_code -> thread_main .)
    WHILE           reduce using rule 10 (block_code -> thread_main .)
    DO              reduce using rule 10 (block_code -> thread_main .)
    RKEY            reduce using rule 10 (block_code -> thread_main .)


state 34

    (11) block_code -> concurrent_method .

    PRINT           reduce using rule 11 (block_code -> concurrent_method .)
    CHARTYPE        reduce using rule 11 (block_code -> concurrent_method .)
    STRINGTYPE      reduce using rule 11 (block_code -> concurrent_method .)
    FLOATTYPE       reduce using rule 11 (block_code -> concurrent_method .)
    DECIMALTYPE     reduce using rule 11 (block_code -> concurrent_method .)
    INTTYPE         reduce using rule 11 (block_code -> concurrent_method .)
    BOOLTYPE        reduce using rule 11 (block_code -> concurrent_method .)
    VARIABLE        reduce using rule 11 (block_code -> concurrent_method .)
    STATIC          reduce using rule 11 (block_code -> concurrent_method .)
    WRITE           reduce using rule 11 (block_code -> concurrent_method .)
    LPARENT         reduce using rule 11 (block_code -> concurrent_method .)
    ENUM            reduce using rule 11 (block_code -> concurrent_method .)
    IF              reduce using rule 11 (block_code -> concurrent_method .)
    STACK           reduce using rule 11 (block_code -> concurrent_method .)
    QUEUE           reduce using rule 11 (block_code -> concurrent_method .)
    CONST           reduce using rule 11 (block_code -> concurrent_method .)
    THREAD          reduce using rule 11 (block_code -> concurrent_method .)
    PUBLIC          reduce using rule 11 (block_code -> concurrent_method .)
    PRIVATE         reduce using rule 11 (block_code -> concurrent_method .)
    TRY             reduce using rule 11 (block_code -> concurrent_method .)
    LIST            reduce using rule 11 (block_code -> concurrent_method .)
    FOR             reduce using rule 11 (block_code -> concurrent_method .)
    FOREACH         reduce using rule 11 (block_code -> concurrent_method .)
    WHILE           reduce using rule 11 (block_code -> concurrent_method .)
    DO              reduce using rule 11 (block_code -> concurrent_method .)
    RKEY            reduce using rule 11 (block_code -> concurrent_method .)


state 35

    (12) block_code -> method_definition .

    PRINT           reduce using rule 12 (block_code -> method_definition .)
    CHARTYPE        reduce using rule 12 (block_code -> method_definition .)
    STRINGTYPE      reduce using rule 12 (block_code -> method_definition .)
    FLOATTYPE       reduce using rule 12 (block_code -> method_definition .)
    DECIMALTYPE     reduce using rule 12 (block_code -> method_definition .)
    INTTYPE         reduce using rule 12 (block_code -> method_definition .)
    BOOLTYPE        reduce using rule 12 (block_code -> method_definition .)
    VARIABLE        reduce using rule 12 (block_code -> method_definition .)
    STATIC          reduce using rule 12 (block_code -> method_definition .)
    WRITE           reduce using rule 12 (block_code -> method_definition .)
    LPARENT         reduce using rule 12 (block_code -> method_definition .)
    ENUM            reduce using rule 12 (block_code -> method_definition .)
    IF              reduce using rule 12 (block_code -> method_definition .)
    STACK           reduce using rule 12 (block_code -> method_definition .)
    QUEUE           reduce using rule 12 (block_code -> method_definition .)
    CONST           reduce using rule 12 (block_code -> method_definition .)
    THREAD          reduce using rule 12 (block_code -> method_definition .)
    PUBLIC          reduce using rule 12 (block_code -> method_definition .)
    PRIVATE         reduce using rule 12 (block_code -> method_definition .)
    TRY             reduce using rule 12 (block_code -> method_definition .)
    LIST            reduce using rule 12 (block_code -> method_definition .)
    FOR             reduce using rule 12 (block_code -> method_definition .)
    FOREACH         reduce using rule 12 (block_code -> method_definition .)
    WHILE           reduce using rule 12 (block_code -> method_definition .)
    DO              reduce using rule 12 (block_code -> method_definition .)
    RKEY            reduce using rule 12 (block_code -> method_definition .)


state 36

    (13) block_code -> block_try_catch .

    PRINT           reduce using rule 13 (block_code -> block_try_catch .)
    CHARTYPE        reduce using rule 13 (block_code -> block_try_catch .)
    STRINGTYPE      reduce using rule 13 (block_code -> block_try_catch .)
    FLOATTYPE       reduce using rule 13 (block_code -> block_try_catch .)
    DECIMALTYPE     reduce using rule 13 (block_code -> block_try_catch .)
    INTTYPE         reduce using rule 13 (block_code -> block_try_catch .)
    BOOLTYPE        reduce using rule 13 (block_code -> block_try_catch .)
    VARIABLE        reduce using rule 13 (block_code -> block_try_catch .)
    STATIC          reduce using rule 13 (block_code -> block_try_catch .)
    WRITE           reduce using rule 13 (block_code -> block_try_catch .)
    LPARENT         reduce using rule 13 (block_code -> block_try_catch .)
    ENUM            reduce using rule 13 (block_code -> block_try_catch .)
    IF              reduce using rule 13 (block_code -> block_try_catch .)
    STACK           reduce using rule 13 (block_code -> block_try_catch .)
    QUEUE           reduce using rule 13 (block_code -> block_try_catch .)
    CONST           reduce using rule 13 (block_code -> block_try_catch .)
    THREAD          reduce using rule 13 (block_code -> block_try_catch .)
    PUBLIC          reduce using rule 13 (block_code -> block_try_catch .)
    PRIVATE         reduce using rule 13 (block_code -> block_try_catch .)
    TRY             reduce using rule 13 (block_code -> block_try_catch .)
    LIST            reduce using rule 13 (block_code -> block_try_catch .)
    FOR             reduce using rule 13 (block_code -> block_try_catch .)
    FOREACH         reduce using rule 13 (block_code -> block_try_catch .)
    WHILE           reduce using rule 13 (block_code -> block_try_catch .)
    DO              reduce using rule 13 (block_code -> block_try_catch .)
    RKEY            reduce using rule 13 (block_code -> block_try_catch .)


state 37

    (14) block_code -> lists .

    PRINT           reduce using rule 14 (block_code -> lists .)
    CHARTYPE        reduce using rule 14 (block_code -> lists .)
    STRINGTYPE      reduce using rule 14 (block_code -> lists .)
    FLOATTYPE       reduce using rule 14 (block_code -> lists .)
    DECIMALTYPE     reduce using rule 14 (block_code -> lists .)
    INTTYPE         reduce using rule 14 (block_code -> lists .)
    BOOLTYPE        reduce using rule 14 (block_code -> lists .)
    VARIABLE        reduce using rule 14 (block_code -> lists .)
    STATIC          reduce using rule 14 (block_code -> lists .)
    WRITE           reduce using rule 14 (block_code -> lists .)
    LPARENT         reduce using rule 14 (block_code -> lists .)
    ENUM            reduce using rule 14 (block_code -> lists .)
    IF              reduce using rule 14 (block_code -> lists .)
    STACK           reduce using rule 14 (block_code -> lists .)
    QUEUE           reduce using rule 14 (block_code -> lists .)
    CONST           reduce using rule 14 (block_code -> lists .)
    THREAD          reduce using rule 14 (block_code -> lists .)
    PUBLIC          reduce using rule 14 (block_code -> lists .)
    PRIVATE         reduce using rule 14 (block_code -> lists .)
    TRY             reduce using rule 14 (block_code -> lists .)
    LIST            reduce using rule 14 (block_code -> lists .)
    FOR             reduce using rule 14 (block_code -> lists .)
    FOREACH         reduce using rule 14 (block_code -> lists .)
    WHILE           reduce using rule 14 (block_code -> lists .)
    DO              reduce using rule 14 (block_code -> lists .)
    RKEY            reduce using rule 14 (block_code -> lists .)


state 38

    (15) block_code -> functions_list .

    PRINT           reduce using rule 15 (block_code -> functions_list .)
    CHARTYPE        reduce using rule 15 (block_code -> functions_list .)
    STRINGTYPE      reduce using rule 15 (block_code -> functions_list .)
    FLOATTYPE       reduce using rule 15 (block_code -> functions_list .)
    DECIMALTYPE     reduce using rule 15 (block_code -> functions_list .)
    INTTYPE         reduce using rule 15 (block_code -> functions_list .)
    BOOLTYPE        reduce using rule 15 (block_code -> functions_list .)
    VARIABLE        reduce using rule 15 (block_code -> functions_list .)
    STATIC          reduce using rule 15 (block_code -> functions_list .)
    WRITE           reduce using rule 15 (block_code -> functions_list .)
    LPARENT         reduce using rule 15 (block_code -> functions_list .)
    ENUM            reduce using rule 15 (block_code -> functions_list .)
    IF              reduce using rule 15 (block_code -> functions_list .)
    STACK           reduce using rule 15 (block_code -> functions_list .)
    QUEUE           reduce using rule 15 (block_code -> functions_list .)
    CONST           reduce using rule 15 (block_code -> functions_list .)
    THREAD          reduce using rule 15 (block_code -> functions_list .)
    PUBLIC          reduce using rule 15 (block_code -> functions_list .)
    PRIVATE         reduce using rule 15 (block_code -> functions_list .)
    TRY             reduce using rule 15 (block_code -> functions_list .)
    LIST            reduce using rule 15 (block_code -> functions_list .)
    FOR             reduce using rule 15 (block_code -> functions_list .)
    FOREACH         reduce using rule 15 (block_code -> functions_list .)
    WHILE           reduce using rule 15 (block_code -> functions_list .)
    DO              reduce using rule 15 (block_code -> functions_list .)
    RKEY            reduce using rule 15 (block_code -> functions_list .)


state 39

    (16) block_code -> statement_lambda .

    PRINT           reduce using rule 16 (block_code -> statement_lambda .)
    CHARTYPE        reduce using rule 16 (block_code -> statement_lambda .)
    STRINGTYPE      reduce using rule 16 (block_code -> statement_lambda .)
    FLOATTYPE       reduce using rule 16 (block_code -> statement_lambda .)
    DECIMALTYPE     reduce using rule 16 (block_code -> statement_lambda .)
    INTTYPE         reduce using rule 16 (block_code -> statement_lambda .)
    BOOLTYPE        reduce using rule 16 (block_code -> statement_lambda .)
    VARIABLE        reduce using rule 16 (block_code -> statement_lambda .)
    STATIC          reduce using rule 16 (block_code -> statement_lambda .)
    WRITE           reduce using rule 16 (block_code -> statement_lambda .)
    LPARENT         reduce using rule 16 (block_code -> statement_lambda .)
    ENUM            reduce using rule 16 (block_code -> statement_lambda .)
    IF              reduce using rule 16 (block_code -> statement_lambda .)
    STACK           reduce using rule 16 (block_code -> statement_lambda .)
    QUEUE           reduce using rule 16 (block_code -> statement_lambda .)
    CONST           reduce using rule 16 (block_code -> statement_lambda .)
    THREAD          reduce using rule 16 (block_code -> statement_lambda .)
    PUBLIC          reduce using rule 16 (block_code -> statement_lambda .)
    PRIVATE         reduce using rule 16 (block_code -> statement_lambda .)
    TRY             reduce using rule 16 (block_code -> statement_lambda .)
    LIST            reduce using rule 16 (block_code -> statement_lambda .)
    FOR             reduce using rule 16 (block_code -> statement_lambda .)
    FOREACH         reduce using rule 16 (block_code -> statement_lambda .)
    WHILE           reduce using rule 16 (block_code -> statement_lambda .)
    DO              reduce using rule 16 (block_code -> statement_lambda .)
    RKEY            reduce using rule 16 (block_code -> statement_lambda .)


state 40

    (17) block_code -> enums .

    PRINT           reduce using rule 17 (block_code -> enums .)
    CHARTYPE        reduce using rule 17 (block_code -> enums .)
    STRINGTYPE      reduce using rule 17 (block_code -> enums .)
    FLOATTYPE       reduce using rule 17 (block_code -> enums .)
    DECIMALTYPE     reduce using rule 17 (block_code -> enums .)
    INTTYPE         reduce using rule 17 (block_code -> enums .)
    BOOLTYPE        reduce using rule 17 (block_code -> enums .)
    VARIABLE        reduce using rule 17 (block_code -> enums .)
    STATIC          reduce using rule 17 (block_code -> enums .)
    WRITE           reduce using rule 17 (block_code -> enums .)
    LPARENT         reduce using rule 17 (block_code -> enums .)
    ENUM            reduce using rule 17 (block_code -> enums .)
    IF              reduce using rule 17 (block_code -> enums .)
    STACK           reduce using rule 17 (block_code -> enums .)
    QUEUE           reduce using rule 17 (block_code -> enums .)
    CONST           reduce using rule 17 (block_code -> enums .)
    THREAD          reduce using rule 17 (block_code -> enums .)
    PUBLIC          reduce using rule 17 (block_code -> enums .)
    PRIVATE         reduce using rule 17 (block_code -> enums .)
    TRY             reduce using rule 17 (block_code -> enums .)
    LIST            reduce using rule 17 (block_code -> enums .)
    FOR             reduce using rule 17 (block_code -> enums .)
    FOREACH         reduce using rule 17 (block_code -> enums .)
    WHILE           reduce using rule 17 (block_code -> enums .)
    DO              reduce using rule 17 (block_code -> enums .)
    RKEY            reduce using rule 17 (block_code -> enums .)


state 41

    (18) block_code -> normal_if .

    PRINT           reduce using rule 18 (block_code -> normal_if .)
    CHARTYPE        reduce using rule 18 (block_code -> normal_if .)
    STRINGTYPE      reduce using rule 18 (block_code -> normal_if .)
    FLOATTYPE       reduce using rule 18 (block_code -> normal_if .)
    DECIMALTYPE     reduce using rule 18 (block_code -> normal_if .)
    INTTYPE         reduce using rule 18 (block_code -> normal_if .)
    BOOLTYPE        reduce using rule 18 (block_code -> normal_if .)
    VARIABLE        reduce using rule 18 (block_code -> normal_if .)
    STATIC          reduce using rule 18 (block_code -> normal_if .)
    WRITE           reduce using rule 18 (block_code -> normal_if .)
    LPARENT         reduce using rule 18 (block_code -> normal_if .)
    ENUM            reduce using rule 18 (block_code -> normal_if .)
    IF              reduce using rule 18 (block_code -> normal_if .)
    STACK           reduce using rule 18 (block_code -> normal_if .)
    QUEUE           reduce using rule 18 (block_code -> normal_if .)
    CONST           reduce using rule 18 (block_code -> normal_if .)
    THREAD          reduce using rule 18 (block_code -> normal_if .)
    PUBLIC          reduce using rule 18 (block_code -> normal_if .)
    PRIVATE         reduce using rule 18 (block_code -> normal_if .)
    TRY             reduce using rule 18 (block_code -> normal_if .)
    LIST            reduce using rule 18 (block_code -> normal_if .)
    FOR             reduce using rule 18 (block_code -> normal_if .)
    FOREACH         reduce using rule 18 (block_code -> normal_if .)
    WHILE           reduce using rule 18 (block_code -> normal_if .)
    DO              reduce using rule 18 (block_code -> normal_if .)
    RKEY            reduce using rule 18 (block_code -> normal_if .)


state 42

    (19) block_code -> block_for .

    PRINT           reduce using rule 19 (block_code -> block_for .)
    CHARTYPE        reduce using rule 19 (block_code -> block_for .)
    STRINGTYPE      reduce using rule 19 (block_code -> block_for .)
    FLOATTYPE       reduce using rule 19 (block_code -> block_for .)
    DECIMALTYPE     reduce using rule 19 (block_code -> block_for .)
    INTTYPE         reduce using rule 19 (block_code -> block_for .)
    BOOLTYPE        reduce using rule 19 (block_code -> block_for .)
    VARIABLE        reduce using rule 19 (block_code -> block_for .)
    STATIC          reduce using rule 19 (block_code -> block_for .)
    WRITE           reduce using rule 19 (block_code -> block_for .)
    LPARENT         reduce using rule 19 (block_code -> block_for .)
    ENUM            reduce using rule 19 (block_code -> block_for .)
    IF              reduce using rule 19 (block_code -> block_for .)
    STACK           reduce using rule 19 (block_code -> block_for .)
    QUEUE           reduce using rule 19 (block_code -> block_for .)
    CONST           reduce using rule 19 (block_code -> block_for .)
    THREAD          reduce using rule 19 (block_code -> block_for .)
    PUBLIC          reduce using rule 19 (block_code -> block_for .)
    PRIVATE         reduce using rule 19 (block_code -> block_for .)
    TRY             reduce using rule 19 (block_code -> block_for .)
    LIST            reduce using rule 19 (block_code -> block_for .)
    FOR             reduce using rule 19 (block_code -> block_for .)
    FOREACH         reduce using rule 19 (block_code -> block_for .)
    WHILE           reduce using rule 19 (block_code -> block_for .)
    DO              reduce using rule 19 (block_code -> block_for .)
    RKEY            reduce using rule 19 (block_code -> block_for .)


state 43

    (20) block_code -> block_while .

    PRINT           reduce using rule 20 (block_code -> block_while .)
    CHARTYPE        reduce using rule 20 (block_code -> block_while .)
    STRINGTYPE      reduce using rule 20 (block_code -> block_while .)
    FLOATTYPE       reduce using rule 20 (block_code -> block_while .)
    DECIMALTYPE     reduce using rule 20 (block_code -> block_while .)
    INTTYPE         reduce using rule 20 (block_code -> block_while .)
    BOOLTYPE        reduce using rule 20 (block_code -> block_while .)
    VARIABLE        reduce using rule 20 (block_code -> block_while .)
    STATIC          reduce using rule 20 (block_code -> block_while .)
    WRITE           reduce using rule 20 (block_code -> block_while .)
    LPARENT         reduce using rule 20 (block_code -> block_while .)
    ENUM            reduce using rule 20 (block_code -> block_while .)
    IF              reduce using rule 20 (block_code -> block_while .)
    STACK           reduce using rule 20 (block_code -> block_while .)
    QUEUE           reduce using rule 20 (block_code -> block_while .)
    CONST           reduce using rule 20 (block_code -> block_while .)
    THREAD          reduce using rule 20 (block_code -> block_while .)
    PUBLIC          reduce using rule 20 (block_code -> block_while .)
    PRIVATE         reduce using rule 20 (block_code -> block_while .)
    TRY             reduce using rule 20 (block_code -> block_while .)
    LIST            reduce using rule 20 (block_code -> block_while .)
    FOR             reduce using rule 20 (block_code -> block_while .)
    FOREACH         reduce using rule 20 (block_code -> block_while .)
    WHILE           reduce using rule 20 (block_code -> block_while .)
    DO              reduce using rule 20 (block_code -> block_while .)
    RKEY            reduce using rule 20 (block_code -> block_while .)


state 44

    (21) block_code -> stack_struct .

    PRINT           reduce using rule 21 (block_code -> stack_struct .)
    CHARTYPE        reduce using rule 21 (block_code -> stack_struct .)
    STRINGTYPE      reduce using rule 21 (block_code -> stack_struct .)
    FLOATTYPE       reduce using rule 21 (block_code -> stack_struct .)
    DECIMALTYPE     reduce using rule 21 (block_code -> stack_struct .)
    INTTYPE         reduce using rule 21 (block_code -> stack_struct .)
    BOOLTYPE        reduce using rule 21 (block_code -> stack_struct .)
    VARIABLE        reduce using rule 21 (block_code -> stack_struct .)
    STATIC          reduce using rule 21 (block_code -> stack_struct .)
    WRITE           reduce using rule 21 (block_code -> stack_struct .)
    LPARENT         reduce using rule 21 (block_code -> stack_struct .)
    ENUM            reduce using rule 21 (block_code -> stack_struct .)
    IF              reduce using rule 21 (block_code -> stack_struct .)
    STACK           reduce using rule 21 (block_code -> stack_struct .)
    QUEUE           reduce using rule 21 (block_code -> stack_struct .)
    CONST           reduce using rule 21 (block_code -> stack_struct .)
    THREAD          reduce using rule 21 (block_code -> stack_struct .)
    PUBLIC          reduce using rule 21 (block_code -> stack_struct .)
    PRIVATE         reduce using rule 21 (block_code -> stack_struct .)
    TRY             reduce using rule 21 (block_code -> stack_struct .)
    LIST            reduce using rule 21 (block_code -> stack_struct .)
    FOR             reduce using rule 21 (block_code -> stack_struct .)
    FOREACH         reduce using rule 21 (block_code -> stack_struct .)
    WHILE           reduce using rule 21 (block_code -> stack_struct .)
    DO              reduce using rule 21 (block_code -> stack_struct .)
    RKEY            reduce using rule 21 (block_code -> stack_struct .)


state 45

    (22) block_code -> functions_stack .

    PRINT           reduce using rule 22 (block_code -> functions_stack .)
    CHARTYPE        reduce using rule 22 (block_code -> functions_stack .)
    STRINGTYPE      reduce using rule 22 (block_code -> functions_stack .)
    FLOATTYPE       reduce using rule 22 (block_code -> functions_stack .)
    DECIMALTYPE     reduce using rule 22 (block_code -> functions_stack .)
    INTTYPE         reduce using rule 22 (block_code -> functions_stack .)
    BOOLTYPE        reduce using rule 22 (block_code -> functions_stack .)
    VARIABLE        reduce using rule 22 (block_code -> functions_stack .)
    STATIC          reduce using rule 22 (block_code -> functions_stack .)
    WRITE           reduce using rule 22 (block_code -> functions_stack .)
    LPARENT         reduce using rule 22 (block_code -> functions_stack .)
    ENUM            reduce using rule 22 (block_code -> functions_stack .)
    IF              reduce using rule 22 (block_code -> functions_stack .)
    STACK           reduce using rule 22 (block_code -> functions_stack .)
    QUEUE           reduce using rule 22 (block_code -> functions_stack .)
    CONST           reduce using rule 22 (block_code -> functions_stack .)
    THREAD          reduce using rule 22 (block_code -> functions_stack .)
    PUBLIC          reduce using rule 22 (block_code -> functions_stack .)
    PRIVATE         reduce using rule 22 (block_code -> functions_stack .)
    TRY             reduce using rule 22 (block_code -> functions_stack .)
    LIST            reduce using rule 22 (block_code -> functions_stack .)
    FOR             reduce using rule 22 (block_code -> functions_stack .)
    FOREACH         reduce using rule 22 (block_code -> functions_stack .)
    WHILE           reduce using rule 22 (block_code -> functions_stack .)
    DO              reduce using rule 22 (block_code -> functions_stack .)
    RKEY            reduce using rule 22 (block_code -> functions_stack .)


state 46

    (23) block_code -> queue_struct .

    PRINT           reduce using rule 23 (block_code -> queue_struct .)
    CHARTYPE        reduce using rule 23 (block_code -> queue_struct .)
    STRINGTYPE      reduce using rule 23 (block_code -> queue_struct .)
    FLOATTYPE       reduce using rule 23 (block_code -> queue_struct .)
    DECIMALTYPE     reduce using rule 23 (block_code -> queue_struct .)
    INTTYPE         reduce using rule 23 (block_code -> queue_struct .)
    BOOLTYPE        reduce using rule 23 (block_code -> queue_struct .)
    VARIABLE        reduce using rule 23 (block_code -> queue_struct .)
    STATIC          reduce using rule 23 (block_code -> queue_struct .)
    WRITE           reduce using rule 23 (block_code -> queue_struct .)
    LPARENT         reduce using rule 23 (block_code -> queue_struct .)
    ENUM            reduce using rule 23 (block_code -> queue_struct .)
    IF              reduce using rule 23 (block_code -> queue_struct .)
    STACK           reduce using rule 23 (block_code -> queue_struct .)
    QUEUE           reduce using rule 23 (block_code -> queue_struct .)
    CONST           reduce using rule 23 (block_code -> queue_struct .)
    THREAD          reduce using rule 23 (block_code -> queue_struct .)
    PUBLIC          reduce using rule 23 (block_code -> queue_struct .)
    PRIVATE         reduce using rule 23 (block_code -> queue_struct .)
    TRY             reduce using rule 23 (block_code -> queue_struct .)
    LIST            reduce using rule 23 (block_code -> queue_struct .)
    FOR             reduce using rule 23 (block_code -> queue_struct .)
    FOREACH         reduce using rule 23 (block_code -> queue_struct .)
    WHILE           reduce using rule 23 (block_code -> queue_struct .)
    DO              reduce using rule 23 (block_code -> queue_struct .)
    RKEY            reduce using rule 23 (block_code -> queue_struct .)


state 47

    (24) block_code -> functions_queue .

    PRINT           reduce using rule 24 (block_code -> functions_queue .)
    CHARTYPE        reduce using rule 24 (block_code -> functions_queue .)
    STRINGTYPE      reduce using rule 24 (block_code -> functions_queue .)
    FLOATTYPE       reduce using rule 24 (block_code -> functions_queue .)
    DECIMALTYPE     reduce using rule 24 (block_code -> functions_queue .)
    INTTYPE         reduce using rule 24 (block_code -> functions_queue .)
    BOOLTYPE        reduce using rule 24 (block_code -> functions_queue .)
    VARIABLE        reduce using rule 24 (block_code -> functions_queue .)
    STATIC          reduce using rule 24 (block_code -> functions_queue .)
    WRITE           reduce using rule 24 (block_code -> functions_queue .)
    LPARENT         reduce using rule 24 (block_code -> functions_queue .)
    ENUM            reduce using rule 24 (block_code -> functions_queue .)
    IF              reduce using rule 24 (block_code -> functions_queue .)
    STACK           reduce using rule 24 (block_code -> functions_queue .)
    QUEUE           reduce using rule 24 (block_code -> functions_queue .)
    CONST           reduce using rule 24 (block_code -> functions_queue .)
    THREAD          reduce using rule 24 (block_code -> functions_queue .)
    PUBLIC          reduce using rule 24 (block_code -> functions_queue .)
    PRIVATE         reduce using rule 24 (block_code -> functions_queue .)
    TRY             reduce using rule 24 (block_code -> functions_queue .)
    LIST            reduce using rule 24 (block_code -> functions_queue .)
    FOR             reduce using rule 24 (block_code -> functions_queue .)
    FOREACH         reduce using rule 24 (block_code -> functions_queue .)
    WHILE           reduce using rule 24 (block_code -> functions_queue .)
    DO              reduce using rule 24 (block_code -> functions_queue .)
    RKEY            reduce using rule 24 (block_code -> functions_queue .)


state 48

    (116) def_const_or_var -> constant_assignation .

    PRINT           reduce using rule 116 (def_const_or_var -> constant_assignation .)
    CHARTYPE        reduce using rule 116 (def_const_or_var -> constant_assignation .)
    STRINGTYPE      reduce using rule 116 (def_const_or_var -> constant_assignation .)
    FLOATTYPE       reduce using rule 116 (def_const_or_var -> constant_assignation .)
    DECIMALTYPE     reduce using rule 116 (def_const_or_var -> constant_assignation .)
    INTTYPE         reduce using rule 116 (def_const_or_var -> constant_assignation .)
    BOOLTYPE        reduce using rule 116 (def_const_or_var -> constant_assignation .)
    VARIABLE        reduce using rule 116 (def_const_or_var -> constant_assignation .)
    STATIC          reduce using rule 116 (def_const_or_var -> constant_assignation .)
    WRITE           reduce using rule 116 (def_const_or_var -> constant_assignation .)
    LPARENT         reduce using rule 116 (def_const_or_var -> constant_assignation .)
    ENUM            reduce using rule 116 (def_const_or_var -> constant_assignation .)
    IF              reduce using rule 116 (def_const_or_var -> constant_assignation .)
    STACK           reduce using rule 116 (def_const_or_var -> constant_assignation .)
    QUEUE           reduce using rule 116 (def_const_or_var -> constant_assignation .)
    CONST           reduce using rule 116 (def_const_or_var -> constant_assignation .)
    THREAD          reduce using rule 116 (def_const_or_var -> constant_assignation .)
    PUBLIC          reduce using rule 116 (def_const_or_var -> constant_assignation .)
    PRIVATE         reduce using rule 116 (def_const_or_var -> constant_assignation .)
    TRY             reduce using rule 116 (def_const_or_var -> constant_assignation .)
    LIST            reduce using rule 116 (def_const_or_var -> constant_assignation .)
    FOR             reduce using rule 116 (def_const_or_var -> constant_assignation .)
    FOREACH         reduce using rule 116 (def_const_or_var -> constant_assignation .)
    WHILE           reduce using rule 116 (def_const_or_var -> constant_assignation .)
    DO              reduce using rule 116 (def_const_or_var -> constant_assignation .)
    RKEY            reduce using rule 116 (def_const_or_var -> constant_assignation .)


state 49

    (117) def_const_or_var -> variable_assignation .

    PRINT           reduce using rule 117 (def_const_or_var -> variable_assignation .)
    CHARTYPE        reduce using rule 117 (def_const_or_var -> variable_assignation .)
    STRINGTYPE      reduce using rule 117 (def_const_or_var -> variable_assignation .)
    FLOATTYPE       reduce using rule 117 (def_const_or_var -> variable_assignation .)
    DECIMALTYPE     reduce using rule 117 (def_const_or_var -> variable_assignation .)
    INTTYPE         reduce using rule 117 (def_const_or_var -> variable_assignation .)
    BOOLTYPE        reduce using rule 117 (def_const_or_var -> variable_assignation .)
    VARIABLE        reduce using rule 117 (def_const_or_var -> variable_assignation .)
    STATIC          reduce using rule 117 (def_const_or_var -> variable_assignation .)
    WRITE           reduce using rule 117 (def_const_or_var -> variable_assignation .)
    LPARENT         reduce using rule 117 (def_const_or_var -> variable_assignation .)
    ENUM            reduce using rule 117 (def_const_or_var -> variable_assignation .)
    IF              reduce using rule 117 (def_const_or_var -> variable_assignation .)
    STACK           reduce using rule 117 (def_const_or_var -> variable_assignation .)
    QUEUE           reduce using rule 117 (def_const_or_var -> variable_assignation .)
    CONST           reduce using rule 117 (def_const_or_var -> variable_assignation .)
    THREAD          reduce using rule 117 (def_const_or_var -> variable_assignation .)
    PUBLIC          reduce using rule 117 (def_const_or_var -> variable_assignation .)
    PRIVATE         reduce using rule 117 (def_const_or_var -> variable_assignation .)
    TRY             reduce using rule 117 (def_const_or_var -> variable_assignation .)
    LIST            reduce using rule 117 (def_const_or_var -> variable_assignation .)
    FOR             reduce using rule 117 (def_const_or_var -> variable_assignation .)
    FOREACH         reduce using rule 117 (def_const_or_var -> variable_assignation .)
    WHILE           reduce using rule 117 (def_const_or_var -> variable_assignation .)
    DO              reduce using rule 117 (def_const_or_var -> variable_assignation .)
    RKEY            reduce using rule 117 (def_const_or_var -> variable_assignation .)


state 50

    (46) print_data -> PRINT . LPARENT STRING RPARENT DOTANDCOMMA
    (47) print_data -> PRINT . LPARENT VARIABLE RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 115


state 51

    (57) array_assignation -> CHARTYPE . LBRACKET RBRACKET char_array_assignation DOTANDCOMMA

    LBRACKET        shift and go to state 116


state 52

    (59) array_assignation -> FLOATTYPE . LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
    (145) assignation_type_value_multiple -> FLOATTYPE . assignation_float_multiple
    (152) assignation_float_multiple -> . assignation_float
    (153) assignation_float_multiple -> . assignation_float COMMA assignation_float_multiple
    (134) assignation_float -> . VARIABLE ASSIGNATION FLOAT_NUMBER
    (135) assignation_float -> . VARIABLE ASSIGNATION VARIABLE
    (136) assignation_float -> . VARIABLE ASSIGNATION arithmetic_operation

    LBRACKET        shift and go to state 117
    VARIABLE        shift and go to state 120

    assignation_float_multiple     shift and go to state 118
    assignation_float              shift and go to state 119

state 53

    (60) array_assignation -> DECIMALTYPE . LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA

    LBRACKET        shift and go to state 121


state 54

    (61) array_assignation -> INTTYPE . LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
    (143) assignation_type_value_multiple -> INTTYPE . assignation_int_multiple
    (148) assignation_int_multiple -> . assignation_int
    (149) assignation_int_multiple -> . assignation_int COMMA assignation_int_multiple
    (129) assignation_int -> . VARIABLE ASSIGNATION INTEGER
    (130) assignation_int -> . VARIABLE ASSIGNATION VARIABLE
    (131) assignation_int -> . VARIABLE ASSIGNATION arithmetic_operation

    LBRACKET        shift and go to state 122
    VARIABLE        shift and go to state 125

    assignation_int_multiple       shift and go to state 123
    assignation_int                shift and go to state 124

state 55

    (62) array_assignation -> BOOLTYPE . LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
    (146) assignation_type_value_multiple -> BOOLTYPE . assignation_true_multiple
    (147) assignation_type_value_multiple -> BOOLTYPE . assignation_false_multiple
    (154) assignation_true_multiple -> . assignation_true
    (155) assignation_true_multiple -> . assignation_true COMMA assignation_true_multiple
    (156) assignation_false_multiple -> . assignation_false
    (157) assignation_false_multiple -> . assignation_false COMMA assignation_false_multiple
    (137) assignation_true -> . VARIABLE ASSIGNATION BOOLTRUE
    (138) assignation_true -> . VARIABLE ASSIGNATION VARIABLE
    (139) assignation_true -> . VARIABLE ASSIGNATION boolean_operation
    (140) assignation_false -> . VARIABLE ASSIGNATION BOOLFALSE
    (141) assignation_false -> . VARIABLE ASSIGNATION VARIABLE
    (142) assignation_false -> . VARIABLE ASSIGNATION boolean_operation

    LBRACKET        shift and go to state 126
    VARIABLE        shift and go to state 131

    assignation_true_multiple      shift and go to state 127
    assignation_false_multiple     shift and go to state 128
    assignation_true               shift and go to state 129
    assignation_false              shift and go to state 130

state 56

    (169) thread_main -> declaration_thread . declaration_thread thread_init thread_init thread_wait thread_wait
    (170) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (171) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA

    THREAD          shift and go to state 87

    declaration_thread             shift and go to state 132

state 57

    (175) concurrent_method -> WRITE .

    PRINT           reduce using rule 175 (concurrent_method -> WRITE .)
    CHARTYPE        reduce using rule 175 (concurrent_method -> WRITE .)
    STRINGTYPE      reduce using rule 175 (concurrent_method -> WRITE .)
    FLOATTYPE       reduce using rule 175 (concurrent_method -> WRITE .)
    DECIMALTYPE     reduce using rule 175 (concurrent_method -> WRITE .)
    INTTYPE         reduce using rule 175 (concurrent_method -> WRITE .)
    BOOLTYPE        reduce using rule 175 (concurrent_method -> WRITE .)
    VARIABLE        reduce using rule 175 (concurrent_method -> WRITE .)
    STATIC          reduce using rule 175 (concurrent_method -> WRITE .)
    WRITE           reduce using rule 175 (concurrent_method -> WRITE .)
    LPARENT         reduce using rule 175 (concurrent_method -> WRITE .)
    ENUM            reduce using rule 175 (concurrent_method -> WRITE .)
    IF              reduce using rule 175 (concurrent_method -> WRITE .)
    STACK           reduce using rule 175 (concurrent_method -> WRITE .)
    QUEUE           reduce using rule 175 (concurrent_method -> WRITE .)
    CONST           reduce using rule 175 (concurrent_method -> WRITE .)
    THREAD          reduce using rule 175 (concurrent_method -> WRITE .)
    PUBLIC          reduce using rule 175 (concurrent_method -> WRITE .)
    PRIVATE         reduce using rule 175 (concurrent_method -> WRITE .)
    TRY             reduce using rule 175 (concurrent_method -> WRITE .)
    LIST            reduce using rule 175 (concurrent_method -> WRITE .)
    FOR             reduce using rule 175 (concurrent_method -> WRITE .)
    FOREACH         reduce using rule 175 (concurrent_method -> WRITE .)
    WHILE           reduce using rule 175 (concurrent_method -> WRITE .)
    DO              reduce using rule 175 (concurrent_method -> WRITE .)
    RKEY            reduce using rule 175 (concurrent_method -> WRITE .)
    RPARENT         reduce using rule 175 (concurrent_method -> WRITE .)


state 58

    (158) method_definition -> access_modifiers . STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (159) method_definition -> access_modifiers . STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY
    (162) method_definition -> access_modifiers . STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (163) method_definition -> access_modifiers . STATIC VOID METHOD LPARENT RPARENT LKEY RKEY
    (118) constant_assignation -> access_modifiers . CONST assignation_type_value_multiple DOTANDCOMMA
    (120) variable_assignation -> access_modifiers . assignation_type_value_multiple DOTANDCOMMA
    (143) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (144) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (145) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (146) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (147) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    STATIC          shift and go to state 133
    CONST           shift and go to state 134
    INTTYPE         shift and go to state 136
    STRINGTYPE      shift and go to state 137
    FLOATTYPE       shift and go to state 138
    BOOLTYPE        shift and go to state 139

    assignation_type_value_multiple shift and go to state 135

state 59

    (188) block_try_catch -> try_catch_simply .

    PRINT           reduce using rule 188 (block_try_catch -> try_catch_simply .)
    CHARTYPE        reduce using rule 188 (block_try_catch -> try_catch_simply .)
    STRINGTYPE      reduce using rule 188 (block_try_catch -> try_catch_simply .)
    FLOATTYPE       reduce using rule 188 (block_try_catch -> try_catch_simply .)
    DECIMALTYPE     reduce using rule 188 (block_try_catch -> try_catch_simply .)
    INTTYPE         reduce using rule 188 (block_try_catch -> try_catch_simply .)
    BOOLTYPE        reduce using rule 188 (block_try_catch -> try_catch_simply .)
    VARIABLE        reduce using rule 188 (block_try_catch -> try_catch_simply .)
    STATIC          reduce using rule 188 (block_try_catch -> try_catch_simply .)
    WRITE           reduce using rule 188 (block_try_catch -> try_catch_simply .)
    LPARENT         reduce using rule 188 (block_try_catch -> try_catch_simply .)
    ENUM            reduce using rule 188 (block_try_catch -> try_catch_simply .)
    IF              reduce using rule 188 (block_try_catch -> try_catch_simply .)
    STACK           reduce using rule 188 (block_try_catch -> try_catch_simply .)
    QUEUE           reduce using rule 188 (block_try_catch -> try_catch_simply .)
    CONST           reduce using rule 188 (block_try_catch -> try_catch_simply .)
    THREAD          reduce using rule 188 (block_try_catch -> try_catch_simply .)
    PUBLIC          reduce using rule 188 (block_try_catch -> try_catch_simply .)
    PRIVATE         reduce using rule 188 (block_try_catch -> try_catch_simply .)
    TRY             reduce using rule 188 (block_try_catch -> try_catch_simply .)
    LIST            reduce using rule 188 (block_try_catch -> try_catch_simply .)
    FOR             reduce using rule 188 (block_try_catch -> try_catch_simply .)
    FOREACH         reduce using rule 188 (block_try_catch -> try_catch_simply .)
    WHILE           reduce using rule 188 (block_try_catch -> try_catch_simply .)
    DO              reduce using rule 188 (block_try_catch -> try_catch_simply .)
    RKEY            reduce using rule 188 (block_try_catch -> try_catch_simply .)


state 60

    (189) block_try_catch -> try_catch_finally .

    PRINT           reduce using rule 189 (block_try_catch -> try_catch_finally .)
    CHARTYPE        reduce using rule 189 (block_try_catch -> try_catch_finally .)
    STRINGTYPE      reduce using rule 189 (block_try_catch -> try_catch_finally .)
    FLOATTYPE       reduce using rule 189 (block_try_catch -> try_catch_finally .)
    DECIMALTYPE     reduce using rule 189 (block_try_catch -> try_catch_finally .)
    INTTYPE         reduce using rule 189 (block_try_catch -> try_catch_finally .)
    BOOLTYPE        reduce using rule 189 (block_try_catch -> try_catch_finally .)
    VARIABLE        reduce using rule 189 (block_try_catch -> try_catch_finally .)
    STATIC          reduce using rule 189 (block_try_catch -> try_catch_finally .)
    WRITE           reduce using rule 189 (block_try_catch -> try_catch_finally .)
    LPARENT         reduce using rule 189 (block_try_catch -> try_catch_finally .)
    ENUM            reduce using rule 189 (block_try_catch -> try_catch_finally .)
    IF              reduce using rule 189 (block_try_catch -> try_catch_finally .)
    STACK           reduce using rule 189 (block_try_catch -> try_catch_finally .)
    QUEUE           reduce using rule 189 (block_try_catch -> try_catch_finally .)
    CONST           reduce using rule 189 (block_try_catch -> try_catch_finally .)
    THREAD          reduce using rule 189 (block_try_catch -> try_catch_finally .)
    PUBLIC          reduce using rule 189 (block_try_catch -> try_catch_finally .)
    PRIVATE         reduce using rule 189 (block_try_catch -> try_catch_finally .)
    TRY             reduce using rule 189 (block_try_catch -> try_catch_finally .)
    LIST            reduce using rule 189 (block_try_catch -> try_catch_finally .)
    FOR             reduce using rule 189 (block_try_catch -> try_catch_finally .)
    FOREACH         reduce using rule 189 (block_try_catch -> try_catch_finally .)
    WHILE           reduce using rule 189 (block_try_catch -> try_catch_finally .)
    DO              reduce using rule 189 (block_try_catch -> try_catch_finally .)
    RKEY            reduce using rule 189 (block_try_catch -> try_catch_finally .)


state 61

    (211) lists -> list_empty .

    PRINT           reduce using rule 211 (lists -> list_empty .)
    CHARTYPE        reduce using rule 211 (lists -> list_empty .)
    STRINGTYPE      reduce using rule 211 (lists -> list_empty .)
    FLOATTYPE       reduce using rule 211 (lists -> list_empty .)
    DECIMALTYPE     reduce using rule 211 (lists -> list_empty .)
    INTTYPE         reduce using rule 211 (lists -> list_empty .)
    BOOLTYPE        reduce using rule 211 (lists -> list_empty .)
    VARIABLE        reduce using rule 211 (lists -> list_empty .)
    STATIC          reduce using rule 211 (lists -> list_empty .)
    WRITE           reduce using rule 211 (lists -> list_empty .)
    LPARENT         reduce using rule 211 (lists -> list_empty .)
    ENUM            reduce using rule 211 (lists -> list_empty .)
    IF              reduce using rule 211 (lists -> list_empty .)
    STACK           reduce using rule 211 (lists -> list_empty .)
    QUEUE           reduce using rule 211 (lists -> list_empty .)
    CONST           reduce using rule 211 (lists -> list_empty .)
    THREAD          reduce using rule 211 (lists -> list_empty .)
    PUBLIC          reduce using rule 211 (lists -> list_empty .)
    PRIVATE         reduce using rule 211 (lists -> list_empty .)
    TRY             reduce using rule 211 (lists -> list_empty .)
    LIST            reduce using rule 211 (lists -> list_empty .)
    FOR             reduce using rule 211 (lists -> list_empty .)
    FOREACH         reduce using rule 211 (lists -> list_empty .)
    WHILE           reduce using rule 211 (lists -> list_empty .)
    DO              reduce using rule 211 (lists -> list_empty .)
    RKEY            reduce using rule 211 (lists -> list_empty .)


state 62

    (212) lists -> list_full .

    PRINT           reduce using rule 212 (lists -> list_full .)
    CHARTYPE        reduce using rule 212 (lists -> list_full .)
    STRINGTYPE      reduce using rule 212 (lists -> list_full .)
    FLOATTYPE       reduce using rule 212 (lists -> list_full .)
    DECIMALTYPE     reduce using rule 212 (lists -> list_full .)
    INTTYPE         reduce using rule 212 (lists -> list_full .)
    BOOLTYPE        reduce using rule 212 (lists -> list_full .)
    VARIABLE        reduce using rule 212 (lists -> list_full .)
    STATIC          reduce using rule 212 (lists -> list_full .)
    WRITE           reduce using rule 212 (lists -> list_full .)
    LPARENT         reduce using rule 212 (lists -> list_full .)
    ENUM            reduce using rule 212 (lists -> list_full .)
    IF              reduce using rule 212 (lists -> list_full .)
    STACK           reduce using rule 212 (lists -> list_full .)
    QUEUE           reduce using rule 212 (lists -> list_full .)
    CONST           reduce using rule 212 (lists -> list_full .)
    THREAD          reduce using rule 212 (lists -> list_full .)
    PUBLIC          reduce using rule 212 (lists -> list_full .)
    PRIVATE         reduce using rule 212 (lists -> list_full .)
    TRY             reduce using rule 212 (lists -> list_full .)
    LIST            reduce using rule 212 (lists -> list_full .)
    FOR             reduce using rule 212 (lists -> list_full .)
    FOREACH         reduce using rule 212 (lists -> list_full .)
    WHILE           reduce using rule 212 (lists -> list_full .)
    DO              reduce using rule 212 (lists -> list_full .)
    RKEY            reduce using rule 212 (lists -> list_full .)


state 63

    (221) functions_list -> list_func_clear .

    PRINT           reduce using rule 221 (functions_list -> list_func_clear .)
    CHARTYPE        reduce using rule 221 (functions_list -> list_func_clear .)
    STRINGTYPE      reduce using rule 221 (functions_list -> list_func_clear .)
    FLOATTYPE       reduce using rule 221 (functions_list -> list_func_clear .)
    DECIMALTYPE     reduce using rule 221 (functions_list -> list_func_clear .)
    INTTYPE         reduce using rule 221 (functions_list -> list_func_clear .)
    BOOLTYPE        reduce using rule 221 (functions_list -> list_func_clear .)
    VARIABLE        reduce using rule 221 (functions_list -> list_func_clear .)
    STATIC          reduce using rule 221 (functions_list -> list_func_clear .)
    WRITE           reduce using rule 221 (functions_list -> list_func_clear .)
    LPARENT         reduce using rule 221 (functions_list -> list_func_clear .)
    ENUM            reduce using rule 221 (functions_list -> list_func_clear .)
    IF              reduce using rule 221 (functions_list -> list_func_clear .)
    STACK           reduce using rule 221 (functions_list -> list_func_clear .)
    QUEUE           reduce using rule 221 (functions_list -> list_func_clear .)
    CONST           reduce using rule 221 (functions_list -> list_func_clear .)
    THREAD          reduce using rule 221 (functions_list -> list_func_clear .)
    PUBLIC          reduce using rule 221 (functions_list -> list_func_clear .)
    PRIVATE         reduce using rule 221 (functions_list -> list_func_clear .)
    TRY             reduce using rule 221 (functions_list -> list_func_clear .)
    LIST            reduce using rule 221 (functions_list -> list_func_clear .)
    FOR             reduce using rule 221 (functions_list -> list_func_clear .)
    FOREACH         reduce using rule 221 (functions_list -> list_func_clear .)
    WHILE           reduce using rule 221 (functions_list -> list_func_clear .)
    DO              reduce using rule 221 (functions_list -> list_func_clear .)
    RKEY            reduce using rule 221 (functions_list -> list_func_clear .)


state 64

    (222) functions_list -> list_func_count .

    PRINT           reduce using rule 222 (functions_list -> list_func_count .)
    CHARTYPE        reduce using rule 222 (functions_list -> list_func_count .)
    STRINGTYPE      reduce using rule 222 (functions_list -> list_func_count .)
    FLOATTYPE       reduce using rule 222 (functions_list -> list_func_count .)
    DECIMALTYPE     reduce using rule 222 (functions_list -> list_func_count .)
    INTTYPE         reduce using rule 222 (functions_list -> list_func_count .)
    BOOLTYPE        reduce using rule 222 (functions_list -> list_func_count .)
    VARIABLE        reduce using rule 222 (functions_list -> list_func_count .)
    STATIC          reduce using rule 222 (functions_list -> list_func_count .)
    WRITE           reduce using rule 222 (functions_list -> list_func_count .)
    LPARENT         reduce using rule 222 (functions_list -> list_func_count .)
    ENUM            reduce using rule 222 (functions_list -> list_func_count .)
    IF              reduce using rule 222 (functions_list -> list_func_count .)
    STACK           reduce using rule 222 (functions_list -> list_func_count .)
    QUEUE           reduce using rule 222 (functions_list -> list_func_count .)
    CONST           reduce using rule 222 (functions_list -> list_func_count .)
    THREAD          reduce using rule 222 (functions_list -> list_func_count .)
    PUBLIC          reduce using rule 222 (functions_list -> list_func_count .)
    PRIVATE         reduce using rule 222 (functions_list -> list_func_count .)
    TRY             reduce using rule 222 (functions_list -> list_func_count .)
    LIST            reduce using rule 222 (functions_list -> list_func_count .)
    FOR             reduce using rule 222 (functions_list -> list_func_count .)
    FOREACH         reduce using rule 222 (functions_list -> list_func_count .)
    WHILE           reduce using rule 222 (functions_list -> list_func_count .)
    DO              reduce using rule 222 (functions_list -> list_func_count .)
    RKEY            reduce using rule 222 (functions_list -> list_func_count .)


state 65

    (223) functions_list -> list_func_add .

    PRINT           reduce using rule 223 (functions_list -> list_func_add .)
    CHARTYPE        reduce using rule 223 (functions_list -> list_func_add .)
    STRINGTYPE      reduce using rule 223 (functions_list -> list_func_add .)
    FLOATTYPE       reduce using rule 223 (functions_list -> list_func_add .)
    DECIMALTYPE     reduce using rule 223 (functions_list -> list_func_add .)
    INTTYPE         reduce using rule 223 (functions_list -> list_func_add .)
    BOOLTYPE        reduce using rule 223 (functions_list -> list_func_add .)
    VARIABLE        reduce using rule 223 (functions_list -> list_func_add .)
    STATIC          reduce using rule 223 (functions_list -> list_func_add .)
    WRITE           reduce using rule 223 (functions_list -> list_func_add .)
    LPARENT         reduce using rule 223 (functions_list -> list_func_add .)
    ENUM            reduce using rule 223 (functions_list -> list_func_add .)
    IF              reduce using rule 223 (functions_list -> list_func_add .)
    STACK           reduce using rule 223 (functions_list -> list_func_add .)
    QUEUE           reduce using rule 223 (functions_list -> list_func_add .)
    CONST           reduce using rule 223 (functions_list -> list_func_add .)
    THREAD          reduce using rule 223 (functions_list -> list_func_add .)
    PUBLIC          reduce using rule 223 (functions_list -> list_func_add .)
    PRIVATE         reduce using rule 223 (functions_list -> list_func_add .)
    TRY             reduce using rule 223 (functions_list -> list_func_add .)
    LIST            reduce using rule 223 (functions_list -> list_func_add .)
    FOR             reduce using rule 223 (functions_list -> list_func_add .)
    FOREACH         reduce using rule 223 (functions_list -> list_func_add .)
    WHILE           reduce using rule 223 (functions_list -> list_func_add .)
    DO              reduce using rule 223 (functions_list -> list_func_add .)
    RKEY            reduce using rule 223 (functions_list -> list_func_add .)


state 66

    (224) functions_list -> list_func_removeat .

    PRINT           reduce using rule 224 (functions_list -> list_func_removeat .)
    CHARTYPE        reduce using rule 224 (functions_list -> list_func_removeat .)
    STRINGTYPE      reduce using rule 224 (functions_list -> list_func_removeat .)
    FLOATTYPE       reduce using rule 224 (functions_list -> list_func_removeat .)
    DECIMALTYPE     reduce using rule 224 (functions_list -> list_func_removeat .)
    INTTYPE         reduce using rule 224 (functions_list -> list_func_removeat .)
    BOOLTYPE        reduce using rule 224 (functions_list -> list_func_removeat .)
    VARIABLE        reduce using rule 224 (functions_list -> list_func_removeat .)
    STATIC          reduce using rule 224 (functions_list -> list_func_removeat .)
    WRITE           reduce using rule 224 (functions_list -> list_func_removeat .)
    LPARENT         reduce using rule 224 (functions_list -> list_func_removeat .)
    ENUM            reduce using rule 224 (functions_list -> list_func_removeat .)
    IF              reduce using rule 224 (functions_list -> list_func_removeat .)
    STACK           reduce using rule 224 (functions_list -> list_func_removeat .)
    QUEUE           reduce using rule 224 (functions_list -> list_func_removeat .)
    CONST           reduce using rule 224 (functions_list -> list_func_removeat .)
    THREAD          reduce using rule 224 (functions_list -> list_func_removeat .)
    PUBLIC          reduce using rule 224 (functions_list -> list_func_removeat .)
    PRIVATE         reduce using rule 224 (functions_list -> list_func_removeat .)
    TRY             reduce using rule 224 (functions_list -> list_func_removeat .)
    LIST            reduce using rule 224 (functions_list -> list_func_removeat .)
    FOR             reduce using rule 224 (functions_list -> list_func_removeat .)
    FOREACH         reduce using rule 224 (functions_list -> list_func_removeat .)
    WHILE           reduce using rule 224 (functions_list -> list_func_removeat .)
    DO              reduce using rule 224 (functions_list -> list_func_removeat .)
    RKEY            reduce using rule 224 (functions_list -> list_func_removeat .)


state 67

    (185) enums -> ENUM . METHOD LKEY list_enums RKEY

    METHOD          shift and go to state 140


state 68

    (198) normal_if -> IF . LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (199) normal_if -> IF . LPARENT boolean_operation RPARENT LKEY block_if RKEY

    LPARENT         shift and go to state 141


state 69

    (206) block_for -> for_simple .

    PRINT           reduce using rule 206 (block_for -> for_simple .)
    CHARTYPE        reduce using rule 206 (block_for -> for_simple .)
    STRINGTYPE      reduce using rule 206 (block_for -> for_simple .)
    FLOATTYPE       reduce using rule 206 (block_for -> for_simple .)
    DECIMALTYPE     reduce using rule 206 (block_for -> for_simple .)
    INTTYPE         reduce using rule 206 (block_for -> for_simple .)
    BOOLTYPE        reduce using rule 206 (block_for -> for_simple .)
    VARIABLE        reduce using rule 206 (block_for -> for_simple .)
    STATIC          reduce using rule 206 (block_for -> for_simple .)
    WRITE           reduce using rule 206 (block_for -> for_simple .)
    LPARENT         reduce using rule 206 (block_for -> for_simple .)
    ENUM            reduce using rule 206 (block_for -> for_simple .)
    IF              reduce using rule 206 (block_for -> for_simple .)
    STACK           reduce using rule 206 (block_for -> for_simple .)
    QUEUE           reduce using rule 206 (block_for -> for_simple .)
    CONST           reduce using rule 206 (block_for -> for_simple .)
    THREAD          reduce using rule 206 (block_for -> for_simple .)
    PUBLIC          reduce using rule 206 (block_for -> for_simple .)
    PRIVATE         reduce using rule 206 (block_for -> for_simple .)
    TRY             reduce using rule 206 (block_for -> for_simple .)
    LIST            reduce using rule 206 (block_for -> for_simple .)
    FOR             reduce using rule 206 (block_for -> for_simple .)
    FOREACH         reduce using rule 206 (block_for -> for_simple .)
    WHILE           reduce using rule 206 (block_for -> for_simple .)
    DO              reduce using rule 206 (block_for -> for_simple .)
    RKEY            reduce using rule 206 (block_for -> for_simple .)


state 70

    (207) block_for -> for_each .

    PRINT           reduce using rule 207 (block_for -> for_each .)
    CHARTYPE        reduce using rule 207 (block_for -> for_each .)
    STRINGTYPE      reduce using rule 207 (block_for -> for_each .)
    FLOATTYPE       reduce using rule 207 (block_for -> for_each .)
    DECIMALTYPE     reduce using rule 207 (block_for -> for_each .)
    INTTYPE         reduce using rule 207 (block_for -> for_each .)
    BOOLTYPE        reduce using rule 207 (block_for -> for_each .)
    VARIABLE        reduce using rule 207 (block_for -> for_each .)
    STATIC          reduce using rule 207 (block_for -> for_each .)
    WRITE           reduce using rule 207 (block_for -> for_each .)
    LPARENT         reduce using rule 207 (block_for -> for_each .)
    ENUM            reduce using rule 207 (block_for -> for_each .)
    IF              reduce using rule 207 (block_for -> for_each .)
    STACK           reduce using rule 207 (block_for -> for_each .)
    QUEUE           reduce using rule 207 (block_for -> for_each .)
    CONST           reduce using rule 207 (block_for -> for_each .)
    THREAD          reduce using rule 207 (block_for -> for_each .)
    PUBLIC          reduce using rule 207 (block_for -> for_each .)
    PRIVATE         reduce using rule 207 (block_for -> for_each .)
    TRY             reduce using rule 207 (block_for -> for_each .)
    LIST            reduce using rule 207 (block_for -> for_each .)
    FOR             reduce using rule 207 (block_for -> for_each .)
    FOREACH         reduce using rule 207 (block_for -> for_each .)
    WHILE           reduce using rule 207 (block_for -> for_each .)
    DO              reduce using rule 207 (block_for -> for_each .)
    RKEY            reduce using rule 207 (block_for -> for_each .)


state 71

    (202) block_while -> normal_while .

    PRINT           reduce using rule 202 (block_while -> normal_while .)
    CHARTYPE        reduce using rule 202 (block_while -> normal_while .)
    STRINGTYPE      reduce using rule 202 (block_while -> normal_while .)
    FLOATTYPE       reduce using rule 202 (block_while -> normal_while .)
    DECIMALTYPE     reduce using rule 202 (block_while -> normal_while .)
    INTTYPE         reduce using rule 202 (block_while -> normal_while .)
    BOOLTYPE        reduce using rule 202 (block_while -> normal_while .)
    VARIABLE        reduce using rule 202 (block_while -> normal_while .)
    STATIC          reduce using rule 202 (block_while -> normal_while .)
    WRITE           reduce using rule 202 (block_while -> normal_while .)
    LPARENT         reduce using rule 202 (block_while -> normal_while .)
    ENUM            reduce using rule 202 (block_while -> normal_while .)
    IF              reduce using rule 202 (block_while -> normal_while .)
    STACK           reduce using rule 202 (block_while -> normal_while .)
    QUEUE           reduce using rule 202 (block_while -> normal_while .)
    CONST           reduce using rule 202 (block_while -> normal_while .)
    THREAD          reduce using rule 202 (block_while -> normal_while .)
    PUBLIC          reduce using rule 202 (block_while -> normal_while .)
    PRIVATE         reduce using rule 202 (block_while -> normal_while .)
    TRY             reduce using rule 202 (block_while -> normal_while .)
    LIST            reduce using rule 202 (block_while -> normal_while .)
    FOR             reduce using rule 202 (block_while -> normal_while .)
    FOREACH         reduce using rule 202 (block_while -> normal_while .)
    WHILE           reduce using rule 202 (block_while -> normal_while .)
    DO              reduce using rule 202 (block_while -> normal_while .)
    RKEY            reduce using rule 202 (block_while -> normal_while .)


state 72

    (203) block_while -> do_while .

    PRINT           reduce using rule 203 (block_while -> do_while .)
    CHARTYPE        reduce using rule 203 (block_while -> do_while .)
    STRINGTYPE      reduce using rule 203 (block_while -> do_while .)
    FLOATTYPE       reduce using rule 203 (block_while -> do_while .)
    DECIMALTYPE     reduce using rule 203 (block_while -> do_while .)
    INTTYPE         reduce using rule 203 (block_while -> do_while .)
    BOOLTYPE        reduce using rule 203 (block_while -> do_while .)
    VARIABLE        reduce using rule 203 (block_while -> do_while .)
    STATIC          reduce using rule 203 (block_while -> do_while .)
    WRITE           reduce using rule 203 (block_while -> do_while .)
    LPARENT         reduce using rule 203 (block_while -> do_while .)
    ENUM            reduce using rule 203 (block_while -> do_while .)
    IF              reduce using rule 203 (block_while -> do_while .)
    STACK           reduce using rule 203 (block_while -> do_while .)
    QUEUE           reduce using rule 203 (block_while -> do_while .)
    CONST           reduce using rule 203 (block_while -> do_while .)
    THREAD          reduce using rule 203 (block_while -> do_while .)
    PUBLIC          reduce using rule 203 (block_while -> do_while .)
    PRIVATE         reduce using rule 203 (block_while -> do_while .)
    TRY             reduce using rule 203 (block_while -> do_while .)
    LIST            reduce using rule 203 (block_while -> do_while .)
    FOR             reduce using rule 203 (block_while -> do_while .)
    FOREACH         reduce using rule 203 (block_while -> do_while .)
    WHILE           reduce using rule 203 (block_while -> do_while .)
    DO              reduce using rule 203 (block_while -> do_while .)
    RKEY            reduce using rule 203 (block_while -> do_while .)


state 73

    (231) stack_struct -> STACK . VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA

    VARIABLE        shift and go to state 142


state 74

    (232) functions_stack -> stack_push .

    PRINT           reduce using rule 232 (functions_stack -> stack_push .)
    CHARTYPE        reduce using rule 232 (functions_stack -> stack_push .)
    STRINGTYPE      reduce using rule 232 (functions_stack -> stack_push .)
    FLOATTYPE       reduce using rule 232 (functions_stack -> stack_push .)
    DECIMALTYPE     reduce using rule 232 (functions_stack -> stack_push .)
    INTTYPE         reduce using rule 232 (functions_stack -> stack_push .)
    BOOLTYPE        reduce using rule 232 (functions_stack -> stack_push .)
    VARIABLE        reduce using rule 232 (functions_stack -> stack_push .)
    STATIC          reduce using rule 232 (functions_stack -> stack_push .)
    WRITE           reduce using rule 232 (functions_stack -> stack_push .)
    LPARENT         reduce using rule 232 (functions_stack -> stack_push .)
    ENUM            reduce using rule 232 (functions_stack -> stack_push .)
    IF              reduce using rule 232 (functions_stack -> stack_push .)
    STACK           reduce using rule 232 (functions_stack -> stack_push .)
    QUEUE           reduce using rule 232 (functions_stack -> stack_push .)
    CONST           reduce using rule 232 (functions_stack -> stack_push .)
    THREAD          reduce using rule 232 (functions_stack -> stack_push .)
    PUBLIC          reduce using rule 232 (functions_stack -> stack_push .)
    PRIVATE         reduce using rule 232 (functions_stack -> stack_push .)
    TRY             reduce using rule 232 (functions_stack -> stack_push .)
    LIST            reduce using rule 232 (functions_stack -> stack_push .)
    FOR             reduce using rule 232 (functions_stack -> stack_push .)
    FOREACH         reduce using rule 232 (functions_stack -> stack_push .)
    WHILE           reduce using rule 232 (functions_stack -> stack_push .)
    DO              reduce using rule 232 (functions_stack -> stack_push .)
    RKEY            reduce using rule 232 (functions_stack -> stack_push .)


state 75

    (233) functions_stack -> stack_pop .

    PRINT           reduce using rule 233 (functions_stack -> stack_pop .)
    CHARTYPE        reduce using rule 233 (functions_stack -> stack_pop .)
    STRINGTYPE      reduce using rule 233 (functions_stack -> stack_pop .)
    FLOATTYPE       reduce using rule 233 (functions_stack -> stack_pop .)
    DECIMALTYPE     reduce using rule 233 (functions_stack -> stack_pop .)
    INTTYPE         reduce using rule 233 (functions_stack -> stack_pop .)
    BOOLTYPE        reduce using rule 233 (functions_stack -> stack_pop .)
    VARIABLE        reduce using rule 233 (functions_stack -> stack_pop .)
    STATIC          reduce using rule 233 (functions_stack -> stack_pop .)
    WRITE           reduce using rule 233 (functions_stack -> stack_pop .)
    LPARENT         reduce using rule 233 (functions_stack -> stack_pop .)
    ENUM            reduce using rule 233 (functions_stack -> stack_pop .)
    IF              reduce using rule 233 (functions_stack -> stack_pop .)
    STACK           reduce using rule 233 (functions_stack -> stack_pop .)
    QUEUE           reduce using rule 233 (functions_stack -> stack_pop .)
    CONST           reduce using rule 233 (functions_stack -> stack_pop .)
    THREAD          reduce using rule 233 (functions_stack -> stack_pop .)
    PUBLIC          reduce using rule 233 (functions_stack -> stack_pop .)
    PRIVATE         reduce using rule 233 (functions_stack -> stack_pop .)
    TRY             reduce using rule 233 (functions_stack -> stack_pop .)
    LIST            reduce using rule 233 (functions_stack -> stack_pop .)
    FOR             reduce using rule 233 (functions_stack -> stack_pop .)
    FOREACH         reduce using rule 233 (functions_stack -> stack_pop .)
    WHILE           reduce using rule 233 (functions_stack -> stack_pop .)
    DO              reduce using rule 233 (functions_stack -> stack_pop .)
    RKEY            reduce using rule 233 (functions_stack -> stack_pop .)


state 76

    (234) functions_stack -> stack_clear .

    PRINT           reduce using rule 234 (functions_stack -> stack_clear .)
    CHARTYPE        reduce using rule 234 (functions_stack -> stack_clear .)
    STRINGTYPE      reduce using rule 234 (functions_stack -> stack_clear .)
    FLOATTYPE       reduce using rule 234 (functions_stack -> stack_clear .)
    DECIMALTYPE     reduce using rule 234 (functions_stack -> stack_clear .)
    INTTYPE         reduce using rule 234 (functions_stack -> stack_clear .)
    BOOLTYPE        reduce using rule 234 (functions_stack -> stack_clear .)
    VARIABLE        reduce using rule 234 (functions_stack -> stack_clear .)
    STATIC          reduce using rule 234 (functions_stack -> stack_clear .)
    WRITE           reduce using rule 234 (functions_stack -> stack_clear .)
    LPARENT         reduce using rule 234 (functions_stack -> stack_clear .)
    ENUM            reduce using rule 234 (functions_stack -> stack_clear .)
    IF              reduce using rule 234 (functions_stack -> stack_clear .)
    STACK           reduce using rule 234 (functions_stack -> stack_clear .)
    QUEUE           reduce using rule 234 (functions_stack -> stack_clear .)
    CONST           reduce using rule 234 (functions_stack -> stack_clear .)
    THREAD          reduce using rule 234 (functions_stack -> stack_clear .)
    PUBLIC          reduce using rule 234 (functions_stack -> stack_clear .)
    PRIVATE         reduce using rule 234 (functions_stack -> stack_clear .)
    TRY             reduce using rule 234 (functions_stack -> stack_clear .)
    LIST            reduce using rule 234 (functions_stack -> stack_clear .)
    FOR             reduce using rule 234 (functions_stack -> stack_clear .)
    FOREACH         reduce using rule 234 (functions_stack -> stack_clear .)
    WHILE           reduce using rule 234 (functions_stack -> stack_clear .)
    DO              reduce using rule 234 (functions_stack -> stack_clear .)
    RKEY            reduce using rule 234 (functions_stack -> stack_clear .)


state 77

    (235) functions_stack -> stack_peek .

    PRINT           reduce using rule 235 (functions_stack -> stack_peek .)
    CHARTYPE        reduce using rule 235 (functions_stack -> stack_peek .)
    STRINGTYPE      reduce using rule 235 (functions_stack -> stack_peek .)
    FLOATTYPE       reduce using rule 235 (functions_stack -> stack_peek .)
    DECIMALTYPE     reduce using rule 235 (functions_stack -> stack_peek .)
    INTTYPE         reduce using rule 235 (functions_stack -> stack_peek .)
    BOOLTYPE        reduce using rule 235 (functions_stack -> stack_peek .)
    VARIABLE        reduce using rule 235 (functions_stack -> stack_peek .)
    STATIC          reduce using rule 235 (functions_stack -> stack_peek .)
    WRITE           reduce using rule 235 (functions_stack -> stack_peek .)
    LPARENT         reduce using rule 235 (functions_stack -> stack_peek .)
    ENUM            reduce using rule 235 (functions_stack -> stack_peek .)
    IF              reduce using rule 235 (functions_stack -> stack_peek .)
    STACK           reduce using rule 235 (functions_stack -> stack_peek .)
    QUEUE           reduce using rule 235 (functions_stack -> stack_peek .)
    CONST           reduce using rule 235 (functions_stack -> stack_peek .)
    THREAD          reduce using rule 235 (functions_stack -> stack_peek .)
    PUBLIC          reduce using rule 235 (functions_stack -> stack_peek .)
    PRIVATE         reduce using rule 235 (functions_stack -> stack_peek .)
    TRY             reduce using rule 235 (functions_stack -> stack_peek .)
    LIST            reduce using rule 235 (functions_stack -> stack_peek .)
    FOR             reduce using rule 235 (functions_stack -> stack_peek .)
    FOREACH         reduce using rule 235 (functions_stack -> stack_peek .)
    WHILE           reduce using rule 235 (functions_stack -> stack_peek .)
    DO              reduce using rule 235 (functions_stack -> stack_peek .)
    RKEY            reduce using rule 235 (functions_stack -> stack_peek .)


state 78

    (236) functions_stack -> stack_isEmpty .

    PRINT           reduce using rule 236 (functions_stack -> stack_isEmpty .)
    CHARTYPE        reduce using rule 236 (functions_stack -> stack_isEmpty .)
    STRINGTYPE      reduce using rule 236 (functions_stack -> stack_isEmpty .)
    FLOATTYPE       reduce using rule 236 (functions_stack -> stack_isEmpty .)
    DECIMALTYPE     reduce using rule 236 (functions_stack -> stack_isEmpty .)
    INTTYPE         reduce using rule 236 (functions_stack -> stack_isEmpty .)
    BOOLTYPE        reduce using rule 236 (functions_stack -> stack_isEmpty .)
    VARIABLE        reduce using rule 236 (functions_stack -> stack_isEmpty .)
    STATIC          reduce using rule 236 (functions_stack -> stack_isEmpty .)
    WRITE           reduce using rule 236 (functions_stack -> stack_isEmpty .)
    LPARENT         reduce using rule 236 (functions_stack -> stack_isEmpty .)
    ENUM            reduce using rule 236 (functions_stack -> stack_isEmpty .)
    IF              reduce using rule 236 (functions_stack -> stack_isEmpty .)
    STACK           reduce using rule 236 (functions_stack -> stack_isEmpty .)
    QUEUE           reduce using rule 236 (functions_stack -> stack_isEmpty .)
    CONST           reduce using rule 236 (functions_stack -> stack_isEmpty .)
    THREAD          reduce using rule 236 (functions_stack -> stack_isEmpty .)
    PUBLIC          reduce using rule 236 (functions_stack -> stack_isEmpty .)
    PRIVATE         reduce using rule 236 (functions_stack -> stack_isEmpty .)
    TRY             reduce using rule 236 (functions_stack -> stack_isEmpty .)
    LIST            reduce using rule 236 (functions_stack -> stack_isEmpty .)
    FOR             reduce using rule 236 (functions_stack -> stack_isEmpty .)
    FOREACH         reduce using rule 236 (functions_stack -> stack_isEmpty .)
    WHILE           reduce using rule 236 (functions_stack -> stack_isEmpty .)
    DO              reduce using rule 236 (functions_stack -> stack_isEmpty .)
    RKEY            reduce using rule 236 (functions_stack -> stack_isEmpty .)


state 79

    (242) queue_struct -> QUEUE . SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA

    SMALLER_THAN    shift and go to state 143


state 80

    (243) functions_queue -> queue_enqueue .

    PRINT           reduce using rule 243 (functions_queue -> queue_enqueue .)
    CHARTYPE        reduce using rule 243 (functions_queue -> queue_enqueue .)
    STRINGTYPE      reduce using rule 243 (functions_queue -> queue_enqueue .)
    FLOATTYPE       reduce using rule 243 (functions_queue -> queue_enqueue .)
    DECIMALTYPE     reduce using rule 243 (functions_queue -> queue_enqueue .)
    INTTYPE         reduce using rule 243 (functions_queue -> queue_enqueue .)
    BOOLTYPE        reduce using rule 243 (functions_queue -> queue_enqueue .)
    VARIABLE        reduce using rule 243 (functions_queue -> queue_enqueue .)
    STATIC          reduce using rule 243 (functions_queue -> queue_enqueue .)
    WRITE           reduce using rule 243 (functions_queue -> queue_enqueue .)
    LPARENT         reduce using rule 243 (functions_queue -> queue_enqueue .)
    ENUM            reduce using rule 243 (functions_queue -> queue_enqueue .)
    IF              reduce using rule 243 (functions_queue -> queue_enqueue .)
    STACK           reduce using rule 243 (functions_queue -> queue_enqueue .)
    QUEUE           reduce using rule 243 (functions_queue -> queue_enqueue .)
    CONST           reduce using rule 243 (functions_queue -> queue_enqueue .)
    THREAD          reduce using rule 243 (functions_queue -> queue_enqueue .)
    PUBLIC          reduce using rule 243 (functions_queue -> queue_enqueue .)
    PRIVATE         reduce using rule 243 (functions_queue -> queue_enqueue .)
    TRY             reduce using rule 243 (functions_queue -> queue_enqueue .)
    LIST            reduce using rule 243 (functions_queue -> queue_enqueue .)
    FOR             reduce using rule 243 (functions_queue -> queue_enqueue .)
    FOREACH         reduce using rule 243 (functions_queue -> queue_enqueue .)
    WHILE           reduce using rule 243 (functions_queue -> queue_enqueue .)
    DO              reduce using rule 243 (functions_queue -> queue_enqueue .)
    RKEY            reduce using rule 243 (functions_queue -> queue_enqueue .)


state 81

    (244) functions_queue -> queue_dequeue .

    PRINT           reduce using rule 244 (functions_queue -> queue_dequeue .)
    CHARTYPE        reduce using rule 244 (functions_queue -> queue_dequeue .)
    STRINGTYPE      reduce using rule 244 (functions_queue -> queue_dequeue .)
    FLOATTYPE       reduce using rule 244 (functions_queue -> queue_dequeue .)
    DECIMALTYPE     reduce using rule 244 (functions_queue -> queue_dequeue .)
    INTTYPE         reduce using rule 244 (functions_queue -> queue_dequeue .)
    BOOLTYPE        reduce using rule 244 (functions_queue -> queue_dequeue .)
    VARIABLE        reduce using rule 244 (functions_queue -> queue_dequeue .)
    STATIC          reduce using rule 244 (functions_queue -> queue_dequeue .)
    WRITE           reduce using rule 244 (functions_queue -> queue_dequeue .)
    LPARENT         reduce using rule 244 (functions_queue -> queue_dequeue .)
    ENUM            reduce using rule 244 (functions_queue -> queue_dequeue .)
    IF              reduce using rule 244 (functions_queue -> queue_dequeue .)
    STACK           reduce using rule 244 (functions_queue -> queue_dequeue .)
    QUEUE           reduce using rule 244 (functions_queue -> queue_dequeue .)
    CONST           reduce using rule 244 (functions_queue -> queue_dequeue .)
    THREAD          reduce using rule 244 (functions_queue -> queue_dequeue .)
    PUBLIC          reduce using rule 244 (functions_queue -> queue_dequeue .)
    PRIVATE         reduce using rule 244 (functions_queue -> queue_dequeue .)
    TRY             reduce using rule 244 (functions_queue -> queue_dequeue .)
    LIST            reduce using rule 244 (functions_queue -> queue_dequeue .)
    FOR             reduce using rule 244 (functions_queue -> queue_dequeue .)
    FOREACH         reduce using rule 244 (functions_queue -> queue_dequeue .)
    WHILE           reduce using rule 244 (functions_queue -> queue_dequeue .)
    DO              reduce using rule 244 (functions_queue -> queue_dequeue .)
    RKEY            reduce using rule 244 (functions_queue -> queue_dequeue .)


state 82

    (245) functions_queue -> queue_clear .

    PRINT           reduce using rule 245 (functions_queue -> queue_clear .)
    CHARTYPE        reduce using rule 245 (functions_queue -> queue_clear .)
    STRINGTYPE      reduce using rule 245 (functions_queue -> queue_clear .)
    FLOATTYPE       reduce using rule 245 (functions_queue -> queue_clear .)
    DECIMALTYPE     reduce using rule 245 (functions_queue -> queue_clear .)
    INTTYPE         reduce using rule 245 (functions_queue -> queue_clear .)
    BOOLTYPE        reduce using rule 245 (functions_queue -> queue_clear .)
    VARIABLE        reduce using rule 245 (functions_queue -> queue_clear .)
    STATIC          reduce using rule 245 (functions_queue -> queue_clear .)
    WRITE           reduce using rule 245 (functions_queue -> queue_clear .)
    LPARENT         reduce using rule 245 (functions_queue -> queue_clear .)
    ENUM            reduce using rule 245 (functions_queue -> queue_clear .)
    IF              reduce using rule 245 (functions_queue -> queue_clear .)
    STACK           reduce using rule 245 (functions_queue -> queue_clear .)
    QUEUE           reduce using rule 245 (functions_queue -> queue_clear .)
    CONST           reduce using rule 245 (functions_queue -> queue_clear .)
    THREAD          reduce using rule 245 (functions_queue -> queue_clear .)
    PUBLIC          reduce using rule 245 (functions_queue -> queue_clear .)
    PRIVATE         reduce using rule 245 (functions_queue -> queue_clear .)
    TRY             reduce using rule 245 (functions_queue -> queue_clear .)
    LIST            reduce using rule 245 (functions_queue -> queue_clear .)
    FOR             reduce using rule 245 (functions_queue -> queue_clear .)
    FOREACH         reduce using rule 245 (functions_queue -> queue_clear .)
    WHILE           reduce using rule 245 (functions_queue -> queue_clear .)
    DO              reduce using rule 245 (functions_queue -> queue_clear .)
    RKEY            reduce using rule 245 (functions_queue -> queue_clear .)


state 83

    (246) functions_queue -> queue_isEmpty .

    PRINT           reduce using rule 246 (functions_queue -> queue_isEmpty .)
    CHARTYPE        reduce using rule 246 (functions_queue -> queue_isEmpty .)
    STRINGTYPE      reduce using rule 246 (functions_queue -> queue_isEmpty .)
    FLOATTYPE       reduce using rule 246 (functions_queue -> queue_isEmpty .)
    DECIMALTYPE     reduce using rule 246 (functions_queue -> queue_isEmpty .)
    INTTYPE         reduce using rule 246 (functions_queue -> queue_isEmpty .)
    BOOLTYPE        reduce using rule 246 (functions_queue -> queue_isEmpty .)
    VARIABLE        reduce using rule 246 (functions_queue -> queue_isEmpty .)
    STATIC          reduce using rule 246 (functions_queue -> queue_isEmpty .)
    WRITE           reduce using rule 246 (functions_queue -> queue_isEmpty .)
    LPARENT         reduce using rule 246 (functions_queue -> queue_isEmpty .)
    ENUM            reduce using rule 246 (functions_queue -> queue_isEmpty .)
    IF              reduce using rule 246 (functions_queue -> queue_isEmpty .)
    STACK           reduce using rule 246 (functions_queue -> queue_isEmpty .)
    QUEUE           reduce using rule 246 (functions_queue -> queue_isEmpty .)
    CONST           reduce using rule 246 (functions_queue -> queue_isEmpty .)
    THREAD          reduce using rule 246 (functions_queue -> queue_isEmpty .)
    PUBLIC          reduce using rule 246 (functions_queue -> queue_isEmpty .)
    PRIVATE         reduce using rule 246 (functions_queue -> queue_isEmpty .)
    TRY             reduce using rule 246 (functions_queue -> queue_isEmpty .)
    LIST            reduce using rule 246 (functions_queue -> queue_isEmpty .)
    FOR             reduce using rule 246 (functions_queue -> queue_isEmpty .)
    FOREACH         reduce using rule 246 (functions_queue -> queue_isEmpty .)
    WHILE           reduce using rule 246 (functions_queue -> queue_isEmpty .)
    DO              reduce using rule 246 (functions_queue -> queue_isEmpty .)
    RKEY            reduce using rule 246 (functions_queue -> queue_isEmpty .)


state 84

    (247) functions_queue -> queue_peek .

    PRINT           reduce using rule 247 (functions_queue -> queue_peek .)
    CHARTYPE        reduce using rule 247 (functions_queue -> queue_peek .)
    STRINGTYPE      reduce using rule 247 (functions_queue -> queue_peek .)
    FLOATTYPE       reduce using rule 247 (functions_queue -> queue_peek .)
    DECIMALTYPE     reduce using rule 247 (functions_queue -> queue_peek .)
    INTTYPE         reduce using rule 247 (functions_queue -> queue_peek .)
    BOOLTYPE        reduce using rule 247 (functions_queue -> queue_peek .)
    VARIABLE        reduce using rule 247 (functions_queue -> queue_peek .)
    STATIC          reduce using rule 247 (functions_queue -> queue_peek .)
    WRITE           reduce using rule 247 (functions_queue -> queue_peek .)
    LPARENT         reduce using rule 247 (functions_queue -> queue_peek .)
    ENUM            reduce using rule 247 (functions_queue -> queue_peek .)
    IF              reduce using rule 247 (functions_queue -> queue_peek .)
    STACK           reduce using rule 247 (functions_queue -> queue_peek .)
    QUEUE           reduce using rule 247 (functions_queue -> queue_peek .)
    CONST           reduce using rule 247 (functions_queue -> queue_peek .)
    THREAD          reduce using rule 247 (functions_queue -> queue_peek .)
    PUBLIC          reduce using rule 247 (functions_queue -> queue_peek .)
    PRIVATE         reduce using rule 247 (functions_queue -> queue_peek .)
    TRY             reduce using rule 247 (functions_queue -> queue_peek .)
    LIST            reduce using rule 247 (functions_queue -> queue_peek .)
    FOR             reduce using rule 247 (functions_queue -> queue_peek .)
    FOREACH         reduce using rule 247 (functions_queue -> queue_peek .)
    WHILE           reduce using rule 247 (functions_queue -> queue_peek .)
    DO              reduce using rule 247 (functions_queue -> queue_peek .)
    RKEY            reduce using rule 247 (functions_queue -> queue_peek .)


state 85

    (119) constant_assignation -> CONST . assignation_type_value_multiple DOTANDCOMMA
    (143) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (144) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (145) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (146) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (147) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    INTTYPE         shift and go to state 136
    STRINGTYPE      shift and go to state 137
    FLOATTYPE       shift and go to state 138
    BOOLTYPE        shift and go to state 139

    assignation_type_value_multiple shift and go to state 144

state 86

    (121) variable_assignation -> assignation_type_value_multiple . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 145


state 87

    (170) declaration_thread -> THREAD . thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (171) declaration_thread -> THREAD . thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (183) thread_identificator -> . VARIABLE

    VARIABLE        shift and go to state 147

    thread_identificator           shift and go to state 146

state 88

    (122) access_modifiers -> PUBLIC .

    STATIC          reduce using rule 122 (access_modifiers -> PUBLIC .)
    CONST           reduce using rule 122 (access_modifiers -> PUBLIC .)
    INTTYPE         reduce using rule 122 (access_modifiers -> PUBLIC .)
    STRINGTYPE      reduce using rule 122 (access_modifiers -> PUBLIC .)
    FLOATTYPE       reduce using rule 122 (access_modifiers -> PUBLIC .)
    BOOLTYPE        reduce using rule 122 (access_modifiers -> PUBLIC .)


state 89

    (123) access_modifiers -> PRIVATE .

    STATIC          reduce using rule 123 (access_modifiers -> PRIVATE .)
    CONST           reduce using rule 123 (access_modifiers -> PRIVATE .)
    INTTYPE         reduce using rule 123 (access_modifiers -> PRIVATE .)
    STRINGTYPE      reduce using rule 123 (access_modifiers -> PRIVATE .)
    FLOATTYPE       reduce using rule 123 (access_modifiers -> PRIVATE .)
    BOOLTYPE        reduce using rule 123 (access_modifiers -> PRIVATE .)


state 90

    (190) try_catch_simply -> TRY . LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (191) try_catch_finally -> TRY . LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    LKEY            shift and go to state 148


state 91

    (213) list_empty -> LIST . SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (214) list_empty -> LIST . SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (215) list_full -> LIST . SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (216) list_full -> LIST . SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    SMALLER_THAN    shift and go to state 149


state 92

    (208) for_simple -> FOR . LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (209) for_simple -> FOR . LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    LPARENT         shift and go to state 150


state 93

    (210) for_each -> FOREACH . LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY

    LPARENT         shift and go to state 151


state 94

    (204) normal_while -> WHILE . LPARENT boolean_operation RPARENT LKEY all_block_code RKEY

    LPARENT         shift and go to state 152


state 95

    (205) do_while -> DO . LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT

    LKEY            shift and go to state 153


state 96

    (174) concurrent_method -> STATIC VOID . thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (161) method_definition -> STATIC VOID . METHOD LPARENT func_parameters RPARENT LKEY RKEY
    (165) method_definition -> STATIC VOID . METHOD LPARENT RPARENT LKEY RKEY
    (183) thread_identificator -> . VARIABLE

    METHOD          shift and go to state 155
    VARIABLE        shift and go to state 147

    thread_identificator           shift and go to state 154

state 97

    (160) method_definition -> STATIC data_type . METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (164) method_definition -> STATIC data_type . METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY

    METHOD          shift and go to state 156


state 98

    (34) data_type -> METHOD .

    METHOD          reduce using rule 34 (data_type -> METHOD .)
    GREATER_THAN    reduce using rule 34 (data_type -> METHOD .)
    VARIABLE        reduce using rule 34 (data_type -> METHOD .)


state 99

    (27) data_type -> CHARTYPE .
    (51) array_type -> CHARTYPE . LBRACKET RBRACKET

    METHOD          reduce using rule 27 (data_type -> CHARTYPE .)
    GREATER_THAN    reduce using rule 27 (data_type -> CHARTYPE .)
    VARIABLE        reduce using rule 27 (data_type -> CHARTYPE .)
    LBRACKET        shift and go to state 157


state 100

    (28) data_type -> STRINGTYPE .
    (52) array_type -> STRINGTYPE . LBRACKET RBRACKET

    METHOD          reduce using rule 28 (data_type -> STRINGTYPE .)
    GREATER_THAN    reduce using rule 28 (data_type -> STRINGTYPE .)
    VARIABLE        reduce using rule 28 (data_type -> STRINGTYPE .)
    LBRACKET        shift and go to state 158


state 101

    (29) data_type -> FLOATTYPE .
    (53) array_type -> FLOATTYPE . LBRACKET RBRACKET

    METHOD          reduce using rule 29 (data_type -> FLOATTYPE .)
    GREATER_THAN    reduce using rule 29 (data_type -> FLOATTYPE .)
    VARIABLE        reduce using rule 29 (data_type -> FLOATTYPE .)
    LBRACKET        shift and go to state 159


state 102

    (30) data_type -> DECIMALTYPE .
    (54) array_type -> DECIMALTYPE . LBRACKET RBRACKET

    METHOD          reduce using rule 30 (data_type -> DECIMALTYPE .)
    GREATER_THAN    reduce using rule 30 (data_type -> DECIMALTYPE .)
    VARIABLE        reduce using rule 30 (data_type -> DECIMALTYPE .)
    LBRACKET        shift and go to state 160


state 103

    (31) data_type -> INTTYPE .
    (55) array_type -> INTTYPE . LBRACKET RBRACKET

    METHOD          reduce using rule 31 (data_type -> INTTYPE .)
    GREATER_THAN    reduce using rule 31 (data_type -> INTTYPE .)
    VARIABLE        reduce using rule 31 (data_type -> INTTYPE .)
    LBRACKET        shift and go to state 161


state 104

    (32) data_type -> BOOLTYPE .
    (56) array_type -> BOOLTYPE . LBRACKET RBRACKET

    METHOD          reduce using rule 32 (data_type -> BOOLTYPE .)
    GREATER_THAN    reduce using rule 32 (data_type -> BOOLTYPE .)
    VARIABLE        reduce using rule 32 (data_type -> BOOLTYPE .)
    LBRACKET        shift and go to state 162


state 105

    (33) data_type -> array_type .

    METHOD          reduce using rule 33 (data_type -> array_type .)
    GREATER_THAN    reduce using rule 33 (data_type -> array_type .)
    VARIABLE        reduce using rule 33 (data_type -> array_type .)


state 106

    (184) statement_lambda -> LPARENT VARIABLE . ARROW LKEY all_block_code RKEY RPARENT

    ARROW           shift and go to state 163


state 107

    (58) array_assignation -> STRINGTYPE LBRACKET . RBRACKET string_array_assignation DOTANDCOMMA

    RBRACKET        shift and go to state 164


state 108

    (144) assignation_type_value_multiple -> STRINGTYPE assignation_string_multiple .

    DOTANDCOMMA     reduce using rule 144 (assignation_type_value_multiple -> STRINGTYPE assignation_string_multiple .)


state 109

    (150) assignation_string_multiple -> assignation_string .
    (151) assignation_string_multiple -> assignation_string . COMMA assignation_string_multiple

    DOTANDCOMMA     reduce using rule 150 (assignation_string_multiple -> assignation_string .)
    COMMA           shift and go to state 165


state 110

    (132) assignation_string -> VARIABLE . ASSIGNATION STRING
    (133) assignation_string -> VARIABLE . ASSIGNATION VARIABLE

    ASSIGNATION     shift and go to state 166


state 111

    (88) array_value_assign -> VARIABLE LBRACKET . VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (89) array_value_assign -> VARIABLE LBRACKET . INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (86) array_indexing -> VARIABLE LBRACKET . VARIABLE RBRACKET
    (87) array_indexing -> VARIABLE LBRACKET . INTEGER RBRACKET

    VARIABLE        shift and go to state 167
    INTEGER         shift and go to state 168


state 112

    (225) list_func_clear -> VARIABLE DOT . CLEAR LPARENT RPARENT DOTANDCOMMA
    (226) list_func_count -> VARIABLE DOT . COUNT LPARENT RPARENT DOTANDCOMMA
    (227) list_func_add -> VARIABLE DOT . ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (228) list_func_add -> VARIABLE DOT . ADD LPARENT STRING RPARENT DOTANDCOMMA
    (229) list_func_removeat -> VARIABLE DOT . REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (230) list_func_removeat -> VARIABLE DOT . REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (237) stack_push -> VARIABLE DOT . PUSH LPARENT value RPARENT DOTANDCOMMA
    (238) stack_pop -> VARIABLE DOT . POP LPARENT RPARENT DOTANDCOMMA
    (239) stack_clear -> VARIABLE DOT . CLEAR LPARENT RPARENT DOTANDCOMMA
    (240) stack_peek -> VARIABLE DOT . PEEK LPARENT RPARENT DOTANDCOMMA
    (241) stack_isEmpty -> VARIABLE DOT . ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (248) queue_enqueue -> VARIABLE DOT . ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (249) queue_dequeue -> VARIABLE DOT . DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (250) queue_clear -> VARIABLE DOT . CLEAR LPARENT RPARENT DOTANDCOMMA
    (252) queue_isEmpty -> VARIABLE DOT . ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (251) queue_peek -> VARIABLE DOT . PEEK LPARENT RPARENT DOTANDCOMMA

    CLEAR           shift and go to state 169
    COUNT           shift and go to state 170
    ADD             shift and go to state 171
    REMOVEAT        shift and go to state 172
    PUSH            shift and go to state 173
    POP             shift and go to state 174
    PEEK            shift and go to state 175
    ISEMPTY         shift and go to state 176
    ENQUEUE         shift and go to state 177
    DEQUEUE         shift and go to state 178


state 113

    (3) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY .
    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY . all_block_code
    (25) all_block_code -> . block_code
    (26) all_block_code -> . block_code all_block_code
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . array_assignation
    (8) block_code -> . array_value_assign
    (9) block_code -> . array_indexing
    (10) block_code -> . thread_main
    (11) block_code -> . concurrent_method
    (12) block_code -> . method_definition
    (13) block_code -> . block_try_catch
    (14) block_code -> . lists
    (15) block_code -> . functions_list
    (16) block_code -> . statement_lambda
    (17) block_code -> . enums
    (18) block_code -> . normal_if
    (19) block_code -> . block_for
    (20) block_code -> . block_while
    (21) block_code -> . stack_struct
    (22) block_code -> . functions_stack
    (23) block_code -> . queue_struct
    (24) block_code -> . functions_queue
    (116) def_const_or_var -> . constant_assignation
    (117) def_const_or_var -> . variable_assignation
    (46) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (47) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (57) array_assignation -> . CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA
    (58) array_assignation -> . STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
    (59) array_assignation -> . FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
    (60) array_assignation -> . DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA
    (61) array_assignation -> . INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
    (62) array_assignation -> . BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
    (88) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (89) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (86) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (87) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (169) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (174) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (175) concurrent_method -> . WRITE
    (158) method_definition -> . access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (159) method_definition -> . access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY
    (160) method_definition -> . STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (161) method_definition -> . STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY
    (162) method_definition -> . access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (163) method_definition -> . access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY
    (164) method_definition -> . STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (165) method_definition -> . STATIC VOID METHOD LPARENT RPARENT LKEY RKEY
    (188) block_try_catch -> . try_catch_simply
    (189) block_try_catch -> . try_catch_finally
    (211) lists -> . list_empty
    (212) lists -> . list_full
    (221) functions_list -> . list_func_clear
    (222) functions_list -> . list_func_count
    (223) functions_list -> . list_func_add
    (224) functions_list -> . list_func_removeat
    (184) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (185) enums -> . ENUM METHOD LKEY list_enums RKEY
    (198) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (199) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (206) block_for -> . for_simple
    (207) block_for -> . for_each
    (202) block_while -> . normal_while
    (203) block_while -> . do_while
    (231) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (232) functions_stack -> . stack_push
    (233) functions_stack -> . stack_pop
    (234) functions_stack -> . stack_clear
    (235) functions_stack -> . stack_peek
    (236) functions_stack -> . stack_isEmpty
    (242) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (243) functions_queue -> . queue_enqueue
    (244) functions_queue -> . queue_dequeue
    (245) functions_queue -> . queue_clear
    (246) functions_queue -> . queue_isEmpty
    (247) functions_queue -> . queue_peek
    (118) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (119) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (120) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (121) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (170) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (171) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (122) access_modifiers -> . PUBLIC
    (123) access_modifiers -> . PRIVATE
    (190) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (191) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (213) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (214) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (215) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (216) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (225) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (226) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (227) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (228) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (229) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (230) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (208) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (209) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (210) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (204) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (205) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (237) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (238) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (239) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (240) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (241) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (248) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (249) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (250) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (252) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (251) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (143) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (144) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (145) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (146) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (147) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    RKEY            reduce using rule 3 (block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY .)
    PRINT           shift and go to state 50
    CHARTYPE        shift and go to state 51
    STRINGTYPE      shift and go to state 24
    FLOATTYPE       shift and go to state 52
    DECIMALTYPE     shift and go to state 53
    INTTYPE         shift and go to state 54
    BOOLTYPE        shift and go to state 55
    VARIABLE        shift and go to state 25
    STATIC          shift and go to state 22
    WRITE           shift and go to state 57
    LPARENT         shift and go to state 23
    ENUM            shift and go to state 67
    IF              shift and go to state 68
    STACK           shift and go to state 73
    QUEUE           shift and go to state 79
    CONST           shift and go to state 85
    THREAD          shift and go to state 87
    PUBLIC          shift and go to state 88
    PRIVATE         shift and go to state 89
    TRY             shift and go to state 90
    LIST            shift and go to state 91
    FOR             shift and go to state 92
    FOREACH         shift and go to state 93
    WHILE           shift and go to state 94
    DO              shift and go to state 95

    all_block_code                 shift and go to state 179
    block_code                     shift and go to state 27
    def_const_or_var               shift and go to state 28
    print_data                     shift and go to state 29
    array_assignation              shift and go to state 30
    array_value_assign             shift and go to state 31
    array_indexing                 shift and go to state 32
    thread_main                    shift and go to state 33
    concurrent_method              shift and go to state 34
    method_definition              shift and go to state 35
    block_try_catch                shift and go to state 36
    lists                          shift and go to state 37
    functions_list                 shift and go to state 38
    statement_lambda               shift and go to state 39
    enums                          shift and go to state 40
    normal_if                      shift and go to state 41
    block_for                      shift and go to state 42
    block_while                    shift and go to state 43
    stack_struct                   shift and go to state 44
    functions_stack                shift and go to state 45
    queue_struct                   shift and go to state 46
    functions_queue                shift and go to state 47
    constant_assignation           shift and go to state 48
    variable_assignation           shift and go to state 49
    declaration_thread             shift and go to state 56
    access_modifiers               shift and go to state 58
    try_catch_simply               shift and go to state 59
    try_catch_finally              shift and go to state 60
    list_empty                     shift and go to state 61
    list_full                      shift and go to state 62
    list_func_clear                shift and go to state 63
    list_func_count                shift and go to state 64
    list_func_add                  shift and go to state 65
    list_func_removeat             shift and go to state 66
    for_simple                     shift and go to state 69
    for_each                       shift and go to state 70
    normal_while                   shift and go to state 71
    do_while                       shift and go to state 72
    stack_push                     shift and go to state 74
    stack_pop                      shift and go to state 75
    stack_clear                    shift and go to state 76
    stack_peek                     shift and go to state 77
    stack_isEmpty                  shift and go to state 78
    queue_enqueue                  shift and go to state 80
    queue_dequeue                  shift and go to state 81
    queue_clear                    shift and go to state 82
    queue_isEmpty                  shift and go to state 83
    queue_peek                     shift and go to state 84
    assignation_type_value_multiple shift and go to state 86

state 114

    (26) all_block_code -> block_code all_block_code .

    RKEY            reduce using rule 26 (all_block_code -> block_code all_block_code .)


state 115

    (46) print_data -> PRINT LPARENT . STRING RPARENT DOTANDCOMMA
    (47) print_data -> PRINT LPARENT . VARIABLE RPARENT DOTANDCOMMA

    STRING          shift and go to state 180
    VARIABLE        shift and go to state 181


state 116

    (57) array_assignation -> CHARTYPE LBRACKET . RBRACKET char_array_assignation DOTANDCOMMA

    RBRACKET        shift and go to state 182


state 117

    (59) array_assignation -> FLOATTYPE LBRACKET . RBRACKET float_array_assignation DOTANDCOMMA

    RBRACKET        shift and go to state 183


state 118

    (145) assignation_type_value_multiple -> FLOATTYPE assignation_float_multiple .

    DOTANDCOMMA     reduce using rule 145 (assignation_type_value_multiple -> FLOATTYPE assignation_float_multiple .)


state 119

    (152) assignation_float_multiple -> assignation_float .
    (153) assignation_float_multiple -> assignation_float . COMMA assignation_float_multiple

    DOTANDCOMMA     reduce using rule 152 (assignation_float_multiple -> assignation_float .)
    COMMA           shift and go to state 184


state 120

    (134) assignation_float -> VARIABLE . ASSIGNATION FLOAT_NUMBER
    (135) assignation_float -> VARIABLE . ASSIGNATION VARIABLE
    (136) assignation_float -> VARIABLE . ASSIGNATION arithmetic_operation

    ASSIGNATION     shift and go to state 185


state 121

    (60) array_assignation -> DECIMALTYPE LBRACKET . RBRACKET decimal_array_assignation DOTANDCOMMA

    RBRACKET        shift and go to state 186


state 122

    (61) array_assignation -> INTTYPE LBRACKET . RBRACKET int_array_assignation DOTANDCOMMA

    RBRACKET        shift and go to state 187


state 123

    (143) assignation_type_value_multiple -> INTTYPE assignation_int_multiple .

    DOTANDCOMMA     reduce using rule 143 (assignation_type_value_multiple -> INTTYPE assignation_int_multiple .)


state 124

    (148) assignation_int_multiple -> assignation_int .
    (149) assignation_int_multiple -> assignation_int . COMMA assignation_int_multiple

    DOTANDCOMMA     reduce using rule 148 (assignation_int_multiple -> assignation_int .)
    COMMA           shift and go to state 188


state 125

    (129) assignation_int -> VARIABLE . ASSIGNATION INTEGER
    (130) assignation_int -> VARIABLE . ASSIGNATION VARIABLE
    (131) assignation_int -> VARIABLE . ASSIGNATION arithmetic_operation

    ASSIGNATION     shift and go to state 189


state 126

    (62) array_assignation -> BOOLTYPE LBRACKET . RBRACKET bool_array_assignation DOTANDCOMMA

    RBRACKET        shift and go to state 190


state 127

    (146) assignation_type_value_multiple -> BOOLTYPE assignation_true_multiple .

    DOTANDCOMMA     reduce using rule 146 (assignation_type_value_multiple -> BOOLTYPE assignation_true_multiple .)


state 128

    (147) assignation_type_value_multiple -> BOOLTYPE assignation_false_multiple .

    DOTANDCOMMA     reduce using rule 147 (assignation_type_value_multiple -> BOOLTYPE assignation_false_multiple .)


state 129

    (154) assignation_true_multiple -> assignation_true .
    (155) assignation_true_multiple -> assignation_true . COMMA assignation_true_multiple

    DOTANDCOMMA     reduce using rule 154 (assignation_true_multiple -> assignation_true .)
    COMMA           shift and go to state 191


state 130

    (156) assignation_false_multiple -> assignation_false .
    (157) assignation_false_multiple -> assignation_false . COMMA assignation_false_multiple

    DOTANDCOMMA     reduce using rule 156 (assignation_false_multiple -> assignation_false .)
    COMMA           shift and go to state 192


state 131

    (137) assignation_true -> VARIABLE . ASSIGNATION BOOLTRUE
    (138) assignation_true -> VARIABLE . ASSIGNATION VARIABLE
    (139) assignation_true -> VARIABLE . ASSIGNATION boolean_operation
    (140) assignation_false -> VARIABLE . ASSIGNATION BOOLFALSE
    (141) assignation_false -> VARIABLE . ASSIGNATION VARIABLE
    (142) assignation_false -> VARIABLE . ASSIGNATION boolean_operation

    ASSIGNATION     shift and go to state 193


state 132

    (169) thread_main -> declaration_thread declaration_thread . thread_init thread_init thread_wait thread_wait
    (172) thread_init -> . thread_identificator DOT START LPARENT RPARENT DOTANDCOMMA
    (183) thread_identificator -> . VARIABLE

    VARIABLE        shift and go to state 147

    thread_init                    shift and go to state 194
    thread_identificator           shift and go to state 195

state 133

    (158) method_definition -> access_modifiers STATIC . data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (159) method_definition -> access_modifiers STATIC . VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY
    (162) method_definition -> access_modifiers STATIC . data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (163) method_definition -> access_modifiers STATIC . VOID METHOD LPARENT RPARENT LKEY RKEY
    (27) data_type -> . CHARTYPE
    (28) data_type -> . STRINGTYPE
    (29) data_type -> . FLOATTYPE
    (30) data_type -> . DECIMALTYPE
    (31) data_type -> . INTTYPE
    (32) data_type -> . BOOLTYPE
    (33) data_type -> . array_type
    (34) data_type -> . METHOD
    (51) array_type -> . CHARTYPE LBRACKET RBRACKET
    (52) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (53) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (54) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (55) array_type -> . INTTYPE LBRACKET RBRACKET
    (56) array_type -> . BOOLTYPE LBRACKET RBRACKET

    VOID            shift and go to state 197
    CHARTYPE        shift and go to state 99
    STRINGTYPE      shift and go to state 100
    FLOATTYPE       shift and go to state 101
    DECIMALTYPE     shift and go to state 102
    INTTYPE         shift and go to state 103
    BOOLTYPE        shift and go to state 104
    METHOD          shift and go to state 98

    data_type                      shift and go to state 196
    array_type                     shift and go to state 105

state 134

    (118) constant_assignation -> access_modifiers CONST . assignation_type_value_multiple DOTANDCOMMA
    (143) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (144) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (145) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (146) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (147) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    INTTYPE         shift and go to state 136
    STRINGTYPE      shift and go to state 137
    FLOATTYPE       shift and go to state 138
    BOOLTYPE        shift and go to state 139

    assignation_type_value_multiple shift and go to state 198

state 135

    (120) variable_assignation -> access_modifiers assignation_type_value_multiple . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 199


state 136

    (143) assignation_type_value_multiple -> INTTYPE . assignation_int_multiple
    (148) assignation_int_multiple -> . assignation_int
    (149) assignation_int_multiple -> . assignation_int COMMA assignation_int_multiple
    (129) assignation_int -> . VARIABLE ASSIGNATION INTEGER
    (130) assignation_int -> . VARIABLE ASSIGNATION VARIABLE
    (131) assignation_int -> . VARIABLE ASSIGNATION arithmetic_operation

    VARIABLE        shift and go to state 125

    assignation_int_multiple       shift and go to state 123
    assignation_int                shift and go to state 124

state 137

    (144) assignation_type_value_multiple -> STRINGTYPE . assignation_string_multiple
    (150) assignation_string_multiple -> . assignation_string
    (151) assignation_string_multiple -> . assignation_string COMMA assignation_string_multiple
    (132) assignation_string -> . VARIABLE ASSIGNATION STRING
    (133) assignation_string -> . VARIABLE ASSIGNATION VARIABLE

    VARIABLE        shift and go to state 110

    assignation_string_multiple    shift and go to state 108
    assignation_string             shift and go to state 109

state 138

    (145) assignation_type_value_multiple -> FLOATTYPE . assignation_float_multiple
    (152) assignation_float_multiple -> . assignation_float
    (153) assignation_float_multiple -> . assignation_float COMMA assignation_float_multiple
    (134) assignation_float -> . VARIABLE ASSIGNATION FLOAT_NUMBER
    (135) assignation_float -> . VARIABLE ASSIGNATION VARIABLE
    (136) assignation_float -> . VARIABLE ASSIGNATION arithmetic_operation

    VARIABLE        shift and go to state 120

    assignation_float_multiple     shift and go to state 118
    assignation_float              shift and go to state 119

state 139

    (146) assignation_type_value_multiple -> BOOLTYPE . assignation_true_multiple
    (147) assignation_type_value_multiple -> BOOLTYPE . assignation_false_multiple
    (154) assignation_true_multiple -> . assignation_true
    (155) assignation_true_multiple -> . assignation_true COMMA assignation_true_multiple
    (156) assignation_false_multiple -> . assignation_false
    (157) assignation_false_multiple -> . assignation_false COMMA assignation_false_multiple
    (137) assignation_true -> . VARIABLE ASSIGNATION BOOLTRUE
    (138) assignation_true -> . VARIABLE ASSIGNATION VARIABLE
    (139) assignation_true -> . VARIABLE ASSIGNATION boolean_operation
    (140) assignation_false -> . VARIABLE ASSIGNATION BOOLFALSE
    (141) assignation_false -> . VARIABLE ASSIGNATION VARIABLE
    (142) assignation_false -> . VARIABLE ASSIGNATION boolean_operation

    VARIABLE        shift and go to state 131

    assignation_true_multiple      shift and go to state 127
    assignation_false_multiple     shift and go to state 128
    assignation_true               shift and go to state 129
    assignation_false              shift and go to state 130

state 140

    (185) enums -> ENUM METHOD . LKEY list_enums RKEY

    LKEY            shift and go to state 200


state 141

    (198) normal_if -> IF LPARENT . boolean_operation RPARENT LKEY block_if RKEY other_if
    (199) normal_if -> IF LPARENT . boolean_operation RPARENT LKEY block_if RKEY
    (111) boolean_operation -> . value_boolean
    (112) boolean_operation -> . LOGICNOT value_boolean
    (113) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (38) value_boolean -> . BOOLTRUE
    (39) value_boolean -> . BOOLFALSE
    (40) value_boolean -> . VARIABLE
    (41) value_boolean -> . comparison_operation
    (103) comparison_operation -> . value_numeric
    (104) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (42) value_numeric -> . INTEGER
    (43) value_numeric -> . FLOAT_NUMBER
    (44) value_numeric -> . DECIMAL_NUMBER
    (45) value_numeric -> . VARIABLE

    LOGICNOT        shift and go to state 203
    BOOLTRUE        shift and go to state 204
    BOOLFALSE       shift and go to state 205
    VARIABLE        shift and go to state 206
    INTEGER         shift and go to state 209
    FLOAT_NUMBER    shift and go to state 210
    DECIMAL_NUMBER  shift and go to state 211

    boolean_operation              shift and go to state 201
    value_boolean                  shift and go to state 202
    comparison_operation           shift and go to state 207
    value_numeric                  shift and go to state 208

state 142

    (231) stack_struct -> STACK VARIABLE . ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA

    ASSIGNATION     shift and go to state 212


state 143

    (242) queue_struct -> QUEUE SMALLER_THAN . data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (27) data_type -> . CHARTYPE
    (28) data_type -> . STRINGTYPE
    (29) data_type -> . FLOATTYPE
    (30) data_type -> . DECIMALTYPE
    (31) data_type -> . INTTYPE
    (32) data_type -> . BOOLTYPE
    (33) data_type -> . array_type
    (34) data_type -> . METHOD
    (51) array_type -> . CHARTYPE LBRACKET RBRACKET
    (52) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (53) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (54) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (55) array_type -> . INTTYPE LBRACKET RBRACKET
    (56) array_type -> . BOOLTYPE LBRACKET RBRACKET

    CHARTYPE        shift and go to state 99
    STRINGTYPE      shift and go to state 100
    FLOATTYPE       shift and go to state 101
    DECIMALTYPE     shift and go to state 102
    INTTYPE         shift and go to state 103
    BOOLTYPE        shift and go to state 104
    METHOD          shift and go to state 98

    data_type                      shift and go to state 213
    array_type                     shift and go to state 105

state 144

    (119) constant_assignation -> CONST assignation_type_value_multiple . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 214


state 145

    (121) variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .

    PRINT           reduce using rule 121 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    CHARTYPE        reduce using rule 121 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 121 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 121 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 121 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    INTTYPE         reduce using rule 121 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 121 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    VARIABLE        reduce using rule 121 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    STATIC          reduce using rule 121 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    WRITE           reduce using rule 121 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    LPARENT         reduce using rule 121 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    ENUM            reduce using rule 121 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    IF              reduce using rule 121 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    STACK           reduce using rule 121 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    QUEUE           reduce using rule 121 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    CONST           reduce using rule 121 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    THREAD          reduce using rule 121 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    PUBLIC          reduce using rule 121 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    PRIVATE         reduce using rule 121 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    TRY             reduce using rule 121 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    LIST            reduce using rule 121 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    FOR             reduce using rule 121 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    FOREACH         reduce using rule 121 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    WHILE           reduce using rule 121 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    DO              reduce using rule 121 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    RKEY            reduce using rule 121 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)


state 146

    (170) declaration_thread -> THREAD thread_identificator . ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (171) declaration_thread -> THREAD thread_identificator . ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA

    ASSIGNATION     shift and go to state 215


state 147

    (183) thread_identificator -> VARIABLE .

    ASSIGNATION     reduce using rule 183 (thread_identificator -> VARIABLE .)
    LPARENT         reduce using rule 183 (thread_identificator -> VARIABLE .)
    DOT             reduce using rule 183 (thread_identificator -> VARIABLE .)
    RPARENT         reduce using rule 183 (thread_identificator -> VARIABLE .)


state 148

    (190) try_catch_simply -> TRY LKEY . all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (191) try_catch_finally -> TRY LKEY . all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (194) all_block_code_try -> . block_code_try
    (195) all_block_code_try -> . block_code_try all_block_code_try
    (192) block_code_try -> . def_const_or_var
    (193) block_code_try -> . print_data
    (116) def_const_or_var -> . constant_assignation
    (117) def_const_or_var -> . variable_assignation
    (46) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (47) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (118) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (119) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (120) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (121) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (122) access_modifiers -> . PUBLIC
    (123) access_modifiers -> . PRIVATE
    (143) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (144) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (145) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (146) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (147) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 50
    CONST           shift and go to state 85
    PUBLIC          shift and go to state 88
    PRIVATE         shift and go to state 89
    INTTYPE         shift and go to state 136
    STRINGTYPE      shift and go to state 137
    FLOATTYPE       shift and go to state 138
    BOOLTYPE        shift and go to state 139

    all_block_code_try             shift and go to state 216
    block_code_try                 shift and go to state 217
    def_const_or_var               shift and go to state 218
    print_data                     shift and go to state 219
    constant_assignation           shift and go to state 48
    variable_assignation           shift and go to state 49
    access_modifiers               shift and go to state 220
    assignation_type_value_multiple shift and go to state 86

state 149

    (213) list_empty -> LIST SMALLER_THAN . STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (214) list_empty -> LIST SMALLER_THAN . INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (215) list_full -> LIST SMALLER_THAN . STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (216) list_full -> LIST SMALLER_THAN . INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    STRINGTYPE      shift and go to state 221
    INTTYPE         shift and go to state 222


state 150

    (208) for_simple -> FOR LPARENT . INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (209) for_simple -> FOR LPARENT . INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    INTTYPE         shift and go to state 223


state 151

    (210) for_each -> FOREACH LPARENT . data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (27) data_type -> . CHARTYPE
    (28) data_type -> . STRINGTYPE
    (29) data_type -> . FLOATTYPE
    (30) data_type -> . DECIMALTYPE
    (31) data_type -> . INTTYPE
    (32) data_type -> . BOOLTYPE
    (33) data_type -> . array_type
    (34) data_type -> . METHOD
    (51) array_type -> . CHARTYPE LBRACKET RBRACKET
    (52) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (53) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (54) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (55) array_type -> . INTTYPE LBRACKET RBRACKET
    (56) array_type -> . BOOLTYPE LBRACKET RBRACKET

    CHARTYPE        shift and go to state 99
    STRINGTYPE      shift and go to state 100
    FLOATTYPE       shift and go to state 101
    DECIMALTYPE     shift and go to state 102
    INTTYPE         shift and go to state 103
    BOOLTYPE        shift and go to state 104
    METHOD          shift and go to state 98

    data_type                      shift and go to state 224
    array_type                     shift and go to state 105

state 152

    (204) normal_while -> WHILE LPARENT . boolean_operation RPARENT LKEY all_block_code RKEY
    (111) boolean_operation -> . value_boolean
    (112) boolean_operation -> . LOGICNOT value_boolean
    (113) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (38) value_boolean -> . BOOLTRUE
    (39) value_boolean -> . BOOLFALSE
    (40) value_boolean -> . VARIABLE
    (41) value_boolean -> . comparison_operation
    (103) comparison_operation -> . value_numeric
    (104) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (42) value_numeric -> . INTEGER
    (43) value_numeric -> . FLOAT_NUMBER
    (44) value_numeric -> . DECIMAL_NUMBER
    (45) value_numeric -> . VARIABLE

    LOGICNOT        shift and go to state 203
    BOOLTRUE        shift and go to state 204
    BOOLFALSE       shift and go to state 205
    VARIABLE        shift and go to state 206
    INTEGER         shift and go to state 209
    FLOAT_NUMBER    shift and go to state 210
    DECIMAL_NUMBER  shift and go to state 211

    boolean_operation              shift and go to state 225
    value_boolean                  shift and go to state 202
    comparison_operation           shift and go to state 207
    value_numeric                  shift and go to state 208

state 153

    (205) do_while -> DO LKEY . all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (25) all_block_code -> . block_code
    (26) all_block_code -> . block_code all_block_code
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . array_assignation
    (8) block_code -> . array_value_assign
    (9) block_code -> . array_indexing
    (10) block_code -> . thread_main
    (11) block_code -> . concurrent_method
    (12) block_code -> . method_definition
    (13) block_code -> . block_try_catch
    (14) block_code -> . lists
    (15) block_code -> . functions_list
    (16) block_code -> . statement_lambda
    (17) block_code -> . enums
    (18) block_code -> . normal_if
    (19) block_code -> . block_for
    (20) block_code -> . block_while
    (21) block_code -> . stack_struct
    (22) block_code -> . functions_stack
    (23) block_code -> . queue_struct
    (24) block_code -> . functions_queue
    (116) def_const_or_var -> . constant_assignation
    (117) def_const_or_var -> . variable_assignation
    (46) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (47) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (57) array_assignation -> . CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA
    (58) array_assignation -> . STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
    (59) array_assignation -> . FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
    (60) array_assignation -> . DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA
    (61) array_assignation -> . INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
    (62) array_assignation -> . BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
    (88) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (89) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (86) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (87) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (169) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (174) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (175) concurrent_method -> . WRITE
    (158) method_definition -> . access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (159) method_definition -> . access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY
    (160) method_definition -> . STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (161) method_definition -> . STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY
    (162) method_definition -> . access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (163) method_definition -> . access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY
    (164) method_definition -> . STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (165) method_definition -> . STATIC VOID METHOD LPARENT RPARENT LKEY RKEY
    (188) block_try_catch -> . try_catch_simply
    (189) block_try_catch -> . try_catch_finally
    (211) lists -> . list_empty
    (212) lists -> . list_full
    (221) functions_list -> . list_func_clear
    (222) functions_list -> . list_func_count
    (223) functions_list -> . list_func_add
    (224) functions_list -> . list_func_removeat
    (184) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (185) enums -> . ENUM METHOD LKEY list_enums RKEY
    (198) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (199) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (206) block_for -> . for_simple
    (207) block_for -> . for_each
    (202) block_while -> . normal_while
    (203) block_while -> . do_while
    (231) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (232) functions_stack -> . stack_push
    (233) functions_stack -> . stack_pop
    (234) functions_stack -> . stack_clear
    (235) functions_stack -> . stack_peek
    (236) functions_stack -> . stack_isEmpty
    (242) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (243) functions_queue -> . queue_enqueue
    (244) functions_queue -> . queue_dequeue
    (245) functions_queue -> . queue_clear
    (246) functions_queue -> . queue_isEmpty
    (247) functions_queue -> . queue_peek
    (118) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (119) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (120) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (121) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (170) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (171) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (122) access_modifiers -> . PUBLIC
    (123) access_modifiers -> . PRIVATE
    (190) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (191) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (213) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (214) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (215) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (216) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (225) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (226) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (227) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (228) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (229) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (230) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (208) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (209) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (210) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (204) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (205) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (237) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (238) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (239) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (240) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (241) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (248) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (249) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (250) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (252) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (251) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (143) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (144) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (145) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (146) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (147) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 50
    CHARTYPE        shift and go to state 51
    STRINGTYPE      shift and go to state 24
    FLOATTYPE       shift and go to state 52
    DECIMALTYPE     shift and go to state 53
    INTTYPE         shift and go to state 54
    BOOLTYPE        shift and go to state 55
    VARIABLE        shift and go to state 25
    STATIC          shift and go to state 22
    WRITE           shift and go to state 57
    LPARENT         shift and go to state 23
    ENUM            shift and go to state 67
    IF              shift and go to state 68
    STACK           shift and go to state 73
    QUEUE           shift and go to state 79
    CONST           shift and go to state 85
    THREAD          shift and go to state 87
    PUBLIC          shift and go to state 88
    PRIVATE         shift and go to state 89
    TRY             shift and go to state 90
    LIST            shift and go to state 91
    FOR             shift and go to state 92
    FOREACH         shift and go to state 93
    WHILE           shift and go to state 94
    DO              shift and go to state 95

    all_block_code                 shift and go to state 226
    block_code                     shift and go to state 27
    def_const_or_var               shift and go to state 28
    print_data                     shift and go to state 29
    array_assignation              shift and go to state 30
    array_value_assign             shift and go to state 31
    array_indexing                 shift and go to state 32
    thread_main                    shift and go to state 33
    concurrent_method              shift and go to state 34
    method_definition              shift and go to state 35
    block_try_catch                shift and go to state 36
    lists                          shift and go to state 37
    functions_list                 shift and go to state 38
    statement_lambda               shift and go to state 39
    enums                          shift and go to state 40
    normal_if                      shift and go to state 41
    block_for                      shift and go to state 42
    block_while                    shift and go to state 43
    stack_struct                   shift and go to state 44
    functions_stack                shift and go to state 45
    queue_struct                   shift and go to state 46
    functions_queue                shift and go to state 47
    constant_assignation           shift and go to state 48
    variable_assignation           shift and go to state 49
    declaration_thread             shift and go to state 56
    access_modifiers               shift and go to state 58
    try_catch_simply               shift and go to state 59
    try_catch_finally              shift and go to state 60
    list_empty                     shift and go to state 61
    list_full                      shift and go to state 62
    list_func_clear                shift and go to state 63
    list_func_count                shift and go to state 64
    list_func_add                  shift and go to state 65
    list_func_removeat             shift and go to state 66
    for_simple                     shift and go to state 69
    for_each                       shift and go to state 70
    normal_while                   shift and go to state 71
    do_while                       shift and go to state 72
    stack_push                     shift and go to state 74
    stack_pop                      shift and go to state 75
    stack_clear                    shift and go to state 76
    stack_peek                     shift and go to state 77
    stack_isEmpty                  shift and go to state 78
    queue_enqueue                  shift and go to state 80
    queue_dequeue                  shift and go to state 81
    queue_clear                    shift and go to state 82
    queue_isEmpty                  shift and go to state 83
    queue_peek                     shift and go to state 84
    assignation_type_value_multiple shift and go to state 86

state 154

    (174) concurrent_method -> STATIC VOID thread_identificator . LPARENT RPARENT LKEY thread_logic RKEY

    LPARENT         shift and go to state 227


state 155

    (161) method_definition -> STATIC VOID METHOD . LPARENT func_parameters RPARENT LKEY RKEY
    (165) method_definition -> STATIC VOID METHOD . LPARENT RPARENT LKEY RKEY

    LPARENT         shift and go to state 228


state 156

    (160) method_definition -> STATIC data_type METHOD . LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (164) method_definition -> STATIC data_type METHOD . LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY

    LPARENT         shift and go to state 229


state 157

    (51) array_type -> CHARTYPE LBRACKET . RBRACKET

    RBRACKET        shift and go to state 230


state 158

    (52) array_type -> STRINGTYPE LBRACKET . RBRACKET

    RBRACKET        shift and go to state 231


state 159

    (53) array_type -> FLOATTYPE LBRACKET . RBRACKET

    RBRACKET        shift and go to state 232


state 160

    (54) array_type -> DECIMALTYPE LBRACKET . RBRACKET

    RBRACKET        shift and go to state 233


state 161

    (55) array_type -> INTTYPE LBRACKET . RBRACKET

    RBRACKET        shift and go to state 234


state 162

    (56) array_type -> BOOLTYPE LBRACKET . RBRACKET

    RBRACKET        shift and go to state 235


state 163

    (184) statement_lambda -> LPARENT VARIABLE ARROW . LKEY all_block_code RKEY RPARENT

    LKEY            shift and go to state 236


state 164

    (58) array_assignation -> STRINGTYPE LBRACKET RBRACKET . string_array_assignation DOTANDCOMMA
    (66) string_array_assignation -> . VARIABLE ASSIGNATION LBRACKET string_content_multiple RBRACKET

    VARIABLE        shift and go to state 238

    string_array_assignation       shift and go to state 237

state 165

    (151) assignation_string_multiple -> assignation_string COMMA . assignation_string_multiple
    (150) assignation_string_multiple -> . assignation_string
    (151) assignation_string_multiple -> . assignation_string COMMA assignation_string_multiple
    (132) assignation_string -> . VARIABLE ASSIGNATION STRING
    (133) assignation_string -> . VARIABLE ASSIGNATION VARIABLE

    VARIABLE        shift and go to state 110

    assignation_string             shift and go to state 109
    assignation_string_multiple    shift and go to state 239

state 166

    (132) assignation_string -> VARIABLE ASSIGNATION . STRING
    (133) assignation_string -> VARIABLE ASSIGNATION . VARIABLE

    STRING          shift and go to state 241
    VARIABLE        shift and go to state 240


state 167

    (88) array_value_assign -> VARIABLE LBRACKET VARIABLE . RBRACKET ASSIGNATION value DOTANDCOMMA
    (86) array_indexing -> VARIABLE LBRACKET VARIABLE . RBRACKET

    RBRACKET        shift and go to state 242


state 168

    (89) array_value_assign -> VARIABLE LBRACKET INTEGER . RBRACKET ASSIGNATION value DOTANDCOMMA
    (87) array_indexing -> VARIABLE LBRACKET INTEGER . RBRACKET

    RBRACKET        shift and go to state 243


state 169

    (225) list_func_clear -> VARIABLE DOT CLEAR . LPARENT RPARENT DOTANDCOMMA
    (239) stack_clear -> VARIABLE DOT CLEAR . LPARENT RPARENT DOTANDCOMMA
    (250) queue_clear -> VARIABLE DOT CLEAR . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 244


state 170

    (226) list_func_count -> VARIABLE DOT COUNT . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 245


state 171

    (227) list_func_add -> VARIABLE DOT ADD . LPARENT INTEGER RPARENT DOTANDCOMMA
    (228) list_func_add -> VARIABLE DOT ADD . LPARENT STRING RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 246


state 172

    (229) list_func_removeat -> VARIABLE DOT REMOVEAT . LPARENT INTEGER RPARENT DOTANDCOMMA
    (230) list_func_removeat -> VARIABLE DOT REMOVEAT . LPARENT STRING RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 247


state 173

    (237) stack_push -> VARIABLE DOT PUSH . LPARENT value RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 248


state 174

    (238) stack_pop -> VARIABLE DOT POP . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 249


state 175

    (240) stack_peek -> VARIABLE DOT PEEK . LPARENT RPARENT DOTANDCOMMA
    (251) queue_peek -> VARIABLE DOT PEEK . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 250


state 176

    (241) stack_isEmpty -> VARIABLE DOT ISEMPTY . LPARENT RPARENT DOTANDCOMMA
    (252) queue_isEmpty -> VARIABLE DOT ISEMPTY . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 251


state 177

    (248) queue_enqueue -> VARIABLE DOT ENQUEUE . LPARENT value RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 252


state 178

    (249) queue_dequeue -> VARIABLE DOT DEQUEUE . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 253


state 179

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code .

    RKEY            reduce using rule 4 (block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code .)


state 180

    (46) print_data -> PRINT LPARENT STRING . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 254


state 181

    (47) print_data -> PRINT LPARENT VARIABLE . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 255


state 182

    (57) array_assignation -> CHARTYPE LBRACKET RBRACKET . char_array_assignation DOTANDCOMMA
    (63) char_array_assignation -> . VARIABLE ASSIGNATION LBRACKET char_content_multiple RBRACKET

    VARIABLE        shift and go to state 257

    char_array_assignation         shift and go to state 256

state 183

    (59) array_assignation -> FLOATTYPE LBRACKET RBRACKET . float_array_assignation DOTANDCOMMA
    (69) float_array_assignation -> . VARIABLE ASSIGNATION LBRACKET float_content_multiple RBRACKET

    VARIABLE        shift and go to state 259

    float_array_assignation        shift and go to state 258

state 184

    (153) assignation_float_multiple -> assignation_float COMMA . assignation_float_multiple
    (152) assignation_float_multiple -> . assignation_float
    (153) assignation_float_multiple -> . assignation_float COMMA assignation_float_multiple
    (134) assignation_float -> . VARIABLE ASSIGNATION FLOAT_NUMBER
    (135) assignation_float -> . VARIABLE ASSIGNATION VARIABLE
    (136) assignation_float -> . VARIABLE ASSIGNATION arithmetic_operation

    VARIABLE        shift and go to state 120

    assignation_float              shift and go to state 119
    assignation_float_multiple     shift and go to state 260

state 185

    (134) assignation_float -> VARIABLE ASSIGNATION . FLOAT_NUMBER
    (135) assignation_float -> VARIABLE ASSIGNATION . VARIABLE
    (136) assignation_float -> VARIABLE ASSIGNATION . arithmetic_operation
    (96) arithmetic_operation -> . value_numeric
    (97) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (42) value_numeric -> . INTEGER
    (43) value_numeric -> . FLOAT_NUMBER
    (44) value_numeric -> . DECIMAL_NUMBER
    (45) value_numeric -> . VARIABLE

    FLOAT_NUMBER    shift and go to state 262
    VARIABLE        shift and go to state 261
    INTEGER         shift and go to state 209
    DECIMAL_NUMBER  shift and go to state 211

    arithmetic_operation           shift and go to state 263
    value_numeric                  shift and go to state 264

state 186

    (60) array_assignation -> DECIMALTYPE LBRACKET RBRACKET . decimal_array_assignation DOTANDCOMMA
    (75) decimal_array_assignation -> . VARIABLE ASSIGNATION LBRACKET decimal_content_multiple RBRACKET

    VARIABLE        shift and go to state 266

    decimal_array_assignation      shift and go to state 265

state 187

    (61) array_assignation -> INTTYPE LBRACKET RBRACKET . int_array_assignation DOTANDCOMMA
    (72) int_array_assignation -> . VARIABLE ASSIGNATION LBRACKET int_content_multiple RBRACKET

    VARIABLE        shift and go to state 268

    int_array_assignation          shift and go to state 267

state 188

    (149) assignation_int_multiple -> assignation_int COMMA . assignation_int_multiple
    (148) assignation_int_multiple -> . assignation_int
    (149) assignation_int_multiple -> . assignation_int COMMA assignation_int_multiple
    (129) assignation_int -> . VARIABLE ASSIGNATION INTEGER
    (130) assignation_int -> . VARIABLE ASSIGNATION VARIABLE
    (131) assignation_int -> . VARIABLE ASSIGNATION arithmetic_operation

    VARIABLE        shift and go to state 125

    assignation_int                shift and go to state 124
    assignation_int_multiple       shift and go to state 269

state 189

    (129) assignation_int -> VARIABLE ASSIGNATION . INTEGER
    (130) assignation_int -> VARIABLE ASSIGNATION . VARIABLE
    (131) assignation_int -> VARIABLE ASSIGNATION . arithmetic_operation
    (96) arithmetic_operation -> . value_numeric
    (97) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (42) value_numeric -> . INTEGER
    (43) value_numeric -> . FLOAT_NUMBER
    (44) value_numeric -> . DECIMAL_NUMBER
    (45) value_numeric -> . VARIABLE

    INTEGER         shift and go to state 271
    VARIABLE        shift and go to state 270
    FLOAT_NUMBER    shift and go to state 210
    DECIMAL_NUMBER  shift and go to state 211

    arithmetic_operation           shift and go to state 272
    value_numeric                  shift and go to state 264

state 190

    (62) array_assignation -> BOOLTYPE LBRACKET RBRACKET . bool_array_assignation DOTANDCOMMA
    (78) bool_array_assignation -> . VARIABLE ASSIGNATION LBRACKET bool_content_multiple RBRACKET

    VARIABLE        shift and go to state 274

    bool_array_assignation         shift and go to state 273

state 191

    (155) assignation_true_multiple -> assignation_true COMMA . assignation_true_multiple
    (154) assignation_true_multiple -> . assignation_true
    (155) assignation_true_multiple -> . assignation_true COMMA assignation_true_multiple
    (137) assignation_true -> . VARIABLE ASSIGNATION BOOLTRUE
    (138) assignation_true -> . VARIABLE ASSIGNATION VARIABLE
    (139) assignation_true -> . VARIABLE ASSIGNATION boolean_operation

    VARIABLE        shift and go to state 276

    assignation_true               shift and go to state 129
    assignation_true_multiple      shift and go to state 275

state 192

    (157) assignation_false_multiple -> assignation_false COMMA . assignation_false_multiple
    (156) assignation_false_multiple -> . assignation_false
    (157) assignation_false_multiple -> . assignation_false COMMA assignation_false_multiple
    (140) assignation_false -> . VARIABLE ASSIGNATION BOOLFALSE
    (141) assignation_false -> . VARIABLE ASSIGNATION VARIABLE
    (142) assignation_false -> . VARIABLE ASSIGNATION boolean_operation

    VARIABLE        shift and go to state 278

    assignation_false              shift and go to state 130
    assignation_false_multiple     shift and go to state 277

state 193

    (137) assignation_true -> VARIABLE ASSIGNATION . BOOLTRUE
    (138) assignation_true -> VARIABLE ASSIGNATION . VARIABLE
    (139) assignation_true -> VARIABLE ASSIGNATION . boolean_operation
    (140) assignation_false -> VARIABLE ASSIGNATION . BOOLFALSE
    (141) assignation_false -> VARIABLE ASSIGNATION . VARIABLE
    (142) assignation_false -> VARIABLE ASSIGNATION . boolean_operation
    (111) boolean_operation -> . value_boolean
    (112) boolean_operation -> . LOGICNOT value_boolean
    (113) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (38) value_boolean -> . BOOLTRUE
    (39) value_boolean -> . BOOLFALSE
    (40) value_boolean -> . VARIABLE
    (41) value_boolean -> . comparison_operation
    (103) comparison_operation -> . value_numeric
    (104) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (42) value_numeric -> . INTEGER
    (43) value_numeric -> . FLOAT_NUMBER
    (44) value_numeric -> . DECIMAL_NUMBER
    (45) value_numeric -> . VARIABLE

    BOOLTRUE        shift and go to state 280
    VARIABLE        shift and go to state 279
    BOOLFALSE       shift and go to state 282
    LOGICNOT        shift and go to state 203
    INTEGER         shift and go to state 209
    FLOAT_NUMBER    shift and go to state 210
    DECIMAL_NUMBER  shift and go to state 211

    boolean_operation              shift and go to state 281
    value_boolean                  shift and go to state 202
    comparison_operation           shift and go to state 207
    value_numeric                  shift and go to state 208

state 194

    (169) thread_main -> declaration_thread declaration_thread thread_init . thread_init thread_wait thread_wait
    (172) thread_init -> . thread_identificator DOT START LPARENT RPARENT DOTANDCOMMA
    (183) thread_identificator -> . VARIABLE

    VARIABLE        shift and go to state 147

    thread_init                    shift and go to state 283
    thread_identificator           shift and go to state 195

state 195

    (172) thread_init -> thread_identificator . DOT START LPARENT RPARENT DOTANDCOMMA

    DOT             shift and go to state 284


state 196

    (158) method_definition -> access_modifiers STATIC data_type . METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (162) method_definition -> access_modifiers STATIC data_type . METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY

    METHOD          shift and go to state 285


state 197

    (159) method_definition -> access_modifiers STATIC VOID . METHOD LPARENT func_parameters RPARENT LKEY RKEY
    (163) method_definition -> access_modifiers STATIC VOID . METHOD LPARENT RPARENT LKEY RKEY

    METHOD          shift and go to state 286


state 198

    (118) constant_assignation -> access_modifiers CONST assignation_type_value_multiple . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 287


state 199

    (120) variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .

    PRINT           reduce using rule 120 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    CHARTYPE        reduce using rule 120 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 120 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 120 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 120 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    INTTYPE         reduce using rule 120 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 120 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    VARIABLE        reduce using rule 120 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    STATIC          reduce using rule 120 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    WRITE           reduce using rule 120 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    LPARENT         reduce using rule 120 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    ENUM            reduce using rule 120 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    IF              reduce using rule 120 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    STACK           reduce using rule 120 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    QUEUE           reduce using rule 120 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    CONST           reduce using rule 120 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    THREAD          reduce using rule 120 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    PUBLIC          reduce using rule 120 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    PRIVATE         reduce using rule 120 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    TRY             reduce using rule 120 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    LIST            reduce using rule 120 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    FOR             reduce using rule 120 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    FOREACH         reduce using rule 120 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    WHILE           reduce using rule 120 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    DO              reduce using rule 120 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    RKEY            reduce using rule 120 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)


state 200

    (185) enums -> ENUM METHOD LKEY . list_enums RKEY
    (186) list_enums -> . METHOD
    (187) list_enums -> . METHOD COMMA list_enums

    METHOD          shift and go to state 288

    list_enums                     shift and go to state 289

state 201

    (198) normal_if -> IF LPARENT boolean_operation . RPARENT LKEY block_if RKEY other_if
    (199) normal_if -> IF LPARENT boolean_operation . RPARENT LKEY block_if RKEY

    RPARENT         shift and go to state 290


state 202

    (111) boolean_operation -> value_boolean .
    (113) boolean_operation -> value_boolean . boolean_operator boolean_operation
    (114) boolean_operator -> . LOGICAND
    (115) boolean_operator -> . LOGICOR

    RPARENT         reduce using rule 111 (boolean_operation -> value_boolean .)
    COMMA           reduce using rule 111 (boolean_operation -> value_boolean .)
    DOTANDCOMMA     reduce using rule 111 (boolean_operation -> value_boolean .)
    LOGICAND        shift and go to state 292
    LOGICOR         shift and go to state 293

    boolean_operator               shift and go to state 291

state 203

    (112) boolean_operation -> LOGICNOT . value_boolean
    (38) value_boolean -> . BOOLTRUE
    (39) value_boolean -> . BOOLFALSE
    (40) value_boolean -> . VARIABLE
    (41) value_boolean -> . comparison_operation
    (103) comparison_operation -> . value_numeric
    (104) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (42) value_numeric -> . INTEGER
    (43) value_numeric -> . FLOAT_NUMBER
    (44) value_numeric -> . DECIMAL_NUMBER
    (45) value_numeric -> . VARIABLE

    BOOLTRUE        shift and go to state 204
    BOOLFALSE       shift and go to state 205
    VARIABLE        shift and go to state 206
    INTEGER         shift and go to state 209
    FLOAT_NUMBER    shift and go to state 210
    DECIMAL_NUMBER  shift and go to state 211

    value_boolean                  shift and go to state 294
    comparison_operation           shift and go to state 207
    value_numeric                  shift and go to state 208

state 204

    (38) value_boolean -> BOOLTRUE .

    LOGICAND        reduce using rule 38 (value_boolean -> BOOLTRUE .)
    LOGICOR         reduce using rule 38 (value_boolean -> BOOLTRUE .)
    RPARENT         reduce using rule 38 (value_boolean -> BOOLTRUE .)
    COMMA           reduce using rule 38 (value_boolean -> BOOLTRUE .)
    DOTANDCOMMA     reduce using rule 38 (value_boolean -> BOOLTRUE .)
    RBRACKET        reduce using rule 38 (value_boolean -> BOOLTRUE .)


state 205

    (39) value_boolean -> BOOLFALSE .

    LOGICAND        reduce using rule 39 (value_boolean -> BOOLFALSE .)
    LOGICOR         reduce using rule 39 (value_boolean -> BOOLFALSE .)
    RPARENT         reduce using rule 39 (value_boolean -> BOOLFALSE .)
    COMMA           reduce using rule 39 (value_boolean -> BOOLFALSE .)
    DOTANDCOMMA     reduce using rule 39 (value_boolean -> BOOLFALSE .)
    RBRACKET        reduce using rule 39 (value_boolean -> BOOLFALSE .)


state 206

    (40) value_boolean -> VARIABLE .
    (45) value_numeric -> VARIABLE .

  ! reduce/reduce conflict for LOGICAND resolved using rule 40 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for LOGICOR resolved using rule 40 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for RPARENT resolved using rule 40 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 40 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 40 (value_boolean -> VARIABLE .)
    LOGICAND        reduce using rule 40 (value_boolean -> VARIABLE .)
    LOGICOR         reduce using rule 40 (value_boolean -> VARIABLE .)
    RPARENT         reduce using rule 40 (value_boolean -> VARIABLE .)
    COMMA           reduce using rule 40 (value_boolean -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 40 (value_boolean -> VARIABLE .)
    GREATER_THAN    reduce using rule 45 (value_numeric -> VARIABLE .)
    SMALLER_THAN    reduce using rule 45 (value_numeric -> VARIABLE .)
    EQUAL_COMPARATION reduce using rule 45 (value_numeric -> VARIABLE .)
    INEQUALITY      reduce using rule 45 (value_numeric -> VARIABLE .)
    GREATER_THAN_OR_EQUAL reduce using rule 45 (value_numeric -> VARIABLE .)
    SMALLER_THAN_OR_EQUAL reduce using rule 45 (value_numeric -> VARIABLE .)

  ! LOGICAND        [ reduce using rule 45 (value_numeric -> VARIABLE .) ]
  ! LOGICOR         [ reduce using rule 45 (value_numeric -> VARIABLE .) ]
  ! RPARENT         [ reduce using rule 45 (value_numeric -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 45 (value_numeric -> VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 45 (value_numeric -> VARIABLE .) ]


state 207

    (41) value_boolean -> comparison_operation .

    LOGICAND        reduce using rule 41 (value_boolean -> comparison_operation .)
    LOGICOR         reduce using rule 41 (value_boolean -> comparison_operation .)
    RPARENT         reduce using rule 41 (value_boolean -> comparison_operation .)
    COMMA           reduce using rule 41 (value_boolean -> comparison_operation .)
    DOTANDCOMMA     reduce using rule 41 (value_boolean -> comparison_operation .)
    RBRACKET        reduce using rule 41 (value_boolean -> comparison_operation .)


state 208

    (103) comparison_operation -> value_numeric .
    (104) comparison_operation -> value_numeric . comparison_operator comparison_operation
    (105) comparison_operator -> . GREATER_THAN
    (106) comparison_operator -> . SMALLER_THAN
    (107) comparison_operator -> . EQUAL_COMPARATION
    (108) comparison_operator -> . INEQUALITY
    (109) comparison_operator -> . GREATER_THAN_OR_EQUAL
    (110) comparison_operator -> . SMALLER_THAN_OR_EQUAL

    LOGICAND        reduce using rule 103 (comparison_operation -> value_numeric .)
    LOGICOR         reduce using rule 103 (comparison_operation -> value_numeric .)
    RPARENT         reduce using rule 103 (comparison_operation -> value_numeric .)
    COMMA           reduce using rule 103 (comparison_operation -> value_numeric .)
    DOTANDCOMMA     reduce using rule 103 (comparison_operation -> value_numeric .)
    RBRACKET        reduce using rule 103 (comparison_operation -> value_numeric .)
    GREATER_THAN    shift and go to state 296
    SMALLER_THAN    shift and go to state 297
    EQUAL_COMPARATION shift and go to state 298
    INEQUALITY      shift and go to state 299
    GREATER_THAN_OR_EQUAL shift and go to state 300
    SMALLER_THAN_OR_EQUAL shift and go to state 301

    comparison_operator            shift and go to state 295

state 209

    (42) value_numeric -> INTEGER .

    GREATER_THAN    reduce using rule 42 (value_numeric -> INTEGER .)
    SMALLER_THAN    reduce using rule 42 (value_numeric -> INTEGER .)
    EQUAL_COMPARATION reduce using rule 42 (value_numeric -> INTEGER .)
    INEQUALITY      reduce using rule 42 (value_numeric -> INTEGER .)
    GREATER_THAN_OR_EQUAL reduce using rule 42 (value_numeric -> INTEGER .)
    SMALLER_THAN_OR_EQUAL reduce using rule 42 (value_numeric -> INTEGER .)
    LOGICAND        reduce using rule 42 (value_numeric -> INTEGER .)
    LOGICOR         reduce using rule 42 (value_numeric -> INTEGER .)
    RPARENT         reduce using rule 42 (value_numeric -> INTEGER .)
    PLUS            reduce using rule 42 (value_numeric -> INTEGER .)
    MINUS           reduce using rule 42 (value_numeric -> INTEGER .)
    TIMES           reduce using rule 42 (value_numeric -> INTEGER .)
    DIVIDE          reduce using rule 42 (value_numeric -> INTEGER .)
    PERCENT         reduce using rule 42 (value_numeric -> INTEGER .)
    COMMA           reduce using rule 42 (value_numeric -> INTEGER .)
    DOTANDCOMMA     reduce using rule 42 (value_numeric -> INTEGER .)
    RBRACKET        reduce using rule 42 (value_numeric -> INTEGER .)


state 210

    (43) value_numeric -> FLOAT_NUMBER .

    GREATER_THAN    reduce using rule 43 (value_numeric -> FLOAT_NUMBER .)
    SMALLER_THAN    reduce using rule 43 (value_numeric -> FLOAT_NUMBER .)
    EQUAL_COMPARATION reduce using rule 43 (value_numeric -> FLOAT_NUMBER .)
    INEQUALITY      reduce using rule 43 (value_numeric -> FLOAT_NUMBER .)
    GREATER_THAN_OR_EQUAL reduce using rule 43 (value_numeric -> FLOAT_NUMBER .)
    SMALLER_THAN_OR_EQUAL reduce using rule 43 (value_numeric -> FLOAT_NUMBER .)
    LOGICAND        reduce using rule 43 (value_numeric -> FLOAT_NUMBER .)
    LOGICOR         reduce using rule 43 (value_numeric -> FLOAT_NUMBER .)
    RPARENT         reduce using rule 43 (value_numeric -> FLOAT_NUMBER .)
    PLUS            reduce using rule 43 (value_numeric -> FLOAT_NUMBER .)
    MINUS           reduce using rule 43 (value_numeric -> FLOAT_NUMBER .)
    TIMES           reduce using rule 43 (value_numeric -> FLOAT_NUMBER .)
    DIVIDE          reduce using rule 43 (value_numeric -> FLOAT_NUMBER .)
    PERCENT         reduce using rule 43 (value_numeric -> FLOAT_NUMBER .)
    COMMA           reduce using rule 43 (value_numeric -> FLOAT_NUMBER .)
    DOTANDCOMMA     reduce using rule 43 (value_numeric -> FLOAT_NUMBER .)
    RBRACKET        reduce using rule 43 (value_numeric -> FLOAT_NUMBER .)


state 211

    (44) value_numeric -> DECIMAL_NUMBER .

    GREATER_THAN    reduce using rule 44 (value_numeric -> DECIMAL_NUMBER .)
    SMALLER_THAN    reduce using rule 44 (value_numeric -> DECIMAL_NUMBER .)
    EQUAL_COMPARATION reduce using rule 44 (value_numeric -> DECIMAL_NUMBER .)
    INEQUALITY      reduce using rule 44 (value_numeric -> DECIMAL_NUMBER .)
    GREATER_THAN_OR_EQUAL reduce using rule 44 (value_numeric -> DECIMAL_NUMBER .)
    SMALLER_THAN_OR_EQUAL reduce using rule 44 (value_numeric -> DECIMAL_NUMBER .)
    LOGICAND        reduce using rule 44 (value_numeric -> DECIMAL_NUMBER .)
    LOGICOR         reduce using rule 44 (value_numeric -> DECIMAL_NUMBER .)
    RPARENT         reduce using rule 44 (value_numeric -> DECIMAL_NUMBER .)
    PLUS            reduce using rule 44 (value_numeric -> DECIMAL_NUMBER .)
    MINUS           reduce using rule 44 (value_numeric -> DECIMAL_NUMBER .)
    TIMES           reduce using rule 44 (value_numeric -> DECIMAL_NUMBER .)
    DIVIDE          reduce using rule 44 (value_numeric -> DECIMAL_NUMBER .)
    PERCENT         reduce using rule 44 (value_numeric -> DECIMAL_NUMBER .)
    COMMA           reduce using rule 44 (value_numeric -> DECIMAL_NUMBER .)
    DOTANDCOMMA     reduce using rule 44 (value_numeric -> DECIMAL_NUMBER .)
    RBRACKET        reduce using rule 44 (value_numeric -> DECIMAL_NUMBER .)


state 212

    (231) stack_struct -> STACK VARIABLE ASSIGNATION . NEW STACK LPARENT RPARENT DOTANDCOMMA

    NEW             shift and go to state 302


state 213

    (242) queue_struct -> QUEUE SMALLER_THAN data_type . GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA

    GREATER_THAN    shift and go to state 303


state 214

    (119) constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .

    PRINT           reduce using rule 119 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    CHARTYPE        reduce using rule 119 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 119 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 119 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 119 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    INTTYPE         reduce using rule 119 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 119 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    VARIABLE        reduce using rule 119 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    STATIC          reduce using rule 119 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    WRITE           reduce using rule 119 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    LPARENT         reduce using rule 119 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    ENUM            reduce using rule 119 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    IF              reduce using rule 119 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    STACK           reduce using rule 119 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    QUEUE           reduce using rule 119 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    CONST           reduce using rule 119 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    THREAD          reduce using rule 119 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    PUBLIC          reduce using rule 119 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    PRIVATE         reduce using rule 119 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    TRY             reduce using rule 119 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    LIST            reduce using rule 119 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    FOR             reduce using rule 119 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    FOREACH         reduce using rule 119 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    WHILE           reduce using rule 119 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    DO              reduce using rule 119 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    RKEY            reduce using rule 119 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)


state 215

    (170) declaration_thread -> THREAD thread_identificator ASSIGNATION . NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (171) declaration_thread -> THREAD thread_identificator ASSIGNATION . NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA

    NEW             shift and go to state 304


state 216

    (190) try_catch_simply -> TRY LKEY all_block_code_try . RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (191) try_catch_finally -> TRY LKEY all_block_code_try . RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    RKEY            shift and go to state 305


state 217

    (194) all_block_code_try -> block_code_try .
    (195) all_block_code_try -> block_code_try . all_block_code_try
    (194) all_block_code_try -> . block_code_try
    (195) all_block_code_try -> . block_code_try all_block_code_try
    (192) block_code_try -> . def_const_or_var
    (193) block_code_try -> . print_data
    (116) def_const_or_var -> . constant_assignation
    (117) def_const_or_var -> . variable_assignation
    (46) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (47) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (118) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (119) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (120) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (121) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (122) access_modifiers -> . PUBLIC
    (123) access_modifiers -> . PRIVATE
    (143) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (144) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (145) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (146) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (147) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    RKEY            reduce using rule 194 (all_block_code_try -> block_code_try .)
    PRINT           shift and go to state 50
    CONST           shift and go to state 85
    PUBLIC          shift and go to state 88
    PRIVATE         shift and go to state 89
    INTTYPE         shift and go to state 136
    STRINGTYPE      shift and go to state 137
    FLOATTYPE       shift and go to state 138
    BOOLTYPE        shift and go to state 139

    block_code_try                 shift and go to state 217
    all_block_code_try             shift and go to state 306
    def_const_or_var               shift and go to state 218
    print_data                     shift and go to state 219
    constant_assignation           shift and go to state 48
    variable_assignation           shift and go to state 49
    access_modifiers               shift and go to state 220
    assignation_type_value_multiple shift and go to state 86

state 218

    (192) block_code_try -> def_const_or_var .

    PRINT           reduce using rule 192 (block_code_try -> def_const_or_var .)
    CONST           reduce using rule 192 (block_code_try -> def_const_or_var .)
    PUBLIC          reduce using rule 192 (block_code_try -> def_const_or_var .)
    PRIVATE         reduce using rule 192 (block_code_try -> def_const_or_var .)
    INTTYPE         reduce using rule 192 (block_code_try -> def_const_or_var .)
    STRINGTYPE      reduce using rule 192 (block_code_try -> def_const_or_var .)
    FLOATTYPE       reduce using rule 192 (block_code_try -> def_const_or_var .)
    BOOLTYPE        reduce using rule 192 (block_code_try -> def_const_or_var .)
    RKEY            reduce using rule 192 (block_code_try -> def_const_or_var .)


state 219

    (193) block_code_try -> print_data .

    PRINT           reduce using rule 193 (block_code_try -> print_data .)
    CONST           reduce using rule 193 (block_code_try -> print_data .)
    PUBLIC          reduce using rule 193 (block_code_try -> print_data .)
    PRIVATE         reduce using rule 193 (block_code_try -> print_data .)
    INTTYPE         reduce using rule 193 (block_code_try -> print_data .)
    STRINGTYPE      reduce using rule 193 (block_code_try -> print_data .)
    FLOATTYPE       reduce using rule 193 (block_code_try -> print_data .)
    BOOLTYPE        reduce using rule 193 (block_code_try -> print_data .)
    RKEY            reduce using rule 193 (block_code_try -> print_data .)


state 220

    (118) constant_assignation -> access_modifiers . CONST assignation_type_value_multiple DOTANDCOMMA
    (120) variable_assignation -> access_modifiers . assignation_type_value_multiple DOTANDCOMMA
    (143) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (144) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (145) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (146) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (147) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    CONST           shift and go to state 134
    INTTYPE         shift and go to state 136
    STRINGTYPE      shift and go to state 137
    FLOATTYPE       shift and go to state 138
    BOOLTYPE        shift and go to state 139

    assignation_type_value_multiple shift and go to state 135

state 221

    (213) list_empty -> LIST SMALLER_THAN STRINGTYPE . GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (215) list_full -> LIST SMALLER_THAN STRINGTYPE . GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    GREATER_THAN    shift and go to state 307


state 222

    (214) list_empty -> LIST SMALLER_THAN INTTYPE . GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (216) list_full -> LIST SMALLER_THAN INTTYPE . GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    GREATER_THAN    shift and go to state 308


state 223

    (208) for_simple -> FOR LPARENT INTTYPE . assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (209) for_simple -> FOR LPARENT INTTYPE . assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (129) assignation_int -> . VARIABLE ASSIGNATION INTEGER
    (130) assignation_int -> . VARIABLE ASSIGNATION VARIABLE
    (131) assignation_int -> . VARIABLE ASSIGNATION arithmetic_operation

    VARIABLE        shift and go to state 125

    assignation_int                shift and go to state 309

state 224

    (210) for_each -> FOREACH LPARENT data_type . VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY

    VARIABLE        shift and go to state 310


state 225

    (204) normal_while -> WHILE LPARENT boolean_operation . RPARENT LKEY all_block_code RKEY

    RPARENT         shift and go to state 311


state 226

    (205) do_while -> DO LKEY all_block_code . RKEY WHILE LPARENT boolean_operation RPARENT

    RKEY            shift and go to state 312


state 227

    (174) concurrent_method -> STATIC VOID thread_identificator LPARENT . RPARENT LKEY thread_logic RKEY

    RPARENT         shift and go to state 313


state 228

    (161) method_definition -> STATIC VOID METHOD LPARENT . func_parameters RPARENT LKEY RKEY
    (165) method_definition -> STATIC VOID METHOD LPARENT . RPARENT LKEY RKEY
    (167) func_parameters -> . func_parameter
    (168) func_parameters -> . func_parameter COMMA func_parameters
    (166) func_parameter -> . data_type VARIABLE
    (27) data_type -> . CHARTYPE
    (28) data_type -> . STRINGTYPE
    (29) data_type -> . FLOATTYPE
    (30) data_type -> . DECIMALTYPE
    (31) data_type -> . INTTYPE
    (32) data_type -> . BOOLTYPE
    (33) data_type -> . array_type
    (34) data_type -> . METHOD
    (51) array_type -> . CHARTYPE LBRACKET RBRACKET
    (52) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (53) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (54) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (55) array_type -> . INTTYPE LBRACKET RBRACKET
    (56) array_type -> . BOOLTYPE LBRACKET RBRACKET

    RPARENT         shift and go to state 315
    CHARTYPE        shift and go to state 99
    STRINGTYPE      shift and go to state 100
    FLOATTYPE       shift and go to state 101
    DECIMALTYPE     shift and go to state 102
    INTTYPE         shift and go to state 103
    BOOLTYPE        shift and go to state 104
    METHOD          shift and go to state 98

    func_parameters                shift and go to state 314
    func_parameter                 shift and go to state 316
    data_type                      shift and go to state 317
    array_type                     shift and go to state 105

state 229

    (160) method_definition -> STATIC data_type METHOD LPARENT . func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (164) method_definition -> STATIC data_type METHOD LPARENT . RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (167) func_parameters -> . func_parameter
    (168) func_parameters -> . func_parameter COMMA func_parameters
    (166) func_parameter -> . data_type VARIABLE
    (27) data_type -> . CHARTYPE
    (28) data_type -> . STRINGTYPE
    (29) data_type -> . FLOATTYPE
    (30) data_type -> . DECIMALTYPE
    (31) data_type -> . INTTYPE
    (32) data_type -> . BOOLTYPE
    (33) data_type -> . array_type
    (34) data_type -> . METHOD
    (51) array_type -> . CHARTYPE LBRACKET RBRACKET
    (52) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (53) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (54) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (55) array_type -> . INTTYPE LBRACKET RBRACKET
    (56) array_type -> . BOOLTYPE LBRACKET RBRACKET

    RPARENT         shift and go to state 319
    CHARTYPE        shift and go to state 99
    STRINGTYPE      shift and go to state 100
    FLOATTYPE       shift and go to state 101
    DECIMALTYPE     shift and go to state 102
    INTTYPE         shift and go to state 103
    BOOLTYPE        shift and go to state 104
    METHOD          shift and go to state 98

    data_type                      shift and go to state 317
    func_parameters                shift and go to state 318
    func_parameter                 shift and go to state 316
    array_type                     shift and go to state 105

state 230

    (51) array_type -> CHARTYPE LBRACKET RBRACKET .

    METHOD          reduce using rule 51 (array_type -> CHARTYPE LBRACKET RBRACKET .)
    GREATER_THAN    reduce using rule 51 (array_type -> CHARTYPE LBRACKET RBRACKET .)
    VARIABLE        reduce using rule 51 (array_type -> CHARTYPE LBRACKET RBRACKET .)


state 231

    (52) array_type -> STRINGTYPE LBRACKET RBRACKET .

    METHOD          reduce using rule 52 (array_type -> STRINGTYPE LBRACKET RBRACKET .)
    GREATER_THAN    reduce using rule 52 (array_type -> STRINGTYPE LBRACKET RBRACKET .)
    VARIABLE        reduce using rule 52 (array_type -> STRINGTYPE LBRACKET RBRACKET .)


state 232

    (53) array_type -> FLOATTYPE LBRACKET RBRACKET .

    METHOD          reduce using rule 53 (array_type -> FLOATTYPE LBRACKET RBRACKET .)
    GREATER_THAN    reduce using rule 53 (array_type -> FLOATTYPE LBRACKET RBRACKET .)
    VARIABLE        reduce using rule 53 (array_type -> FLOATTYPE LBRACKET RBRACKET .)


state 233

    (54) array_type -> DECIMALTYPE LBRACKET RBRACKET .

    METHOD          reduce using rule 54 (array_type -> DECIMALTYPE LBRACKET RBRACKET .)
    GREATER_THAN    reduce using rule 54 (array_type -> DECIMALTYPE LBRACKET RBRACKET .)
    VARIABLE        reduce using rule 54 (array_type -> DECIMALTYPE LBRACKET RBRACKET .)


state 234

    (55) array_type -> INTTYPE LBRACKET RBRACKET .

    METHOD          reduce using rule 55 (array_type -> INTTYPE LBRACKET RBRACKET .)
    GREATER_THAN    reduce using rule 55 (array_type -> INTTYPE LBRACKET RBRACKET .)
    VARIABLE        reduce using rule 55 (array_type -> INTTYPE LBRACKET RBRACKET .)


state 235

    (56) array_type -> BOOLTYPE LBRACKET RBRACKET .

    METHOD          reduce using rule 56 (array_type -> BOOLTYPE LBRACKET RBRACKET .)
    GREATER_THAN    reduce using rule 56 (array_type -> BOOLTYPE LBRACKET RBRACKET .)
    VARIABLE        reduce using rule 56 (array_type -> BOOLTYPE LBRACKET RBRACKET .)


state 236

    (184) statement_lambda -> LPARENT VARIABLE ARROW LKEY . all_block_code RKEY RPARENT
    (25) all_block_code -> . block_code
    (26) all_block_code -> . block_code all_block_code
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . array_assignation
    (8) block_code -> . array_value_assign
    (9) block_code -> . array_indexing
    (10) block_code -> . thread_main
    (11) block_code -> . concurrent_method
    (12) block_code -> . method_definition
    (13) block_code -> . block_try_catch
    (14) block_code -> . lists
    (15) block_code -> . functions_list
    (16) block_code -> . statement_lambda
    (17) block_code -> . enums
    (18) block_code -> . normal_if
    (19) block_code -> . block_for
    (20) block_code -> . block_while
    (21) block_code -> . stack_struct
    (22) block_code -> . functions_stack
    (23) block_code -> . queue_struct
    (24) block_code -> . functions_queue
    (116) def_const_or_var -> . constant_assignation
    (117) def_const_or_var -> . variable_assignation
    (46) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (47) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (57) array_assignation -> . CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA
    (58) array_assignation -> . STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
    (59) array_assignation -> . FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
    (60) array_assignation -> . DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA
    (61) array_assignation -> . INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
    (62) array_assignation -> . BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
    (88) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (89) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (86) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (87) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (169) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (174) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (175) concurrent_method -> . WRITE
    (158) method_definition -> . access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (159) method_definition -> . access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY
    (160) method_definition -> . STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (161) method_definition -> . STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY
    (162) method_definition -> . access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (163) method_definition -> . access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY
    (164) method_definition -> . STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (165) method_definition -> . STATIC VOID METHOD LPARENT RPARENT LKEY RKEY
    (188) block_try_catch -> . try_catch_simply
    (189) block_try_catch -> . try_catch_finally
    (211) lists -> . list_empty
    (212) lists -> . list_full
    (221) functions_list -> . list_func_clear
    (222) functions_list -> . list_func_count
    (223) functions_list -> . list_func_add
    (224) functions_list -> . list_func_removeat
    (184) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (185) enums -> . ENUM METHOD LKEY list_enums RKEY
    (198) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (199) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (206) block_for -> . for_simple
    (207) block_for -> . for_each
    (202) block_while -> . normal_while
    (203) block_while -> . do_while
    (231) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (232) functions_stack -> . stack_push
    (233) functions_stack -> . stack_pop
    (234) functions_stack -> . stack_clear
    (235) functions_stack -> . stack_peek
    (236) functions_stack -> . stack_isEmpty
    (242) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (243) functions_queue -> . queue_enqueue
    (244) functions_queue -> . queue_dequeue
    (245) functions_queue -> . queue_clear
    (246) functions_queue -> . queue_isEmpty
    (247) functions_queue -> . queue_peek
    (118) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (119) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (120) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (121) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (170) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (171) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (122) access_modifiers -> . PUBLIC
    (123) access_modifiers -> . PRIVATE
    (190) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (191) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (213) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (214) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (215) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (216) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (225) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (226) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (227) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (228) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (229) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (230) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (208) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (209) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (210) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (204) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (205) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (237) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (238) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (239) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (240) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (241) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (248) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (249) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (250) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (252) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (251) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (143) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (144) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (145) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (146) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (147) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 50
    CHARTYPE        shift and go to state 51
    STRINGTYPE      shift and go to state 24
    FLOATTYPE       shift and go to state 52
    DECIMALTYPE     shift and go to state 53
    INTTYPE         shift and go to state 54
    BOOLTYPE        shift and go to state 55
    VARIABLE        shift and go to state 25
    STATIC          shift and go to state 22
    WRITE           shift and go to state 57
    LPARENT         shift and go to state 23
    ENUM            shift and go to state 67
    IF              shift and go to state 68
    STACK           shift and go to state 73
    QUEUE           shift and go to state 79
    CONST           shift and go to state 85
    THREAD          shift and go to state 87
    PUBLIC          shift and go to state 88
    PRIVATE         shift and go to state 89
    TRY             shift and go to state 90
    LIST            shift and go to state 91
    FOR             shift and go to state 92
    FOREACH         shift and go to state 93
    WHILE           shift and go to state 94
    DO              shift and go to state 95

    all_block_code                 shift and go to state 320
    block_code                     shift and go to state 27
    def_const_or_var               shift and go to state 28
    print_data                     shift and go to state 29
    array_assignation              shift and go to state 30
    array_value_assign             shift and go to state 31
    array_indexing                 shift and go to state 32
    thread_main                    shift and go to state 33
    concurrent_method              shift and go to state 34
    method_definition              shift and go to state 35
    block_try_catch                shift and go to state 36
    lists                          shift and go to state 37
    functions_list                 shift and go to state 38
    statement_lambda               shift and go to state 39
    enums                          shift and go to state 40
    normal_if                      shift and go to state 41
    block_for                      shift and go to state 42
    block_while                    shift and go to state 43
    stack_struct                   shift and go to state 44
    functions_stack                shift and go to state 45
    queue_struct                   shift and go to state 46
    functions_queue                shift and go to state 47
    constant_assignation           shift and go to state 48
    variable_assignation           shift and go to state 49
    declaration_thread             shift and go to state 56
    access_modifiers               shift and go to state 58
    try_catch_simply               shift and go to state 59
    try_catch_finally              shift and go to state 60
    list_empty                     shift and go to state 61
    list_full                      shift and go to state 62
    list_func_clear                shift and go to state 63
    list_func_count                shift and go to state 64
    list_func_add                  shift and go to state 65
    list_func_removeat             shift and go to state 66
    for_simple                     shift and go to state 69
    for_each                       shift and go to state 70
    normal_while                   shift and go to state 71
    do_while                       shift and go to state 72
    stack_push                     shift and go to state 74
    stack_pop                      shift and go to state 75
    stack_clear                    shift and go to state 76
    stack_peek                     shift and go to state 77
    stack_isEmpty                  shift and go to state 78
    queue_enqueue                  shift and go to state 80
    queue_dequeue                  shift and go to state 81
    queue_clear                    shift and go to state 82
    queue_isEmpty                  shift and go to state 83
    queue_peek                     shift and go to state 84
    assignation_type_value_multiple shift and go to state 86

state 237

    (58) array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 321


state 238

    (66) string_array_assignation -> VARIABLE . ASSIGNATION LBRACKET string_content_multiple RBRACKET

    ASSIGNATION     shift and go to state 322


state 239

    (151) assignation_string_multiple -> assignation_string COMMA assignation_string_multiple .

    DOTANDCOMMA     reduce using rule 151 (assignation_string_multiple -> assignation_string COMMA assignation_string_multiple .)


state 240

    (133) assignation_string -> VARIABLE ASSIGNATION VARIABLE .

    COMMA           reduce using rule 133 (assignation_string -> VARIABLE ASSIGNATION VARIABLE .)
    DOTANDCOMMA     reduce using rule 133 (assignation_string -> VARIABLE ASSIGNATION VARIABLE .)


state 241

    (132) assignation_string -> VARIABLE ASSIGNATION STRING .

    COMMA           reduce using rule 132 (assignation_string -> VARIABLE ASSIGNATION STRING .)
    DOTANDCOMMA     reduce using rule 132 (assignation_string -> VARIABLE ASSIGNATION STRING .)


state 242

    (88) array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET . ASSIGNATION value DOTANDCOMMA
    (86) array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .

    ASSIGNATION     shift and go to state 323
    PRINT           reduce using rule 86 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    CHARTYPE        reduce using rule 86 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    STRINGTYPE      reduce using rule 86 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    FLOATTYPE       reduce using rule 86 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    DECIMALTYPE     reduce using rule 86 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    INTTYPE         reduce using rule 86 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    BOOLTYPE        reduce using rule 86 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    VARIABLE        reduce using rule 86 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    STATIC          reduce using rule 86 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    WRITE           reduce using rule 86 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    LPARENT         reduce using rule 86 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    ENUM            reduce using rule 86 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    IF              reduce using rule 86 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    STACK           reduce using rule 86 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    QUEUE           reduce using rule 86 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    CONST           reduce using rule 86 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    THREAD          reduce using rule 86 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    PUBLIC          reduce using rule 86 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    PRIVATE         reduce using rule 86 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    TRY             reduce using rule 86 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    LIST            reduce using rule 86 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    FOR             reduce using rule 86 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    FOREACH         reduce using rule 86 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    WHILE           reduce using rule 86 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    DO              reduce using rule 86 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    RKEY            reduce using rule 86 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)


state 243

    (89) array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET . ASSIGNATION value DOTANDCOMMA
    (87) array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .

    ASSIGNATION     shift and go to state 324
    PRINT           reduce using rule 87 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    CHARTYPE        reduce using rule 87 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    STRINGTYPE      reduce using rule 87 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    FLOATTYPE       reduce using rule 87 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    DECIMALTYPE     reduce using rule 87 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    INTTYPE         reduce using rule 87 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    BOOLTYPE        reduce using rule 87 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    VARIABLE        reduce using rule 87 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    STATIC          reduce using rule 87 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    WRITE           reduce using rule 87 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    LPARENT         reduce using rule 87 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    ENUM            reduce using rule 87 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    IF              reduce using rule 87 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    STACK           reduce using rule 87 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    QUEUE           reduce using rule 87 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    CONST           reduce using rule 87 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    THREAD          reduce using rule 87 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    PUBLIC          reduce using rule 87 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    PRIVATE         reduce using rule 87 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    TRY             reduce using rule 87 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    LIST            reduce using rule 87 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    FOR             reduce using rule 87 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    FOREACH         reduce using rule 87 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    WHILE           reduce using rule 87 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    DO              reduce using rule 87 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    RKEY            reduce using rule 87 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)


state 244

    (225) list_func_clear -> VARIABLE DOT CLEAR LPARENT . RPARENT DOTANDCOMMA
    (239) stack_clear -> VARIABLE DOT CLEAR LPARENT . RPARENT DOTANDCOMMA
    (250) queue_clear -> VARIABLE DOT CLEAR LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 325


state 245

    (226) list_func_count -> VARIABLE DOT COUNT LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 326


state 246

    (227) list_func_add -> VARIABLE DOT ADD LPARENT . INTEGER RPARENT DOTANDCOMMA
    (228) list_func_add -> VARIABLE DOT ADD LPARENT . STRING RPARENT DOTANDCOMMA

    INTEGER         shift and go to state 327
    STRING          shift and go to state 328


state 247

    (229) list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT . INTEGER RPARENT DOTANDCOMMA
    (230) list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT . STRING RPARENT DOTANDCOMMA

    INTEGER         shift and go to state 329
    STRING          shift and go to state 330


state 248

    (237) stack_push -> VARIABLE DOT PUSH LPARENT . value RPARENT DOTANDCOMMA
    (90) value -> . value_numeric
    (91) value -> . value_boolean
    (92) value -> . value_string
    (93) value -> . VARIABLE
    (94) value -> . read_data
    (95) value -> . array
    (42) value_numeric -> . INTEGER
    (43) value_numeric -> . FLOAT_NUMBER
    (44) value_numeric -> . DECIMAL_NUMBER
    (45) value_numeric -> . VARIABLE
    (38) value_boolean -> . BOOLTRUE
    (39) value_boolean -> . BOOLFALSE
    (40) value_boolean -> . VARIABLE
    (41) value_boolean -> . comparison_operation
    (35) value_string -> . STRING
    (36) value_string -> . CHAR
    (37) value_string -> . concatenation
    (48) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (83) array -> . LBRACKET array_content RBRACKET
    (103) comparison_operation -> . value_numeric
    (104) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (49) concatenation -> . STRING
    (50) concatenation -> . STRING PLUS concatenation

    VARIABLE        shift and go to state 331
    INTEGER         shift and go to state 209
    FLOAT_NUMBER    shift and go to state 210
    DECIMAL_NUMBER  shift and go to state 211
    BOOLTRUE        shift and go to state 204
    BOOLFALSE       shift and go to state 205
    STRING          shift and go to state 338
    CHAR            shift and go to state 339
    READ            shift and go to state 341
    LBRACKET        shift and go to state 342

    value                          shift and go to state 332
    value_numeric                  shift and go to state 333
    value_boolean                  shift and go to state 334
    value_string                   shift and go to state 335
    read_data                      shift and go to state 336
    array                          shift and go to state 337
    comparison_operation           shift and go to state 207
    concatenation                  shift and go to state 340

state 249

    (238) stack_pop -> VARIABLE DOT POP LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 343


state 250

    (240) stack_peek -> VARIABLE DOT PEEK LPARENT . RPARENT DOTANDCOMMA
    (251) queue_peek -> VARIABLE DOT PEEK LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 344


state 251

    (241) stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT . RPARENT DOTANDCOMMA
    (252) queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 345


state 252

    (248) queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT . value RPARENT DOTANDCOMMA
    (90) value -> . value_numeric
    (91) value -> . value_boolean
    (92) value -> . value_string
    (93) value -> . VARIABLE
    (94) value -> . read_data
    (95) value -> . array
    (42) value_numeric -> . INTEGER
    (43) value_numeric -> . FLOAT_NUMBER
    (44) value_numeric -> . DECIMAL_NUMBER
    (45) value_numeric -> . VARIABLE
    (38) value_boolean -> . BOOLTRUE
    (39) value_boolean -> . BOOLFALSE
    (40) value_boolean -> . VARIABLE
    (41) value_boolean -> . comparison_operation
    (35) value_string -> . STRING
    (36) value_string -> . CHAR
    (37) value_string -> . concatenation
    (48) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (83) array -> . LBRACKET array_content RBRACKET
    (103) comparison_operation -> . value_numeric
    (104) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (49) concatenation -> . STRING
    (50) concatenation -> . STRING PLUS concatenation

    VARIABLE        shift and go to state 331
    INTEGER         shift and go to state 209
    FLOAT_NUMBER    shift and go to state 210
    DECIMAL_NUMBER  shift and go to state 211
    BOOLTRUE        shift and go to state 204
    BOOLFALSE       shift and go to state 205
    STRING          shift and go to state 338
    CHAR            shift and go to state 339
    READ            shift and go to state 341
    LBRACKET        shift and go to state 342

    value                          shift and go to state 346
    value_numeric                  shift and go to state 333
    value_boolean                  shift and go to state 334
    value_string                   shift and go to state 335
    read_data                      shift and go to state 336
    array                          shift and go to state 337
    comparison_operation           shift and go to state 207
    concatenation                  shift and go to state 340

state 253

    (249) queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 347


state 254

    (46) print_data -> PRINT LPARENT STRING RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 348


state 255

    (47) print_data -> PRINT LPARENT VARIABLE RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 349


state 256

    (57) array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 350


state 257

    (63) char_array_assignation -> VARIABLE . ASSIGNATION LBRACKET char_content_multiple RBRACKET

    ASSIGNATION     shift and go to state 351


state 258

    (59) array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 352


state 259

    (69) float_array_assignation -> VARIABLE . ASSIGNATION LBRACKET float_content_multiple RBRACKET

    ASSIGNATION     shift and go to state 353


state 260

    (153) assignation_float_multiple -> assignation_float COMMA assignation_float_multiple .

    DOTANDCOMMA     reduce using rule 153 (assignation_float_multiple -> assignation_float COMMA assignation_float_multiple .)


state 261

    (135) assignation_float -> VARIABLE ASSIGNATION VARIABLE .
    (45) value_numeric -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 45 (value_numeric -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 45 (value_numeric -> VARIABLE .)
    PLUS            reduce using rule 45 (value_numeric -> VARIABLE .)
    MINUS           reduce using rule 45 (value_numeric -> VARIABLE .)
    TIMES           reduce using rule 45 (value_numeric -> VARIABLE .)
    DIVIDE          reduce using rule 45 (value_numeric -> VARIABLE .)
    PERCENT         reduce using rule 45 (value_numeric -> VARIABLE .)
    COMMA           reduce using rule 45 (value_numeric -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 45 (value_numeric -> VARIABLE .)

  ! COMMA           [ reduce using rule 135 (assignation_float -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 135 (assignation_float -> VARIABLE ASSIGNATION VARIABLE .) ]


state 262

    (134) assignation_float -> VARIABLE ASSIGNATION FLOAT_NUMBER .
    (43) value_numeric -> FLOAT_NUMBER .

  ! reduce/reduce conflict for COMMA resolved using rule 43 (value_numeric -> FLOAT_NUMBER .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 43 (value_numeric -> FLOAT_NUMBER .)
    PLUS            reduce using rule 43 (value_numeric -> FLOAT_NUMBER .)
    MINUS           reduce using rule 43 (value_numeric -> FLOAT_NUMBER .)
    TIMES           reduce using rule 43 (value_numeric -> FLOAT_NUMBER .)
    DIVIDE          reduce using rule 43 (value_numeric -> FLOAT_NUMBER .)
    PERCENT         reduce using rule 43 (value_numeric -> FLOAT_NUMBER .)
    COMMA           reduce using rule 43 (value_numeric -> FLOAT_NUMBER .)
    DOTANDCOMMA     reduce using rule 43 (value_numeric -> FLOAT_NUMBER .)

  ! COMMA           [ reduce using rule 134 (assignation_float -> VARIABLE ASSIGNATION FLOAT_NUMBER .) ]
  ! DOTANDCOMMA     [ reduce using rule 134 (assignation_float -> VARIABLE ASSIGNATION FLOAT_NUMBER .) ]


state 263

    (136) assignation_float -> VARIABLE ASSIGNATION arithmetic_operation .

    COMMA           reduce using rule 136 (assignation_float -> VARIABLE ASSIGNATION arithmetic_operation .)
    DOTANDCOMMA     reduce using rule 136 (assignation_float -> VARIABLE ASSIGNATION arithmetic_operation .)


state 264

    (96) arithmetic_operation -> value_numeric .
    (97) arithmetic_operation -> value_numeric . arithmetic_operator arithmetic_operation
    (98) arithmetic_operator -> . PLUS
    (99) arithmetic_operator -> . MINUS
    (100) arithmetic_operator -> . TIMES
    (101) arithmetic_operator -> . DIVIDE
    (102) arithmetic_operator -> . PERCENT

    COMMA           reduce using rule 96 (arithmetic_operation -> value_numeric .)
    DOTANDCOMMA     reduce using rule 96 (arithmetic_operation -> value_numeric .)
    PLUS            shift and go to state 355
    MINUS           shift and go to state 356
    TIMES           shift and go to state 357
    DIVIDE          shift and go to state 358
    PERCENT         shift and go to state 359

    arithmetic_operator            shift and go to state 354

state 265

    (60) array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 360


state 266

    (75) decimal_array_assignation -> VARIABLE . ASSIGNATION LBRACKET decimal_content_multiple RBRACKET

    ASSIGNATION     shift and go to state 361


state 267

    (61) array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 362


state 268

    (72) int_array_assignation -> VARIABLE . ASSIGNATION LBRACKET int_content_multiple RBRACKET

    ASSIGNATION     shift and go to state 363


state 269

    (149) assignation_int_multiple -> assignation_int COMMA assignation_int_multiple .

    DOTANDCOMMA     reduce using rule 149 (assignation_int_multiple -> assignation_int COMMA assignation_int_multiple .)


state 270

    (130) assignation_int -> VARIABLE ASSIGNATION VARIABLE .
    (45) value_numeric -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 45 (value_numeric -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 45 (value_numeric -> VARIABLE .)
    PLUS            reduce using rule 45 (value_numeric -> VARIABLE .)
    MINUS           reduce using rule 45 (value_numeric -> VARIABLE .)
    TIMES           reduce using rule 45 (value_numeric -> VARIABLE .)
    DIVIDE          reduce using rule 45 (value_numeric -> VARIABLE .)
    PERCENT         reduce using rule 45 (value_numeric -> VARIABLE .)
    COMMA           reduce using rule 45 (value_numeric -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 45 (value_numeric -> VARIABLE .)

  ! COMMA           [ reduce using rule 130 (assignation_int -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 130 (assignation_int -> VARIABLE ASSIGNATION VARIABLE .) ]


state 271

    (129) assignation_int -> VARIABLE ASSIGNATION INTEGER .
    (42) value_numeric -> INTEGER .

  ! reduce/reduce conflict for COMMA resolved using rule 42 (value_numeric -> INTEGER .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 42 (value_numeric -> INTEGER .)
    PLUS            reduce using rule 42 (value_numeric -> INTEGER .)
    MINUS           reduce using rule 42 (value_numeric -> INTEGER .)
    TIMES           reduce using rule 42 (value_numeric -> INTEGER .)
    DIVIDE          reduce using rule 42 (value_numeric -> INTEGER .)
    PERCENT         reduce using rule 42 (value_numeric -> INTEGER .)
    COMMA           reduce using rule 42 (value_numeric -> INTEGER .)
    DOTANDCOMMA     reduce using rule 42 (value_numeric -> INTEGER .)

  ! COMMA           [ reduce using rule 129 (assignation_int -> VARIABLE ASSIGNATION INTEGER .) ]
  ! DOTANDCOMMA     [ reduce using rule 129 (assignation_int -> VARIABLE ASSIGNATION INTEGER .) ]


state 272

    (131) assignation_int -> VARIABLE ASSIGNATION arithmetic_operation .

    COMMA           reduce using rule 131 (assignation_int -> VARIABLE ASSIGNATION arithmetic_operation .)
    DOTANDCOMMA     reduce using rule 131 (assignation_int -> VARIABLE ASSIGNATION arithmetic_operation .)


state 273

    (62) array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 364


state 274

    (78) bool_array_assignation -> VARIABLE . ASSIGNATION LBRACKET bool_content_multiple RBRACKET

    ASSIGNATION     shift and go to state 365


state 275

    (155) assignation_true_multiple -> assignation_true COMMA assignation_true_multiple .

    DOTANDCOMMA     reduce using rule 155 (assignation_true_multiple -> assignation_true COMMA assignation_true_multiple .)


state 276

    (137) assignation_true -> VARIABLE . ASSIGNATION BOOLTRUE
    (138) assignation_true -> VARIABLE . ASSIGNATION VARIABLE
    (139) assignation_true -> VARIABLE . ASSIGNATION boolean_operation

    ASSIGNATION     shift and go to state 366


state 277

    (157) assignation_false_multiple -> assignation_false COMMA assignation_false_multiple .

    DOTANDCOMMA     reduce using rule 157 (assignation_false_multiple -> assignation_false COMMA assignation_false_multiple .)


state 278

    (140) assignation_false -> VARIABLE . ASSIGNATION BOOLFALSE
    (141) assignation_false -> VARIABLE . ASSIGNATION VARIABLE
    (142) assignation_false -> VARIABLE . ASSIGNATION boolean_operation

    ASSIGNATION     shift and go to state 367


state 279

    (138) assignation_true -> VARIABLE ASSIGNATION VARIABLE .
    (141) assignation_false -> VARIABLE ASSIGNATION VARIABLE .
    (40) value_boolean -> VARIABLE .
    (45) value_numeric -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 138 (assignation_true -> VARIABLE ASSIGNATION VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 138 (assignation_true -> VARIABLE ASSIGNATION VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 40 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 40 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for LOGICAND resolved using rule 40 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for LOGICOR resolved using rule 40 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 40 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 40 (value_boolean -> VARIABLE .)
    LOGICAND        reduce using rule 40 (value_boolean -> VARIABLE .)
    LOGICOR         reduce using rule 40 (value_boolean -> VARIABLE .)
    COMMA           reduce using rule 40 (value_boolean -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 40 (value_boolean -> VARIABLE .)
    GREATER_THAN    reduce using rule 45 (value_numeric -> VARIABLE .)
    SMALLER_THAN    reduce using rule 45 (value_numeric -> VARIABLE .)
    EQUAL_COMPARATION reduce using rule 45 (value_numeric -> VARIABLE .)
    INEQUALITY      reduce using rule 45 (value_numeric -> VARIABLE .)
    GREATER_THAN_OR_EQUAL reduce using rule 45 (value_numeric -> VARIABLE .)
    SMALLER_THAN_OR_EQUAL reduce using rule 45 (value_numeric -> VARIABLE .)

  ! COMMA           [ reduce using rule 138 (assignation_true -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 138 (assignation_true -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! COMMA           [ reduce using rule 141 (assignation_false -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 141 (assignation_false -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! LOGICAND        [ reduce using rule 45 (value_numeric -> VARIABLE .) ]
  ! LOGICOR         [ reduce using rule 45 (value_numeric -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 45 (value_numeric -> VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 45 (value_numeric -> VARIABLE .) ]


state 280

    (137) assignation_true -> VARIABLE ASSIGNATION BOOLTRUE .
    (38) value_boolean -> BOOLTRUE .

  ! reduce/reduce conflict for COMMA resolved using rule 38 (value_boolean -> BOOLTRUE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 38 (value_boolean -> BOOLTRUE .)
    LOGICAND        reduce using rule 38 (value_boolean -> BOOLTRUE .)
    LOGICOR         reduce using rule 38 (value_boolean -> BOOLTRUE .)
    COMMA           reduce using rule 38 (value_boolean -> BOOLTRUE .)
    DOTANDCOMMA     reduce using rule 38 (value_boolean -> BOOLTRUE .)

  ! COMMA           [ reduce using rule 137 (assignation_true -> VARIABLE ASSIGNATION BOOLTRUE .) ]
  ! DOTANDCOMMA     [ reduce using rule 137 (assignation_true -> VARIABLE ASSIGNATION BOOLTRUE .) ]


state 281

    (139) assignation_true -> VARIABLE ASSIGNATION boolean_operation .
    (142) assignation_false -> VARIABLE ASSIGNATION boolean_operation .

  ! reduce/reduce conflict for COMMA resolved using rule 139 (assignation_true -> VARIABLE ASSIGNATION boolean_operation .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 139 (assignation_true -> VARIABLE ASSIGNATION boolean_operation .)
    COMMA           reduce using rule 139 (assignation_true -> VARIABLE ASSIGNATION boolean_operation .)
    DOTANDCOMMA     reduce using rule 139 (assignation_true -> VARIABLE ASSIGNATION boolean_operation .)

  ! COMMA           [ reduce using rule 142 (assignation_false -> VARIABLE ASSIGNATION boolean_operation .) ]
  ! DOTANDCOMMA     [ reduce using rule 142 (assignation_false -> VARIABLE ASSIGNATION boolean_operation .) ]


state 282

    (140) assignation_false -> VARIABLE ASSIGNATION BOOLFALSE .
    (39) value_boolean -> BOOLFALSE .

  ! reduce/reduce conflict for COMMA resolved using rule 39 (value_boolean -> BOOLFALSE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 39 (value_boolean -> BOOLFALSE .)
    LOGICAND        reduce using rule 39 (value_boolean -> BOOLFALSE .)
    LOGICOR         reduce using rule 39 (value_boolean -> BOOLFALSE .)
    COMMA           reduce using rule 39 (value_boolean -> BOOLFALSE .)
    DOTANDCOMMA     reduce using rule 39 (value_boolean -> BOOLFALSE .)

  ! COMMA           [ reduce using rule 140 (assignation_false -> VARIABLE ASSIGNATION BOOLFALSE .) ]
  ! DOTANDCOMMA     [ reduce using rule 140 (assignation_false -> VARIABLE ASSIGNATION BOOLFALSE .) ]


state 283

    (169) thread_main -> declaration_thread declaration_thread thread_init thread_init . thread_wait thread_wait
    (173) thread_wait -> . thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA
    (183) thread_identificator -> . VARIABLE

    VARIABLE        shift and go to state 147

    thread_wait                    shift and go to state 368
    thread_identificator           shift and go to state 369

state 284

    (172) thread_init -> thread_identificator DOT . START LPARENT RPARENT DOTANDCOMMA

    START           shift and go to state 370


state 285

    (158) method_definition -> access_modifiers STATIC data_type METHOD . LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (162) method_definition -> access_modifiers STATIC data_type METHOD . LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY

    LPARENT         shift and go to state 371


state 286

    (159) method_definition -> access_modifiers STATIC VOID METHOD . LPARENT func_parameters RPARENT LKEY RKEY
    (163) method_definition -> access_modifiers STATIC VOID METHOD . LPARENT RPARENT LKEY RKEY

    LPARENT         shift and go to state 372


state 287

    (118) constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .

    PRINT           reduce using rule 118 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    CHARTYPE        reduce using rule 118 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 118 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 118 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 118 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    INTTYPE         reduce using rule 118 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 118 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    VARIABLE        reduce using rule 118 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    STATIC          reduce using rule 118 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    WRITE           reduce using rule 118 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    LPARENT         reduce using rule 118 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    ENUM            reduce using rule 118 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    IF              reduce using rule 118 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    STACK           reduce using rule 118 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    QUEUE           reduce using rule 118 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    CONST           reduce using rule 118 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    THREAD          reduce using rule 118 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    PUBLIC          reduce using rule 118 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    PRIVATE         reduce using rule 118 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    TRY             reduce using rule 118 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    LIST            reduce using rule 118 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    FOR             reduce using rule 118 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    FOREACH         reduce using rule 118 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    WHILE           reduce using rule 118 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    DO              reduce using rule 118 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    RKEY            reduce using rule 118 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)


state 288

    (186) list_enums -> METHOD .
    (187) list_enums -> METHOD . COMMA list_enums

    RKEY            reduce using rule 186 (list_enums -> METHOD .)
    COMMA           shift and go to state 373


state 289

    (185) enums -> ENUM METHOD LKEY list_enums . RKEY

    RKEY            shift and go to state 374


state 290

    (198) normal_if -> IF LPARENT boolean_operation RPARENT . LKEY block_if RKEY other_if
    (199) normal_if -> IF LPARENT boolean_operation RPARENT . LKEY block_if RKEY

    LKEY            shift and go to state 375


state 291

    (113) boolean_operation -> value_boolean boolean_operator . boolean_operation
    (111) boolean_operation -> . value_boolean
    (112) boolean_operation -> . LOGICNOT value_boolean
    (113) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (38) value_boolean -> . BOOLTRUE
    (39) value_boolean -> . BOOLFALSE
    (40) value_boolean -> . VARIABLE
    (41) value_boolean -> . comparison_operation
    (103) comparison_operation -> . value_numeric
    (104) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (42) value_numeric -> . INTEGER
    (43) value_numeric -> . FLOAT_NUMBER
    (44) value_numeric -> . DECIMAL_NUMBER
    (45) value_numeric -> . VARIABLE

    LOGICNOT        shift and go to state 203
    BOOLTRUE        shift and go to state 204
    BOOLFALSE       shift and go to state 205
    VARIABLE        shift and go to state 206
    INTEGER         shift and go to state 209
    FLOAT_NUMBER    shift and go to state 210
    DECIMAL_NUMBER  shift and go to state 211

    value_boolean                  shift and go to state 202
    boolean_operation              shift and go to state 376
    comparison_operation           shift and go to state 207
    value_numeric                  shift and go to state 208

state 292

    (114) boolean_operator -> LOGICAND .

    LOGICNOT        reduce using rule 114 (boolean_operator -> LOGICAND .)
    BOOLTRUE        reduce using rule 114 (boolean_operator -> LOGICAND .)
    BOOLFALSE       reduce using rule 114 (boolean_operator -> LOGICAND .)
    VARIABLE        reduce using rule 114 (boolean_operator -> LOGICAND .)
    INTEGER         reduce using rule 114 (boolean_operator -> LOGICAND .)
    FLOAT_NUMBER    reduce using rule 114 (boolean_operator -> LOGICAND .)
    DECIMAL_NUMBER  reduce using rule 114 (boolean_operator -> LOGICAND .)


state 293

    (115) boolean_operator -> LOGICOR .

    LOGICNOT        reduce using rule 115 (boolean_operator -> LOGICOR .)
    BOOLTRUE        reduce using rule 115 (boolean_operator -> LOGICOR .)
    BOOLFALSE       reduce using rule 115 (boolean_operator -> LOGICOR .)
    VARIABLE        reduce using rule 115 (boolean_operator -> LOGICOR .)
    INTEGER         reduce using rule 115 (boolean_operator -> LOGICOR .)
    FLOAT_NUMBER    reduce using rule 115 (boolean_operator -> LOGICOR .)
    DECIMAL_NUMBER  reduce using rule 115 (boolean_operator -> LOGICOR .)


state 294

    (112) boolean_operation -> LOGICNOT value_boolean .

    RPARENT         reduce using rule 112 (boolean_operation -> LOGICNOT value_boolean .)
    COMMA           reduce using rule 112 (boolean_operation -> LOGICNOT value_boolean .)
    DOTANDCOMMA     reduce using rule 112 (boolean_operation -> LOGICNOT value_boolean .)


state 295

    (104) comparison_operation -> value_numeric comparison_operator . comparison_operation
    (103) comparison_operation -> . value_numeric
    (104) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (42) value_numeric -> . INTEGER
    (43) value_numeric -> . FLOAT_NUMBER
    (44) value_numeric -> . DECIMAL_NUMBER
    (45) value_numeric -> . VARIABLE

    INTEGER         shift and go to state 209
    FLOAT_NUMBER    shift and go to state 210
    DECIMAL_NUMBER  shift and go to state 211
    VARIABLE        shift and go to state 378

    value_numeric                  shift and go to state 208
    comparison_operation           shift and go to state 377

state 296

    (105) comparison_operator -> GREATER_THAN .

    INTEGER         reduce using rule 105 (comparison_operator -> GREATER_THAN .)
    FLOAT_NUMBER    reduce using rule 105 (comparison_operator -> GREATER_THAN .)
    DECIMAL_NUMBER  reduce using rule 105 (comparison_operator -> GREATER_THAN .)
    VARIABLE        reduce using rule 105 (comparison_operator -> GREATER_THAN .)


state 297

    (106) comparison_operator -> SMALLER_THAN .

    INTEGER         reduce using rule 106 (comparison_operator -> SMALLER_THAN .)
    FLOAT_NUMBER    reduce using rule 106 (comparison_operator -> SMALLER_THAN .)
    DECIMAL_NUMBER  reduce using rule 106 (comparison_operator -> SMALLER_THAN .)
    VARIABLE        reduce using rule 106 (comparison_operator -> SMALLER_THAN .)


state 298

    (107) comparison_operator -> EQUAL_COMPARATION .

    INTEGER         reduce using rule 107 (comparison_operator -> EQUAL_COMPARATION .)
    FLOAT_NUMBER    reduce using rule 107 (comparison_operator -> EQUAL_COMPARATION .)
    DECIMAL_NUMBER  reduce using rule 107 (comparison_operator -> EQUAL_COMPARATION .)
    VARIABLE        reduce using rule 107 (comparison_operator -> EQUAL_COMPARATION .)


state 299

    (108) comparison_operator -> INEQUALITY .

    INTEGER         reduce using rule 108 (comparison_operator -> INEQUALITY .)
    FLOAT_NUMBER    reduce using rule 108 (comparison_operator -> INEQUALITY .)
    DECIMAL_NUMBER  reduce using rule 108 (comparison_operator -> INEQUALITY .)
    VARIABLE        reduce using rule 108 (comparison_operator -> INEQUALITY .)


state 300

    (109) comparison_operator -> GREATER_THAN_OR_EQUAL .

    INTEGER         reduce using rule 109 (comparison_operator -> GREATER_THAN_OR_EQUAL .)
    FLOAT_NUMBER    reduce using rule 109 (comparison_operator -> GREATER_THAN_OR_EQUAL .)
    DECIMAL_NUMBER  reduce using rule 109 (comparison_operator -> GREATER_THAN_OR_EQUAL .)
    VARIABLE        reduce using rule 109 (comparison_operator -> GREATER_THAN_OR_EQUAL .)


state 301

    (110) comparison_operator -> SMALLER_THAN_OR_EQUAL .

    INTEGER         reduce using rule 110 (comparison_operator -> SMALLER_THAN_OR_EQUAL .)
    FLOAT_NUMBER    reduce using rule 110 (comparison_operator -> SMALLER_THAN_OR_EQUAL .)
    DECIMAL_NUMBER  reduce using rule 110 (comparison_operator -> SMALLER_THAN_OR_EQUAL .)
    VARIABLE        reduce using rule 110 (comparison_operator -> SMALLER_THAN_OR_EQUAL .)


state 302

    (231) stack_struct -> STACK VARIABLE ASSIGNATION NEW . STACK LPARENT RPARENT DOTANDCOMMA

    STACK           shift and go to state 379


state 303

    (242) queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN . VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA

    VARIABLE        shift and go to state 380


state 304

    (170) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW . THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (171) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW . THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA

    THREAD          shift and go to state 381


state 305

    (190) try_catch_simply -> TRY LKEY all_block_code_try RKEY . CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (191) try_catch_finally -> TRY LKEY all_block_code_try RKEY . CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    CATCH           shift and go to state 382


state 306

    (195) all_block_code_try -> block_code_try all_block_code_try .

    RKEY            reduce using rule 195 (all_block_code_try -> block_code_try all_block_code_try .)


state 307

    (213) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN . VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (215) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN . VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    VARIABLE        shift and go to state 383


state 308

    (214) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN . VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (216) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN . VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    VARIABLE        shift and go to state 384


state 309

    (208) for_simple -> FOR LPARENT INTTYPE assignation_int . DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (209) for_simple -> FOR LPARENT INTTYPE assignation_int . DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    DOTANDCOMMA     shift and go to state 385


state 310

    (210) for_each -> FOREACH LPARENT data_type VARIABLE . IN VARIABLE RPARENT LKEY all_block_code RKEY

    IN              shift and go to state 386


state 311

    (204) normal_while -> WHILE LPARENT boolean_operation RPARENT . LKEY all_block_code RKEY

    LKEY            shift and go to state 387


state 312

    (205) do_while -> DO LKEY all_block_code RKEY . WHILE LPARENT boolean_operation RPARENT

    WHILE           shift and go to state 388


state 313

    (174) concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT . LKEY thread_logic RKEY

    LKEY            shift and go to state 389


state 314

    (161) method_definition -> STATIC VOID METHOD LPARENT func_parameters . RPARENT LKEY RKEY

    RPARENT         shift and go to state 390


state 315

    (165) method_definition -> STATIC VOID METHOD LPARENT RPARENT . LKEY RKEY

    LKEY            shift and go to state 391


state 316

    (167) func_parameters -> func_parameter .
    (168) func_parameters -> func_parameter . COMMA func_parameters

    RPARENT         reduce using rule 167 (func_parameters -> func_parameter .)
    COMMA           shift and go to state 392


state 317

    (166) func_parameter -> data_type . VARIABLE

    VARIABLE        shift and go to state 393


state 318

    (160) method_definition -> STATIC data_type METHOD LPARENT func_parameters . RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY

    RPARENT         shift and go to state 394


state 319

    (164) method_definition -> STATIC data_type METHOD LPARENT RPARENT . LKEY RETURN VARIABLE DOTANDCOMMA RKEY

    LKEY            shift and go to state 395


state 320

    (184) statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code . RKEY RPARENT

    RKEY            shift and go to state 396


state 321

    (58) array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .

    PRINT           reduce using rule 58 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    CHARTYPE        reduce using rule 58 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 58 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 58 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 58 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    INTTYPE         reduce using rule 58 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 58 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    VARIABLE        reduce using rule 58 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    STATIC          reduce using rule 58 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    WRITE           reduce using rule 58 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    LPARENT         reduce using rule 58 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    ENUM            reduce using rule 58 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    IF              reduce using rule 58 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    STACK           reduce using rule 58 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    QUEUE           reduce using rule 58 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    CONST           reduce using rule 58 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    THREAD          reduce using rule 58 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    PUBLIC          reduce using rule 58 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    PRIVATE         reduce using rule 58 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    TRY             reduce using rule 58 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    LIST            reduce using rule 58 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    FOR             reduce using rule 58 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    FOREACH         reduce using rule 58 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    WHILE           reduce using rule 58 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    DO              reduce using rule 58 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    RKEY            reduce using rule 58 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)


state 322

    (66) string_array_assignation -> VARIABLE ASSIGNATION . LBRACKET string_content_multiple RBRACKET

    LBRACKET        shift and go to state 397


state 323

    (88) array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION . value DOTANDCOMMA
    (90) value -> . value_numeric
    (91) value -> . value_boolean
    (92) value -> . value_string
    (93) value -> . VARIABLE
    (94) value -> . read_data
    (95) value -> . array
    (42) value_numeric -> . INTEGER
    (43) value_numeric -> . FLOAT_NUMBER
    (44) value_numeric -> . DECIMAL_NUMBER
    (45) value_numeric -> . VARIABLE
    (38) value_boolean -> . BOOLTRUE
    (39) value_boolean -> . BOOLFALSE
    (40) value_boolean -> . VARIABLE
    (41) value_boolean -> . comparison_operation
    (35) value_string -> . STRING
    (36) value_string -> . CHAR
    (37) value_string -> . concatenation
    (48) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (83) array -> . LBRACKET array_content RBRACKET
    (103) comparison_operation -> . value_numeric
    (104) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (49) concatenation -> . STRING
    (50) concatenation -> . STRING PLUS concatenation

    VARIABLE        shift and go to state 331
    INTEGER         shift and go to state 209
    FLOAT_NUMBER    shift and go to state 210
    DECIMAL_NUMBER  shift and go to state 211
    BOOLTRUE        shift and go to state 204
    BOOLFALSE       shift and go to state 205
    STRING          shift and go to state 338
    CHAR            shift and go to state 339
    READ            shift and go to state 341
    LBRACKET        shift and go to state 342

    value                          shift and go to state 398
    value_numeric                  shift and go to state 333
    value_boolean                  shift and go to state 334
    value_string                   shift and go to state 335
    read_data                      shift and go to state 336
    array                          shift and go to state 337
    comparison_operation           shift and go to state 207
    concatenation                  shift and go to state 340

state 324

    (89) array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION . value DOTANDCOMMA
    (90) value -> . value_numeric
    (91) value -> . value_boolean
    (92) value -> . value_string
    (93) value -> . VARIABLE
    (94) value -> . read_data
    (95) value -> . array
    (42) value_numeric -> . INTEGER
    (43) value_numeric -> . FLOAT_NUMBER
    (44) value_numeric -> . DECIMAL_NUMBER
    (45) value_numeric -> . VARIABLE
    (38) value_boolean -> . BOOLTRUE
    (39) value_boolean -> . BOOLFALSE
    (40) value_boolean -> . VARIABLE
    (41) value_boolean -> . comparison_operation
    (35) value_string -> . STRING
    (36) value_string -> . CHAR
    (37) value_string -> . concatenation
    (48) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (83) array -> . LBRACKET array_content RBRACKET
    (103) comparison_operation -> . value_numeric
    (104) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (49) concatenation -> . STRING
    (50) concatenation -> . STRING PLUS concatenation

    VARIABLE        shift and go to state 331
    INTEGER         shift and go to state 209
    FLOAT_NUMBER    shift and go to state 210
    DECIMAL_NUMBER  shift and go to state 211
    BOOLTRUE        shift and go to state 204
    BOOLFALSE       shift and go to state 205
    STRING          shift and go to state 338
    CHAR            shift and go to state 339
    READ            shift and go to state 341
    LBRACKET        shift and go to state 342

    value                          shift and go to state 399
    value_numeric                  shift and go to state 333
    value_boolean                  shift and go to state 334
    value_string                   shift and go to state 335
    read_data                      shift and go to state 336
    array                          shift and go to state 337
    comparison_operation           shift and go to state 207
    concatenation                  shift and go to state 340

state 325

    (225) list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT . DOTANDCOMMA
    (239) stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT . DOTANDCOMMA
    (250) queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 400


state 326

    (226) list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 401


state 327

    (227) list_func_add -> VARIABLE DOT ADD LPARENT INTEGER . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 402


state 328

    (228) list_func_add -> VARIABLE DOT ADD LPARENT STRING . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 403


state 329

    (229) list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 404


state 330

    (230) list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 405


state 331

    (93) value -> VARIABLE .
    (45) value_numeric -> VARIABLE .
    (40) value_boolean -> VARIABLE .

  ! reduce/reduce conflict for RPARENT resolved using rule 45 (value_numeric -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 45 (value_numeric -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 45 (value_numeric -> VARIABLE .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 45 (value_numeric -> VARIABLE .)
  ! reduce/reduce conflict for RPARENT resolved using rule 40 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 40 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 40 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 40 (value_boolean -> VARIABLE .)
    GREATER_THAN    reduce using rule 45 (value_numeric -> VARIABLE .)
    SMALLER_THAN    reduce using rule 45 (value_numeric -> VARIABLE .)
    EQUAL_COMPARATION reduce using rule 45 (value_numeric -> VARIABLE .)
    INEQUALITY      reduce using rule 45 (value_numeric -> VARIABLE .)
    GREATER_THAN_OR_EQUAL reduce using rule 45 (value_numeric -> VARIABLE .)
    SMALLER_THAN_OR_EQUAL reduce using rule 45 (value_numeric -> VARIABLE .)
    RPARENT         reduce using rule 40 (value_boolean -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 40 (value_boolean -> VARIABLE .)
    COMMA           reduce using rule 40 (value_boolean -> VARIABLE .)
    RBRACKET        reduce using rule 40 (value_boolean -> VARIABLE .)

  ! RPARENT         [ reduce using rule 93 (value -> VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 93 (value -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 93 (value -> VARIABLE .) ]
  ! RBRACKET        [ reduce using rule 93 (value -> VARIABLE .) ]
  ! RPARENT         [ reduce using rule 45 (value_numeric -> VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 45 (value_numeric -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 45 (value_numeric -> VARIABLE .) ]
  ! RBRACKET        [ reduce using rule 45 (value_numeric -> VARIABLE .) ]


state 332

    (237) stack_push -> VARIABLE DOT PUSH LPARENT value . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 406


state 333

    (90) value -> value_numeric .
    (103) comparison_operation -> value_numeric .
    (104) comparison_operation -> value_numeric . comparison_operator comparison_operation
    (105) comparison_operator -> . GREATER_THAN
    (106) comparison_operator -> . SMALLER_THAN
    (107) comparison_operator -> . EQUAL_COMPARATION
    (108) comparison_operator -> . INEQUALITY
    (109) comparison_operator -> . GREATER_THAN_OR_EQUAL
    (110) comparison_operator -> . SMALLER_THAN_OR_EQUAL

  ! reduce/reduce conflict for RPARENT resolved using rule 90 (value -> value_numeric .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 90 (value -> value_numeric .)
  ! reduce/reduce conflict for COMMA resolved using rule 90 (value -> value_numeric .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 90 (value -> value_numeric .)
    RPARENT         reduce using rule 90 (value -> value_numeric .)
    DOTANDCOMMA     reduce using rule 90 (value -> value_numeric .)
    COMMA           reduce using rule 90 (value -> value_numeric .)
    RBRACKET        reduce using rule 90 (value -> value_numeric .)
    GREATER_THAN    shift and go to state 296
    SMALLER_THAN    shift and go to state 297
    EQUAL_COMPARATION shift and go to state 298
    INEQUALITY      shift and go to state 299
    GREATER_THAN_OR_EQUAL shift and go to state 300
    SMALLER_THAN_OR_EQUAL shift and go to state 301

  ! RPARENT         [ reduce using rule 103 (comparison_operation -> value_numeric .) ]
  ! DOTANDCOMMA     [ reduce using rule 103 (comparison_operation -> value_numeric .) ]
  ! COMMA           [ reduce using rule 103 (comparison_operation -> value_numeric .) ]
  ! RBRACKET        [ reduce using rule 103 (comparison_operation -> value_numeric .) ]

    comparison_operator            shift and go to state 295

state 334

    (91) value -> value_boolean .

    RPARENT         reduce using rule 91 (value -> value_boolean .)
    DOTANDCOMMA     reduce using rule 91 (value -> value_boolean .)
    COMMA           reduce using rule 91 (value -> value_boolean .)
    RBRACKET        reduce using rule 91 (value -> value_boolean .)


state 335

    (92) value -> value_string .

    RPARENT         reduce using rule 92 (value -> value_string .)
    DOTANDCOMMA     reduce using rule 92 (value -> value_string .)
    COMMA           reduce using rule 92 (value -> value_string .)
    RBRACKET        reduce using rule 92 (value -> value_string .)


state 336

    (94) value -> read_data .

    RPARENT         reduce using rule 94 (value -> read_data .)
    DOTANDCOMMA     reduce using rule 94 (value -> read_data .)
    COMMA           reduce using rule 94 (value -> read_data .)
    RBRACKET        reduce using rule 94 (value -> read_data .)


state 337

    (95) value -> array .

    RPARENT         reduce using rule 95 (value -> array .)
    DOTANDCOMMA     reduce using rule 95 (value -> array .)
    COMMA           reduce using rule 95 (value -> array .)
    RBRACKET        reduce using rule 95 (value -> array .)


state 338

    (35) value_string -> STRING .
    (49) concatenation -> STRING .
    (50) concatenation -> STRING . PLUS concatenation

  ! reduce/reduce conflict for RPARENT resolved using rule 35 (value_string -> STRING .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 35 (value_string -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 35 (value_string -> STRING .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 35 (value_string -> STRING .)
    RPARENT         reduce using rule 35 (value_string -> STRING .)
    DOTANDCOMMA     reduce using rule 35 (value_string -> STRING .)
    COMMA           reduce using rule 35 (value_string -> STRING .)
    RBRACKET        reduce using rule 35 (value_string -> STRING .)
    PLUS            shift and go to state 407

  ! RPARENT         [ reduce using rule 49 (concatenation -> STRING .) ]
  ! DOTANDCOMMA     [ reduce using rule 49 (concatenation -> STRING .) ]
  ! COMMA           [ reduce using rule 49 (concatenation -> STRING .) ]
  ! RBRACKET        [ reduce using rule 49 (concatenation -> STRING .) ]


state 339

    (36) value_string -> CHAR .

    RPARENT         reduce using rule 36 (value_string -> CHAR .)
    DOTANDCOMMA     reduce using rule 36 (value_string -> CHAR .)
    COMMA           reduce using rule 36 (value_string -> CHAR .)
    RBRACKET        reduce using rule 36 (value_string -> CHAR .)


state 340

    (37) value_string -> concatenation .

    RPARENT         reduce using rule 37 (value_string -> concatenation .)
    DOTANDCOMMA     reduce using rule 37 (value_string -> concatenation .)
    COMMA           reduce using rule 37 (value_string -> concatenation .)
    RBRACKET        reduce using rule 37 (value_string -> concatenation .)


state 341

    (48) read_data -> READ . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 408


state 342

    (83) array -> LBRACKET . array_content RBRACKET
    (84) array_content -> . value
    (85) array_content -> . value COMMA array_content
    (90) value -> . value_numeric
    (91) value -> . value_boolean
    (92) value -> . value_string
    (93) value -> . VARIABLE
    (94) value -> . read_data
    (95) value -> . array
    (42) value_numeric -> . INTEGER
    (43) value_numeric -> . FLOAT_NUMBER
    (44) value_numeric -> . DECIMAL_NUMBER
    (45) value_numeric -> . VARIABLE
    (38) value_boolean -> . BOOLTRUE
    (39) value_boolean -> . BOOLFALSE
    (40) value_boolean -> . VARIABLE
    (41) value_boolean -> . comparison_operation
    (35) value_string -> . STRING
    (36) value_string -> . CHAR
    (37) value_string -> . concatenation
    (48) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (83) array -> . LBRACKET array_content RBRACKET
    (103) comparison_operation -> . value_numeric
    (104) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (49) concatenation -> . STRING
    (50) concatenation -> . STRING PLUS concatenation

    VARIABLE        shift and go to state 331
    INTEGER         shift and go to state 209
    FLOAT_NUMBER    shift and go to state 210
    DECIMAL_NUMBER  shift and go to state 211
    BOOLTRUE        shift and go to state 204
    BOOLFALSE       shift and go to state 205
    STRING          shift and go to state 338
    CHAR            shift and go to state 339
    READ            shift and go to state 341
    LBRACKET        shift and go to state 342

    array_content                  shift and go to state 409
    value                          shift and go to state 410
    value_numeric                  shift and go to state 333
    value_boolean                  shift and go to state 334
    value_string                   shift and go to state 335
    read_data                      shift and go to state 336
    array                          shift and go to state 337
    comparison_operation           shift and go to state 207
    concatenation                  shift and go to state 340

state 343

    (238) stack_pop -> VARIABLE DOT POP LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 411


state 344

    (240) stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT . DOTANDCOMMA
    (251) queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 412


state 345

    (241) stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT . DOTANDCOMMA
    (252) queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 413


state 346

    (248) queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 414


state 347

    (249) queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 415


state 348

    (46) print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 46 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 46 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 46 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 46 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 46 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 46 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 46 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 46 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 46 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 46 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 46 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 46 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    IF              reduce using rule 46 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 46 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 46 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 46 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 46 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 46 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 46 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 46 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 46 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 46 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 46 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 46 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    DO              reduce using rule 46 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 46 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)


state 349

    (47) print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 47 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 47 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 47 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 47 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 47 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 47 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 47 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 47 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 47 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 47 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 47 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 47 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    IF              reduce using rule 47 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 47 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 47 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 47 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 47 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 47 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 47 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 47 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 47 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 47 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 47 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 47 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    DO              reduce using rule 47 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 47 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)


state 350

    (57) array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .

    PRINT           reduce using rule 57 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    CHARTYPE        reduce using rule 57 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 57 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 57 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 57 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    INTTYPE         reduce using rule 57 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 57 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    VARIABLE        reduce using rule 57 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    STATIC          reduce using rule 57 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    WRITE           reduce using rule 57 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    LPARENT         reduce using rule 57 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    ENUM            reduce using rule 57 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    IF              reduce using rule 57 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    STACK           reduce using rule 57 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    QUEUE           reduce using rule 57 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    CONST           reduce using rule 57 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    THREAD          reduce using rule 57 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    PUBLIC          reduce using rule 57 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    PRIVATE         reduce using rule 57 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    TRY             reduce using rule 57 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    LIST            reduce using rule 57 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    FOR             reduce using rule 57 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    FOREACH         reduce using rule 57 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    WHILE           reduce using rule 57 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    DO              reduce using rule 57 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    RKEY            reduce using rule 57 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)


state 351

    (63) char_array_assignation -> VARIABLE ASSIGNATION . LBRACKET char_content_multiple RBRACKET

    LBRACKET        shift and go to state 416


state 352

    (59) array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .

    PRINT           reduce using rule 59 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    CHARTYPE        reduce using rule 59 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 59 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 59 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 59 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    INTTYPE         reduce using rule 59 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 59 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    VARIABLE        reduce using rule 59 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    STATIC          reduce using rule 59 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    WRITE           reduce using rule 59 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    LPARENT         reduce using rule 59 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    ENUM            reduce using rule 59 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    IF              reduce using rule 59 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    STACK           reduce using rule 59 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    QUEUE           reduce using rule 59 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    CONST           reduce using rule 59 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    THREAD          reduce using rule 59 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    PUBLIC          reduce using rule 59 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    PRIVATE         reduce using rule 59 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    TRY             reduce using rule 59 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    LIST            reduce using rule 59 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    FOR             reduce using rule 59 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    FOREACH         reduce using rule 59 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    WHILE           reduce using rule 59 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    DO              reduce using rule 59 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    RKEY            reduce using rule 59 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)


state 353

    (69) float_array_assignation -> VARIABLE ASSIGNATION . LBRACKET float_content_multiple RBRACKET

    LBRACKET        shift and go to state 417


state 354

    (97) arithmetic_operation -> value_numeric arithmetic_operator . arithmetic_operation
    (96) arithmetic_operation -> . value_numeric
    (97) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (42) value_numeric -> . INTEGER
    (43) value_numeric -> . FLOAT_NUMBER
    (44) value_numeric -> . DECIMAL_NUMBER
    (45) value_numeric -> . VARIABLE

    INTEGER         shift and go to state 209
    FLOAT_NUMBER    shift and go to state 210
    DECIMAL_NUMBER  shift and go to state 211
    VARIABLE        shift and go to state 378

    value_numeric                  shift and go to state 264
    arithmetic_operation           shift and go to state 418

state 355

    (98) arithmetic_operator -> PLUS .

    INTEGER         reduce using rule 98 (arithmetic_operator -> PLUS .)
    FLOAT_NUMBER    reduce using rule 98 (arithmetic_operator -> PLUS .)
    DECIMAL_NUMBER  reduce using rule 98 (arithmetic_operator -> PLUS .)
    VARIABLE        reduce using rule 98 (arithmetic_operator -> PLUS .)


state 356

    (99) arithmetic_operator -> MINUS .

    INTEGER         reduce using rule 99 (arithmetic_operator -> MINUS .)
    FLOAT_NUMBER    reduce using rule 99 (arithmetic_operator -> MINUS .)
    DECIMAL_NUMBER  reduce using rule 99 (arithmetic_operator -> MINUS .)
    VARIABLE        reduce using rule 99 (arithmetic_operator -> MINUS .)


state 357

    (100) arithmetic_operator -> TIMES .

    INTEGER         reduce using rule 100 (arithmetic_operator -> TIMES .)
    FLOAT_NUMBER    reduce using rule 100 (arithmetic_operator -> TIMES .)
    DECIMAL_NUMBER  reduce using rule 100 (arithmetic_operator -> TIMES .)
    VARIABLE        reduce using rule 100 (arithmetic_operator -> TIMES .)


state 358

    (101) arithmetic_operator -> DIVIDE .

    INTEGER         reduce using rule 101 (arithmetic_operator -> DIVIDE .)
    FLOAT_NUMBER    reduce using rule 101 (arithmetic_operator -> DIVIDE .)
    DECIMAL_NUMBER  reduce using rule 101 (arithmetic_operator -> DIVIDE .)
    VARIABLE        reduce using rule 101 (arithmetic_operator -> DIVIDE .)


state 359

    (102) arithmetic_operator -> PERCENT .

    INTEGER         reduce using rule 102 (arithmetic_operator -> PERCENT .)
    FLOAT_NUMBER    reduce using rule 102 (arithmetic_operator -> PERCENT .)
    DECIMAL_NUMBER  reduce using rule 102 (arithmetic_operator -> PERCENT .)
    VARIABLE        reduce using rule 102 (arithmetic_operator -> PERCENT .)


state 360

    (60) array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .

    PRINT           reduce using rule 60 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    CHARTYPE        reduce using rule 60 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 60 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 60 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 60 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    INTTYPE         reduce using rule 60 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 60 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    VARIABLE        reduce using rule 60 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    STATIC          reduce using rule 60 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    WRITE           reduce using rule 60 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    LPARENT         reduce using rule 60 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    ENUM            reduce using rule 60 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    IF              reduce using rule 60 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    STACK           reduce using rule 60 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    QUEUE           reduce using rule 60 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    CONST           reduce using rule 60 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    THREAD          reduce using rule 60 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    PUBLIC          reduce using rule 60 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    PRIVATE         reduce using rule 60 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    TRY             reduce using rule 60 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    LIST            reduce using rule 60 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    FOR             reduce using rule 60 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    FOREACH         reduce using rule 60 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    WHILE           reduce using rule 60 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    DO              reduce using rule 60 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    RKEY            reduce using rule 60 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)


state 361

    (75) decimal_array_assignation -> VARIABLE ASSIGNATION . LBRACKET decimal_content_multiple RBRACKET

    LBRACKET        shift and go to state 419


state 362

    (61) array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .

    PRINT           reduce using rule 61 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    CHARTYPE        reduce using rule 61 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 61 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 61 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 61 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    INTTYPE         reduce using rule 61 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 61 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    VARIABLE        reduce using rule 61 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    STATIC          reduce using rule 61 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    WRITE           reduce using rule 61 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    LPARENT         reduce using rule 61 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    ENUM            reduce using rule 61 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    IF              reduce using rule 61 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    STACK           reduce using rule 61 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    QUEUE           reduce using rule 61 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    CONST           reduce using rule 61 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    THREAD          reduce using rule 61 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    PUBLIC          reduce using rule 61 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    PRIVATE         reduce using rule 61 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    TRY             reduce using rule 61 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    LIST            reduce using rule 61 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    FOR             reduce using rule 61 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    FOREACH         reduce using rule 61 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    WHILE           reduce using rule 61 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    DO              reduce using rule 61 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    RKEY            reduce using rule 61 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)


state 363

    (72) int_array_assignation -> VARIABLE ASSIGNATION . LBRACKET int_content_multiple RBRACKET

    LBRACKET        shift and go to state 420


state 364

    (62) array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .

    PRINT           reduce using rule 62 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    CHARTYPE        reduce using rule 62 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 62 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 62 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 62 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    INTTYPE         reduce using rule 62 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 62 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    VARIABLE        reduce using rule 62 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    STATIC          reduce using rule 62 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    WRITE           reduce using rule 62 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    LPARENT         reduce using rule 62 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    ENUM            reduce using rule 62 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    IF              reduce using rule 62 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    STACK           reduce using rule 62 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    QUEUE           reduce using rule 62 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    CONST           reduce using rule 62 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    THREAD          reduce using rule 62 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    PUBLIC          reduce using rule 62 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    PRIVATE         reduce using rule 62 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    TRY             reduce using rule 62 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    LIST            reduce using rule 62 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    FOR             reduce using rule 62 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    FOREACH         reduce using rule 62 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    WHILE           reduce using rule 62 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    DO              reduce using rule 62 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    RKEY            reduce using rule 62 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)


state 365

    (78) bool_array_assignation -> VARIABLE ASSIGNATION . LBRACKET bool_content_multiple RBRACKET

    LBRACKET        shift and go to state 421


state 366

    (137) assignation_true -> VARIABLE ASSIGNATION . BOOLTRUE
    (138) assignation_true -> VARIABLE ASSIGNATION . VARIABLE
    (139) assignation_true -> VARIABLE ASSIGNATION . boolean_operation
    (111) boolean_operation -> . value_boolean
    (112) boolean_operation -> . LOGICNOT value_boolean
    (113) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (38) value_boolean -> . BOOLTRUE
    (39) value_boolean -> . BOOLFALSE
    (40) value_boolean -> . VARIABLE
    (41) value_boolean -> . comparison_operation
    (103) comparison_operation -> . value_numeric
    (104) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (42) value_numeric -> . INTEGER
    (43) value_numeric -> . FLOAT_NUMBER
    (44) value_numeric -> . DECIMAL_NUMBER
    (45) value_numeric -> . VARIABLE

    BOOLTRUE        shift and go to state 280
    VARIABLE        shift and go to state 422
    LOGICNOT        shift and go to state 203
    BOOLFALSE       shift and go to state 205
    INTEGER         shift and go to state 209
    FLOAT_NUMBER    shift and go to state 210
    DECIMAL_NUMBER  shift and go to state 211

    boolean_operation              shift and go to state 423
    value_boolean                  shift and go to state 202
    comparison_operation           shift and go to state 207
    value_numeric                  shift and go to state 208

state 367

    (140) assignation_false -> VARIABLE ASSIGNATION . BOOLFALSE
    (141) assignation_false -> VARIABLE ASSIGNATION . VARIABLE
    (142) assignation_false -> VARIABLE ASSIGNATION . boolean_operation
    (111) boolean_operation -> . value_boolean
    (112) boolean_operation -> . LOGICNOT value_boolean
    (113) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (38) value_boolean -> . BOOLTRUE
    (39) value_boolean -> . BOOLFALSE
    (40) value_boolean -> . VARIABLE
    (41) value_boolean -> . comparison_operation
    (103) comparison_operation -> . value_numeric
    (104) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (42) value_numeric -> . INTEGER
    (43) value_numeric -> . FLOAT_NUMBER
    (44) value_numeric -> . DECIMAL_NUMBER
    (45) value_numeric -> . VARIABLE

    BOOLFALSE       shift and go to state 282
    VARIABLE        shift and go to state 424
    LOGICNOT        shift and go to state 203
    BOOLTRUE        shift and go to state 204
    INTEGER         shift and go to state 209
    FLOAT_NUMBER    shift and go to state 210
    DECIMAL_NUMBER  shift and go to state 211

    boolean_operation              shift and go to state 425
    value_boolean                  shift and go to state 202
    comparison_operation           shift and go to state 207
    value_numeric                  shift and go to state 208

state 368

    (169) thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait . thread_wait
    (173) thread_wait -> . thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA
    (183) thread_identificator -> . VARIABLE

    VARIABLE        shift and go to state 147

    thread_wait                    shift and go to state 426
    thread_identificator           shift and go to state 369

state 369

    (173) thread_wait -> thread_identificator . DOT JOIN LPARENT RPARENT DOTANDCOMMA

    DOT             shift and go to state 427


state 370

    (172) thread_init -> thread_identificator DOT START . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 428


state 371

    (158) method_definition -> access_modifiers STATIC data_type METHOD LPARENT . func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (162) method_definition -> access_modifiers STATIC data_type METHOD LPARENT . RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (167) func_parameters -> . func_parameter
    (168) func_parameters -> . func_parameter COMMA func_parameters
    (166) func_parameter -> . data_type VARIABLE
    (27) data_type -> . CHARTYPE
    (28) data_type -> . STRINGTYPE
    (29) data_type -> . FLOATTYPE
    (30) data_type -> . DECIMALTYPE
    (31) data_type -> . INTTYPE
    (32) data_type -> . BOOLTYPE
    (33) data_type -> . array_type
    (34) data_type -> . METHOD
    (51) array_type -> . CHARTYPE LBRACKET RBRACKET
    (52) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (53) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (54) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (55) array_type -> . INTTYPE LBRACKET RBRACKET
    (56) array_type -> . BOOLTYPE LBRACKET RBRACKET

    RPARENT         shift and go to state 430
    CHARTYPE        shift and go to state 99
    STRINGTYPE      shift and go to state 100
    FLOATTYPE       shift and go to state 101
    DECIMALTYPE     shift and go to state 102
    INTTYPE         shift and go to state 103
    BOOLTYPE        shift and go to state 104
    METHOD          shift and go to state 98

    data_type                      shift and go to state 317
    func_parameters                shift and go to state 429
    func_parameter                 shift and go to state 316
    array_type                     shift and go to state 105

state 372

    (159) method_definition -> access_modifiers STATIC VOID METHOD LPARENT . func_parameters RPARENT LKEY RKEY
    (163) method_definition -> access_modifiers STATIC VOID METHOD LPARENT . RPARENT LKEY RKEY
    (167) func_parameters -> . func_parameter
    (168) func_parameters -> . func_parameter COMMA func_parameters
    (166) func_parameter -> . data_type VARIABLE
    (27) data_type -> . CHARTYPE
    (28) data_type -> . STRINGTYPE
    (29) data_type -> . FLOATTYPE
    (30) data_type -> . DECIMALTYPE
    (31) data_type -> . INTTYPE
    (32) data_type -> . BOOLTYPE
    (33) data_type -> . array_type
    (34) data_type -> . METHOD
    (51) array_type -> . CHARTYPE LBRACKET RBRACKET
    (52) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (53) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (54) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (55) array_type -> . INTTYPE LBRACKET RBRACKET
    (56) array_type -> . BOOLTYPE LBRACKET RBRACKET

    RPARENT         shift and go to state 432
    CHARTYPE        shift and go to state 99
    STRINGTYPE      shift and go to state 100
    FLOATTYPE       shift and go to state 101
    DECIMALTYPE     shift and go to state 102
    INTTYPE         shift and go to state 103
    BOOLTYPE        shift and go to state 104
    METHOD          shift and go to state 98

    func_parameters                shift and go to state 431
    func_parameter                 shift and go to state 316
    data_type                      shift and go to state 317
    array_type                     shift and go to state 105

state 373

    (187) list_enums -> METHOD COMMA . list_enums
    (186) list_enums -> . METHOD
    (187) list_enums -> . METHOD COMMA list_enums

    METHOD          shift and go to state 288

    list_enums                     shift and go to state 433

state 374

    (185) enums -> ENUM METHOD LKEY list_enums RKEY .

    PRINT           reduce using rule 185 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    CHARTYPE        reduce using rule 185 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    STRINGTYPE      reduce using rule 185 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    FLOATTYPE       reduce using rule 185 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    DECIMALTYPE     reduce using rule 185 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    INTTYPE         reduce using rule 185 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    BOOLTYPE        reduce using rule 185 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    VARIABLE        reduce using rule 185 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    STATIC          reduce using rule 185 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    WRITE           reduce using rule 185 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    LPARENT         reduce using rule 185 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    ENUM            reduce using rule 185 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    IF              reduce using rule 185 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    STACK           reduce using rule 185 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    QUEUE           reduce using rule 185 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    CONST           reduce using rule 185 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    THREAD          reduce using rule 185 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    PUBLIC          reduce using rule 185 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    PRIVATE         reduce using rule 185 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    TRY             reduce using rule 185 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    LIST            reduce using rule 185 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    FOR             reduce using rule 185 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    FOREACH         reduce using rule 185 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    WHILE           reduce using rule 185 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    DO              reduce using rule 185 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    RKEY            reduce using rule 185 (enums -> ENUM METHOD LKEY list_enums RKEY .)


state 375

    (198) normal_if -> IF LPARENT boolean_operation RPARENT LKEY . block_if RKEY other_if
    (199) normal_if -> IF LPARENT boolean_operation RPARENT LKEY . block_if RKEY
    (196) block_if -> . normal_if
    (197) block_if -> . all_block_code
    (198) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (199) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (25) all_block_code -> . block_code
    (26) all_block_code -> . block_code all_block_code
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . array_assignation
    (8) block_code -> . array_value_assign
    (9) block_code -> . array_indexing
    (10) block_code -> . thread_main
    (11) block_code -> . concurrent_method
    (12) block_code -> . method_definition
    (13) block_code -> . block_try_catch
    (14) block_code -> . lists
    (15) block_code -> . functions_list
    (16) block_code -> . statement_lambda
    (17) block_code -> . enums
    (18) block_code -> . normal_if
    (19) block_code -> . block_for
    (20) block_code -> . block_while
    (21) block_code -> . stack_struct
    (22) block_code -> . functions_stack
    (23) block_code -> . queue_struct
    (24) block_code -> . functions_queue
    (116) def_const_or_var -> . constant_assignation
    (117) def_const_or_var -> . variable_assignation
    (46) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (47) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (57) array_assignation -> . CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA
    (58) array_assignation -> . STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
    (59) array_assignation -> . FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
    (60) array_assignation -> . DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA
    (61) array_assignation -> . INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
    (62) array_assignation -> . BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
    (88) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (89) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (86) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (87) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (169) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (174) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (175) concurrent_method -> . WRITE
    (158) method_definition -> . access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (159) method_definition -> . access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY
    (160) method_definition -> . STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (161) method_definition -> . STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY
    (162) method_definition -> . access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (163) method_definition -> . access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY
    (164) method_definition -> . STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (165) method_definition -> . STATIC VOID METHOD LPARENT RPARENT LKEY RKEY
    (188) block_try_catch -> . try_catch_simply
    (189) block_try_catch -> . try_catch_finally
    (211) lists -> . list_empty
    (212) lists -> . list_full
    (221) functions_list -> . list_func_clear
    (222) functions_list -> . list_func_count
    (223) functions_list -> . list_func_add
    (224) functions_list -> . list_func_removeat
    (184) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (185) enums -> . ENUM METHOD LKEY list_enums RKEY
    (206) block_for -> . for_simple
    (207) block_for -> . for_each
    (202) block_while -> . normal_while
    (203) block_while -> . do_while
    (231) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (232) functions_stack -> . stack_push
    (233) functions_stack -> . stack_pop
    (234) functions_stack -> . stack_clear
    (235) functions_stack -> . stack_peek
    (236) functions_stack -> . stack_isEmpty
    (242) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (243) functions_queue -> . queue_enqueue
    (244) functions_queue -> . queue_dequeue
    (245) functions_queue -> . queue_clear
    (246) functions_queue -> . queue_isEmpty
    (247) functions_queue -> . queue_peek
    (118) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (119) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (120) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (121) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (170) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (171) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (122) access_modifiers -> . PUBLIC
    (123) access_modifiers -> . PRIVATE
    (190) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (191) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (213) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (214) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (215) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (216) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (225) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (226) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (227) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (228) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (229) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (230) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (208) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (209) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (210) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (204) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (205) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (237) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (238) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (239) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (240) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (241) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (248) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (249) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (250) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (252) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (251) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (143) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (144) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (145) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (146) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (147) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    IF              shift and go to state 68
    PRINT           shift and go to state 50
    CHARTYPE        shift and go to state 51
    STRINGTYPE      shift and go to state 24
    FLOATTYPE       shift and go to state 52
    DECIMALTYPE     shift and go to state 53
    INTTYPE         shift and go to state 54
    BOOLTYPE        shift and go to state 55
    VARIABLE        shift and go to state 25
    STATIC          shift and go to state 22
    WRITE           shift and go to state 57
    LPARENT         shift and go to state 23
    ENUM            shift and go to state 67
    STACK           shift and go to state 73
    QUEUE           shift and go to state 79
    CONST           shift and go to state 85
    THREAD          shift and go to state 87
    PUBLIC          shift and go to state 88
    PRIVATE         shift and go to state 89
    TRY             shift and go to state 90
    LIST            shift and go to state 91
    FOR             shift and go to state 92
    FOREACH         shift and go to state 93
    WHILE           shift and go to state 94
    DO              shift and go to state 95

    block_if                       shift and go to state 434
    normal_if                      shift and go to state 435
    all_block_code                 shift and go to state 436
    block_code                     shift and go to state 27
    def_const_or_var               shift and go to state 28
    print_data                     shift and go to state 29
    array_assignation              shift and go to state 30
    array_value_assign             shift and go to state 31
    array_indexing                 shift and go to state 32
    thread_main                    shift and go to state 33
    concurrent_method              shift and go to state 34
    method_definition              shift and go to state 35
    block_try_catch                shift and go to state 36
    lists                          shift and go to state 37
    functions_list                 shift and go to state 38
    statement_lambda               shift and go to state 39
    enums                          shift and go to state 40
    block_for                      shift and go to state 42
    block_while                    shift and go to state 43
    stack_struct                   shift and go to state 44
    functions_stack                shift and go to state 45
    queue_struct                   shift and go to state 46
    functions_queue                shift and go to state 47
    constant_assignation           shift and go to state 48
    variable_assignation           shift and go to state 49
    declaration_thread             shift and go to state 56
    access_modifiers               shift and go to state 58
    try_catch_simply               shift and go to state 59
    try_catch_finally              shift and go to state 60
    list_empty                     shift and go to state 61
    list_full                      shift and go to state 62
    list_func_clear                shift and go to state 63
    list_func_count                shift and go to state 64
    list_func_add                  shift and go to state 65
    list_func_removeat             shift and go to state 66
    for_simple                     shift and go to state 69
    for_each                       shift and go to state 70
    normal_while                   shift and go to state 71
    do_while                       shift and go to state 72
    stack_push                     shift and go to state 74
    stack_pop                      shift and go to state 75
    stack_clear                    shift and go to state 76
    stack_peek                     shift and go to state 77
    stack_isEmpty                  shift and go to state 78
    queue_enqueue                  shift and go to state 80
    queue_dequeue                  shift and go to state 81
    queue_clear                    shift and go to state 82
    queue_isEmpty                  shift and go to state 83
    queue_peek                     shift and go to state 84
    assignation_type_value_multiple shift and go to state 86

state 376

    (113) boolean_operation -> value_boolean boolean_operator boolean_operation .

    RPARENT         reduce using rule 113 (boolean_operation -> value_boolean boolean_operator boolean_operation .)
    COMMA           reduce using rule 113 (boolean_operation -> value_boolean boolean_operator boolean_operation .)
    DOTANDCOMMA     reduce using rule 113 (boolean_operation -> value_boolean boolean_operator boolean_operation .)


state 377

    (104) comparison_operation -> value_numeric comparison_operator comparison_operation .

    LOGICAND        reduce using rule 104 (comparison_operation -> value_numeric comparison_operator comparison_operation .)
    LOGICOR         reduce using rule 104 (comparison_operation -> value_numeric comparison_operator comparison_operation .)
    RPARENT         reduce using rule 104 (comparison_operation -> value_numeric comparison_operator comparison_operation .)
    COMMA           reduce using rule 104 (comparison_operation -> value_numeric comparison_operator comparison_operation .)
    DOTANDCOMMA     reduce using rule 104 (comparison_operation -> value_numeric comparison_operator comparison_operation .)
    RBRACKET        reduce using rule 104 (comparison_operation -> value_numeric comparison_operator comparison_operation .)


state 378

    (45) value_numeric -> VARIABLE .

    GREATER_THAN    reduce using rule 45 (value_numeric -> VARIABLE .)
    SMALLER_THAN    reduce using rule 45 (value_numeric -> VARIABLE .)
    EQUAL_COMPARATION reduce using rule 45 (value_numeric -> VARIABLE .)
    INEQUALITY      reduce using rule 45 (value_numeric -> VARIABLE .)
    GREATER_THAN_OR_EQUAL reduce using rule 45 (value_numeric -> VARIABLE .)
    SMALLER_THAN_OR_EQUAL reduce using rule 45 (value_numeric -> VARIABLE .)
    LOGICAND        reduce using rule 45 (value_numeric -> VARIABLE .)
    LOGICOR         reduce using rule 45 (value_numeric -> VARIABLE .)
    RPARENT         reduce using rule 45 (value_numeric -> VARIABLE .)
    COMMA           reduce using rule 45 (value_numeric -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 45 (value_numeric -> VARIABLE .)
    RBRACKET        reduce using rule 45 (value_numeric -> VARIABLE .)
    PLUS            reduce using rule 45 (value_numeric -> VARIABLE .)
    MINUS           reduce using rule 45 (value_numeric -> VARIABLE .)
    TIMES           reduce using rule 45 (value_numeric -> VARIABLE .)
    DIVIDE          reduce using rule 45 (value_numeric -> VARIABLE .)
    PERCENT         reduce using rule 45 (value_numeric -> VARIABLE .)


state 379

    (231) stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 437


state 380

    (242) queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE . ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA

    ASSIGNATION     shift and go to state 438


state 381

    (170) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD . LPARENT thread_identificator RPARENT DOTANDCOMMA
    (171) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD . LPARENT concurrent_method RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 439


state 382

    (190) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH . LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (191) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH . LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    LPARENT         shift and go to state 440


state 383

    (213) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE . ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (215) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE . ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    ASSIGNATION     shift and go to state 441


state 384

    (214) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE . ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (216) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE . ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    ASSIGNATION     shift and go to state 442


state 385

    (208) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA . comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (209) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA . comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (103) comparison_operation -> . value_numeric
    (104) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (42) value_numeric -> . INTEGER
    (43) value_numeric -> . FLOAT_NUMBER
    (44) value_numeric -> . DECIMAL_NUMBER
    (45) value_numeric -> . VARIABLE

    INTEGER         shift and go to state 209
    FLOAT_NUMBER    shift and go to state 210
    DECIMAL_NUMBER  shift and go to state 211
    VARIABLE        shift and go to state 378

    comparison_operation           shift and go to state 443
    value_numeric                  shift and go to state 208

state 386

    (210) for_each -> FOREACH LPARENT data_type VARIABLE IN . VARIABLE RPARENT LKEY all_block_code RKEY

    VARIABLE        shift and go to state 444


state 387

    (204) normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY . all_block_code RKEY
    (25) all_block_code -> . block_code
    (26) all_block_code -> . block_code all_block_code
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . array_assignation
    (8) block_code -> . array_value_assign
    (9) block_code -> . array_indexing
    (10) block_code -> . thread_main
    (11) block_code -> . concurrent_method
    (12) block_code -> . method_definition
    (13) block_code -> . block_try_catch
    (14) block_code -> . lists
    (15) block_code -> . functions_list
    (16) block_code -> . statement_lambda
    (17) block_code -> . enums
    (18) block_code -> . normal_if
    (19) block_code -> . block_for
    (20) block_code -> . block_while
    (21) block_code -> . stack_struct
    (22) block_code -> . functions_stack
    (23) block_code -> . queue_struct
    (24) block_code -> . functions_queue
    (116) def_const_or_var -> . constant_assignation
    (117) def_const_or_var -> . variable_assignation
    (46) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (47) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (57) array_assignation -> . CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA
    (58) array_assignation -> . STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
    (59) array_assignation -> . FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
    (60) array_assignation -> . DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA
    (61) array_assignation -> . INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
    (62) array_assignation -> . BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
    (88) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (89) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (86) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (87) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (169) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (174) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (175) concurrent_method -> . WRITE
    (158) method_definition -> . access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (159) method_definition -> . access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY
    (160) method_definition -> . STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (161) method_definition -> . STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY
    (162) method_definition -> . access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (163) method_definition -> . access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY
    (164) method_definition -> . STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (165) method_definition -> . STATIC VOID METHOD LPARENT RPARENT LKEY RKEY
    (188) block_try_catch -> . try_catch_simply
    (189) block_try_catch -> . try_catch_finally
    (211) lists -> . list_empty
    (212) lists -> . list_full
    (221) functions_list -> . list_func_clear
    (222) functions_list -> . list_func_count
    (223) functions_list -> . list_func_add
    (224) functions_list -> . list_func_removeat
    (184) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (185) enums -> . ENUM METHOD LKEY list_enums RKEY
    (198) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (199) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (206) block_for -> . for_simple
    (207) block_for -> . for_each
    (202) block_while -> . normal_while
    (203) block_while -> . do_while
    (231) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (232) functions_stack -> . stack_push
    (233) functions_stack -> . stack_pop
    (234) functions_stack -> . stack_clear
    (235) functions_stack -> . stack_peek
    (236) functions_stack -> . stack_isEmpty
    (242) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (243) functions_queue -> . queue_enqueue
    (244) functions_queue -> . queue_dequeue
    (245) functions_queue -> . queue_clear
    (246) functions_queue -> . queue_isEmpty
    (247) functions_queue -> . queue_peek
    (118) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (119) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (120) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (121) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (170) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (171) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (122) access_modifiers -> . PUBLIC
    (123) access_modifiers -> . PRIVATE
    (190) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (191) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (213) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (214) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (215) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (216) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (225) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (226) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (227) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (228) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (229) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (230) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (208) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (209) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (210) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (204) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (205) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (237) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (238) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (239) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (240) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (241) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (248) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (249) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (250) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (252) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (251) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (143) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (144) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (145) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (146) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (147) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 50
    CHARTYPE        shift and go to state 51
    STRINGTYPE      shift and go to state 24
    FLOATTYPE       shift and go to state 52
    DECIMALTYPE     shift and go to state 53
    INTTYPE         shift and go to state 54
    BOOLTYPE        shift and go to state 55
    VARIABLE        shift and go to state 25
    STATIC          shift and go to state 22
    WRITE           shift and go to state 57
    LPARENT         shift and go to state 23
    ENUM            shift and go to state 67
    IF              shift and go to state 68
    STACK           shift and go to state 73
    QUEUE           shift and go to state 79
    CONST           shift and go to state 85
    THREAD          shift and go to state 87
    PUBLIC          shift and go to state 88
    PRIVATE         shift and go to state 89
    TRY             shift and go to state 90
    LIST            shift and go to state 91
    FOR             shift and go to state 92
    FOREACH         shift and go to state 93
    WHILE           shift and go to state 94
    DO              shift and go to state 95

    all_block_code                 shift and go to state 445
    block_code                     shift and go to state 27
    def_const_or_var               shift and go to state 28
    print_data                     shift and go to state 29
    array_assignation              shift and go to state 30
    array_value_assign             shift and go to state 31
    array_indexing                 shift and go to state 32
    thread_main                    shift and go to state 33
    concurrent_method              shift and go to state 34
    method_definition              shift and go to state 35
    block_try_catch                shift and go to state 36
    lists                          shift and go to state 37
    functions_list                 shift and go to state 38
    statement_lambda               shift and go to state 39
    enums                          shift and go to state 40
    normal_if                      shift and go to state 41
    block_for                      shift and go to state 42
    block_while                    shift and go to state 43
    stack_struct                   shift and go to state 44
    functions_stack                shift and go to state 45
    queue_struct                   shift and go to state 46
    functions_queue                shift and go to state 47
    constant_assignation           shift and go to state 48
    variable_assignation           shift and go to state 49
    declaration_thread             shift and go to state 56
    access_modifiers               shift and go to state 58
    try_catch_simply               shift and go to state 59
    try_catch_finally              shift and go to state 60
    list_empty                     shift and go to state 61
    list_full                      shift and go to state 62
    list_func_clear                shift and go to state 63
    list_func_count                shift and go to state 64
    list_func_add                  shift and go to state 65
    list_func_removeat             shift and go to state 66
    for_simple                     shift and go to state 69
    for_each                       shift and go to state 70
    normal_while                   shift and go to state 71
    do_while                       shift and go to state 72
    stack_push                     shift and go to state 74
    stack_pop                      shift and go to state 75
    stack_clear                    shift and go to state 76
    stack_peek                     shift and go to state 77
    stack_isEmpty                  shift and go to state 78
    queue_enqueue                  shift and go to state 80
    queue_dequeue                  shift and go to state 81
    queue_clear                    shift and go to state 82
    queue_isEmpty                  shift and go to state 83
    queue_peek                     shift and go to state 84
    assignation_type_value_multiple shift and go to state 86

state 388

    (205) do_while -> DO LKEY all_block_code RKEY WHILE . LPARENT boolean_operation RPARENT

    LPARENT         shift and go to state 446


state 389

    (174) concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY . thread_logic RKEY
    (176) thread_logic -> . thread_sentence
    (177) thread_logic -> . thread_logic thread_sentence
    (178) thread_sentence -> . thread_expression DOTANDCOMMA
    (179) thread_expression -> . thread_identificator DOT concurrent_method LPARENT RPARENT
    (180) thread_expression -> . PRINT LPARENT STRING RPARENT
    (183) thread_identificator -> . VARIABLE

    PRINT           shift and go to state 451
    VARIABLE        shift and go to state 147

    thread_identificator           shift and go to state 447
    thread_logic                   shift and go to state 448
    thread_sentence                shift and go to state 449
    thread_expression              shift and go to state 450

state 390

    (161) method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT . LKEY RKEY

    LKEY            shift and go to state 452


state 391

    (165) method_definition -> STATIC VOID METHOD LPARENT RPARENT LKEY . RKEY

    RKEY            shift and go to state 453


state 392

    (168) func_parameters -> func_parameter COMMA . func_parameters
    (167) func_parameters -> . func_parameter
    (168) func_parameters -> . func_parameter COMMA func_parameters
    (166) func_parameter -> . data_type VARIABLE
    (27) data_type -> . CHARTYPE
    (28) data_type -> . STRINGTYPE
    (29) data_type -> . FLOATTYPE
    (30) data_type -> . DECIMALTYPE
    (31) data_type -> . INTTYPE
    (32) data_type -> . BOOLTYPE
    (33) data_type -> . array_type
    (34) data_type -> . METHOD
    (51) array_type -> . CHARTYPE LBRACKET RBRACKET
    (52) array_type -> . STRINGTYPE LBRACKET RBRACKET
    (53) array_type -> . FLOATTYPE LBRACKET RBRACKET
    (54) array_type -> . DECIMALTYPE LBRACKET RBRACKET
    (55) array_type -> . INTTYPE LBRACKET RBRACKET
    (56) array_type -> . BOOLTYPE LBRACKET RBRACKET

    CHARTYPE        shift and go to state 99
    STRINGTYPE      shift and go to state 100
    FLOATTYPE       shift and go to state 101
    DECIMALTYPE     shift and go to state 102
    INTTYPE         shift and go to state 103
    BOOLTYPE        shift and go to state 104
    METHOD          shift and go to state 98

    func_parameter                 shift and go to state 316
    func_parameters                shift and go to state 454
    data_type                      shift and go to state 317
    array_type                     shift and go to state 105

state 393

    (166) func_parameter -> data_type VARIABLE .

    COMMA           reduce using rule 166 (func_parameter -> data_type VARIABLE .)
    RPARENT         reduce using rule 166 (func_parameter -> data_type VARIABLE .)


state 394

    (160) method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT . LKEY RETURN VARIABLE DOTANDCOMMA RKEY

    LKEY            shift and go to state 455


state 395

    (164) method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY . RETURN VARIABLE DOTANDCOMMA RKEY

    RETURN          shift and go to state 456


state 396

    (184) statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY . RPARENT

    RPARENT         shift and go to state 457


state 397

    (66) string_array_assignation -> VARIABLE ASSIGNATION LBRACKET . string_content_multiple RBRACKET
    (67) string_content_multiple -> . STRING
    (68) string_content_multiple -> . STRING COMMA string_content_multiple

    STRING          shift and go to state 459

    string_content_multiple        shift and go to state 458

state 398

    (88) array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 460


state 399

    (89) array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 461


state 400

    (225) list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .
    (239) stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .
    (250) queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .

  ! reduce/reduce conflict for PRINT resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for CHARTYPE resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STRINGTYPE resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FLOATTYPE resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DECIMALTYPE resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for INTTYPE resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for BOOLTYPE resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STATIC resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WRITE resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for LPARENT resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for ENUM resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for IF resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STACK resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for QUEUE resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for CONST resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for THREAD resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for TRY resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for LIST resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FOR resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FOREACH resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WHILE resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DO resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for RKEY resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PRINT resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for CHARTYPE resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STRINGTYPE resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FLOATTYPE resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DECIMALTYPE resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for INTTYPE resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for BOOLTYPE resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STATIC resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WRITE resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for LPARENT resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for ENUM resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for IF resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STACK resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for QUEUE resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for CONST resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for THREAD resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for TRY resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for LIST resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FOR resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FOREACH resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WHILE resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DO resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for RKEY resolved using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    PRINT           reduce using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 225 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)

  ! PRINT           [ reduce using rule 239 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! CHARTYPE        [ reduce using rule 239 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! STRINGTYPE      [ reduce using rule 239 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! FLOATTYPE       [ reduce using rule 239 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! DECIMALTYPE     [ reduce using rule 239 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! INTTYPE         [ reduce using rule 239 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! BOOLTYPE        [ reduce using rule 239 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! VARIABLE        [ reduce using rule 239 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! STATIC          [ reduce using rule 239 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! WRITE           [ reduce using rule 239 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! LPARENT         [ reduce using rule 239 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! ENUM            [ reduce using rule 239 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! IF              [ reduce using rule 239 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! STACK           [ reduce using rule 239 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! QUEUE           [ reduce using rule 239 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! CONST           [ reduce using rule 239 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! THREAD          [ reduce using rule 239 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! PUBLIC          [ reduce using rule 239 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! PRIVATE         [ reduce using rule 239 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! TRY             [ reduce using rule 239 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! LIST            [ reduce using rule 239 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! FOR             [ reduce using rule 239 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! FOREACH         [ reduce using rule 239 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! WHILE           [ reduce using rule 239 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! DO              [ reduce using rule 239 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! RKEY            [ reduce using rule 239 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! PRINT           [ reduce using rule 250 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! CHARTYPE        [ reduce using rule 250 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! STRINGTYPE      [ reduce using rule 250 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! FLOATTYPE       [ reduce using rule 250 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! DECIMALTYPE     [ reduce using rule 250 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! INTTYPE         [ reduce using rule 250 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! BOOLTYPE        [ reduce using rule 250 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! VARIABLE        [ reduce using rule 250 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! STATIC          [ reduce using rule 250 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! WRITE           [ reduce using rule 250 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! LPARENT         [ reduce using rule 250 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! ENUM            [ reduce using rule 250 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! IF              [ reduce using rule 250 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! STACK           [ reduce using rule 250 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! QUEUE           [ reduce using rule 250 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! CONST           [ reduce using rule 250 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! THREAD          [ reduce using rule 250 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! PUBLIC          [ reduce using rule 250 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! PRIVATE         [ reduce using rule 250 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! TRY             [ reduce using rule 250 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! LIST            [ reduce using rule 250 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! FOR             [ reduce using rule 250 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! FOREACH         [ reduce using rule 250 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! WHILE           [ reduce using rule 250 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! DO              [ reduce using rule 250 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! RKEY            [ reduce using rule 250 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]


state 401

    (226) list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 226 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 226 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 226 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 226 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 226 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 226 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 226 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 226 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 226 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 226 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 226 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 226 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 226 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 226 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 226 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 226 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 226 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 226 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 226 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 226 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 226 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 226 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 226 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 226 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 226 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 226 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)


state 402

    (227) list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 462


state 403

    (228) list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 463


state 404

    (229) list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 464


state 405

    (230) list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 465


state 406

    (237) stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 466


state 407

    (50) concatenation -> STRING PLUS . concatenation
    (49) concatenation -> . STRING
    (50) concatenation -> . STRING PLUS concatenation

    STRING          shift and go to state 467

    concatenation                  shift and go to state 468

state 408

    (48) read_data -> READ LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 469


state 409

    (83) array -> LBRACKET array_content . RBRACKET

    RBRACKET        shift and go to state 470


state 410

    (84) array_content -> value .
    (85) array_content -> value . COMMA array_content

    RBRACKET        reduce using rule 84 (array_content -> value .)
    COMMA           shift and go to state 471


state 411

    (238) stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 238 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 238 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 238 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 238 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 238 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 238 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 238 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 238 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 238 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 238 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 238 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 238 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 238 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 238 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 238 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 238 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 238 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 238 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 238 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 238 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 238 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 238 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 238 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 238 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 238 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 238 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)


state 412

    (240) stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .
    (251) queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .

  ! reduce/reduce conflict for PRINT resolved using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for CHARTYPE resolved using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STRINGTYPE resolved using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FLOATTYPE resolved using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DECIMALTYPE resolved using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for INTTYPE resolved using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for BOOLTYPE resolved using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STATIC resolved using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WRITE resolved using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for LPARENT resolved using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for ENUM resolved using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for IF resolved using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STACK resolved using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for QUEUE resolved using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for CONST resolved using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for THREAD resolved using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for TRY resolved using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for LIST resolved using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FOR resolved using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FOREACH resolved using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WHILE resolved using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DO resolved using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for RKEY resolved using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    PRINT           reduce using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 240 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)

  ! PRINT           [ reduce using rule 251 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! CHARTYPE        [ reduce using rule 251 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! STRINGTYPE      [ reduce using rule 251 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! FLOATTYPE       [ reduce using rule 251 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! DECIMALTYPE     [ reduce using rule 251 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! INTTYPE         [ reduce using rule 251 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! BOOLTYPE        [ reduce using rule 251 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! VARIABLE        [ reduce using rule 251 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! STATIC          [ reduce using rule 251 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! WRITE           [ reduce using rule 251 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! LPARENT         [ reduce using rule 251 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! ENUM            [ reduce using rule 251 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! IF              [ reduce using rule 251 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! STACK           [ reduce using rule 251 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! QUEUE           [ reduce using rule 251 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! CONST           [ reduce using rule 251 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! THREAD          [ reduce using rule 251 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! PUBLIC          [ reduce using rule 251 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! PRIVATE         [ reduce using rule 251 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! TRY             [ reduce using rule 251 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! LIST            [ reduce using rule 251 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! FOR             [ reduce using rule 251 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! FOREACH         [ reduce using rule 251 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! WHILE           [ reduce using rule 251 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! DO              [ reduce using rule 251 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! RKEY            [ reduce using rule 251 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]


state 413

    (241) stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .
    (252) queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .

  ! reduce/reduce conflict for PRINT resolved using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for CHARTYPE resolved using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STRINGTYPE resolved using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FLOATTYPE resolved using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DECIMALTYPE resolved using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for INTTYPE resolved using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for BOOLTYPE resolved using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STATIC resolved using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WRITE resolved using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for LPARENT resolved using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for ENUM resolved using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for IF resolved using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STACK resolved using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for QUEUE resolved using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for CONST resolved using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for THREAD resolved using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for TRY resolved using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for LIST resolved using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FOR resolved using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FOREACH resolved using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WHILE resolved using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DO resolved using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for RKEY resolved using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    PRINT           reduce using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 241 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)

  ! PRINT           [ reduce using rule 252 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! CHARTYPE        [ reduce using rule 252 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! STRINGTYPE      [ reduce using rule 252 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! FLOATTYPE       [ reduce using rule 252 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! DECIMALTYPE     [ reduce using rule 252 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! INTTYPE         [ reduce using rule 252 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! BOOLTYPE        [ reduce using rule 252 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! VARIABLE        [ reduce using rule 252 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! STATIC          [ reduce using rule 252 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! WRITE           [ reduce using rule 252 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! LPARENT         [ reduce using rule 252 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! ENUM            [ reduce using rule 252 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! IF              [ reduce using rule 252 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! STACK           [ reduce using rule 252 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! QUEUE           [ reduce using rule 252 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! CONST           [ reduce using rule 252 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! THREAD          [ reduce using rule 252 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! PUBLIC          [ reduce using rule 252 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! PRIVATE         [ reduce using rule 252 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! TRY             [ reduce using rule 252 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! LIST            [ reduce using rule 252 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! FOR             [ reduce using rule 252 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! FOREACH         [ reduce using rule 252 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! WHILE           [ reduce using rule 252 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! DO              [ reduce using rule 252 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! RKEY            [ reduce using rule 252 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]


state 414

    (248) queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 472


state 415

    (249) queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 249 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 249 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 249 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 249 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 249 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 249 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 249 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 249 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 249 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 249 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 249 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 249 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 249 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 249 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 249 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 249 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 249 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 249 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 249 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 249 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 249 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 249 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 249 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 249 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 249 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 249 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)


state 416

    (63) char_array_assignation -> VARIABLE ASSIGNATION LBRACKET . char_content_multiple RBRACKET
    (64) char_content_multiple -> . CHAR
    (65) char_content_multiple -> . CHAR COMMA char_content_multiple

    CHAR            shift and go to state 474

    char_content_multiple          shift and go to state 473

state 417

    (69) float_array_assignation -> VARIABLE ASSIGNATION LBRACKET . float_content_multiple RBRACKET
    (70) float_content_multiple -> . FLOAT_NUMBER
    (71) float_content_multiple -> . FLOAT_NUMBER COMMA float_content_multiple

    FLOAT_NUMBER    shift and go to state 476

    float_content_multiple         shift and go to state 475

state 418

    (97) arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .

    COMMA           reduce using rule 97 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .)
    DOTANDCOMMA     reduce using rule 97 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .)


state 419

    (75) decimal_array_assignation -> VARIABLE ASSIGNATION LBRACKET . decimal_content_multiple RBRACKET
    (76) decimal_content_multiple -> . DECIMAL_NUMBER
    (77) decimal_content_multiple -> . DECIMAL_NUMBER COMMA decimal_content_multiple

    DECIMAL_NUMBER  shift and go to state 478

    decimal_content_multiple       shift and go to state 477

state 420

    (72) int_array_assignation -> VARIABLE ASSIGNATION LBRACKET . int_content_multiple RBRACKET
    (73) int_content_multiple -> . INTEGER
    (74) int_content_multiple -> . INTEGER COMMA int_content_multiple

    INTEGER         shift and go to state 480

    int_content_multiple           shift and go to state 479

state 421

    (78) bool_array_assignation -> VARIABLE ASSIGNATION LBRACKET . bool_content_multiple RBRACKET
    (79) bool_content_multiple -> . BOOLTRUE
    (80) bool_content_multiple -> . BOOLFALSE
    (81) bool_content_multiple -> . BOOLTRUE COMMA bool_content_multiple
    (82) bool_content_multiple -> . BOOLFALSE COMMA bool_content_multiple

    BOOLTRUE        shift and go to state 482
    BOOLFALSE       shift and go to state 483

    bool_content_multiple          shift and go to state 481

state 422

    (138) assignation_true -> VARIABLE ASSIGNATION VARIABLE .
    (40) value_boolean -> VARIABLE .
    (45) value_numeric -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 40 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 40 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for LOGICAND resolved using rule 40 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for LOGICOR resolved using rule 40 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 40 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 40 (value_boolean -> VARIABLE .)
    LOGICAND        reduce using rule 40 (value_boolean -> VARIABLE .)
    LOGICOR         reduce using rule 40 (value_boolean -> VARIABLE .)
    COMMA           reduce using rule 40 (value_boolean -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 40 (value_boolean -> VARIABLE .)
    GREATER_THAN    reduce using rule 45 (value_numeric -> VARIABLE .)
    SMALLER_THAN    reduce using rule 45 (value_numeric -> VARIABLE .)
    EQUAL_COMPARATION reduce using rule 45 (value_numeric -> VARIABLE .)
    INEQUALITY      reduce using rule 45 (value_numeric -> VARIABLE .)
    GREATER_THAN_OR_EQUAL reduce using rule 45 (value_numeric -> VARIABLE .)
    SMALLER_THAN_OR_EQUAL reduce using rule 45 (value_numeric -> VARIABLE .)

  ! COMMA           [ reduce using rule 138 (assignation_true -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 138 (assignation_true -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! LOGICAND        [ reduce using rule 45 (value_numeric -> VARIABLE .) ]
  ! LOGICOR         [ reduce using rule 45 (value_numeric -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 45 (value_numeric -> VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 45 (value_numeric -> VARIABLE .) ]


state 423

    (139) assignation_true -> VARIABLE ASSIGNATION boolean_operation .

    COMMA           reduce using rule 139 (assignation_true -> VARIABLE ASSIGNATION boolean_operation .)
    DOTANDCOMMA     reduce using rule 139 (assignation_true -> VARIABLE ASSIGNATION boolean_operation .)


state 424

    (141) assignation_false -> VARIABLE ASSIGNATION VARIABLE .
    (40) value_boolean -> VARIABLE .
    (45) value_numeric -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 40 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 40 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for LOGICAND resolved using rule 40 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for LOGICOR resolved using rule 40 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 40 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 40 (value_boolean -> VARIABLE .)
    LOGICAND        reduce using rule 40 (value_boolean -> VARIABLE .)
    LOGICOR         reduce using rule 40 (value_boolean -> VARIABLE .)
    COMMA           reduce using rule 40 (value_boolean -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 40 (value_boolean -> VARIABLE .)
    GREATER_THAN    reduce using rule 45 (value_numeric -> VARIABLE .)
    SMALLER_THAN    reduce using rule 45 (value_numeric -> VARIABLE .)
    EQUAL_COMPARATION reduce using rule 45 (value_numeric -> VARIABLE .)
    INEQUALITY      reduce using rule 45 (value_numeric -> VARIABLE .)
    GREATER_THAN_OR_EQUAL reduce using rule 45 (value_numeric -> VARIABLE .)
    SMALLER_THAN_OR_EQUAL reduce using rule 45 (value_numeric -> VARIABLE .)

  ! COMMA           [ reduce using rule 141 (assignation_false -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 141 (assignation_false -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! LOGICAND        [ reduce using rule 45 (value_numeric -> VARIABLE .) ]
  ! LOGICOR         [ reduce using rule 45 (value_numeric -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 45 (value_numeric -> VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 45 (value_numeric -> VARIABLE .) ]


state 425

    (142) assignation_false -> VARIABLE ASSIGNATION boolean_operation .

    COMMA           reduce using rule 142 (assignation_false -> VARIABLE ASSIGNATION boolean_operation .)
    DOTANDCOMMA     reduce using rule 142 (assignation_false -> VARIABLE ASSIGNATION boolean_operation .)


state 426

    (169) thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .

    PRINT           reduce using rule 169 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    CHARTYPE        reduce using rule 169 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    STRINGTYPE      reduce using rule 169 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    FLOATTYPE       reduce using rule 169 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    DECIMALTYPE     reduce using rule 169 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    INTTYPE         reduce using rule 169 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    BOOLTYPE        reduce using rule 169 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    VARIABLE        reduce using rule 169 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    STATIC          reduce using rule 169 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    WRITE           reduce using rule 169 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    LPARENT         reduce using rule 169 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    ENUM            reduce using rule 169 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    IF              reduce using rule 169 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    STACK           reduce using rule 169 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    QUEUE           reduce using rule 169 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    CONST           reduce using rule 169 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    THREAD          reduce using rule 169 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    PUBLIC          reduce using rule 169 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    PRIVATE         reduce using rule 169 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    TRY             reduce using rule 169 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    LIST            reduce using rule 169 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    FOR             reduce using rule 169 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    FOREACH         reduce using rule 169 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    WHILE           reduce using rule 169 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    DO              reduce using rule 169 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    RKEY            reduce using rule 169 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)


state 427

    (173) thread_wait -> thread_identificator DOT . JOIN LPARENT RPARENT DOTANDCOMMA

    JOIN            shift and go to state 484


state 428

    (172) thread_init -> thread_identificator DOT START LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 485


state 429

    (158) method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters . RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY

    RPARENT         shift and go to state 486


state 430

    (162) method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT . LKEY RETURN VARIABLE DOTANDCOMMA RKEY

    LKEY            shift and go to state 487


state 431

    (159) method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters . RPARENT LKEY RKEY

    RPARENT         shift and go to state 488


state 432

    (163) method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT . LKEY RKEY

    LKEY            shift and go to state 489


state 433

    (187) list_enums -> METHOD COMMA list_enums .

    RKEY            reduce using rule 187 (list_enums -> METHOD COMMA list_enums .)


state 434

    (198) normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if . RKEY other_if
    (199) normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if . RKEY

    RKEY            shift and go to state 490


state 435

    (196) block_if -> normal_if .
    (18) block_code -> normal_if .

  ! reduce/reduce conflict for RKEY resolved using rule 18 (block_code -> normal_if .)
    PRINT           reduce using rule 18 (block_code -> normal_if .)
    CHARTYPE        reduce using rule 18 (block_code -> normal_if .)
    STRINGTYPE      reduce using rule 18 (block_code -> normal_if .)
    FLOATTYPE       reduce using rule 18 (block_code -> normal_if .)
    DECIMALTYPE     reduce using rule 18 (block_code -> normal_if .)
    INTTYPE         reduce using rule 18 (block_code -> normal_if .)
    BOOLTYPE        reduce using rule 18 (block_code -> normal_if .)
    VARIABLE        reduce using rule 18 (block_code -> normal_if .)
    STATIC          reduce using rule 18 (block_code -> normal_if .)
    WRITE           reduce using rule 18 (block_code -> normal_if .)
    LPARENT         reduce using rule 18 (block_code -> normal_if .)
    ENUM            reduce using rule 18 (block_code -> normal_if .)
    IF              reduce using rule 18 (block_code -> normal_if .)
    STACK           reduce using rule 18 (block_code -> normal_if .)
    QUEUE           reduce using rule 18 (block_code -> normal_if .)
    CONST           reduce using rule 18 (block_code -> normal_if .)
    THREAD          reduce using rule 18 (block_code -> normal_if .)
    PUBLIC          reduce using rule 18 (block_code -> normal_if .)
    PRIVATE         reduce using rule 18 (block_code -> normal_if .)
    TRY             reduce using rule 18 (block_code -> normal_if .)
    LIST            reduce using rule 18 (block_code -> normal_if .)
    FOR             reduce using rule 18 (block_code -> normal_if .)
    FOREACH         reduce using rule 18 (block_code -> normal_if .)
    WHILE           reduce using rule 18 (block_code -> normal_if .)
    DO              reduce using rule 18 (block_code -> normal_if .)
    RKEY            reduce using rule 18 (block_code -> normal_if .)

  ! RKEY            [ reduce using rule 196 (block_if -> normal_if .) ]


state 436

    (197) block_if -> all_block_code .

    RKEY            reduce using rule 197 (block_if -> all_block_code .)


state 437

    (231) stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 491


state 438

    (242) queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION . NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA

    NEW             shift and go to state 492


state 439

    (170) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT . thread_identificator RPARENT DOTANDCOMMA
    (171) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT . concurrent_method RPARENT DOTANDCOMMA
    (183) thread_identificator -> . VARIABLE
    (174) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (175) concurrent_method -> . WRITE

    VARIABLE        shift and go to state 147
    STATIC          shift and go to state 495
    WRITE           shift and go to state 57

    thread_identificator           shift and go to state 493
    concurrent_method              shift and go to state 494

state 440

    (190) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT . EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (191) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT . EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    EXCEPTION       shift and go to state 496


state 441

    (213) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION . NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (215) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION . NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    NEW             shift and go to state 497


state 442

    (214) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION . NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (216) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION . NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    NEW             shift and go to state 498


state 443

    (208) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation . DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (209) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation . DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    DOTANDCOMMA     shift and go to state 499


state 444

    (210) for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE . RPARENT LKEY all_block_code RKEY

    RPARENT         shift and go to state 500


state 445

    (204) normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code . RKEY

    RKEY            shift and go to state 501


state 446

    (205) do_while -> DO LKEY all_block_code RKEY WHILE LPARENT . boolean_operation RPARENT
    (111) boolean_operation -> . value_boolean
    (112) boolean_operation -> . LOGICNOT value_boolean
    (113) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (38) value_boolean -> . BOOLTRUE
    (39) value_boolean -> . BOOLFALSE
    (40) value_boolean -> . VARIABLE
    (41) value_boolean -> . comparison_operation
    (103) comparison_operation -> . value_numeric
    (104) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (42) value_numeric -> . INTEGER
    (43) value_numeric -> . FLOAT_NUMBER
    (44) value_numeric -> . DECIMAL_NUMBER
    (45) value_numeric -> . VARIABLE

    LOGICNOT        shift and go to state 203
    BOOLTRUE        shift and go to state 204
    BOOLFALSE       shift and go to state 205
    VARIABLE        shift and go to state 206
    INTEGER         shift and go to state 209
    FLOAT_NUMBER    shift and go to state 210
    DECIMAL_NUMBER  shift and go to state 211

    boolean_operation              shift and go to state 502
    value_boolean                  shift and go to state 202
    comparison_operation           shift and go to state 207
    value_numeric                  shift and go to state 208

state 447

    (179) thread_expression -> thread_identificator . DOT concurrent_method LPARENT RPARENT

    DOT             shift and go to state 503


state 448

    (174) concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic . RKEY
    (177) thread_logic -> thread_logic . thread_sentence
    (178) thread_sentence -> . thread_expression DOTANDCOMMA
    (179) thread_expression -> . thread_identificator DOT concurrent_method LPARENT RPARENT
    (180) thread_expression -> . PRINT LPARENT STRING RPARENT
    (183) thread_identificator -> . VARIABLE

    RKEY            shift and go to state 504
    PRINT           shift and go to state 451
    VARIABLE        shift and go to state 147

    thread_identificator           shift and go to state 447
    thread_sentence                shift and go to state 505
    thread_expression              shift and go to state 450

state 449

    (176) thread_logic -> thread_sentence .

    RKEY            reduce using rule 176 (thread_logic -> thread_sentence .)
    PRINT           reduce using rule 176 (thread_logic -> thread_sentence .)
    VARIABLE        reduce using rule 176 (thread_logic -> thread_sentence .)


state 450

    (178) thread_sentence -> thread_expression . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 506


state 451

    (180) thread_expression -> PRINT . LPARENT STRING RPARENT

    LPARENT         shift and go to state 507


state 452

    (161) method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY . RKEY

    RKEY            shift and go to state 508


state 453

    (165) method_definition -> STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .

    PRINT           reduce using rule 165 (method_definition -> STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    CHARTYPE        reduce using rule 165 (method_definition -> STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    STRINGTYPE      reduce using rule 165 (method_definition -> STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    FLOATTYPE       reduce using rule 165 (method_definition -> STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    DECIMALTYPE     reduce using rule 165 (method_definition -> STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    INTTYPE         reduce using rule 165 (method_definition -> STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    BOOLTYPE        reduce using rule 165 (method_definition -> STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    VARIABLE        reduce using rule 165 (method_definition -> STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    STATIC          reduce using rule 165 (method_definition -> STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    WRITE           reduce using rule 165 (method_definition -> STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    LPARENT         reduce using rule 165 (method_definition -> STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    ENUM            reduce using rule 165 (method_definition -> STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    IF              reduce using rule 165 (method_definition -> STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    STACK           reduce using rule 165 (method_definition -> STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    QUEUE           reduce using rule 165 (method_definition -> STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    CONST           reduce using rule 165 (method_definition -> STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    THREAD          reduce using rule 165 (method_definition -> STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    PUBLIC          reduce using rule 165 (method_definition -> STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    PRIVATE         reduce using rule 165 (method_definition -> STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    TRY             reduce using rule 165 (method_definition -> STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    LIST            reduce using rule 165 (method_definition -> STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    FOR             reduce using rule 165 (method_definition -> STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    FOREACH         reduce using rule 165 (method_definition -> STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    WHILE           reduce using rule 165 (method_definition -> STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    DO              reduce using rule 165 (method_definition -> STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    RKEY            reduce using rule 165 (method_definition -> STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)


state 454

    (168) func_parameters -> func_parameter COMMA func_parameters .

    RPARENT         reduce using rule 168 (func_parameters -> func_parameter COMMA func_parameters .)


state 455

    (160) method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY . RETURN VARIABLE DOTANDCOMMA RKEY

    RETURN          shift and go to state 509


state 456

    (164) method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN . VARIABLE DOTANDCOMMA RKEY

    VARIABLE        shift and go to state 510


state 457

    (184) statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .

    PRINT           reduce using rule 184 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    CHARTYPE        reduce using rule 184 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    STRINGTYPE      reduce using rule 184 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    FLOATTYPE       reduce using rule 184 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    DECIMALTYPE     reduce using rule 184 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    INTTYPE         reduce using rule 184 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    BOOLTYPE        reduce using rule 184 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    VARIABLE        reduce using rule 184 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    STATIC          reduce using rule 184 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    WRITE           reduce using rule 184 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    LPARENT         reduce using rule 184 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    ENUM            reduce using rule 184 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    IF              reduce using rule 184 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    STACK           reduce using rule 184 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    QUEUE           reduce using rule 184 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    CONST           reduce using rule 184 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    THREAD          reduce using rule 184 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    PUBLIC          reduce using rule 184 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    PRIVATE         reduce using rule 184 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    TRY             reduce using rule 184 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    LIST            reduce using rule 184 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    FOR             reduce using rule 184 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    FOREACH         reduce using rule 184 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    WHILE           reduce using rule 184 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    DO              reduce using rule 184 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    RKEY            reduce using rule 184 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)


state 458

    (66) string_array_assignation -> VARIABLE ASSIGNATION LBRACKET string_content_multiple . RBRACKET

    RBRACKET        shift and go to state 511


state 459

    (67) string_content_multiple -> STRING .
    (68) string_content_multiple -> STRING . COMMA string_content_multiple

    RBRACKET        reduce using rule 67 (string_content_multiple -> STRING .)
    COMMA           shift and go to state 512


state 460

    (88) array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .

    PRINT           reduce using rule 88 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    CHARTYPE        reduce using rule 88 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 88 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 88 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 88 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    INTTYPE         reduce using rule 88 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 88 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    VARIABLE        reduce using rule 88 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    STATIC          reduce using rule 88 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    WRITE           reduce using rule 88 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    LPARENT         reduce using rule 88 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    ENUM            reduce using rule 88 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    IF              reduce using rule 88 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    STACK           reduce using rule 88 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    QUEUE           reduce using rule 88 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    CONST           reduce using rule 88 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    THREAD          reduce using rule 88 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    PUBLIC          reduce using rule 88 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    PRIVATE         reduce using rule 88 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    TRY             reduce using rule 88 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    LIST            reduce using rule 88 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    FOR             reduce using rule 88 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    FOREACH         reduce using rule 88 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    WHILE           reduce using rule 88 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    DO              reduce using rule 88 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    RKEY            reduce using rule 88 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)


state 461

    (89) array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .

    PRINT           reduce using rule 89 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    CHARTYPE        reduce using rule 89 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 89 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 89 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 89 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    INTTYPE         reduce using rule 89 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 89 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    VARIABLE        reduce using rule 89 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    STATIC          reduce using rule 89 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    WRITE           reduce using rule 89 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    LPARENT         reduce using rule 89 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    ENUM            reduce using rule 89 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    IF              reduce using rule 89 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    STACK           reduce using rule 89 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    QUEUE           reduce using rule 89 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    CONST           reduce using rule 89 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    THREAD          reduce using rule 89 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    PUBLIC          reduce using rule 89 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    PRIVATE         reduce using rule 89 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    TRY             reduce using rule 89 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    LIST            reduce using rule 89 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    FOR             reduce using rule 89 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    FOREACH         reduce using rule 89 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    WHILE           reduce using rule 89 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    DO              reduce using rule 89 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    RKEY            reduce using rule 89 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)


state 462

    (227) list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 227 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 227 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 227 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 227 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 227 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 227 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 227 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 227 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 227 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 227 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 227 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 227 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    IF              reduce using rule 227 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 227 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 227 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 227 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 227 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 227 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 227 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 227 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 227 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 227 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 227 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 227 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    DO              reduce using rule 227 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 227 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)


state 463

    (228) list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 228 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 228 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 228 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 228 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 228 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 228 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 228 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 228 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 228 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 228 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 228 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 228 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    IF              reduce using rule 228 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 228 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 228 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 228 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 228 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 228 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 228 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 228 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 228 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 228 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 228 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 228 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    DO              reduce using rule 228 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 228 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)


state 464

    (229) list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 229 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 229 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 229 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 229 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 229 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 229 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 229 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 229 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 229 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 229 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 229 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 229 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    IF              reduce using rule 229 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 229 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 229 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 229 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 229 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 229 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 229 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 229 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 229 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 229 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 229 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 229 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    DO              reduce using rule 229 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 229 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)


state 465

    (230) list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 230 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 230 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 230 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 230 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 230 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 230 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 230 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 230 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 230 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 230 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 230 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 230 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    IF              reduce using rule 230 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 230 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 230 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 230 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 230 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 230 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 230 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 230 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 230 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 230 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 230 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 230 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    DO              reduce using rule 230 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 230 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)


state 466

    (237) stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 237 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 237 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 237 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 237 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 237 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 237 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 237 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 237 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 237 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 237 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 237 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 237 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    IF              reduce using rule 237 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 237 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 237 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 237 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 237 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 237 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 237 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 237 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 237 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 237 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 237 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 237 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    DO              reduce using rule 237 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 237 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)


state 467

    (49) concatenation -> STRING .
    (50) concatenation -> STRING . PLUS concatenation

    RPARENT         reduce using rule 49 (concatenation -> STRING .)
    DOTANDCOMMA     reduce using rule 49 (concatenation -> STRING .)
    COMMA           reduce using rule 49 (concatenation -> STRING .)
    RBRACKET        reduce using rule 49 (concatenation -> STRING .)
    PLUS            shift and go to state 407


state 468

    (50) concatenation -> STRING PLUS concatenation .

    RPARENT         reduce using rule 50 (concatenation -> STRING PLUS concatenation .)
    DOTANDCOMMA     reduce using rule 50 (concatenation -> STRING PLUS concatenation .)
    COMMA           reduce using rule 50 (concatenation -> STRING PLUS concatenation .)
    RBRACKET        reduce using rule 50 (concatenation -> STRING PLUS concatenation .)


state 469

    (48) read_data -> READ LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 513


state 470

    (83) array -> LBRACKET array_content RBRACKET .

    RPARENT         reduce using rule 83 (array -> LBRACKET array_content RBRACKET .)
    DOTANDCOMMA     reduce using rule 83 (array -> LBRACKET array_content RBRACKET .)
    COMMA           reduce using rule 83 (array -> LBRACKET array_content RBRACKET .)
    RBRACKET        reduce using rule 83 (array -> LBRACKET array_content RBRACKET .)


state 471

    (85) array_content -> value COMMA . array_content
    (84) array_content -> . value
    (85) array_content -> . value COMMA array_content
    (90) value -> . value_numeric
    (91) value -> . value_boolean
    (92) value -> . value_string
    (93) value -> . VARIABLE
    (94) value -> . read_data
    (95) value -> . array
    (42) value_numeric -> . INTEGER
    (43) value_numeric -> . FLOAT_NUMBER
    (44) value_numeric -> . DECIMAL_NUMBER
    (45) value_numeric -> . VARIABLE
    (38) value_boolean -> . BOOLTRUE
    (39) value_boolean -> . BOOLFALSE
    (40) value_boolean -> . VARIABLE
    (41) value_boolean -> . comparison_operation
    (35) value_string -> . STRING
    (36) value_string -> . CHAR
    (37) value_string -> . concatenation
    (48) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (83) array -> . LBRACKET array_content RBRACKET
    (103) comparison_operation -> . value_numeric
    (104) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (49) concatenation -> . STRING
    (50) concatenation -> . STRING PLUS concatenation

    VARIABLE        shift and go to state 331
    INTEGER         shift and go to state 209
    FLOAT_NUMBER    shift and go to state 210
    DECIMAL_NUMBER  shift and go to state 211
    BOOLTRUE        shift and go to state 204
    BOOLFALSE       shift and go to state 205
    STRING          shift and go to state 338
    CHAR            shift and go to state 339
    READ            shift and go to state 341
    LBRACKET        shift and go to state 342

    value                          shift and go to state 410
    array_content                  shift and go to state 514
    value_numeric                  shift and go to state 333
    value_boolean                  shift and go to state 334
    value_string                   shift and go to state 335
    read_data                      shift and go to state 336
    array                          shift and go to state 337
    comparison_operation           shift and go to state 207
    concatenation                  shift and go to state 340

state 472

    (248) queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 248 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 248 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 248 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 248 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 248 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 248 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 248 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 248 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 248 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 248 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 248 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 248 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    IF              reduce using rule 248 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 248 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 248 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 248 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 248 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 248 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 248 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 248 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 248 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 248 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 248 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 248 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    DO              reduce using rule 248 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 248 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)


state 473

    (63) char_array_assignation -> VARIABLE ASSIGNATION LBRACKET char_content_multiple . RBRACKET

    RBRACKET        shift and go to state 515


state 474

    (64) char_content_multiple -> CHAR .
    (65) char_content_multiple -> CHAR . COMMA char_content_multiple

    RBRACKET        reduce using rule 64 (char_content_multiple -> CHAR .)
    COMMA           shift and go to state 516


state 475

    (69) float_array_assignation -> VARIABLE ASSIGNATION LBRACKET float_content_multiple . RBRACKET

    RBRACKET        shift and go to state 517


state 476

    (70) float_content_multiple -> FLOAT_NUMBER .
    (71) float_content_multiple -> FLOAT_NUMBER . COMMA float_content_multiple

    RBRACKET        reduce using rule 70 (float_content_multiple -> FLOAT_NUMBER .)
    COMMA           shift and go to state 518


state 477

    (75) decimal_array_assignation -> VARIABLE ASSIGNATION LBRACKET decimal_content_multiple . RBRACKET

    RBRACKET        shift and go to state 519


state 478

    (76) decimal_content_multiple -> DECIMAL_NUMBER .
    (77) decimal_content_multiple -> DECIMAL_NUMBER . COMMA decimal_content_multiple

    RBRACKET        reduce using rule 76 (decimal_content_multiple -> DECIMAL_NUMBER .)
    COMMA           shift and go to state 520


state 479

    (72) int_array_assignation -> VARIABLE ASSIGNATION LBRACKET int_content_multiple . RBRACKET

    RBRACKET        shift and go to state 521


state 480

    (73) int_content_multiple -> INTEGER .
    (74) int_content_multiple -> INTEGER . COMMA int_content_multiple

    RBRACKET        reduce using rule 73 (int_content_multiple -> INTEGER .)
    COMMA           shift and go to state 522


state 481

    (78) bool_array_assignation -> VARIABLE ASSIGNATION LBRACKET bool_content_multiple . RBRACKET

    RBRACKET        shift and go to state 523


state 482

    (79) bool_content_multiple -> BOOLTRUE .
    (81) bool_content_multiple -> BOOLTRUE . COMMA bool_content_multiple

    RBRACKET        reduce using rule 79 (bool_content_multiple -> BOOLTRUE .)
    COMMA           shift and go to state 524


state 483

    (80) bool_content_multiple -> BOOLFALSE .
    (82) bool_content_multiple -> BOOLFALSE . COMMA bool_content_multiple

    RBRACKET        reduce using rule 80 (bool_content_multiple -> BOOLFALSE .)
    COMMA           shift and go to state 525


state 484

    (173) thread_wait -> thread_identificator DOT JOIN . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 526


state 485

    (172) thread_init -> thread_identificator DOT START LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 527


state 486

    (158) method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT . LKEY RETURN VARIABLE DOTANDCOMMA RKEY

    LKEY            shift and go to state 528


state 487

    (162) method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY . RETURN VARIABLE DOTANDCOMMA RKEY

    RETURN          shift and go to state 529


state 488

    (159) method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT . LKEY RKEY

    LKEY            shift and go to state 530


state 489

    (163) method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY . RKEY

    RKEY            shift and go to state 531


state 490

    (198) normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY . other_if
    (199) normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .
    (200) other_if -> . ELSE LKEY block_if RKEY
    (201) other_if -> . ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if

    PRINT           reduce using rule 199 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    CHARTYPE        reduce using rule 199 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    STRINGTYPE      reduce using rule 199 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    FLOATTYPE       reduce using rule 199 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    DECIMALTYPE     reduce using rule 199 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    INTTYPE         reduce using rule 199 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    BOOLTYPE        reduce using rule 199 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    VARIABLE        reduce using rule 199 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    STATIC          reduce using rule 199 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    WRITE           reduce using rule 199 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    LPARENT         reduce using rule 199 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    ENUM            reduce using rule 199 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    IF              reduce using rule 199 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    STACK           reduce using rule 199 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    QUEUE           reduce using rule 199 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    CONST           reduce using rule 199 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    THREAD          reduce using rule 199 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    PUBLIC          reduce using rule 199 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    PRIVATE         reduce using rule 199 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    TRY             reduce using rule 199 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    LIST            reduce using rule 199 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    FOR             reduce using rule 199 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    FOREACH         reduce using rule 199 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    WHILE           reduce using rule 199 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    DO              reduce using rule 199 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    RKEY            reduce using rule 199 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    ELSE            shift and go to state 533
    ELSE_IF         shift and go to state 534

    other_if                       shift and go to state 532

state 491

    (231) stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 535


state 492

    (242) queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW . QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA

    QUEUE           shift and go to state 536


state 493

    (170) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 537


state 494

    (171) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 538


state 495

    (174) concurrent_method -> STATIC . VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY

    VOID            shift and go to state 539


state 496

    (190) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION . ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (191) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION . ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    ERROR           shift and go to state 540


state 497

    (213) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW . LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (215) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW . LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    LIST            shift and go to state 541


state 498

    (214) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW . LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (216) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW . LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    LIST            shift and go to state 542


state 499

    (208) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA . VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (209) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA . VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    VARIABLE        shift and go to state 543


state 500

    (210) for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT . LKEY all_block_code RKEY

    LKEY            shift and go to state 544


state 501

    (204) normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .

    PRINT           reduce using rule 204 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    CHARTYPE        reduce using rule 204 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    STRINGTYPE      reduce using rule 204 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    FLOATTYPE       reduce using rule 204 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    DECIMALTYPE     reduce using rule 204 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    INTTYPE         reduce using rule 204 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    BOOLTYPE        reduce using rule 204 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    VARIABLE        reduce using rule 204 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    STATIC          reduce using rule 204 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    WRITE           reduce using rule 204 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    LPARENT         reduce using rule 204 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    ENUM            reduce using rule 204 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    IF              reduce using rule 204 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    STACK           reduce using rule 204 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    QUEUE           reduce using rule 204 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    CONST           reduce using rule 204 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    THREAD          reduce using rule 204 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    PUBLIC          reduce using rule 204 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    PRIVATE         reduce using rule 204 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    TRY             reduce using rule 204 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    LIST            reduce using rule 204 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    FOR             reduce using rule 204 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    FOREACH         reduce using rule 204 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    WHILE           reduce using rule 204 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    DO              reduce using rule 204 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    RKEY            reduce using rule 204 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)


state 502

    (205) do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation . RPARENT

    RPARENT         shift and go to state 545


state 503

    (179) thread_expression -> thread_identificator DOT . concurrent_method LPARENT RPARENT
    (174) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (175) concurrent_method -> . WRITE

    STATIC          shift and go to state 495
    WRITE           shift and go to state 57

    concurrent_method              shift and go to state 546

state 504

    (174) concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .

    PRINT           reduce using rule 174 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    CHARTYPE        reduce using rule 174 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    STRINGTYPE      reduce using rule 174 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    FLOATTYPE       reduce using rule 174 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    DECIMALTYPE     reduce using rule 174 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    INTTYPE         reduce using rule 174 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    BOOLTYPE        reduce using rule 174 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    VARIABLE        reduce using rule 174 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    STATIC          reduce using rule 174 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    WRITE           reduce using rule 174 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    LPARENT         reduce using rule 174 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    ENUM            reduce using rule 174 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    IF              reduce using rule 174 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    STACK           reduce using rule 174 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    QUEUE           reduce using rule 174 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    CONST           reduce using rule 174 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    THREAD          reduce using rule 174 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    PUBLIC          reduce using rule 174 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    PRIVATE         reduce using rule 174 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    TRY             reduce using rule 174 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    LIST            reduce using rule 174 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    FOR             reduce using rule 174 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    FOREACH         reduce using rule 174 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    WHILE           reduce using rule 174 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    DO              reduce using rule 174 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    RKEY            reduce using rule 174 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    RPARENT         reduce using rule 174 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)


state 505

    (177) thread_logic -> thread_logic thread_sentence .

    RKEY            reduce using rule 177 (thread_logic -> thread_logic thread_sentence .)
    PRINT           reduce using rule 177 (thread_logic -> thread_logic thread_sentence .)
    VARIABLE        reduce using rule 177 (thread_logic -> thread_logic thread_sentence .)


state 506

    (178) thread_sentence -> thread_expression DOTANDCOMMA .

    RKEY            reduce using rule 178 (thread_sentence -> thread_expression DOTANDCOMMA .)
    PRINT           reduce using rule 178 (thread_sentence -> thread_expression DOTANDCOMMA .)
    VARIABLE        reduce using rule 178 (thread_sentence -> thread_expression DOTANDCOMMA .)


state 507

    (180) thread_expression -> PRINT LPARENT . STRING RPARENT

    STRING          shift and go to state 547


state 508

    (161) method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .

    PRINT           reduce using rule 161 (method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    CHARTYPE        reduce using rule 161 (method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    STRINGTYPE      reduce using rule 161 (method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    FLOATTYPE       reduce using rule 161 (method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    DECIMALTYPE     reduce using rule 161 (method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    INTTYPE         reduce using rule 161 (method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    BOOLTYPE        reduce using rule 161 (method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    VARIABLE        reduce using rule 161 (method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    STATIC          reduce using rule 161 (method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    WRITE           reduce using rule 161 (method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    LPARENT         reduce using rule 161 (method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    ENUM            reduce using rule 161 (method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    IF              reduce using rule 161 (method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    STACK           reduce using rule 161 (method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    QUEUE           reduce using rule 161 (method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    CONST           reduce using rule 161 (method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    THREAD          reduce using rule 161 (method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    PUBLIC          reduce using rule 161 (method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    PRIVATE         reduce using rule 161 (method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    TRY             reduce using rule 161 (method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    LIST            reduce using rule 161 (method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    FOR             reduce using rule 161 (method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    FOREACH         reduce using rule 161 (method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    WHILE           reduce using rule 161 (method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    DO              reduce using rule 161 (method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    RKEY            reduce using rule 161 (method_definition -> STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)


state 509

    (160) method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN . VARIABLE DOTANDCOMMA RKEY

    VARIABLE        shift and go to state 548


state 510

    (164) method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE . DOTANDCOMMA RKEY

    DOTANDCOMMA     shift and go to state 549


state 511

    (66) string_array_assignation -> VARIABLE ASSIGNATION LBRACKET string_content_multiple RBRACKET .

    DOTANDCOMMA     reduce using rule 66 (string_array_assignation -> VARIABLE ASSIGNATION LBRACKET string_content_multiple RBRACKET .)


state 512

    (68) string_content_multiple -> STRING COMMA . string_content_multiple
    (67) string_content_multiple -> . STRING
    (68) string_content_multiple -> . STRING COMMA string_content_multiple

    STRING          shift and go to state 459

    string_content_multiple        shift and go to state 550

state 513

    (48) read_data -> READ LPARENT RPARENT DOTANDCOMMA .

    RPARENT         reduce using rule 48 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    DOTANDCOMMA     reduce using rule 48 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    COMMA           reduce using rule 48 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    RBRACKET        reduce using rule 48 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)


state 514

    (85) array_content -> value COMMA array_content .

    RBRACKET        reduce using rule 85 (array_content -> value COMMA array_content .)


state 515

    (63) char_array_assignation -> VARIABLE ASSIGNATION LBRACKET char_content_multiple RBRACKET .

    DOTANDCOMMA     reduce using rule 63 (char_array_assignation -> VARIABLE ASSIGNATION LBRACKET char_content_multiple RBRACKET .)


state 516

    (65) char_content_multiple -> CHAR COMMA . char_content_multiple
    (64) char_content_multiple -> . CHAR
    (65) char_content_multiple -> . CHAR COMMA char_content_multiple

    CHAR            shift and go to state 474

    char_content_multiple          shift and go to state 551

state 517

    (69) float_array_assignation -> VARIABLE ASSIGNATION LBRACKET float_content_multiple RBRACKET .

    DOTANDCOMMA     reduce using rule 69 (float_array_assignation -> VARIABLE ASSIGNATION LBRACKET float_content_multiple RBRACKET .)


state 518

    (71) float_content_multiple -> FLOAT_NUMBER COMMA . float_content_multiple
    (70) float_content_multiple -> . FLOAT_NUMBER
    (71) float_content_multiple -> . FLOAT_NUMBER COMMA float_content_multiple

    FLOAT_NUMBER    shift and go to state 476

    float_content_multiple         shift and go to state 552

state 519

    (75) decimal_array_assignation -> VARIABLE ASSIGNATION LBRACKET decimal_content_multiple RBRACKET .

    DOTANDCOMMA     reduce using rule 75 (decimal_array_assignation -> VARIABLE ASSIGNATION LBRACKET decimal_content_multiple RBRACKET .)


state 520

    (77) decimal_content_multiple -> DECIMAL_NUMBER COMMA . decimal_content_multiple
    (76) decimal_content_multiple -> . DECIMAL_NUMBER
    (77) decimal_content_multiple -> . DECIMAL_NUMBER COMMA decimal_content_multiple

    DECIMAL_NUMBER  shift and go to state 478

    decimal_content_multiple       shift and go to state 553

state 521

    (72) int_array_assignation -> VARIABLE ASSIGNATION LBRACKET int_content_multiple RBRACKET .

    DOTANDCOMMA     reduce using rule 72 (int_array_assignation -> VARIABLE ASSIGNATION LBRACKET int_content_multiple RBRACKET .)


state 522

    (74) int_content_multiple -> INTEGER COMMA . int_content_multiple
    (73) int_content_multiple -> . INTEGER
    (74) int_content_multiple -> . INTEGER COMMA int_content_multiple

    INTEGER         shift and go to state 480

    int_content_multiple           shift and go to state 554

state 523

    (78) bool_array_assignation -> VARIABLE ASSIGNATION LBRACKET bool_content_multiple RBRACKET .

    DOTANDCOMMA     reduce using rule 78 (bool_array_assignation -> VARIABLE ASSIGNATION LBRACKET bool_content_multiple RBRACKET .)


state 524

    (81) bool_content_multiple -> BOOLTRUE COMMA . bool_content_multiple
    (79) bool_content_multiple -> . BOOLTRUE
    (80) bool_content_multiple -> . BOOLFALSE
    (81) bool_content_multiple -> . BOOLTRUE COMMA bool_content_multiple
    (82) bool_content_multiple -> . BOOLFALSE COMMA bool_content_multiple

    BOOLTRUE        shift and go to state 482
    BOOLFALSE       shift and go to state 483

    bool_content_multiple          shift and go to state 555

state 525

    (82) bool_content_multiple -> BOOLFALSE COMMA . bool_content_multiple
    (79) bool_content_multiple -> . BOOLTRUE
    (80) bool_content_multiple -> . BOOLFALSE
    (81) bool_content_multiple -> . BOOLTRUE COMMA bool_content_multiple
    (82) bool_content_multiple -> . BOOLFALSE COMMA bool_content_multiple

    BOOLTRUE        shift and go to state 482
    BOOLFALSE       shift and go to state 483

    bool_content_multiple          shift and go to state 556

state 526

    (173) thread_wait -> thread_identificator DOT JOIN LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 557


state 527

    (172) thread_init -> thread_identificator DOT START LPARENT RPARENT DOTANDCOMMA .

    VARIABLE        reduce using rule 172 (thread_init -> thread_identificator DOT START LPARENT RPARENT DOTANDCOMMA .)


state 528

    (158) method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY . RETURN VARIABLE DOTANDCOMMA RKEY

    RETURN          shift and go to state 558


state 529

    (162) method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN . VARIABLE DOTANDCOMMA RKEY

    VARIABLE        shift and go to state 559


state 530

    (159) method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY . RKEY

    RKEY            shift and go to state 560


state 531

    (163) method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .

    PRINT           reduce using rule 163 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    CHARTYPE        reduce using rule 163 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    STRINGTYPE      reduce using rule 163 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    FLOATTYPE       reduce using rule 163 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    DECIMALTYPE     reduce using rule 163 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    INTTYPE         reduce using rule 163 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    BOOLTYPE        reduce using rule 163 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    VARIABLE        reduce using rule 163 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    STATIC          reduce using rule 163 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    WRITE           reduce using rule 163 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    LPARENT         reduce using rule 163 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    ENUM            reduce using rule 163 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    IF              reduce using rule 163 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    STACK           reduce using rule 163 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    QUEUE           reduce using rule 163 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    CONST           reduce using rule 163 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    THREAD          reduce using rule 163 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    PUBLIC          reduce using rule 163 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    PRIVATE         reduce using rule 163 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    TRY             reduce using rule 163 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    LIST            reduce using rule 163 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    FOR             reduce using rule 163 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    FOREACH         reduce using rule 163 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    WHILE           reduce using rule 163 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    DO              reduce using rule 163 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)
    RKEY            reduce using rule 163 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY .)


state 532

    (198) normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .

    PRINT           reduce using rule 198 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    CHARTYPE        reduce using rule 198 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    STRINGTYPE      reduce using rule 198 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    FLOATTYPE       reduce using rule 198 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    DECIMALTYPE     reduce using rule 198 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    INTTYPE         reduce using rule 198 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    BOOLTYPE        reduce using rule 198 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    VARIABLE        reduce using rule 198 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    STATIC          reduce using rule 198 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    WRITE           reduce using rule 198 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    LPARENT         reduce using rule 198 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    ENUM            reduce using rule 198 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    IF              reduce using rule 198 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    STACK           reduce using rule 198 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    QUEUE           reduce using rule 198 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    CONST           reduce using rule 198 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    THREAD          reduce using rule 198 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    PUBLIC          reduce using rule 198 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    PRIVATE         reduce using rule 198 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    TRY             reduce using rule 198 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    LIST            reduce using rule 198 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    FOR             reduce using rule 198 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    FOREACH         reduce using rule 198 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    WHILE           reduce using rule 198 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    DO              reduce using rule 198 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    RKEY            reduce using rule 198 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)


state 533

    (200) other_if -> ELSE . LKEY block_if RKEY

    LKEY            shift and go to state 561


state 534

    (201) other_if -> ELSE_IF . LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if

    LPARENT         shift and go to state 562


state 535

    (231) stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 231 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 231 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 231 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 231 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 231 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 231 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 231 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 231 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 231 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 231 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 231 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 231 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 231 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 231 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 231 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 231 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 231 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 231 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 231 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 231 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 231 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 231 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 231 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 231 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 231 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 231 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)


state 536

    (242) queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE . SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA

    SMALLER_THAN    shift and go to state 563


state 537

    (170) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 564


state 538

    (171) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 565


state 539

    (174) concurrent_method -> STATIC VOID . thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (183) thread_identificator -> . VARIABLE

    VARIABLE        shift and go to state 147

    thread_identificator           shift and go to state 154

state 540

    (190) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR . RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (191) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR . RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    RPARENT         shift and go to state 566


state 541

    (213) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST . SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (215) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST . SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    SMALLER_THAN    shift and go to state 567


state 542

    (214) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST . SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (216) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST . SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    SMALLER_THAN    shift and go to state 568


state 543

    (208) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE . INCREMENT RPARENT LKEY all_block_code RKEY
    (209) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE . DECREMENT RPARENT LKEY all_block_code RKEY

    INCREMENT       shift and go to state 569
    DECREMENT       shift and go to state 570


state 544

    (210) for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY . all_block_code RKEY
    (25) all_block_code -> . block_code
    (26) all_block_code -> . block_code all_block_code
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . array_assignation
    (8) block_code -> . array_value_assign
    (9) block_code -> . array_indexing
    (10) block_code -> . thread_main
    (11) block_code -> . concurrent_method
    (12) block_code -> . method_definition
    (13) block_code -> . block_try_catch
    (14) block_code -> . lists
    (15) block_code -> . functions_list
    (16) block_code -> . statement_lambda
    (17) block_code -> . enums
    (18) block_code -> . normal_if
    (19) block_code -> . block_for
    (20) block_code -> . block_while
    (21) block_code -> . stack_struct
    (22) block_code -> . functions_stack
    (23) block_code -> . queue_struct
    (24) block_code -> . functions_queue
    (116) def_const_or_var -> . constant_assignation
    (117) def_const_or_var -> . variable_assignation
    (46) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (47) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (57) array_assignation -> . CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA
    (58) array_assignation -> . STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
    (59) array_assignation -> . FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
    (60) array_assignation -> . DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA
    (61) array_assignation -> . INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
    (62) array_assignation -> . BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
    (88) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (89) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (86) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (87) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (169) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (174) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (175) concurrent_method -> . WRITE
    (158) method_definition -> . access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (159) method_definition -> . access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY
    (160) method_definition -> . STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (161) method_definition -> . STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY
    (162) method_definition -> . access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (163) method_definition -> . access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY
    (164) method_definition -> . STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (165) method_definition -> . STATIC VOID METHOD LPARENT RPARENT LKEY RKEY
    (188) block_try_catch -> . try_catch_simply
    (189) block_try_catch -> . try_catch_finally
    (211) lists -> . list_empty
    (212) lists -> . list_full
    (221) functions_list -> . list_func_clear
    (222) functions_list -> . list_func_count
    (223) functions_list -> . list_func_add
    (224) functions_list -> . list_func_removeat
    (184) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (185) enums -> . ENUM METHOD LKEY list_enums RKEY
    (198) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (199) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (206) block_for -> . for_simple
    (207) block_for -> . for_each
    (202) block_while -> . normal_while
    (203) block_while -> . do_while
    (231) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (232) functions_stack -> . stack_push
    (233) functions_stack -> . stack_pop
    (234) functions_stack -> . stack_clear
    (235) functions_stack -> . stack_peek
    (236) functions_stack -> . stack_isEmpty
    (242) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (243) functions_queue -> . queue_enqueue
    (244) functions_queue -> . queue_dequeue
    (245) functions_queue -> . queue_clear
    (246) functions_queue -> . queue_isEmpty
    (247) functions_queue -> . queue_peek
    (118) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (119) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (120) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (121) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (170) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (171) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (122) access_modifiers -> . PUBLIC
    (123) access_modifiers -> . PRIVATE
    (190) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (191) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (213) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (214) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (215) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (216) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (225) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (226) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (227) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (228) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (229) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (230) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (208) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (209) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (210) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (204) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (205) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (237) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (238) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (239) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (240) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (241) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (248) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (249) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (250) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (252) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (251) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (143) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (144) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (145) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (146) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (147) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 50
    CHARTYPE        shift and go to state 51
    STRINGTYPE      shift and go to state 24
    FLOATTYPE       shift and go to state 52
    DECIMALTYPE     shift and go to state 53
    INTTYPE         shift and go to state 54
    BOOLTYPE        shift and go to state 55
    VARIABLE        shift and go to state 25
    STATIC          shift and go to state 22
    WRITE           shift and go to state 57
    LPARENT         shift and go to state 23
    ENUM            shift and go to state 67
    IF              shift and go to state 68
    STACK           shift and go to state 73
    QUEUE           shift and go to state 79
    CONST           shift and go to state 85
    THREAD          shift and go to state 87
    PUBLIC          shift and go to state 88
    PRIVATE         shift and go to state 89
    TRY             shift and go to state 90
    LIST            shift and go to state 91
    FOR             shift and go to state 92
    FOREACH         shift and go to state 93
    WHILE           shift and go to state 94
    DO              shift and go to state 95

    all_block_code                 shift and go to state 571
    block_code                     shift and go to state 27
    def_const_or_var               shift and go to state 28
    print_data                     shift and go to state 29
    array_assignation              shift and go to state 30
    array_value_assign             shift and go to state 31
    array_indexing                 shift and go to state 32
    thread_main                    shift and go to state 33
    concurrent_method              shift and go to state 34
    method_definition              shift and go to state 35
    block_try_catch                shift and go to state 36
    lists                          shift and go to state 37
    functions_list                 shift and go to state 38
    statement_lambda               shift and go to state 39
    enums                          shift and go to state 40
    normal_if                      shift and go to state 41
    block_for                      shift and go to state 42
    block_while                    shift and go to state 43
    stack_struct                   shift and go to state 44
    functions_stack                shift and go to state 45
    queue_struct                   shift and go to state 46
    functions_queue                shift and go to state 47
    constant_assignation           shift and go to state 48
    variable_assignation           shift and go to state 49
    declaration_thread             shift and go to state 56
    access_modifiers               shift and go to state 58
    try_catch_simply               shift and go to state 59
    try_catch_finally              shift and go to state 60
    list_empty                     shift and go to state 61
    list_full                      shift and go to state 62
    list_func_clear                shift and go to state 63
    list_func_count                shift and go to state 64
    list_func_add                  shift and go to state 65
    list_func_removeat             shift and go to state 66
    for_simple                     shift and go to state 69
    for_each                       shift and go to state 70
    normal_while                   shift and go to state 71
    do_while                       shift and go to state 72
    stack_push                     shift and go to state 74
    stack_pop                      shift and go to state 75
    stack_clear                    shift and go to state 76
    stack_peek                     shift and go to state 77
    stack_isEmpty                  shift and go to state 78
    queue_enqueue                  shift and go to state 80
    queue_dequeue                  shift and go to state 81
    queue_clear                    shift and go to state 82
    queue_isEmpty                  shift and go to state 83
    queue_peek                     shift and go to state 84
    assignation_type_value_multiple shift and go to state 86

state 545

    (205) do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .

    PRINT           reduce using rule 205 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    CHARTYPE        reduce using rule 205 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    STRINGTYPE      reduce using rule 205 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    FLOATTYPE       reduce using rule 205 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    DECIMALTYPE     reduce using rule 205 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    INTTYPE         reduce using rule 205 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    BOOLTYPE        reduce using rule 205 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    VARIABLE        reduce using rule 205 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    STATIC          reduce using rule 205 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    WRITE           reduce using rule 205 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    LPARENT         reduce using rule 205 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    ENUM            reduce using rule 205 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    IF              reduce using rule 205 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    STACK           reduce using rule 205 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    QUEUE           reduce using rule 205 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    CONST           reduce using rule 205 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    THREAD          reduce using rule 205 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    PUBLIC          reduce using rule 205 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    PRIVATE         reduce using rule 205 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    TRY             reduce using rule 205 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    LIST            reduce using rule 205 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    FOR             reduce using rule 205 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    FOREACH         reduce using rule 205 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    WHILE           reduce using rule 205 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    DO              reduce using rule 205 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    RKEY            reduce using rule 205 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)


state 546

    (179) thread_expression -> thread_identificator DOT concurrent_method . LPARENT RPARENT

    LPARENT         shift and go to state 572


state 547

    (180) thread_expression -> PRINT LPARENT STRING . RPARENT

    RPARENT         shift and go to state 573


state 548

    (160) method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE . DOTANDCOMMA RKEY

    DOTANDCOMMA     shift and go to state 574


state 549

    (164) method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA . RKEY

    RKEY            shift and go to state 575


state 550

    (68) string_content_multiple -> STRING COMMA string_content_multiple .

    RBRACKET        reduce using rule 68 (string_content_multiple -> STRING COMMA string_content_multiple .)


state 551

    (65) char_content_multiple -> CHAR COMMA char_content_multiple .

    RBRACKET        reduce using rule 65 (char_content_multiple -> CHAR COMMA char_content_multiple .)


state 552

    (71) float_content_multiple -> FLOAT_NUMBER COMMA float_content_multiple .

    RBRACKET        reduce using rule 71 (float_content_multiple -> FLOAT_NUMBER COMMA float_content_multiple .)


state 553

    (77) decimal_content_multiple -> DECIMAL_NUMBER COMMA decimal_content_multiple .

    RBRACKET        reduce using rule 77 (decimal_content_multiple -> DECIMAL_NUMBER COMMA decimal_content_multiple .)


state 554

    (74) int_content_multiple -> INTEGER COMMA int_content_multiple .

    RBRACKET        reduce using rule 74 (int_content_multiple -> INTEGER COMMA int_content_multiple .)


state 555

    (81) bool_content_multiple -> BOOLTRUE COMMA bool_content_multiple .

    RBRACKET        reduce using rule 81 (bool_content_multiple -> BOOLTRUE COMMA bool_content_multiple .)


state 556

    (82) bool_content_multiple -> BOOLFALSE COMMA bool_content_multiple .

    RBRACKET        reduce using rule 82 (bool_content_multiple -> BOOLFALSE COMMA bool_content_multiple .)


state 557

    (173) thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 576


state 558

    (158) method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN . VARIABLE DOTANDCOMMA RKEY

    VARIABLE        shift and go to state 577


state 559

    (162) method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE . DOTANDCOMMA RKEY

    DOTANDCOMMA     shift and go to state 578


state 560

    (159) method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .

    PRINT           reduce using rule 159 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    CHARTYPE        reduce using rule 159 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    STRINGTYPE      reduce using rule 159 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    FLOATTYPE       reduce using rule 159 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    DECIMALTYPE     reduce using rule 159 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    INTTYPE         reduce using rule 159 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    BOOLTYPE        reduce using rule 159 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    VARIABLE        reduce using rule 159 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    STATIC          reduce using rule 159 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    WRITE           reduce using rule 159 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    LPARENT         reduce using rule 159 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    ENUM            reduce using rule 159 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    IF              reduce using rule 159 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    STACK           reduce using rule 159 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    QUEUE           reduce using rule 159 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    CONST           reduce using rule 159 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    THREAD          reduce using rule 159 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    PUBLIC          reduce using rule 159 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    PRIVATE         reduce using rule 159 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    TRY             reduce using rule 159 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    LIST            reduce using rule 159 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    FOR             reduce using rule 159 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    FOREACH         reduce using rule 159 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    WHILE           reduce using rule 159 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    DO              reduce using rule 159 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)
    RKEY            reduce using rule 159 (method_definition -> access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY .)


state 561

    (200) other_if -> ELSE LKEY . block_if RKEY
    (196) block_if -> . normal_if
    (197) block_if -> . all_block_code
    (198) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (199) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (25) all_block_code -> . block_code
    (26) all_block_code -> . block_code all_block_code
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . array_assignation
    (8) block_code -> . array_value_assign
    (9) block_code -> . array_indexing
    (10) block_code -> . thread_main
    (11) block_code -> . concurrent_method
    (12) block_code -> . method_definition
    (13) block_code -> . block_try_catch
    (14) block_code -> . lists
    (15) block_code -> . functions_list
    (16) block_code -> . statement_lambda
    (17) block_code -> . enums
    (18) block_code -> . normal_if
    (19) block_code -> . block_for
    (20) block_code -> . block_while
    (21) block_code -> . stack_struct
    (22) block_code -> . functions_stack
    (23) block_code -> . queue_struct
    (24) block_code -> . functions_queue
    (116) def_const_or_var -> . constant_assignation
    (117) def_const_or_var -> . variable_assignation
    (46) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (47) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (57) array_assignation -> . CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA
    (58) array_assignation -> . STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
    (59) array_assignation -> . FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
    (60) array_assignation -> . DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA
    (61) array_assignation -> . INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
    (62) array_assignation -> . BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
    (88) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (89) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (86) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (87) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (169) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (174) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (175) concurrent_method -> . WRITE
    (158) method_definition -> . access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (159) method_definition -> . access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY
    (160) method_definition -> . STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (161) method_definition -> . STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY
    (162) method_definition -> . access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (163) method_definition -> . access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY
    (164) method_definition -> . STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (165) method_definition -> . STATIC VOID METHOD LPARENT RPARENT LKEY RKEY
    (188) block_try_catch -> . try_catch_simply
    (189) block_try_catch -> . try_catch_finally
    (211) lists -> . list_empty
    (212) lists -> . list_full
    (221) functions_list -> . list_func_clear
    (222) functions_list -> . list_func_count
    (223) functions_list -> . list_func_add
    (224) functions_list -> . list_func_removeat
    (184) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (185) enums -> . ENUM METHOD LKEY list_enums RKEY
    (206) block_for -> . for_simple
    (207) block_for -> . for_each
    (202) block_while -> . normal_while
    (203) block_while -> . do_while
    (231) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (232) functions_stack -> . stack_push
    (233) functions_stack -> . stack_pop
    (234) functions_stack -> . stack_clear
    (235) functions_stack -> . stack_peek
    (236) functions_stack -> . stack_isEmpty
    (242) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (243) functions_queue -> . queue_enqueue
    (244) functions_queue -> . queue_dequeue
    (245) functions_queue -> . queue_clear
    (246) functions_queue -> . queue_isEmpty
    (247) functions_queue -> . queue_peek
    (118) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (119) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (120) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (121) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (170) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (171) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (122) access_modifiers -> . PUBLIC
    (123) access_modifiers -> . PRIVATE
    (190) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (191) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (213) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (214) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (215) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (216) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (225) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (226) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (227) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (228) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (229) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (230) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (208) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (209) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (210) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (204) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (205) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (237) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (238) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (239) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (240) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (241) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (248) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (249) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (250) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (252) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (251) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (143) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (144) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (145) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (146) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (147) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    IF              shift and go to state 68
    PRINT           shift and go to state 50
    CHARTYPE        shift and go to state 51
    STRINGTYPE      shift and go to state 24
    FLOATTYPE       shift and go to state 52
    DECIMALTYPE     shift and go to state 53
    INTTYPE         shift and go to state 54
    BOOLTYPE        shift and go to state 55
    VARIABLE        shift and go to state 25
    STATIC          shift and go to state 22
    WRITE           shift and go to state 57
    LPARENT         shift and go to state 23
    ENUM            shift and go to state 67
    STACK           shift and go to state 73
    QUEUE           shift and go to state 79
    CONST           shift and go to state 85
    THREAD          shift and go to state 87
    PUBLIC          shift and go to state 88
    PRIVATE         shift and go to state 89
    TRY             shift and go to state 90
    LIST            shift and go to state 91
    FOR             shift and go to state 92
    FOREACH         shift and go to state 93
    WHILE           shift and go to state 94
    DO              shift and go to state 95

    block_if                       shift and go to state 579
    normal_if                      shift and go to state 435
    all_block_code                 shift and go to state 436
    block_code                     shift and go to state 27
    def_const_or_var               shift and go to state 28
    print_data                     shift and go to state 29
    array_assignation              shift and go to state 30
    array_value_assign             shift and go to state 31
    array_indexing                 shift and go to state 32
    thread_main                    shift and go to state 33
    concurrent_method              shift and go to state 34
    method_definition              shift and go to state 35
    block_try_catch                shift and go to state 36
    lists                          shift and go to state 37
    functions_list                 shift and go to state 38
    statement_lambda               shift and go to state 39
    enums                          shift and go to state 40
    block_for                      shift and go to state 42
    block_while                    shift and go to state 43
    stack_struct                   shift and go to state 44
    functions_stack                shift and go to state 45
    queue_struct                   shift and go to state 46
    functions_queue                shift and go to state 47
    constant_assignation           shift and go to state 48
    variable_assignation           shift and go to state 49
    declaration_thread             shift and go to state 56
    access_modifiers               shift and go to state 58
    try_catch_simply               shift and go to state 59
    try_catch_finally              shift and go to state 60
    list_empty                     shift and go to state 61
    list_full                      shift and go to state 62
    list_func_clear                shift and go to state 63
    list_func_count                shift and go to state 64
    list_func_add                  shift and go to state 65
    list_func_removeat             shift and go to state 66
    for_simple                     shift and go to state 69
    for_each                       shift and go to state 70
    normal_while                   shift and go to state 71
    do_while                       shift and go to state 72
    stack_push                     shift and go to state 74
    stack_pop                      shift and go to state 75
    stack_clear                    shift and go to state 76
    stack_peek                     shift and go to state 77
    stack_isEmpty                  shift and go to state 78
    queue_enqueue                  shift and go to state 80
    queue_dequeue                  shift and go to state 81
    queue_clear                    shift and go to state 82
    queue_isEmpty                  shift and go to state 83
    queue_peek                     shift and go to state 84
    assignation_type_value_multiple shift and go to state 86

state 562

    (201) other_if -> ELSE_IF LPARENT . boolean_operation RPARENT LKEY block_if RKEY other_if
    (111) boolean_operation -> . value_boolean
    (112) boolean_operation -> . LOGICNOT value_boolean
    (113) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (38) value_boolean -> . BOOLTRUE
    (39) value_boolean -> . BOOLFALSE
    (40) value_boolean -> . VARIABLE
    (41) value_boolean -> . comparison_operation
    (103) comparison_operation -> . value_numeric
    (104) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (42) value_numeric -> . INTEGER
    (43) value_numeric -> . FLOAT_NUMBER
    (44) value_numeric -> . DECIMAL_NUMBER
    (45) value_numeric -> . VARIABLE

    LOGICNOT        shift and go to state 203
    BOOLTRUE        shift and go to state 204
    BOOLFALSE       shift and go to state 205
    VARIABLE        shift and go to state 206
    INTEGER         shift and go to state 209
    FLOAT_NUMBER    shift and go to state 210
    DECIMAL_NUMBER  shift and go to state 211

    boolean_operation              shift and go to state 580
    value_boolean                  shift and go to state 202
    comparison_operation           shift and go to state 207
    value_numeric                  shift and go to state 208

state 563

    (242) queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN . GREATER_THAN LPARENT RPARENT DOTANDCOMMA

    GREATER_THAN    shift and go to state 581


state 564

    (170) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA .

    THREAD          reduce using rule 170 (declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 170 (declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA .)


state 565

    (171) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA .

    THREAD          reduce using rule 171 (declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 171 (declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA .)


state 566

    (190) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT . LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (191) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT . LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    LKEY            shift and go to state 582


state 567

    (213) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN . STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (215) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN . STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    STRINGTYPE      shift and go to state 583


state 568

    (214) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN . INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (216) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN . INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    INTTYPE         shift and go to state 584


state 569

    (208) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT . RPARENT LKEY all_block_code RKEY

    RPARENT         shift and go to state 585


state 570

    (209) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT . RPARENT LKEY all_block_code RKEY

    RPARENT         shift and go to state 586


state 571

    (210) for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code . RKEY

    RKEY            shift and go to state 587


state 572

    (179) thread_expression -> thread_identificator DOT concurrent_method LPARENT . RPARENT

    RPARENT         shift and go to state 588


state 573

    (180) thread_expression -> PRINT LPARENT STRING RPARENT .

    DOTANDCOMMA     reduce using rule 180 (thread_expression -> PRINT LPARENT STRING RPARENT .)


state 574

    (160) method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA . RKEY

    RKEY            shift and go to state 589


state 575

    (164) method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .

    PRINT           reduce using rule 164 (method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    CHARTYPE        reduce using rule 164 (method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    STRINGTYPE      reduce using rule 164 (method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    FLOATTYPE       reduce using rule 164 (method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    DECIMALTYPE     reduce using rule 164 (method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    INTTYPE         reduce using rule 164 (method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    BOOLTYPE        reduce using rule 164 (method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    VARIABLE        reduce using rule 164 (method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    STATIC          reduce using rule 164 (method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    WRITE           reduce using rule 164 (method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    LPARENT         reduce using rule 164 (method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    ENUM            reduce using rule 164 (method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    IF              reduce using rule 164 (method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    STACK           reduce using rule 164 (method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    QUEUE           reduce using rule 164 (method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    CONST           reduce using rule 164 (method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    THREAD          reduce using rule 164 (method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    PUBLIC          reduce using rule 164 (method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    PRIVATE         reduce using rule 164 (method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    TRY             reduce using rule 164 (method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    LIST            reduce using rule 164 (method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    FOR             reduce using rule 164 (method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    FOREACH         reduce using rule 164 (method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    WHILE           reduce using rule 164 (method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    DO              reduce using rule 164 (method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    RKEY            reduce using rule 164 (method_definition -> STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)


state 576

    (173) thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .

    VARIABLE        reduce using rule 173 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    PRINT           reduce using rule 173 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 173 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 173 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 173 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 173 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 173 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 173 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 173 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 173 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 173 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 173 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 173 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 173 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 173 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 173 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 173 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 173 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 173 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 173 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 173 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 173 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 173 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 173 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 173 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 173 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)


state 577

    (158) method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE . DOTANDCOMMA RKEY

    DOTANDCOMMA     shift and go to state 590


state 578

    (162) method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA . RKEY

    RKEY            shift and go to state 591


state 579

    (200) other_if -> ELSE LKEY block_if . RKEY

    RKEY            shift and go to state 592


state 580

    (201) other_if -> ELSE_IF LPARENT boolean_operation . RPARENT LKEY block_if RKEY other_if

    RPARENT         shift and go to state 593


state 581

    (242) queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 594


state 582

    (190) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY . PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (191) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY . PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    PRINT           shift and go to state 595


state 583

    (213) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE . GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (215) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE . GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    GREATER_THAN    shift and go to state 596


state 584

    (214) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE . GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (216) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE . GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    GREATER_THAN    shift and go to state 597


state 585

    (208) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT . LKEY all_block_code RKEY

    LKEY            shift and go to state 598


state 586

    (209) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT . LKEY all_block_code RKEY

    LKEY            shift and go to state 599


state 587

    (210) for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .

    PRINT           reduce using rule 210 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    CHARTYPE        reduce using rule 210 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    STRINGTYPE      reduce using rule 210 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    FLOATTYPE       reduce using rule 210 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    DECIMALTYPE     reduce using rule 210 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    INTTYPE         reduce using rule 210 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    BOOLTYPE        reduce using rule 210 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    VARIABLE        reduce using rule 210 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    STATIC          reduce using rule 210 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    WRITE           reduce using rule 210 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    LPARENT         reduce using rule 210 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    ENUM            reduce using rule 210 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    IF              reduce using rule 210 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    STACK           reduce using rule 210 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    QUEUE           reduce using rule 210 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    CONST           reduce using rule 210 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    THREAD          reduce using rule 210 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    PUBLIC          reduce using rule 210 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    PRIVATE         reduce using rule 210 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    TRY             reduce using rule 210 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    LIST            reduce using rule 210 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    FOR             reduce using rule 210 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    FOREACH         reduce using rule 210 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    WHILE           reduce using rule 210 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    DO              reduce using rule 210 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    RKEY            reduce using rule 210 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)


state 588

    (179) thread_expression -> thread_identificator DOT concurrent_method LPARENT RPARENT .

    DOTANDCOMMA     reduce using rule 179 (thread_expression -> thread_identificator DOT concurrent_method LPARENT RPARENT .)


state 589

    (160) method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .

    PRINT           reduce using rule 160 (method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    CHARTYPE        reduce using rule 160 (method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    STRINGTYPE      reduce using rule 160 (method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    FLOATTYPE       reduce using rule 160 (method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    DECIMALTYPE     reduce using rule 160 (method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    INTTYPE         reduce using rule 160 (method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    BOOLTYPE        reduce using rule 160 (method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    VARIABLE        reduce using rule 160 (method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    STATIC          reduce using rule 160 (method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    WRITE           reduce using rule 160 (method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    LPARENT         reduce using rule 160 (method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    ENUM            reduce using rule 160 (method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    IF              reduce using rule 160 (method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    STACK           reduce using rule 160 (method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    QUEUE           reduce using rule 160 (method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    CONST           reduce using rule 160 (method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    THREAD          reduce using rule 160 (method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    PUBLIC          reduce using rule 160 (method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    PRIVATE         reduce using rule 160 (method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    TRY             reduce using rule 160 (method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    LIST            reduce using rule 160 (method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    FOR             reduce using rule 160 (method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    FOREACH         reduce using rule 160 (method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    WHILE           reduce using rule 160 (method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    DO              reduce using rule 160 (method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    RKEY            reduce using rule 160 (method_definition -> STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)


state 590

    (158) method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA . RKEY

    RKEY            shift and go to state 600


state 591

    (162) method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .

    PRINT           reduce using rule 162 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    CHARTYPE        reduce using rule 162 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    STRINGTYPE      reduce using rule 162 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    FLOATTYPE       reduce using rule 162 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    DECIMALTYPE     reduce using rule 162 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    INTTYPE         reduce using rule 162 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    BOOLTYPE        reduce using rule 162 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    VARIABLE        reduce using rule 162 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    STATIC          reduce using rule 162 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    WRITE           reduce using rule 162 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    LPARENT         reduce using rule 162 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    ENUM            reduce using rule 162 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    IF              reduce using rule 162 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    STACK           reduce using rule 162 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    QUEUE           reduce using rule 162 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    CONST           reduce using rule 162 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    THREAD          reduce using rule 162 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    PUBLIC          reduce using rule 162 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    PRIVATE         reduce using rule 162 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    TRY             reduce using rule 162 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    LIST            reduce using rule 162 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    FOR             reduce using rule 162 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    FOREACH         reduce using rule 162 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    WHILE           reduce using rule 162 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    DO              reduce using rule 162 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    RKEY            reduce using rule 162 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)


state 592

    (200) other_if -> ELSE LKEY block_if RKEY .

    PRINT           reduce using rule 200 (other_if -> ELSE LKEY block_if RKEY .)
    CHARTYPE        reduce using rule 200 (other_if -> ELSE LKEY block_if RKEY .)
    STRINGTYPE      reduce using rule 200 (other_if -> ELSE LKEY block_if RKEY .)
    FLOATTYPE       reduce using rule 200 (other_if -> ELSE LKEY block_if RKEY .)
    DECIMALTYPE     reduce using rule 200 (other_if -> ELSE LKEY block_if RKEY .)
    INTTYPE         reduce using rule 200 (other_if -> ELSE LKEY block_if RKEY .)
    BOOLTYPE        reduce using rule 200 (other_if -> ELSE LKEY block_if RKEY .)
    VARIABLE        reduce using rule 200 (other_if -> ELSE LKEY block_if RKEY .)
    STATIC          reduce using rule 200 (other_if -> ELSE LKEY block_if RKEY .)
    WRITE           reduce using rule 200 (other_if -> ELSE LKEY block_if RKEY .)
    LPARENT         reduce using rule 200 (other_if -> ELSE LKEY block_if RKEY .)
    ENUM            reduce using rule 200 (other_if -> ELSE LKEY block_if RKEY .)
    IF              reduce using rule 200 (other_if -> ELSE LKEY block_if RKEY .)
    STACK           reduce using rule 200 (other_if -> ELSE LKEY block_if RKEY .)
    QUEUE           reduce using rule 200 (other_if -> ELSE LKEY block_if RKEY .)
    CONST           reduce using rule 200 (other_if -> ELSE LKEY block_if RKEY .)
    THREAD          reduce using rule 200 (other_if -> ELSE LKEY block_if RKEY .)
    PUBLIC          reduce using rule 200 (other_if -> ELSE LKEY block_if RKEY .)
    PRIVATE         reduce using rule 200 (other_if -> ELSE LKEY block_if RKEY .)
    TRY             reduce using rule 200 (other_if -> ELSE LKEY block_if RKEY .)
    LIST            reduce using rule 200 (other_if -> ELSE LKEY block_if RKEY .)
    FOR             reduce using rule 200 (other_if -> ELSE LKEY block_if RKEY .)
    FOREACH         reduce using rule 200 (other_if -> ELSE LKEY block_if RKEY .)
    WHILE           reduce using rule 200 (other_if -> ELSE LKEY block_if RKEY .)
    DO              reduce using rule 200 (other_if -> ELSE LKEY block_if RKEY .)
    RKEY            reduce using rule 200 (other_if -> ELSE LKEY block_if RKEY .)


state 593

    (201) other_if -> ELSE_IF LPARENT boolean_operation RPARENT . LKEY block_if RKEY other_if

    LKEY            shift and go to state 601


state 594

    (242) queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 602


state 595

    (190) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT . LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (191) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT . LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    LPARENT         shift and go to state 603


state 596

    (213) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN . LPARENT RPARENT DOTANDCOMMA
    (215) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN . LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    LPARENT         shift and go to state 604


state 597

    (214) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN . LPARENT RPARENT DOTANDCOMMA
    (216) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN . LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    LPARENT         shift and go to state 605


state 598

    (208) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY . all_block_code RKEY
    (25) all_block_code -> . block_code
    (26) all_block_code -> . block_code all_block_code
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . array_assignation
    (8) block_code -> . array_value_assign
    (9) block_code -> . array_indexing
    (10) block_code -> . thread_main
    (11) block_code -> . concurrent_method
    (12) block_code -> . method_definition
    (13) block_code -> . block_try_catch
    (14) block_code -> . lists
    (15) block_code -> . functions_list
    (16) block_code -> . statement_lambda
    (17) block_code -> . enums
    (18) block_code -> . normal_if
    (19) block_code -> . block_for
    (20) block_code -> . block_while
    (21) block_code -> . stack_struct
    (22) block_code -> . functions_stack
    (23) block_code -> . queue_struct
    (24) block_code -> . functions_queue
    (116) def_const_or_var -> . constant_assignation
    (117) def_const_or_var -> . variable_assignation
    (46) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (47) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (57) array_assignation -> . CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA
    (58) array_assignation -> . STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
    (59) array_assignation -> . FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
    (60) array_assignation -> . DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA
    (61) array_assignation -> . INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
    (62) array_assignation -> . BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
    (88) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (89) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (86) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (87) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (169) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (174) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (175) concurrent_method -> . WRITE
    (158) method_definition -> . access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (159) method_definition -> . access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY
    (160) method_definition -> . STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (161) method_definition -> . STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY
    (162) method_definition -> . access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (163) method_definition -> . access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY
    (164) method_definition -> . STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (165) method_definition -> . STATIC VOID METHOD LPARENT RPARENT LKEY RKEY
    (188) block_try_catch -> . try_catch_simply
    (189) block_try_catch -> . try_catch_finally
    (211) lists -> . list_empty
    (212) lists -> . list_full
    (221) functions_list -> . list_func_clear
    (222) functions_list -> . list_func_count
    (223) functions_list -> . list_func_add
    (224) functions_list -> . list_func_removeat
    (184) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (185) enums -> . ENUM METHOD LKEY list_enums RKEY
    (198) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (199) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (206) block_for -> . for_simple
    (207) block_for -> . for_each
    (202) block_while -> . normal_while
    (203) block_while -> . do_while
    (231) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (232) functions_stack -> . stack_push
    (233) functions_stack -> . stack_pop
    (234) functions_stack -> . stack_clear
    (235) functions_stack -> . stack_peek
    (236) functions_stack -> . stack_isEmpty
    (242) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (243) functions_queue -> . queue_enqueue
    (244) functions_queue -> . queue_dequeue
    (245) functions_queue -> . queue_clear
    (246) functions_queue -> . queue_isEmpty
    (247) functions_queue -> . queue_peek
    (118) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (119) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (120) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (121) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (170) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (171) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (122) access_modifiers -> . PUBLIC
    (123) access_modifiers -> . PRIVATE
    (190) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (191) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (213) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (214) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (215) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (216) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (225) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (226) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (227) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (228) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (229) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (230) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (208) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (209) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (210) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (204) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (205) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (237) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (238) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (239) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (240) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (241) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (248) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (249) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (250) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (252) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (251) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (143) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (144) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (145) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (146) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (147) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 50
    CHARTYPE        shift and go to state 51
    STRINGTYPE      shift and go to state 24
    FLOATTYPE       shift and go to state 52
    DECIMALTYPE     shift and go to state 53
    INTTYPE         shift and go to state 54
    BOOLTYPE        shift and go to state 55
    VARIABLE        shift and go to state 25
    STATIC          shift and go to state 22
    WRITE           shift and go to state 57
    LPARENT         shift and go to state 23
    ENUM            shift and go to state 67
    IF              shift and go to state 68
    STACK           shift and go to state 73
    QUEUE           shift and go to state 79
    CONST           shift and go to state 85
    THREAD          shift and go to state 87
    PUBLIC          shift and go to state 88
    PRIVATE         shift and go to state 89
    TRY             shift and go to state 90
    LIST            shift and go to state 91
    FOR             shift and go to state 92
    FOREACH         shift and go to state 93
    WHILE           shift and go to state 94
    DO              shift and go to state 95

    all_block_code                 shift and go to state 606
    block_code                     shift and go to state 27
    def_const_or_var               shift and go to state 28
    print_data                     shift and go to state 29
    array_assignation              shift and go to state 30
    array_value_assign             shift and go to state 31
    array_indexing                 shift and go to state 32
    thread_main                    shift and go to state 33
    concurrent_method              shift and go to state 34
    method_definition              shift and go to state 35
    block_try_catch                shift and go to state 36
    lists                          shift and go to state 37
    functions_list                 shift and go to state 38
    statement_lambda               shift and go to state 39
    enums                          shift and go to state 40
    normal_if                      shift and go to state 41
    block_for                      shift and go to state 42
    block_while                    shift and go to state 43
    stack_struct                   shift and go to state 44
    functions_stack                shift and go to state 45
    queue_struct                   shift and go to state 46
    functions_queue                shift and go to state 47
    constant_assignation           shift and go to state 48
    variable_assignation           shift and go to state 49
    declaration_thread             shift and go to state 56
    access_modifiers               shift and go to state 58
    try_catch_simply               shift and go to state 59
    try_catch_finally              shift and go to state 60
    list_empty                     shift and go to state 61
    list_full                      shift and go to state 62
    list_func_clear                shift and go to state 63
    list_func_count                shift and go to state 64
    list_func_add                  shift and go to state 65
    list_func_removeat             shift and go to state 66
    for_simple                     shift and go to state 69
    for_each                       shift and go to state 70
    normal_while                   shift and go to state 71
    do_while                       shift and go to state 72
    stack_push                     shift and go to state 74
    stack_pop                      shift and go to state 75
    stack_clear                    shift and go to state 76
    stack_peek                     shift and go to state 77
    stack_isEmpty                  shift and go to state 78
    queue_enqueue                  shift and go to state 80
    queue_dequeue                  shift and go to state 81
    queue_clear                    shift and go to state 82
    queue_isEmpty                  shift and go to state 83
    queue_peek                     shift and go to state 84
    assignation_type_value_multiple shift and go to state 86

state 599

    (209) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY . all_block_code RKEY
    (25) all_block_code -> . block_code
    (26) all_block_code -> . block_code all_block_code
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . array_assignation
    (8) block_code -> . array_value_assign
    (9) block_code -> . array_indexing
    (10) block_code -> . thread_main
    (11) block_code -> . concurrent_method
    (12) block_code -> . method_definition
    (13) block_code -> . block_try_catch
    (14) block_code -> . lists
    (15) block_code -> . functions_list
    (16) block_code -> . statement_lambda
    (17) block_code -> . enums
    (18) block_code -> . normal_if
    (19) block_code -> . block_for
    (20) block_code -> . block_while
    (21) block_code -> . stack_struct
    (22) block_code -> . functions_stack
    (23) block_code -> . queue_struct
    (24) block_code -> . functions_queue
    (116) def_const_or_var -> . constant_assignation
    (117) def_const_or_var -> . variable_assignation
    (46) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (47) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (57) array_assignation -> . CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA
    (58) array_assignation -> . STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
    (59) array_assignation -> . FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
    (60) array_assignation -> . DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA
    (61) array_assignation -> . INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
    (62) array_assignation -> . BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
    (88) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (89) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (86) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (87) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (169) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (174) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (175) concurrent_method -> . WRITE
    (158) method_definition -> . access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (159) method_definition -> . access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY
    (160) method_definition -> . STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (161) method_definition -> . STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY
    (162) method_definition -> . access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (163) method_definition -> . access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY
    (164) method_definition -> . STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (165) method_definition -> . STATIC VOID METHOD LPARENT RPARENT LKEY RKEY
    (188) block_try_catch -> . try_catch_simply
    (189) block_try_catch -> . try_catch_finally
    (211) lists -> . list_empty
    (212) lists -> . list_full
    (221) functions_list -> . list_func_clear
    (222) functions_list -> . list_func_count
    (223) functions_list -> . list_func_add
    (224) functions_list -> . list_func_removeat
    (184) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (185) enums -> . ENUM METHOD LKEY list_enums RKEY
    (198) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (199) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (206) block_for -> . for_simple
    (207) block_for -> . for_each
    (202) block_while -> . normal_while
    (203) block_while -> . do_while
    (231) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (232) functions_stack -> . stack_push
    (233) functions_stack -> . stack_pop
    (234) functions_stack -> . stack_clear
    (235) functions_stack -> . stack_peek
    (236) functions_stack -> . stack_isEmpty
    (242) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (243) functions_queue -> . queue_enqueue
    (244) functions_queue -> . queue_dequeue
    (245) functions_queue -> . queue_clear
    (246) functions_queue -> . queue_isEmpty
    (247) functions_queue -> . queue_peek
    (118) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (119) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (120) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (121) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (170) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (171) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (122) access_modifiers -> . PUBLIC
    (123) access_modifiers -> . PRIVATE
    (190) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (191) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (213) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (214) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (215) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (216) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (225) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (226) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (227) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (228) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (229) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (230) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (208) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (209) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (210) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (204) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (205) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (237) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (238) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (239) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (240) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (241) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (248) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (249) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (250) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (252) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (251) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (143) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (144) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (145) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (146) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (147) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 50
    CHARTYPE        shift and go to state 51
    STRINGTYPE      shift and go to state 24
    FLOATTYPE       shift and go to state 52
    DECIMALTYPE     shift and go to state 53
    INTTYPE         shift and go to state 54
    BOOLTYPE        shift and go to state 55
    VARIABLE        shift and go to state 25
    STATIC          shift and go to state 22
    WRITE           shift and go to state 57
    LPARENT         shift and go to state 23
    ENUM            shift and go to state 67
    IF              shift and go to state 68
    STACK           shift and go to state 73
    QUEUE           shift and go to state 79
    CONST           shift and go to state 85
    THREAD          shift and go to state 87
    PUBLIC          shift and go to state 88
    PRIVATE         shift and go to state 89
    TRY             shift and go to state 90
    LIST            shift and go to state 91
    FOR             shift and go to state 92
    FOREACH         shift and go to state 93
    WHILE           shift and go to state 94
    DO              shift and go to state 95

    all_block_code                 shift and go to state 607
    block_code                     shift and go to state 27
    def_const_or_var               shift and go to state 28
    print_data                     shift and go to state 29
    array_assignation              shift and go to state 30
    array_value_assign             shift and go to state 31
    array_indexing                 shift and go to state 32
    thread_main                    shift and go to state 33
    concurrent_method              shift and go to state 34
    method_definition              shift and go to state 35
    block_try_catch                shift and go to state 36
    lists                          shift and go to state 37
    functions_list                 shift and go to state 38
    statement_lambda               shift and go to state 39
    enums                          shift and go to state 40
    normal_if                      shift and go to state 41
    block_for                      shift and go to state 42
    block_while                    shift and go to state 43
    stack_struct                   shift and go to state 44
    functions_stack                shift and go to state 45
    queue_struct                   shift and go to state 46
    functions_queue                shift and go to state 47
    constant_assignation           shift and go to state 48
    variable_assignation           shift and go to state 49
    declaration_thread             shift and go to state 56
    access_modifiers               shift and go to state 58
    try_catch_simply               shift and go to state 59
    try_catch_finally              shift and go to state 60
    list_empty                     shift and go to state 61
    list_full                      shift and go to state 62
    list_func_clear                shift and go to state 63
    list_func_count                shift and go to state 64
    list_func_add                  shift and go to state 65
    list_func_removeat             shift and go to state 66
    for_simple                     shift and go to state 69
    for_each                       shift and go to state 70
    normal_while                   shift and go to state 71
    do_while                       shift and go to state 72
    stack_push                     shift and go to state 74
    stack_pop                      shift and go to state 75
    stack_clear                    shift and go to state 76
    stack_peek                     shift and go to state 77
    stack_isEmpty                  shift and go to state 78
    queue_enqueue                  shift and go to state 80
    queue_dequeue                  shift and go to state 81
    queue_clear                    shift and go to state 82
    queue_isEmpty                  shift and go to state 83
    queue_peek                     shift and go to state 84
    assignation_type_value_multiple shift and go to state 86

state 600

    (158) method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .

    PRINT           reduce using rule 158 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    CHARTYPE        reduce using rule 158 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    STRINGTYPE      reduce using rule 158 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    FLOATTYPE       reduce using rule 158 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    DECIMALTYPE     reduce using rule 158 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    INTTYPE         reduce using rule 158 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    BOOLTYPE        reduce using rule 158 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    VARIABLE        reduce using rule 158 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    STATIC          reduce using rule 158 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    WRITE           reduce using rule 158 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    LPARENT         reduce using rule 158 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    ENUM            reduce using rule 158 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    IF              reduce using rule 158 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    STACK           reduce using rule 158 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    QUEUE           reduce using rule 158 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    CONST           reduce using rule 158 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    THREAD          reduce using rule 158 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    PUBLIC          reduce using rule 158 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    PRIVATE         reduce using rule 158 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    TRY             reduce using rule 158 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    LIST            reduce using rule 158 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    FOR             reduce using rule 158 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    FOREACH         reduce using rule 158 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    WHILE           reduce using rule 158 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    DO              reduce using rule 158 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)
    RKEY            reduce using rule 158 (method_definition -> access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY .)


state 601

    (201) other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY . block_if RKEY other_if
    (196) block_if -> . normal_if
    (197) block_if -> . all_block_code
    (198) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (199) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (25) all_block_code -> . block_code
    (26) all_block_code -> . block_code all_block_code
    (5) block_code -> . def_const_or_var
    (6) block_code -> . print_data
    (7) block_code -> . array_assignation
    (8) block_code -> . array_value_assign
    (9) block_code -> . array_indexing
    (10) block_code -> . thread_main
    (11) block_code -> . concurrent_method
    (12) block_code -> . method_definition
    (13) block_code -> . block_try_catch
    (14) block_code -> . lists
    (15) block_code -> . functions_list
    (16) block_code -> . statement_lambda
    (17) block_code -> . enums
    (18) block_code -> . normal_if
    (19) block_code -> . block_for
    (20) block_code -> . block_while
    (21) block_code -> . stack_struct
    (22) block_code -> . functions_stack
    (23) block_code -> . queue_struct
    (24) block_code -> . functions_queue
    (116) def_const_or_var -> . constant_assignation
    (117) def_const_or_var -> . variable_assignation
    (46) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (47) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (57) array_assignation -> . CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA
    (58) array_assignation -> . STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
    (59) array_assignation -> . FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
    (60) array_assignation -> . DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA
    (61) array_assignation -> . INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
    (62) array_assignation -> . BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
    (88) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (89) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (86) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (87) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (169) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (174) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (175) concurrent_method -> . WRITE
    (158) method_definition -> . access_modifiers STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (159) method_definition -> . access_modifiers STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY
    (160) method_definition -> . STATIC data_type METHOD LPARENT func_parameters RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (161) method_definition -> . STATIC VOID METHOD LPARENT func_parameters RPARENT LKEY RKEY
    (162) method_definition -> . access_modifiers STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (163) method_definition -> . access_modifiers STATIC VOID METHOD LPARENT RPARENT LKEY RKEY
    (164) method_definition -> . STATIC data_type METHOD LPARENT RPARENT LKEY RETURN VARIABLE DOTANDCOMMA RKEY
    (165) method_definition -> . STATIC VOID METHOD LPARENT RPARENT LKEY RKEY
    (188) block_try_catch -> . try_catch_simply
    (189) block_try_catch -> . try_catch_finally
    (211) lists -> . list_empty
    (212) lists -> . list_full
    (221) functions_list -> . list_func_clear
    (222) functions_list -> . list_func_count
    (223) functions_list -> . list_func_add
    (224) functions_list -> . list_func_removeat
    (184) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (185) enums -> . ENUM METHOD LKEY list_enums RKEY
    (206) block_for -> . for_simple
    (207) block_for -> . for_each
    (202) block_while -> . normal_while
    (203) block_while -> . do_while
    (231) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (232) functions_stack -> . stack_push
    (233) functions_stack -> . stack_pop
    (234) functions_stack -> . stack_clear
    (235) functions_stack -> . stack_peek
    (236) functions_stack -> . stack_isEmpty
    (242) queue_struct -> . QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (243) functions_queue -> . queue_enqueue
    (244) functions_queue -> . queue_dequeue
    (245) functions_queue -> . queue_clear
    (246) functions_queue -> . queue_isEmpty
    (247) functions_queue -> . queue_peek
    (118) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (119) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (120) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (121) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (170) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (171) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (122) access_modifiers -> . PUBLIC
    (123) access_modifiers -> . PRIVATE
    (190) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (191) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (213) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (214) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (215) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (216) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (225) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (226) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (227) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (228) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (229) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (230) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (208) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (209) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (210) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (204) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (205) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (237) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (238) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (239) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (240) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (241) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (248) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (249) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (250) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (252) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (251) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (143) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (144) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (145) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (146) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (147) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    IF              shift and go to state 68
    PRINT           shift and go to state 50
    CHARTYPE        shift and go to state 51
    STRINGTYPE      shift and go to state 24
    FLOATTYPE       shift and go to state 52
    DECIMALTYPE     shift and go to state 53
    INTTYPE         shift and go to state 54
    BOOLTYPE        shift and go to state 55
    VARIABLE        shift and go to state 25
    STATIC          shift and go to state 22
    WRITE           shift and go to state 57
    LPARENT         shift and go to state 23
    ENUM            shift and go to state 67
    STACK           shift and go to state 73
    QUEUE           shift and go to state 79
    CONST           shift and go to state 85
    THREAD          shift and go to state 87
    PUBLIC          shift and go to state 88
    PRIVATE         shift and go to state 89
    TRY             shift and go to state 90
    LIST            shift and go to state 91
    FOR             shift and go to state 92
    FOREACH         shift and go to state 93
    WHILE           shift and go to state 94
    DO              shift and go to state 95

    block_if                       shift and go to state 608
    normal_if                      shift and go to state 435
    all_block_code                 shift and go to state 436
    block_code                     shift and go to state 27
    def_const_or_var               shift and go to state 28
    print_data                     shift and go to state 29
    array_assignation              shift and go to state 30
    array_value_assign             shift and go to state 31
    array_indexing                 shift and go to state 32
    thread_main                    shift and go to state 33
    concurrent_method              shift and go to state 34
    method_definition              shift and go to state 35
    block_try_catch                shift and go to state 36
    lists                          shift and go to state 37
    functions_list                 shift and go to state 38
    statement_lambda               shift and go to state 39
    enums                          shift and go to state 40
    block_for                      shift and go to state 42
    block_while                    shift and go to state 43
    stack_struct                   shift and go to state 44
    functions_stack                shift and go to state 45
    queue_struct                   shift and go to state 46
    functions_queue                shift and go to state 47
    constant_assignation           shift and go to state 48
    variable_assignation           shift and go to state 49
    declaration_thread             shift and go to state 56
    access_modifiers               shift and go to state 58
    try_catch_simply               shift and go to state 59
    try_catch_finally              shift and go to state 60
    list_empty                     shift and go to state 61
    list_full                      shift and go to state 62
    list_func_clear                shift and go to state 63
    list_func_count                shift and go to state 64
    list_func_add                  shift and go to state 65
    list_func_removeat             shift and go to state 66
    for_simple                     shift and go to state 69
    for_each                       shift and go to state 70
    normal_while                   shift and go to state 71
    do_while                       shift and go to state 72
    stack_push                     shift and go to state 74
    stack_pop                      shift and go to state 75
    stack_clear                    shift and go to state 76
    stack_peek                     shift and go to state 77
    stack_isEmpty                  shift and go to state 78
    queue_enqueue                  shift and go to state 80
    queue_dequeue                  shift and go to state 81
    queue_clear                    shift and go to state 82
    queue_isEmpty                  shift and go to state 83
    queue_peek                     shift and go to state 84
    assignation_type_value_multiple shift and go to state 86

state 602

    (242) queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 609


state 603

    (190) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT . ERROR RPARENT DOTANDCOMMA RKEY
    (191) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT . ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    ERROR           shift and go to state 610


state 604

    (213) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT . RPARENT DOTANDCOMMA
    (215) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT . RPARENT LKEY strings_list RKEY DOTANDCOMMA

    RPARENT         shift and go to state 611


state 605

    (214) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT . RPARENT DOTANDCOMMA
    (216) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT . RPARENT LKEY ints_list RKEY DOTANDCOMMA

    RPARENT         shift and go to state 612


state 606

    (208) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code . RKEY

    RKEY            shift and go to state 613


state 607

    (209) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code . RKEY

    RKEY            shift and go to state 614


state 608

    (201) other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if . RKEY other_if

    RKEY            shift and go to state 615


state 609

    (242) queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 242 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 242 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 242 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 242 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 242 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 242 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 242 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 242 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 242 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 242 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 242 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 242 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 242 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 242 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 242 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 242 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 242 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 242 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 242 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 242 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 242 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 242 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 242 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 242 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 242 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 242 (queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)


state 610

    (190) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR . RPARENT DOTANDCOMMA RKEY
    (191) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR . RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    RPARENT         shift and go to state 616


state 611

    (213) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT . DOTANDCOMMA
    (215) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT . LKEY strings_list RKEY DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 617
    LKEY            shift and go to state 618


state 612

    (214) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT . DOTANDCOMMA
    (216) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT . LKEY ints_list RKEY DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 619
    LKEY            shift and go to state 620


state 613

    (208) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .

    PRINT           reduce using rule 208 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    CHARTYPE        reduce using rule 208 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    STRINGTYPE      reduce using rule 208 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    FLOATTYPE       reduce using rule 208 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    DECIMALTYPE     reduce using rule 208 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    INTTYPE         reduce using rule 208 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    BOOLTYPE        reduce using rule 208 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    VARIABLE        reduce using rule 208 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    STATIC          reduce using rule 208 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    WRITE           reduce using rule 208 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    LPARENT         reduce using rule 208 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    ENUM            reduce using rule 208 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    IF              reduce using rule 208 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    STACK           reduce using rule 208 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    QUEUE           reduce using rule 208 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    CONST           reduce using rule 208 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    THREAD          reduce using rule 208 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    PUBLIC          reduce using rule 208 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    PRIVATE         reduce using rule 208 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    TRY             reduce using rule 208 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    LIST            reduce using rule 208 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    FOR             reduce using rule 208 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    FOREACH         reduce using rule 208 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    WHILE           reduce using rule 208 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    DO              reduce using rule 208 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    RKEY            reduce using rule 208 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)


state 614

    (209) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .

    PRINT           reduce using rule 209 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    CHARTYPE        reduce using rule 209 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    STRINGTYPE      reduce using rule 209 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    FLOATTYPE       reduce using rule 209 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    DECIMALTYPE     reduce using rule 209 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    INTTYPE         reduce using rule 209 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    BOOLTYPE        reduce using rule 209 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    VARIABLE        reduce using rule 209 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    STATIC          reduce using rule 209 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    WRITE           reduce using rule 209 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    LPARENT         reduce using rule 209 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    ENUM            reduce using rule 209 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    IF              reduce using rule 209 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    STACK           reduce using rule 209 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    QUEUE           reduce using rule 209 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    CONST           reduce using rule 209 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    THREAD          reduce using rule 209 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    PUBLIC          reduce using rule 209 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    PRIVATE         reduce using rule 209 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    TRY             reduce using rule 209 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    LIST            reduce using rule 209 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    FOR             reduce using rule 209 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    FOREACH         reduce using rule 209 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    WHILE           reduce using rule 209 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    DO              reduce using rule 209 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    RKEY            reduce using rule 209 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)


state 615

    (201) other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY . other_if
    (200) other_if -> . ELSE LKEY block_if RKEY
    (201) other_if -> . ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if

    ELSE            shift and go to state 533
    ELSE_IF         shift and go to state 534

    other_if                       shift and go to state 621

state 616

    (190) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT . DOTANDCOMMA RKEY
    (191) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT . DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    DOTANDCOMMA     shift and go to state 622


state 617

    (213) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 213 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 213 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 213 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 213 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 213 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 213 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 213 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 213 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 213 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 213 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 213 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 213 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 213 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 213 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 213 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 213 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 213 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 213 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 213 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 213 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 213 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 213 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 213 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 213 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 213 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 213 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)


state 618

    (215) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY . strings_list RKEY DOTANDCOMMA
    (217) strings_list -> . STRING
    (218) strings_list -> . STRING COMMA strings_list

    STRING          shift and go to state 624

    strings_list                   shift and go to state 623

state 619

    (214) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 214 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 214 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 214 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 214 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 214 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 214 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 214 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 214 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 214 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 214 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 214 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 214 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 214 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 214 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 214 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 214 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 214 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 214 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 214 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 214 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 214 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 214 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 214 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 214 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 214 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 214 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)


state 620

    (216) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY . ints_list RKEY DOTANDCOMMA
    (219) ints_list -> . INTEGER
    (220) ints_list -> . INTEGER COMMA ints_list

    INTEGER         shift and go to state 626

    ints_list                      shift and go to state 625

state 621

    (201) other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .

    PRINT           reduce using rule 201 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    CHARTYPE        reduce using rule 201 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    STRINGTYPE      reduce using rule 201 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    FLOATTYPE       reduce using rule 201 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    DECIMALTYPE     reduce using rule 201 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    INTTYPE         reduce using rule 201 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    BOOLTYPE        reduce using rule 201 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    VARIABLE        reduce using rule 201 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    STATIC          reduce using rule 201 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    WRITE           reduce using rule 201 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    LPARENT         reduce using rule 201 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    ENUM            reduce using rule 201 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    IF              reduce using rule 201 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    STACK           reduce using rule 201 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    QUEUE           reduce using rule 201 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    CONST           reduce using rule 201 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    THREAD          reduce using rule 201 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    PUBLIC          reduce using rule 201 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    PRIVATE         reduce using rule 201 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    TRY             reduce using rule 201 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    LIST            reduce using rule 201 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    FOR             reduce using rule 201 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    FOREACH         reduce using rule 201 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    WHILE           reduce using rule 201 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    DO              reduce using rule 201 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    RKEY            reduce using rule 201 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)


state 622

    (190) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA . RKEY
    (191) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA . RKEY FINALLY LKEY all_block_code_try RKEY

    RKEY            shift and go to state 627


state 623

    (215) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list . RKEY DOTANDCOMMA

    RKEY            shift and go to state 628


state 624

    (217) strings_list -> STRING .
    (218) strings_list -> STRING . COMMA strings_list

    RKEY            reduce using rule 217 (strings_list -> STRING .)
    COMMA           shift and go to state 629


state 625

    (216) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list . RKEY DOTANDCOMMA

    RKEY            shift and go to state 630


state 626

    (219) ints_list -> INTEGER .
    (220) ints_list -> INTEGER . COMMA ints_list

    RKEY            reduce using rule 219 (ints_list -> INTEGER .)
    COMMA           shift and go to state 631


state 627

    (190) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .
    (191) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY . FINALLY LKEY all_block_code_try RKEY

    PRINT           reduce using rule 190 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    CHARTYPE        reduce using rule 190 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    STRINGTYPE      reduce using rule 190 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    FLOATTYPE       reduce using rule 190 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    DECIMALTYPE     reduce using rule 190 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    INTTYPE         reduce using rule 190 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    BOOLTYPE        reduce using rule 190 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    VARIABLE        reduce using rule 190 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    STATIC          reduce using rule 190 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    WRITE           reduce using rule 190 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    LPARENT         reduce using rule 190 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    ENUM            reduce using rule 190 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    IF              reduce using rule 190 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    STACK           reduce using rule 190 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    QUEUE           reduce using rule 190 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    CONST           reduce using rule 190 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    THREAD          reduce using rule 190 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    PUBLIC          reduce using rule 190 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    PRIVATE         reduce using rule 190 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    TRY             reduce using rule 190 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    LIST            reduce using rule 190 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    FOR             reduce using rule 190 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    FOREACH         reduce using rule 190 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    WHILE           reduce using rule 190 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    DO              reduce using rule 190 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    RKEY            reduce using rule 190 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    FINALLY         shift and go to state 632


state 628

    (215) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 633


state 629

    (218) strings_list -> STRING COMMA . strings_list
    (217) strings_list -> . STRING
    (218) strings_list -> . STRING COMMA strings_list

    STRING          shift and go to state 624

    strings_list                   shift and go to state 634

state 630

    (216) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 635


state 631

    (220) ints_list -> INTEGER COMMA . ints_list
    (219) ints_list -> . INTEGER
    (220) ints_list -> . INTEGER COMMA ints_list

    INTEGER         shift and go to state 626

    ints_list                      shift and go to state 636

state 632

    (191) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY . LKEY all_block_code_try RKEY

    LKEY            shift and go to state 637


state 633

    (215) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .

    PRINT           reduce using rule 215 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    CHARTYPE        reduce using rule 215 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 215 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 215 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 215 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    INTTYPE         reduce using rule 215 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 215 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    VARIABLE        reduce using rule 215 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    STATIC          reduce using rule 215 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    WRITE           reduce using rule 215 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    LPARENT         reduce using rule 215 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    ENUM            reduce using rule 215 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    IF              reduce using rule 215 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    STACK           reduce using rule 215 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    QUEUE           reduce using rule 215 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    CONST           reduce using rule 215 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    THREAD          reduce using rule 215 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    PUBLIC          reduce using rule 215 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    PRIVATE         reduce using rule 215 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    TRY             reduce using rule 215 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    LIST            reduce using rule 215 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    FOR             reduce using rule 215 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    FOREACH         reduce using rule 215 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    WHILE           reduce using rule 215 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    DO              reduce using rule 215 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    RKEY            reduce using rule 215 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)


state 634

    (218) strings_list -> STRING COMMA strings_list .

    RKEY            reduce using rule 218 (strings_list -> STRING COMMA strings_list .)


state 635

    (216) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .

    PRINT           reduce using rule 216 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    CHARTYPE        reduce using rule 216 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 216 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 216 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 216 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    INTTYPE         reduce using rule 216 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 216 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    VARIABLE        reduce using rule 216 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    STATIC          reduce using rule 216 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    WRITE           reduce using rule 216 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    LPARENT         reduce using rule 216 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    ENUM            reduce using rule 216 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    IF              reduce using rule 216 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    STACK           reduce using rule 216 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    QUEUE           reduce using rule 216 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    CONST           reduce using rule 216 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    THREAD          reduce using rule 216 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    PUBLIC          reduce using rule 216 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    PRIVATE         reduce using rule 216 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    TRY             reduce using rule 216 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    LIST            reduce using rule 216 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    FOR             reduce using rule 216 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    FOREACH         reduce using rule 216 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    WHILE           reduce using rule 216 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    DO              reduce using rule 216 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    RKEY            reduce using rule 216 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)


state 636

    (220) ints_list -> INTEGER COMMA ints_list .

    RKEY            reduce using rule 220 (ints_list -> INTEGER COMMA ints_list .)


state 637

    (191) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY . all_block_code_try RKEY
    (194) all_block_code_try -> . block_code_try
    (195) all_block_code_try -> . block_code_try all_block_code_try
    (192) block_code_try -> . def_const_or_var
    (193) block_code_try -> . print_data
    (116) def_const_or_var -> . constant_assignation
    (117) def_const_or_var -> . variable_assignation
    (46) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (47) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (118) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (119) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (120) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (121) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (122) access_modifiers -> . PUBLIC
    (123) access_modifiers -> . PRIVATE
    (143) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (144) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (145) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (146) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (147) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 50
    CONST           shift and go to state 85
    PUBLIC          shift and go to state 88
    PRIVATE         shift and go to state 89
    INTTYPE         shift and go to state 136
    STRINGTYPE      shift and go to state 137
    FLOATTYPE       shift and go to state 138
    BOOLTYPE        shift and go to state 139

    all_block_code_try             shift and go to state 638
    block_code_try                 shift and go to state 217
    def_const_or_var               shift and go to state 218
    print_data                     shift and go to state 219
    constant_assignation           shift and go to state 48
    variable_assignation           shift and go to state 49
    access_modifiers               shift and go to state 220
    assignation_type_value_multiple shift and go to state 86

state 638

    (191) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try . RKEY

    RKEY            shift and go to state 639


state 639

    (191) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .

    PRINT           reduce using rule 191 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    CHARTYPE        reduce using rule 191 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    STRINGTYPE      reduce using rule 191 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    FLOATTYPE       reduce using rule 191 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    DECIMALTYPE     reduce using rule 191 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    INTTYPE         reduce using rule 191 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    BOOLTYPE        reduce using rule 191 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    VARIABLE        reduce using rule 191 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    STATIC          reduce using rule 191 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    WRITE           reduce using rule 191 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    LPARENT         reduce using rule 191 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    ENUM            reduce using rule 191 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    IF              reduce using rule 191 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    STACK           reduce using rule 191 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    QUEUE           reduce using rule 191 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    CONST           reduce using rule 191 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    THREAD          reduce using rule 191 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    PUBLIC          reduce using rule 191 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    PRIVATE         reduce using rule 191 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    TRY             reduce using rule 191 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    LIST            reduce using rule 191 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    FOR             reduce using rule 191 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    FOREACH         reduce using rule 191 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    WHILE           reduce using rule 191 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    DO              reduce using rule 191 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    RKEY            reduce using rule 191 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 206 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (value_numeric -> VARIABLE) in state 206
WARNING: reduce/reduce conflict in state 261 resolved using rule (value_numeric -> VARIABLE)
WARNING: rejected rule (assignation_float -> VARIABLE ASSIGNATION VARIABLE) in state 261
WARNING: reduce/reduce conflict in state 262 resolved using rule (value_numeric -> FLOAT_NUMBER)
WARNING: rejected rule (assignation_float -> VARIABLE ASSIGNATION FLOAT_NUMBER) in state 262
WARNING: reduce/reduce conflict in state 270 resolved using rule (value_numeric -> VARIABLE)
WARNING: rejected rule (assignation_int -> VARIABLE ASSIGNATION VARIABLE) in state 270
WARNING: reduce/reduce conflict in state 271 resolved using rule (value_numeric -> INTEGER)
WARNING: rejected rule (assignation_int -> VARIABLE ASSIGNATION INTEGER) in state 271
WARNING: reduce/reduce conflict in state 279 resolved using rule (assignation_true -> VARIABLE ASSIGNATION VARIABLE)
WARNING: rejected rule (assignation_false -> VARIABLE ASSIGNATION VARIABLE) in state 279
WARNING: reduce/reduce conflict in state 279 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (assignation_true -> VARIABLE ASSIGNATION VARIABLE) in state 279
WARNING: reduce/reduce conflict in state 279 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (value_numeric -> VARIABLE) in state 279
WARNING: reduce/reduce conflict in state 280 resolved using rule (value_boolean -> BOOLTRUE)
WARNING: rejected rule (assignation_true -> VARIABLE ASSIGNATION BOOLTRUE) in state 280
WARNING: reduce/reduce conflict in state 281 resolved using rule (assignation_true -> VARIABLE ASSIGNATION boolean_operation)
WARNING: rejected rule (assignation_false -> VARIABLE ASSIGNATION boolean_operation) in state 281
WARNING: reduce/reduce conflict in state 282 resolved using rule (value_boolean -> BOOLFALSE)
WARNING: rejected rule (assignation_false -> VARIABLE ASSIGNATION BOOLFALSE) in state 282
WARNING: reduce/reduce conflict in state 331 resolved using rule (value_numeric -> VARIABLE)
WARNING: rejected rule (value -> VARIABLE) in state 331
WARNING: reduce/reduce conflict in state 331 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (value_numeric -> VARIABLE) in state 331
WARNING: reduce/reduce conflict in state 333 resolved using rule (value -> value_numeric)
WARNING: rejected rule (comparison_operation -> value_numeric) in state 333
WARNING: reduce/reduce conflict in state 338 resolved using rule (value_string -> STRING)
WARNING: rejected rule (concatenation -> STRING) in state 338
WARNING: reduce/reduce conflict in state 400 resolved using rule (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA)
WARNING: rejected rule (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA) in state 400
WARNING: reduce/reduce conflict in state 400 resolved using rule (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA)
WARNING: rejected rule (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA) in state 400
WARNING: reduce/reduce conflict in state 412 resolved using rule (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA)
WARNING: rejected rule (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA) in state 412
WARNING: reduce/reduce conflict in state 413 resolved using rule (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA)
WARNING: rejected rule (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA) in state 413
WARNING: reduce/reduce conflict in state 422 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (assignation_true -> VARIABLE ASSIGNATION VARIABLE) in state 422
WARNING: reduce/reduce conflict in state 422 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (value_numeric -> VARIABLE) in state 422
WARNING: reduce/reduce conflict in state 424 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (assignation_false -> VARIABLE ASSIGNATION VARIABLE) in state 424
WARNING: reduce/reduce conflict in state 424 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (value_numeric -> VARIABLE) in state 424
WARNING: reduce/reduce conflict in state 435 resolved using rule (block_code -> normal_if)
WARNING: rejected rule (block_if -> normal_if) in state 435
WARNING: Rule (assignation_float -> VARIABLE ASSIGNATION VARIABLE) is never reduced
WARNING: Rule (assignation_float -> VARIABLE ASSIGNATION FLOAT_NUMBER) is never reduced
WARNING: Rule (assignation_int -> VARIABLE ASSIGNATION VARIABLE) is never reduced
WARNING: Rule (assignation_int -> VARIABLE ASSIGNATION INTEGER) is never reduced
WARNING: Rule (assignation_false -> VARIABLE ASSIGNATION VARIABLE) is never reduced
WARNING: Rule (assignation_true -> VARIABLE ASSIGNATION VARIABLE) is never reduced
WARNING: Rule (assignation_true -> VARIABLE ASSIGNATION BOOLTRUE) is never reduced
WARNING: Rule (assignation_false -> VARIABLE ASSIGNATION BOOLFALSE) is never reduced
WARNING: Rule (value -> VARIABLE) is never reduced
WARNING: Rule (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA) is never reduced
WARNING: Rule (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA) is never reduced
WARNING: Rule (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA) is never reduced
WARNING: Rule (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA) is never reduced
WARNING: Rule (block_if -> normal_if) is never reduced
