Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ACTION
    ADD
    ADDITION_ASSIGNMENT
    ARROW
    ASYNC
    AWAIT
    BACK_SLASH
    BREAK
    CATCH
    CONCURRENT
    COUNT
    DECREMENT
    DICTIONARY
    DIVISION_ASSIGNMENT
    DOLLARSIGN
    DOUBLEPOINT
    DOUBLE_QUOTATION_MARKS
    EXCEPTION
    FINALLY
    FOR
    FOREACH
    ID
    IDENTIFIER
    IN
    INCREMENT
    JUMP_LINE
    LIST
    LONG
    METHOD
    MODULE_ASSIGNMENT
    MULTIPLICATION_ASSIGNMENT
    NAMESPACE
    PIPE
    PUT
    REMOVE
    REMOVEAT
    RETURN
    SIPLE_QUOTATION_MARKS
    SUBTRACTION_ASSIGNMENT
    SWITCH
    TABULATION
    TASK
    TRY

Grammar

Rule 0     S' -> program
Rule 1     program -> USING SYSTEM DOTANDCOMMA block_publicClass
Rule 2     block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_main_method RKEY
Rule 3     block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code
Rule 4     block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
Rule 5     block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code
Rule 6     block_code -> def_const_or_var
Rule 7     block_code -> print_data
Rule 8     block_code -> thread_main
Rule 9     block_code -> concurrent_method
Rule 10    block_code -> normal_if
Rule 11    block_code -> block_while
Rule 12    block_code -> stack_struct
Rule 13    block_code -> functions_stack
Rule 14    block_code -> queue_struct
Rule 15    block_code -> functions_queue
Rule 16    all_block_code -> block_code
Rule 17    all_block_code -> block_code all_block_code
Rule 18    data_type -> CHARTYPE
Rule 19    data_type -> STRINGTYPE
Rule 20    data_type -> FLOATTYPE
Rule 21    data_type -> DECIMALTYPE
Rule 22    data_type -> INTTYPE
Rule 23    data_type -> BOOLTYPE
Rule 24    value_string -> STRING
Rule 25    value_string -> CHAR
Rule 26    value_string -> concatenation
Rule 27    value_boolean -> BOOLTRUE
Rule 28    value_boolean -> BOOLFALSE
Rule 29    value_boolean -> VARIABLE
Rule 30    value_boolean -> comparison_operation
Rule 31    value_numeric -> INTEGER
Rule 32    value_numeric -> FLOAT_NUMBER
Rule 33    value_numeric -> DECIMAL_NUMBER
Rule 34    value_numeric -> VARIABLE
Rule 35    print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA
Rule 36    print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
Rule 37    read_data -> READ LPARENT RPARENT DOTANDCOMMA
Rule 38    concatenation -> STRING
Rule 39    concatenation -> STRING PLUS concatenation
Rule 40    value -> value_numeric
Rule 41    value -> value_boolean
Rule 42    value -> value_string
Rule 43    value -> VARIABLE
Rule 44    value -> read_data
Rule 45    arithmetic_operation -> value_numeric
Rule 46    arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation
Rule 47    arithmetic_operator -> PLUS
Rule 48    arithmetic_operator -> MINUS
Rule 49    arithmetic_operator -> TIMES
Rule 50    arithmetic_operator -> DIVIDE
Rule 51    arithmetic_operator -> PERCENT
Rule 52    comparison_operation -> value_numeric
Rule 53    comparison_operation -> value_numeric comparison_operator comparison_operation
Rule 54    comparison_operator -> GREATER_THAN
Rule 55    comparison_operator -> SMALLER_THAN
Rule 56    comparison_operator -> EQUAL_COMPARATION
Rule 57    comparison_operator -> INEQUALITY
Rule 58    comparison_operator -> GREATER_THAN_OR_EQUAL
Rule 59    comparison_operator -> SMALLER_THAN_OR_EQUAL
Rule 60    boolean_operation -> value_boolean
Rule 61    boolean_operation -> LOGICNOT value_boolean
Rule 62    boolean_operation -> value_boolean boolean_operator boolean_operation
Rule 63    boolean_operator -> LOGICAND
Rule 64    boolean_operator -> LOGICOR
Rule 65    def_const_or_var -> constant_assignation
Rule 66    def_const_or_var -> variable_assignation
Rule 67    constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
Rule 68    constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA
Rule 69    variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA
Rule 70    variable_assignation -> assignation_type_value_multiple DOTANDCOMMA
Rule 71    access_modifiers -> PUBLIC
Rule 72    access_modifiers -> PRIVATE
Rule 73    assignation_type_value -> INTTYPE assignation_int
Rule 74    assignation_type_value -> STRINGTYPE assignation_string
Rule 75    assignation_type_value -> FLOATTYPE assignation_float
Rule 76    assignation_type_value -> BOOLTYPE assignation_true
Rule 77    assignation_type_value -> BOOLTYPE assignation_false
Rule 78    assignation_int -> VARIABLE ASSIGNATION INTEGER
Rule 79    assignation_int -> VARIABLE ASSIGNATION VARIABLE
Rule 80    assignation_int -> VARIABLE ASSIGNATION arithmetic_operation
Rule 81    assignation_string -> VARIABLE ASSIGNATION STRING
Rule 82    assignation_string -> VARIABLE ASSIGNATION VARIABLE
Rule 83    assignation_float -> VARIABLE ASSIGNATION FLOAT_NUMBER
Rule 84    assignation_float -> VARIABLE ASSIGNATION VARIABLE
Rule 85    assignation_float -> VARIABLE ASSIGNATION arithmetic_operation
Rule 86    assignation_true -> VARIABLE ASSIGNATION BOOLTRUE
Rule 87    assignation_true -> VARIABLE ASSIGNATION VARIABLE
Rule 88    assignation_true -> VARIABLE ASSIGNATION boolean_operation
Rule 89    assignation_false -> VARIABLE ASSIGNATION BOOLFALSE
Rule 90    assignation_false -> VARIABLE ASSIGNATION VARIABLE
Rule 91    assignation_false -> VARIABLE ASSIGNATION boolean_operation
Rule 92    assignation_type_value_multiple -> INTTYPE assignation_int_multiple
Rule 93    assignation_type_value_multiple -> STRINGTYPE assignation_string_multiple
Rule 94    assignation_type_value_multiple -> FLOATTYPE assignation_float_multiple
Rule 95    assignation_type_value_multiple -> BOOLTYPE assignation_true_multiple
Rule 96    assignation_type_value_multiple -> BOOLTYPE assignation_false_multiple
Rule 97    assignation_int_multiple -> assignation_int
Rule 98    assignation_int_multiple -> assignation_int COMMA assignation_int_multiple
Rule 99    assignation_string_multiple -> assignation_string
Rule 100   assignation_string_multiple -> assignation_string COMMA assignation_string_multiple
Rule 101   assignation_float_multiple -> assignation_float
Rule 102   assignation_float_multiple -> assignation_float COMMA assignation_float_multiple
Rule 103   assignation_true_multiple -> assignation_true
Rule 104   assignation_true_multiple -> assignation_true COMMA assignation_true_multiple
Rule 105   assignation_false_multiple -> assignation_false
Rule 106   assignation_false_multiple -> assignation_false COMMA assignation_false_multiple
Rule 107   thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
Rule 108   declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
Rule 109   declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
Rule 110   thread_init -> thread_identificator DOT START LPARENT RPARENT DOTANDCOMMA
Rule 111   thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA
Rule 112   concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
Rule 113   concurrent_method -> WRITE
Rule 114   thread_logic -> thread_sentence
Rule 115   thread_logic -> thread_logic thread_sentence
Rule 116   thread_sentence -> thread_expression DOTANDCOMMA
Rule 117   thread_expression -> thread_identificator DOT concurrent_method LPARENT RPARENT
Rule 118   thread_expression -> PRINT LPARENT STRING RPARENT
Rule 119   thread_arguments -> thread_expression
Rule 120   thread_arguments -> thread_arguments COMMA thread_expression
Rule 121   thread_identificator -> VARIABLE
Rule 122   block_if -> normal_if
Rule 123   block_if -> all_block_code
Rule 124   normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
Rule 125   normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
Rule 126   other_if -> ELSE LKEY block_if RKEY
Rule 127   other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
Rule 128   block_while -> normal_while
Rule 129   block_while -> do_while
Rule 130   normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
Rule 131   do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
Rule 132   stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
Rule 133   functions_stack -> stack_push
Rule 134   functions_stack -> stack_pop
Rule 135   functions_stack -> stack_clear
Rule 136   functions_stack -> stack_peek
Rule 137   functions_stack -> stack_isEmpty
Rule 138   stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
Rule 139   stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
Rule 140   stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
Rule 141   stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
Rule 142   stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
Rule 143   queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
Rule 144   functions_queue -> queue_enqueue
Rule 145   functions_queue -> queue_dequeue
Rule 146   functions_queue -> queue_clear
Rule 147   functions_queue -> queue_isEmpty
Rule 148   functions_queue -> queue_peek
Rule 149   queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
Rule 150   queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
Rule 151   queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
Rule 152   queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
Rule 153   queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA

Terminals, with rules where they appear

ACTION               : 
ADD                  : 
ADDITION_ASSIGNMENT  : 
ARROW                : 
ASSIGNATION          : 78 79 80 81 82 83 84 85 86 87 88 89 90 91 108 109 132 143
ASYNC                : 
AWAIT                : 
BACK_SLASH           : 
BOOLFALSE            : 28 89
BOOLTRUE             : 27 86
BOOLTYPE             : 23 76 77 95 96
BREAK                : 
CATCH                : 
CHAR                 : 25
CHARTYPE             : 18
CLASS                : 2
CLEAR                : 140 151
COMMA                : 98 100 102 104 106 120
CONCURRENT           : 
CONST                : 67 68
COUNT                : 
DECIMALTYPE          : 21
DECIMAL_NUMBER       : 33
DECREMENT            : 
DEQUEUE              : 150
DICTIONARY           : 
DIVIDE               : 50
DIVISION_ASSIGNMENT  : 
DO                   : 131
DOLLARSIGN           : 
DOT                  : 110 111 117 138 139 140 141 142 149 150 151 152 153
DOTANDCOMMA          : 1 35 36 37 67 68 69 70 108 109 110 111 116 132 138 139 140 141 142 143 149 150 151 152 153
DOUBLEPOINT          : 
DOUBLE_QUOTATION_MARKS : 
ELSE                 : 126
ELSE_IF              : 127
ENQUEUE              : 149
EQUAL_COMPARATION    : 56
EXCEPTION            : 
FINALLY              : 
FLOATTYPE            : 20 75 94
FLOAT_NUMBER         : 32 83
FOR                  : 
FOREACH              : 
GREATER_THAN         : 54
GREATER_THAN_OR_EQUAL : 58
ID                   : 
IDENTIFIER           : 
IF                   : 124 125
IN                   : 
INCREMENT            : 
INEQUALITY           : 57
INTEGER              : 31 78
INTTYPE              : 22 73 92
ISEMPTY              : 142 153
JOIN                 : 111
JUMP_LINE            : 
LBRACKET             : 3 4 5
LIST                 : 
LKEY                 : 2 3 4 5 112 124 125 126 127 130 131
LOGICAND             : 63
LOGICNOT             : 61
LOGICOR              : 64
LONG                 : 
LPARENT              : 3 4 5 35 36 37 108 109 110 111 112 117 118 124 125 127 130 131 132 138 139 140 141 142 143 149 150 151 152 153
MAIN                 : 3 4 5
METHOD               : 
MINUS                : 48
MODULE_ASSIGNMENT    : 
MULTIPLICATION_ASSIGNMENT : 
NAMESPACE            : 
NEW                  : 108 109 132 143
PEEK                 : 141 152
PERCENT              : 51
PIPE                 : 
PLUS                 : 39 47
POP                  : 139
PRINT                : 35 36 118
PRIVATE              : 72
PUBLIC               : 2 71
PUSH                 : 138
PUT                  : 
QUEUE                : 143 143
RBRACKET             : 3 4 5
READ                 : 37
REMOVE               : 
REMOVEAT             : 
RETURN               : 
RKEY                 : 2 3 4 5 112 124 125 126 127 130 131
RPARENT              : 3 4 5 35 36 37 108 109 110 111 112 117 118 124 125 127 130 131 132 138 139 140 141 142 143 149 150 151 152 153
SIPLE_QUOTATION_MARKS : 
SMALLER_THAN         : 55
SMALLER_THAN_OR_EQUAL : 59
STACK                : 132 132
START                : 110
STATIC               : 3 4 5 112
STRING               : 24 35 38 39 81 118
STRINGTYPE           : 3 4 5 19 74 93
SUBTRACTION_ASSIGNMENT : 
SWITCH               : 
SYSTEM               : 1
TABULATION           : 
TASK                 : 
THREAD               : 108 108 109 109
TIMES                : 49
TRY                  : 
USING                : 1
VARIABLE             : 2 3 4 5 29 34 36 43 78 79 79 80 81 82 82 83 84 84 85 86 87 87 88 89 90 90 91 121 132 138 139 140 141 142 143 149 150 151 152 153
VOID                 : 3 4 5 112
WHILE                : 130 131
WRITE                : 113
error                : 

Nonterminals, with rules where they appear

access_modifiers     : 67 69
all_block_code       : 3 3 4 5 5 17 123 130 131
arithmetic_operation : 46 80 85
arithmetic_operator  : 46
assignation_false    : 77 105 106
assignation_false_multiple : 96 106
assignation_float    : 75 101 102
assignation_float_multiple : 94 102
assignation_int      : 73 97 98
assignation_int_multiple : 92 98
assignation_string   : 74 99 100
assignation_string_multiple : 93 100
assignation_true     : 76 103 104
assignation_true_multiple : 95 104
assignation_type_value : 
assignation_type_value_multiple : 67 68 69 70
block_code           : 16 17
block_if             : 124 125 126 127
block_main_method    : 2
block_publicClass    : 1
block_while          : 11
boolean_operation    : 62 88 91 124 125 127 130 131
boolean_operator     : 62
comparison_operation : 30 53
comparison_operator  : 53
concatenation        : 26 39
concurrent_method    : 9 109 117
constant_assignation : 65
data_type            : 
declaration_thread   : 107 107
def_const_or_var     : 6
do_while             : 129
functions_queue      : 15
functions_stack      : 13
normal_if            : 10 122
normal_while         : 128
other_if             : 124 127
print_data           : 7
program              : 0
queue_clear          : 146
queue_dequeue        : 145
queue_enqueue        : 144
queue_isEmpty        : 147
queue_peek           : 148
queue_struct         : 14
read_data            : 44
stack_clear          : 135
stack_isEmpty        : 137
stack_peek           : 136
stack_pop            : 134
stack_push           : 133
stack_struct         : 12
thread_arguments     : 120
thread_expression    : 116 119 120
thread_identificator : 108 108 109 110 111 112 117
thread_init          : 107 107
thread_logic         : 112 115
thread_main          : 8
thread_sentence      : 114 115
thread_wait          : 107 107
value                : 138 149
value_boolean        : 41 60 61 62
value_numeric        : 40 45 46 52 53
value_string         : 42
variable_assignation : 66

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . USING SYSTEM DOTANDCOMMA block_publicClass

    USING           shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> USING . SYSTEM DOTANDCOMMA block_publicClass

    SYSTEM          shift and go to state 3


state 3

    (1) program -> USING SYSTEM . DOTANDCOMMA block_publicClass

    DOTANDCOMMA     shift and go to state 4


state 4

    (1) program -> USING SYSTEM DOTANDCOMMA . block_publicClass
    (2) block_publicClass -> . PUBLIC CLASS VARIABLE LKEY block_main_method RKEY
    (3) block_publicClass -> . STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    PUBLIC          shift and go to state 6
    STATIC          shift and go to state 7

    block_publicClass              shift and go to state 5

state 5

    (1) program -> USING SYSTEM DOTANDCOMMA block_publicClass .

    $end            reduce using rule 1 (program -> USING SYSTEM DOTANDCOMMA block_publicClass .)


state 6

    (2) block_publicClass -> PUBLIC . CLASS VARIABLE LKEY block_main_method RKEY

    CLASS           shift and go to state 8


state 7

    (3) block_publicClass -> STATIC . VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    VOID            shift and go to state 9


state 8

    (2) block_publicClass -> PUBLIC CLASS . VARIABLE LKEY block_main_method RKEY

    VARIABLE        shift and go to state 10


state 9

    (3) block_publicClass -> STATIC VOID . MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    MAIN            shift and go to state 11


state 10

    (2) block_publicClass -> PUBLIC CLASS VARIABLE . LKEY block_main_method RKEY

    LKEY            shift and go to state 12


state 11

    (3) block_publicClass -> STATIC VOID MAIN . LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    LPARENT         shift and go to state 13


state 12

    (2) block_publicClass -> PUBLIC CLASS VARIABLE LKEY . block_main_method RKEY
    (4) block_main_method -> . STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (5) block_main_method -> . STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    STATIC          shift and go to state 15

    block_main_method              shift and go to state 14

state 13

    (3) block_publicClass -> STATIC VOID MAIN LPARENT . STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    STRINGTYPE      shift and go to state 16


state 14

    (2) block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_main_method . RKEY

    RKEY            shift and go to state 17


state 15

    (4) block_main_method -> STATIC . VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (5) block_main_method -> STATIC . VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    VOID            shift and go to state 18


state 16

    (3) block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE . LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    LBRACKET        shift and go to state 19


state 17

    (2) block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_main_method RKEY .

    $end            reduce using rule 2 (block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_main_method RKEY .)


state 18

    (4) block_main_method -> STATIC VOID . MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (5) block_main_method -> STATIC VOID . MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    MAIN            shift and go to state 20


state 19

    (3) block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET . RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    RBRACKET        shift and go to state 21


state 20

    (4) block_main_method -> STATIC VOID MAIN . LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (5) block_main_method -> STATIC VOID MAIN . LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    LPARENT         shift and go to state 22


state 21

    (3) block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET . VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    VARIABLE        shift and go to state 23


state 22

    (4) block_main_method -> STATIC VOID MAIN LPARENT . STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (5) block_main_method -> STATIC VOID MAIN LPARENT . STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    STRINGTYPE      shift and go to state 24


state 23

    (3) block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE . RPARENT LKEY all_block_code RKEY all_block_code

    RPARENT         shift and go to state 25


state 24

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE . LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (5) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE . LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    LBRACKET        shift and go to state 26


state 25

    (3) block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT . LKEY all_block_code RKEY all_block_code

    LKEY            shift and go to state 27


state 26

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET . RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (5) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET . RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    RBRACKET        shift and go to state 28


state 27

    (3) block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY . all_block_code RKEY all_block_code
    (16) all_block_code -> . block_code
    (17) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . thread_main
    (9) block_code -> . concurrent_method
    (10) block_code -> . normal_if
    (11) block_code -> . block_while
    (12) block_code -> . stack_struct
    (13) block_code -> . functions_stack
    (14) block_code -> . queue_struct
    (15) block_code -> . functions_queue
    (65) def_const_or_var -> . constant_assignation
    (66) def_const_or_var -> . variable_assignation
    (35) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (36) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (107) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (112) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (113) concurrent_method -> . WRITE
    (124) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (125) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (128) block_while -> . normal_while
    (129) block_while -> . do_while
    (132) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (133) functions_stack -> . stack_push
    (134) functions_stack -> . stack_pop
    (135) functions_stack -> . stack_clear
    (136) functions_stack -> . stack_peek
    (137) functions_stack -> . stack_isEmpty
    (143) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (144) functions_queue -> . queue_enqueue
    (145) functions_queue -> . queue_dequeue
    (146) functions_queue -> . queue_clear
    (147) functions_queue -> . queue_isEmpty
    (148) functions_queue -> . queue_peek
    (67) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (68) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (69) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (70) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (108) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (109) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (130) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (131) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (138) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (139) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (140) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (141) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (142) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (149) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (150) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (151) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (153) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (152) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (71) access_modifiers -> . PUBLIC
    (72) access_modifiers -> . PRIVATE
    (92) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (93) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (94) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (95) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (96) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 46
    STATIC          shift and go to state 29
    WRITE           shift and go to state 48
    IF              shift and go to state 49
    STACK           shift and go to state 52
    QUEUE           shift and go to state 58
    CONST           shift and go to state 65
    THREAD          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    VARIABLE        shift and go to state 31
    PUBLIC          shift and go to state 70
    PRIVATE         shift and go to state 71
    INTTYPE         shift and go to state 72
    STRINGTYPE      shift and go to state 30
    FLOATTYPE       shift and go to state 73
    BOOLTYPE        shift and go to state 74

    all_block_code                 shift and go to state 32
    block_code                     shift and go to state 33
    def_const_or_var               shift and go to state 34
    print_data                     shift and go to state 35
    thread_main                    shift and go to state 36
    concurrent_method              shift and go to state 37
    normal_if                      shift and go to state 38
    block_while                    shift and go to state 39
    stack_struct                   shift and go to state 40
    functions_stack                shift and go to state 41
    queue_struct                   shift and go to state 42
    functions_queue                shift and go to state 43
    constant_assignation           shift and go to state 44
    variable_assignation           shift and go to state 45
    declaration_thread             shift and go to state 47
    normal_while                   shift and go to state 50
    do_while                       shift and go to state 51
    stack_push                     shift and go to state 53
    stack_pop                      shift and go to state 54
    stack_clear                    shift and go to state 55
    stack_peek                     shift and go to state 56
    stack_isEmpty                  shift and go to state 57
    queue_enqueue                  shift and go to state 59
    queue_dequeue                  shift and go to state 60
    queue_clear                    shift and go to state 61
    queue_isEmpty                  shift and go to state 62
    queue_peek                     shift and go to state 63
    access_modifiers               shift and go to state 64
    assignation_type_value_multiple shift and go to state 66

state 28

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET . VARIABLE RPARENT LKEY all_block_code RKEY
    (5) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET . VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    VARIABLE        shift and go to state 75


state 29

    (112) concurrent_method -> STATIC . VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY

    VOID            shift and go to state 76


state 30

    (93) assignation_type_value_multiple -> STRINGTYPE . assignation_string_multiple
    (99) assignation_string_multiple -> . assignation_string
    (100) assignation_string_multiple -> . assignation_string COMMA assignation_string_multiple
    (81) assignation_string -> . VARIABLE ASSIGNATION STRING
    (82) assignation_string -> . VARIABLE ASSIGNATION VARIABLE

    VARIABLE        shift and go to state 79

    assignation_string_multiple    shift and go to state 77
    assignation_string             shift and go to state 78

state 31

    (138) stack_push -> VARIABLE . DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (139) stack_pop -> VARIABLE . DOT POP LPARENT RPARENT DOTANDCOMMA
    (140) stack_clear -> VARIABLE . DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (141) stack_peek -> VARIABLE . DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (142) stack_isEmpty -> VARIABLE . DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (149) queue_enqueue -> VARIABLE . DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (150) queue_dequeue -> VARIABLE . DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (151) queue_clear -> VARIABLE . DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (153) queue_isEmpty -> VARIABLE . DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (152) queue_peek -> VARIABLE . DOT PEEK LPARENT RPARENT DOTANDCOMMA

    DOT             shift and go to state 80


state 32

    (3) block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code . RKEY all_block_code

    RKEY            shift and go to state 81


state 33

    (16) all_block_code -> block_code .
    (17) all_block_code -> block_code . all_block_code
    (16) all_block_code -> . block_code
    (17) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . thread_main
    (9) block_code -> . concurrent_method
    (10) block_code -> . normal_if
    (11) block_code -> . block_while
    (12) block_code -> . stack_struct
    (13) block_code -> . functions_stack
    (14) block_code -> . queue_struct
    (15) block_code -> . functions_queue
    (65) def_const_or_var -> . constant_assignation
    (66) def_const_or_var -> . variable_assignation
    (35) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (36) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (107) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (112) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (113) concurrent_method -> . WRITE
    (124) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (125) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (128) block_while -> . normal_while
    (129) block_while -> . do_while
    (132) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (133) functions_stack -> . stack_push
    (134) functions_stack -> . stack_pop
    (135) functions_stack -> . stack_clear
    (136) functions_stack -> . stack_peek
    (137) functions_stack -> . stack_isEmpty
    (143) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (144) functions_queue -> . queue_enqueue
    (145) functions_queue -> . queue_dequeue
    (146) functions_queue -> . queue_clear
    (147) functions_queue -> . queue_isEmpty
    (148) functions_queue -> . queue_peek
    (67) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (68) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (69) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (70) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (108) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (109) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (130) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (131) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (138) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (139) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (140) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (141) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (142) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (149) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (150) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (151) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (153) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (152) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (71) access_modifiers -> . PUBLIC
    (72) access_modifiers -> . PRIVATE
    (92) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (93) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (94) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (95) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (96) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    RKEY            reduce using rule 16 (all_block_code -> block_code .)
    $end            reduce using rule 16 (all_block_code -> block_code .)
    PRINT           shift and go to state 46
    STATIC          shift and go to state 29
    WRITE           shift and go to state 48
    IF              shift and go to state 49
    STACK           shift and go to state 52
    QUEUE           shift and go to state 58
    CONST           shift and go to state 65
    THREAD          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    VARIABLE        shift and go to state 31
    PUBLIC          shift and go to state 70
    PRIVATE         shift and go to state 71
    INTTYPE         shift and go to state 72
    STRINGTYPE      shift and go to state 30
    FLOATTYPE       shift and go to state 73
    BOOLTYPE        shift and go to state 74

    block_code                     shift and go to state 33
    all_block_code                 shift and go to state 82
    def_const_or_var               shift and go to state 34
    print_data                     shift and go to state 35
    thread_main                    shift and go to state 36
    concurrent_method              shift and go to state 37
    normal_if                      shift and go to state 38
    block_while                    shift and go to state 39
    stack_struct                   shift and go to state 40
    functions_stack                shift and go to state 41
    queue_struct                   shift and go to state 42
    functions_queue                shift and go to state 43
    constant_assignation           shift and go to state 44
    variable_assignation           shift and go to state 45
    declaration_thread             shift and go to state 47
    normal_while                   shift and go to state 50
    do_while                       shift and go to state 51
    stack_push                     shift and go to state 53
    stack_pop                      shift and go to state 54
    stack_clear                    shift and go to state 55
    stack_peek                     shift and go to state 56
    stack_isEmpty                  shift and go to state 57
    queue_enqueue                  shift and go to state 59
    queue_dequeue                  shift and go to state 60
    queue_clear                    shift and go to state 61
    queue_isEmpty                  shift and go to state 62
    queue_peek                     shift and go to state 63
    access_modifiers               shift and go to state 64
    assignation_type_value_multiple shift and go to state 66

state 34

    (6) block_code -> def_const_or_var .

    PRINT           reduce using rule 6 (block_code -> def_const_or_var .)
    STATIC          reduce using rule 6 (block_code -> def_const_or_var .)
    WRITE           reduce using rule 6 (block_code -> def_const_or_var .)
    IF              reduce using rule 6 (block_code -> def_const_or_var .)
    STACK           reduce using rule 6 (block_code -> def_const_or_var .)
    QUEUE           reduce using rule 6 (block_code -> def_const_or_var .)
    CONST           reduce using rule 6 (block_code -> def_const_or_var .)
    THREAD          reduce using rule 6 (block_code -> def_const_or_var .)
    WHILE           reduce using rule 6 (block_code -> def_const_or_var .)
    DO              reduce using rule 6 (block_code -> def_const_or_var .)
    VARIABLE        reduce using rule 6 (block_code -> def_const_or_var .)
    PUBLIC          reduce using rule 6 (block_code -> def_const_or_var .)
    PRIVATE         reduce using rule 6 (block_code -> def_const_or_var .)
    INTTYPE         reduce using rule 6 (block_code -> def_const_or_var .)
    STRINGTYPE      reduce using rule 6 (block_code -> def_const_or_var .)
    FLOATTYPE       reduce using rule 6 (block_code -> def_const_or_var .)
    BOOLTYPE        reduce using rule 6 (block_code -> def_const_or_var .)
    RKEY            reduce using rule 6 (block_code -> def_const_or_var .)
    $end            reduce using rule 6 (block_code -> def_const_or_var .)


state 35

    (7) block_code -> print_data .

    PRINT           reduce using rule 7 (block_code -> print_data .)
    STATIC          reduce using rule 7 (block_code -> print_data .)
    WRITE           reduce using rule 7 (block_code -> print_data .)
    IF              reduce using rule 7 (block_code -> print_data .)
    STACK           reduce using rule 7 (block_code -> print_data .)
    QUEUE           reduce using rule 7 (block_code -> print_data .)
    CONST           reduce using rule 7 (block_code -> print_data .)
    THREAD          reduce using rule 7 (block_code -> print_data .)
    WHILE           reduce using rule 7 (block_code -> print_data .)
    DO              reduce using rule 7 (block_code -> print_data .)
    VARIABLE        reduce using rule 7 (block_code -> print_data .)
    PUBLIC          reduce using rule 7 (block_code -> print_data .)
    PRIVATE         reduce using rule 7 (block_code -> print_data .)
    INTTYPE         reduce using rule 7 (block_code -> print_data .)
    STRINGTYPE      reduce using rule 7 (block_code -> print_data .)
    FLOATTYPE       reduce using rule 7 (block_code -> print_data .)
    BOOLTYPE        reduce using rule 7 (block_code -> print_data .)
    RKEY            reduce using rule 7 (block_code -> print_data .)
    $end            reduce using rule 7 (block_code -> print_data .)


state 36

    (8) block_code -> thread_main .

    PRINT           reduce using rule 8 (block_code -> thread_main .)
    STATIC          reduce using rule 8 (block_code -> thread_main .)
    WRITE           reduce using rule 8 (block_code -> thread_main .)
    IF              reduce using rule 8 (block_code -> thread_main .)
    STACK           reduce using rule 8 (block_code -> thread_main .)
    QUEUE           reduce using rule 8 (block_code -> thread_main .)
    CONST           reduce using rule 8 (block_code -> thread_main .)
    THREAD          reduce using rule 8 (block_code -> thread_main .)
    WHILE           reduce using rule 8 (block_code -> thread_main .)
    DO              reduce using rule 8 (block_code -> thread_main .)
    VARIABLE        reduce using rule 8 (block_code -> thread_main .)
    PUBLIC          reduce using rule 8 (block_code -> thread_main .)
    PRIVATE         reduce using rule 8 (block_code -> thread_main .)
    INTTYPE         reduce using rule 8 (block_code -> thread_main .)
    STRINGTYPE      reduce using rule 8 (block_code -> thread_main .)
    FLOATTYPE       reduce using rule 8 (block_code -> thread_main .)
    BOOLTYPE        reduce using rule 8 (block_code -> thread_main .)
    RKEY            reduce using rule 8 (block_code -> thread_main .)
    $end            reduce using rule 8 (block_code -> thread_main .)


state 37

    (9) block_code -> concurrent_method .

    PRINT           reduce using rule 9 (block_code -> concurrent_method .)
    STATIC          reduce using rule 9 (block_code -> concurrent_method .)
    WRITE           reduce using rule 9 (block_code -> concurrent_method .)
    IF              reduce using rule 9 (block_code -> concurrent_method .)
    STACK           reduce using rule 9 (block_code -> concurrent_method .)
    QUEUE           reduce using rule 9 (block_code -> concurrent_method .)
    CONST           reduce using rule 9 (block_code -> concurrent_method .)
    THREAD          reduce using rule 9 (block_code -> concurrent_method .)
    WHILE           reduce using rule 9 (block_code -> concurrent_method .)
    DO              reduce using rule 9 (block_code -> concurrent_method .)
    VARIABLE        reduce using rule 9 (block_code -> concurrent_method .)
    PUBLIC          reduce using rule 9 (block_code -> concurrent_method .)
    PRIVATE         reduce using rule 9 (block_code -> concurrent_method .)
    INTTYPE         reduce using rule 9 (block_code -> concurrent_method .)
    STRINGTYPE      reduce using rule 9 (block_code -> concurrent_method .)
    FLOATTYPE       reduce using rule 9 (block_code -> concurrent_method .)
    BOOLTYPE        reduce using rule 9 (block_code -> concurrent_method .)
    RKEY            reduce using rule 9 (block_code -> concurrent_method .)
    $end            reduce using rule 9 (block_code -> concurrent_method .)


state 38

    (10) block_code -> normal_if .

    PRINT           reduce using rule 10 (block_code -> normal_if .)
    STATIC          reduce using rule 10 (block_code -> normal_if .)
    WRITE           reduce using rule 10 (block_code -> normal_if .)
    IF              reduce using rule 10 (block_code -> normal_if .)
    STACK           reduce using rule 10 (block_code -> normal_if .)
    QUEUE           reduce using rule 10 (block_code -> normal_if .)
    CONST           reduce using rule 10 (block_code -> normal_if .)
    THREAD          reduce using rule 10 (block_code -> normal_if .)
    WHILE           reduce using rule 10 (block_code -> normal_if .)
    DO              reduce using rule 10 (block_code -> normal_if .)
    VARIABLE        reduce using rule 10 (block_code -> normal_if .)
    PUBLIC          reduce using rule 10 (block_code -> normal_if .)
    PRIVATE         reduce using rule 10 (block_code -> normal_if .)
    INTTYPE         reduce using rule 10 (block_code -> normal_if .)
    STRINGTYPE      reduce using rule 10 (block_code -> normal_if .)
    FLOATTYPE       reduce using rule 10 (block_code -> normal_if .)
    BOOLTYPE        reduce using rule 10 (block_code -> normal_if .)
    RKEY            reduce using rule 10 (block_code -> normal_if .)
    $end            reduce using rule 10 (block_code -> normal_if .)


state 39

    (11) block_code -> block_while .

    PRINT           reduce using rule 11 (block_code -> block_while .)
    STATIC          reduce using rule 11 (block_code -> block_while .)
    WRITE           reduce using rule 11 (block_code -> block_while .)
    IF              reduce using rule 11 (block_code -> block_while .)
    STACK           reduce using rule 11 (block_code -> block_while .)
    QUEUE           reduce using rule 11 (block_code -> block_while .)
    CONST           reduce using rule 11 (block_code -> block_while .)
    THREAD          reduce using rule 11 (block_code -> block_while .)
    WHILE           reduce using rule 11 (block_code -> block_while .)
    DO              reduce using rule 11 (block_code -> block_while .)
    VARIABLE        reduce using rule 11 (block_code -> block_while .)
    PUBLIC          reduce using rule 11 (block_code -> block_while .)
    PRIVATE         reduce using rule 11 (block_code -> block_while .)
    INTTYPE         reduce using rule 11 (block_code -> block_while .)
    STRINGTYPE      reduce using rule 11 (block_code -> block_while .)
    FLOATTYPE       reduce using rule 11 (block_code -> block_while .)
    BOOLTYPE        reduce using rule 11 (block_code -> block_while .)
    RKEY            reduce using rule 11 (block_code -> block_while .)
    $end            reduce using rule 11 (block_code -> block_while .)


state 40

    (12) block_code -> stack_struct .

    PRINT           reduce using rule 12 (block_code -> stack_struct .)
    STATIC          reduce using rule 12 (block_code -> stack_struct .)
    WRITE           reduce using rule 12 (block_code -> stack_struct .)
    IF              reduce using rule 12 (block_code -> stack_struct .)
    STACK           reduce using rule 12 (block_code -> stack_struct .)
    QUEUE           reduce using rule 12 (block_code -> stack_struct .)
    CONST           reduce using rule 12 (block_code -> stack_struct .)
    THREAD          reduce using rule 12 (block_code -> stack_struct .)
    WHILE           reduce using rule 12 (block_code -> stack_struct .)
    DO              reduce using rule 12 (block_code -> stack_struct .)
    VARIABLE        reduce using rule 12 (block_code -> stack_struct .)
    PUBLIC          reduce using rule 12 (block_code -> stack_struct .)
    PRIVATE         reduce using rule 12 (block_code -> stack_struct .)
    INTTYPE         reduce using rule 12 (block_code -> stack_struct .)
    STRINGTYPE      reduce using rule 12 (block_code -> stack_struct .)
    FLOATTYPE       reduce using rule 12 (block_code -> stack_struct .)
    BOOLTYPE        reduce using rule 12 (block_code -> stack_struct .)
    RKEY            reduce using rule 12 (block_code -> stack_struct .)
    $end            reduce using rule 12 (block_code -> stack_struct .)


state 41

    (13) block_code -> functions_stack .

    PRINT           reduce using rule 13 (block_code -> functions_stack .)
    STATIC          reduce using rule 13 (block_code -> functions_stack .)
    WRITE           reduce using rule 13 (block_code -> functions_stack .)
    IF              reduce using rule 13 (block_code -> functions_stack .)
    STACK           reduce using rule 13 (block_code -> functions_stack .)
    QUEUE           reduce using rule 13 (block_code -> functions_stack .)
    CONST           reduce using rule 13 (block_code -> functions_stack .)
    THREAD          reduce using rule 13 (block_code -> functions_stack .)
    WHILE           reduce using rule 13 (block_code -> functions_stack .)
    DO              reduce using rule 13 (block_code -> functions_stack .)
    VARIABLE        reduce using rule 13 (block_code -> functions_stack .)
    PUBLIC          reduce using rule 13 (block_code -> functions_stack .)
    PRIVATE         reduce using rule 13 (block_code -> functions_stack .)
    INTTYPE         reduce using rule 13 (block_code -> functions_stack .)
    STRINGTYPE      reduce using rule 13 (block_code -> functions_stack .)
    FLOATTYPE       reduce using rule 13 (block_code -> functions_stack .)
    BOOLTYPE        reduce using rule 13 (block_code -> functions_stack .)
    RKEY            reduce using rule 13 (block_code -> functions_stack .)
    $end            reduce using rule 13 (block_code -> functions_stack .)


state 42

    (14) block_code -> queue_struct .

    PRINT           reduce using rule 14 (block_code -> queue_struct .)
    STATIC          reduce using rule 14 (block_code -> queue_struct .)
    WRITE           reduce using rule 14 (block_code -> queue_struct .)
    IF              reduce using rule 14 (block_code -> queue_struct .)
    STACK           reduce using rule 14 (block_code -> queue_struct .)
    QUEUE           reduce using rule 14 (block_code -> queue_struct .)
    CONST           reduce using rule 14 (block_code -> queue_struct .)
    THREAD          reduce using rule 14 (block_code -> queue_struct .)
    WHILE           reduce using rule 14 (block_code -> queue_struct .)
    DO              reduce using rule 14 (block_code -> queue_struct .)
    VARIABLE        reduce using rule 14 (block_code -> queue_struct .)
    PUBLIC          reduce using rule 14 (block_code -> queue_struct .)
    PRIVATE         reduce using rule 14 (block_code -> queue_struct .)
    INTTYPE         reduce using rule 14 (block_code -> queue_struct .)
    STRINGTYPE      reduce using rule 14 (block_code -> queue_struct .)
    FLOATTYPE       reduce using rule 14 (block_code -> queue_struct .)
    BOOLTYPE        reduce using rule 14 (block_code -> queue_struct .)
    RKEY            reduce using rule 14 (block_code -> queue_struct .)
    $end            reduce using rule 14 (block_code -> queue_struct .)


state 43

    (15) block_code -> functions_queue .

    PRINT           reduce using rule 15 (block_code -> functions_queue .)
    STATIC          reduce using rule 15 (block_code -> functions_queue .)
    WRITE           reduce using rule 15 (block_code -> functions_queue .)
    IF              reduce using rule 15 (block_code -> functions_queue .)
    STACK           reduce using rule 15 (block_code -> functions_queue .)
    QUEUE           reduce using rule 15 (block_code -> functions_queue .)
    CONST           reduce using rule 15 (block_code -> functions_queue .)
    THREAD          reduce using rule 15 (block_code -> functions_queue .)
    WHILE           reduce using rule 15 (block_code -> functions_queue .)
    DO              reduce using rule 15 (block_code -> functions_queue .)
    VARIABLE        reduce using rule 15 (block_code -> functions_queue .)
    PUBLIC          reduce using rule 15 (block_code -> functions_queue .)
    PRIVATE         reduce using rule 15 (block_code -> functions_queue .)
    INTTYPE         reduce using rule 15 (block_code -> functions_queue .)
    STRINGTYPE      reduce using rule 15 (block_code -> functions_queue .)
    FLOATTYPE       reduce using rule 15 (block_code -> functions_queue .)
    BOOLTYPE        reduce using rule 15 (block_code -> functions_queue .)
    RKEY            reduce using rule 15 (block_code -> functions_queue .)
    $end            reduce using rule 15 (block_code -> functions_queue .)


state 44

    (65) def_const_or_var -> constant_assignation .

    PRINT           reduce using rule 65 (def_const_or_var -> constant_assignation .)
    STATIC          reduce using rule 65 (def_const_or_var -> constant_assignation .)
    WRITE           reduce using rule 65 (def_const_or_var -> constant_assignation .)
    IF              reduce using rule 65 (def_const_or_var -> constant_assignation .)
    STACK           reduce using rule 65 (def_const_or_var -> constant_assignation .)
    QUEUE           reduce using rule 65 (def_const_or_var -> constant_assignation .)
    CONST           reduce using rule 65 (def_const_or_var -> constant_assignation .)
    THREAD          reduce using rule 65 (def_const_or_var -> constant_assignation .)
    WHILE           reduce using rule 65 (def_const_or_var -> constant_assignation .)
    DO              reduce using rule 65 (def_const_or_var -> constant_assignation .)
    VARIABLE        reduce using rule 65 (def_const_or_var -> constant_assignation .)
    PUBLIC          reduce using rule 65 (def_const_or_var -> constant_assignation .)
    PRIVATE         reduce using rule 65 (def_const_or_var -> constant_assignation .)
    INTTYPE         reduce using rule 65 (def_const_or_var -> constant_assignation .)
    STRINGTYPE      reduce using rule 65 (def_const_or_var -> constant_assignation .)
    FLOATTYPE       reduce using rule 65 (def_const_or_var -> constant_assignation .)
    BOOLTYPE        reduce using rule 65 (def_const_or_var -> constant_assignation .)
    RKEY            reduce using rule 65 (def_const_or_var -> constant_assignation .)
    $end            reduce using rule 65 (def_const_or_var -> constant_assignation .)


state 45

    (66) def_const_or_var -> variable_assignation .

    PRINT           reduce using rule 66 (def_const_or_var -> variable_assignation .)
    STATIC          reduce using rule 66 (def_const_or_var -> variable_assignation .)
    WRITE           reduce using rule 66 (def_const_or_var -> variable_assignation .)
    IF              reduce using rule 66 (def_const_or_var -> variable_assignation .)
    STACK           reduce using rule 66 (def_const_or_var -> variable_assignation .)
    QUEUE           reduce using rule 66 (def_const_or_var -> variable_assignation .)
    CONST           reduce using rule 66 (def_const_or_var -> variable_assignation .)
    THREAD          reduce using rule 66 (def_const_or_var -> variable_assignation .)
    WHILE           reduce using rule 66 (def_const_or_var -> variable_assignation .)
    DO              reduce using rule 66 (def_const_or_var -> variable_assignation .)
    VARIABLE        reduce using rule 66 (def_const_or_var -> variable_assignation .)
    PUBLIC          reduce using rule 66 (def_const_or_var -> variable_assignation .)
    PRIVATE         reduce using rule 66 (def_const_or_var -> variable_assignation .)
    INTTYPE         reduce using rule 66 (def_const_or_var -> variable_assignation .)
    STRINGTYPE      reduce using rule 66 (def_const_or_var -> variable_assignation .)
    FLOATTYPE       reduce using rule 66 (def_const_or_var -> variable_assignation .)
    BOOLTYPE        reduce using rule 66 (def_const_or_var -> variable_assignation .)
    RKEY            reduce using rule 66 (def_const_or_var -> variable_assignation .)
    $end            reduce using rule 66 (def_const_or_var -> variable_assignation .)


state 46

    (35) print_data -> PRINT . LPARENT STRING RPARENT DOTANDCOMMA
    (36) print_data -> PRINT . LPARENT VARIABLE RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 83


state 47

    (107) thread_main -> declaration_thread . declaration_thread thread_init thread_init thread_wait thread_wait
    (108) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (109) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA

    THREAD          shift and go to state 67

    declaration_thread             shift and go to state 84

state 48

    (113) concurrent_method -> WRITE .

    PRINT           reduce using rule 113 (concurrent_method -> WRITE .)
    STATIC          reduce using rule 113 (concurrent_method -> WRITE .)
    WRITE           reduce using rule 113 (concurrent_method -> WRITE .)
    IF              reduce using rule 113 (concurrent_method -> WRITE .)
    STACK           reduce using rule 113 (concurrent_method -> WRITE .)
    QUEUE           reduce using rule 113 (concurrent_method -> WRITE .)
    CONST           reduce using rule 113 (concurrent_method -> WRITE .)
    THREAD          reduce using rule 113 (concurrent_method -> WRITE .)
    WHILE           reduce using rule 113 (concurrent_method -> WRITE .)
    DO              reduce using rule 113 (concurrent_method -> WRITE .)
    VARIABLE        reduce using rule 113 (concurrent_method -> WRITE .)
    PUBLIC          reduce using rule 113 (concurrent_method -> WRITE .)
    PRIVATE         reduce using rule 113 (concurrent_method -> WRITE .)
    INTTYPE         reduce using rule 113 (concurrent_method -> WRITE .)
    STRINGTYPE      reduce using rule 113 (concurrent_method -> WRITE .)
    FLOATTYPE       reduce using rule 113 (concurrent_method -> WRITE .)
    BOOLTYPE        reduce using rule 113 (concurrent_method -> WRITE .)
    RKEY            reduce using rule 113 (concurrent_method -> WRITE .)
    $end            reduce using rule 113 (concurrent_method -> WRITE .)
    RPARENT         reduce using rule 113 (concurrent_method -> WRITE .)
    LPARENT         reduce using rule 113 (concurrent_method -> WRITE .)


state 49

    (124) normal_if -> IF . LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (125) normal_if -> IF . LPARENT boolean_operation RPARENT LKEY block_if RKEY

    LPARENT         shift and go to state 85


state 50

    (128) block_while -> normal_while .

    PRINT           reduce using rule 128 (block_while -> normal_while .)
    STATIC          reduce using rule 128 (block_while -> normal_while .)
    WRITE           reduce using rule 128 (block_while -> normal_while .)
    IF              reduce using rule 128 (block_while -> normal_while .)
    STACK           reduce using rule 128 (block_while -> normal_while .)
    QUEUE           reduce using rule 128 (block_while -> normal_while .)
    CONST           reduce using rule 128 (block_while -> normal_while .)
    THREAD          reduce using rule 128 (block_while -> normal_while .)
    WHILE           reduce using rule 128 (block_while -> normal_while .)
    DO              reduce using rule 128 (block_while -> normal_while .)
    VARIABLE        reduce using rule 128 (block_while -> normal_while .)
    PUBLIC          reduce using rule 128 (block_while -> normal_while .)
    PRIVATE         reduce using rule 128 (block_while -> normal_while .)
    INTTYPE         reduce using rule 128 (block_while -> normal_while .)
    STRINGTYPE      reduce using rule 128 (block_while -> normal_while .)
    FLOATTYPE       reduce using rule 128 (block_while -> normal_while .)
    BOOLTYPE        reduce using rule 128 (block_while -> normal_while .)
    RKEY            reduce using rule 128 (block_while -> normal_while .)
    $end            reduce using rule 128 (block_while -> normal_while .)


state 51

    (129) block_while -> do_while .

    PRINT           reduce using rule 129 (block_while -> do_while .)
    STATIC          reduce using rule 129 (block_while -> do_while .)
    WRITE           reduce using rule 129 (block_while -> do_while .)
    IF              reduce using rule 129 (block_while -> do_while .)
    STACK           reduce using rule 129 (block_while -> do_while .)
    QUEUE           reduce using rule 129 (block_while -> do_while .)
    CONST           reduce using rule 129 (block_while -> do_while .)
    THREAD          reduce using rule 129 (block_while -> do_while .)
    WHILE           reduce using rule 129 (block_while -> do_while .)
    DO              reduce using rule 129 (block_while -> do_while .)
    VARIABLE        reduce using rule 129 (block_while -> do_while .)
    PUBLIC          reduce using rule 129 (block_while -> do_while .)
    PRIVATE         reduce using rule 129 (block_while -> do_while .)
    INTTYPE         reduce using rule 129 (block_while -> do_while .)
    STRINGTYPE      reduce using rule 129 (block_while -> do_while .)
    FLOATTYPE       reduce using rule 129 (block_while -> do_while .)
    BOOLTYPE        reduce using rule 129 (block_while -> do_while .)
    RKEY            reduce using rule 129 (block_while -> do_while .)
    $end            reduce using rule 129 (block_while -> do_while .)


state 52

    (132) stack_struct -> STACK . VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA

    VARIABLE        shift and go to state 86


state 53

    (133) functions_stack -> stack_push .

    PRINT           reduce using rule 133 (functions_stack -> stack_push .)
    STATIC          reduce using rule 133 (functions_stack -> stack_push .)
    WRITE           reduce using rule 133 (functions_stack -> stack_push .)
    IF              reduce using rule 133 (functions_stack -> stack_push .)
    STACK           reduce using rule 133 (functions_stack -> stack_push .)
    QUEUE           reduce using rule 133 (functions_stack -> stack_push .)
    CONST           reduce using rule 133 (functions_stack -> stack_push .)
    THREAD          reduce using rule 133 (functions_stack -> stack_push .)
    WHILE           reduce using rule 133 (functions_stack -> stack_push .)
    DO              reduce using rule 133 (functions_stack -> stack_push .)
    VARIABLE        reduce using rule 133 (functions_stack -> stack_push .)
    PUBLIC          reduce using rule 133 (functions_stack -> stack_push .)
    PRIVATE         reduce using rule 133 (functions_stack -> stack_push .)
    INTTYPE         reduce using rule 133 (functions_stack -> stack_push .)
    STRINGTYPE      reduce using rule 133 (functions_stack -> stack_push .)
    FLOATTYPE       reduce using rule 133 (functions_stack -> stack_push .)
    BOOLTYPE        reduce using rule 133 (functions_stack -> stack_push .)
    RKEY            reduce using rule 133 (functions_stack -> stack_push .)
    $end            reduce using rule 133 (functions_stack -> stack_push .)


state 54

    (134) functions_stack -> stack_pop .

    PRINT           reduce using rule 134 (functions_stack -> stack_pop .)
    STATIC          reduce using rule 134 (functions_stack -> stack_pop .)
    WRITE           reduce using rule 134 (functions_stack -> stack_pop .)
    IF              reduce using rule 134 (functions_stack -> stack_pop .)
    STACK           reduce using rule 134 (functions_stack -> stack_pop .)
    QUEUE           reduce using rule 134 (functions_stack -> stack_pop .)
    CONST           reduce using rule 134 (functions_stack -> stack_pop .)
    THREAD          reduce using rule 134 (functions_stack -> stack_pop .)
    WHILE           reduce using rule 134 (functions_stack -> stack_pop .)
    DO              reduce using rule 134 (functions_stack -> stack_pop .)
    VARIABLE        reduce using rule 134 (functions_stack -> stack_pop .)
    PUBLIC          reduce using rule 134 (functions_stack -> stack_pop .)
    PRIVATE         reduce using rule 134 (functions_stack -> stack_pop .)
    INTTYPE         reduce using rule 134 (functions_stack -> stack_pop .)
    STRINGTYPE      reduce using rule 134 (functions_stack -> stack_pop .)
    FLOATTYPE       reduce using rule 134 (functions_stack -> stack_pop .)
    BOOLTYPE        reduce using rule 134 (functions_stack -> stack_pop .)
    RKEY            reduce using rule 134 (functions_stack -> stack_pop .)
    $end            reduce using rule 134 (functions_stack -> stack_pop .)


state 55

    (135) functions_stack -> stack_clear .

    PRINT           reduce using rule 135 (functions_stack -> stack_clear .)
    STATIC          reduce using rule 135 (functions_stack -> stack_clear .)
    WRITE           reduce using rule 135 (functions_stack -> stack_clear .)
    IF              reduce using rule 135 (functions_stack -> stack_clear .)
    STACK           reduce using rule 135 (functions_stack -> stack_clear .)
    QUEUE           reduce using rule 135 (functions_stack -> stack_clear .)
    CONST           reduce using rule 135 (functions_stack -> stack_clear .)
    THREAD          reduce using rule 135 (functions_stack -> stack_clear .)
    WHILE           reduce using rule 135 (functions_stack -> stack_clear .)
    DO              reduce using rule 135 (functions_stack -> stack_clear .)
    VARIABLE        reduce using rule 135 (functions_stack -> stack_clear .)
    PUBLIC          reduce using rule 135 (functions_stack -> stack_clear .)
    PRIVATE         reduce using rule 135 (functions_stack -> stack_clear .)
    INTTYPE         reduce using rule 135 (functions_stack -> stack_clear .)
    STRINGTYPE      reduce using rule 135 (functions_stack -> stack_clear .)
    FLOATTYPE       reduce using rule 135 (functions_stack -> stack_clear .)
    BOOLTYPE        reduce using rule 135 (functions_stack -> stack_clear .)
    RKEY            reduce using rule 135 (functions_stack -> stack_clear .)
    $end            reduce using rule 135 (functions_stack -> stack_clear .)


state 56

    (136) functions_stack -> stack_peek .

    PRINT           reduce using rule 136 (functions_stack -> stack_peek .)
    STATIC          reduce using rule 136 (functions_stack -> stack_peek .)
    WRITE           reduce using rule 136 (functions_stack -> stack_peek .)
    IF              reduce using rule 136 (functions_stack -> stack_peek .)
    STACK           reduce using rule 136 (functions_stack -> stack_peek .)
    QUEUE           reduce using rule 136 (functions_stack -> stack_peek .)
    CONST           reduce using rule 136 (functions_stack -> stack_peek .)
    THREAD          reduce using rule 136 (functions_stack -> stack_peek .)
    WHILE           reduce using rule 136 (functions_stack -> stack_peek .)
    DO              reduce using rule 136 (functions_stack -> stack_peek .)
    VARIABLE        reduce using rule 136 (functions_stack -> stack_peek .)
    PUBLIC          reduce using rule 136 (functions_stack -> stack_peek .)
    PRIVATE         reduce using rule 136 (functions_stack -> stack_peek .)
    INTTYPE         reduce using rule 136 (functions_stack -> stack_peek .)
    STRINGTYPE      reduce using rule 136 (functions_stack -> stack_peek .)
    FLOATTYPE       reduce using rule 136 (functions_stack -> stack_peek .)
    BOOLTYPE        reduce using rule 136 (functions_stack -> stack_peek .)
    RKEY            reduce using rule 136 (functions_stack -> stack_peek .)
    $end            reduce using rule 136 (functions_stack -> stack_peek .)


state 57

    (137) functions_stack -> stack_isEmpty .

    PRINT           reduce using rule 137 (functions_stack -> stack_isEmpty .)
    STATIC          reduce using rule 137 (functions_stack -> stack_isEmpty .)
    WRITE           reduce using rule 137 (functions_stack -> stack_isEmpty .)
    IF              reduce using rule 137 (functions_stack -> stack_isEmpty .)
    STACK           reduce using rule 137 (functions_stack -> stack_isEmpty .)
    QUEUE           reduce using rule 137 (functions_stack -> stack_isEmpty .)
    CONST           reduce using rule 137 (functions_stack -> stack_isEmpty .)
    THREAD          reduce using rule 137 (functions_stack -> stack_isEmpty .)
    WHILE           reduce using rule 137 (functions_stack -> stack_isEmpty .)
    DO              reduce using rule 137 (functions_stack -> stack_isEmpty .)
    VARIABLE        reduce using rule 137 (functions_stack -> stack_isEmpty .)
    PUBLIC          reduce using rule 137 (functions_stack -> stack_isEmpty .)
    PRIVATE         reduce using rule 137 (functions_stack -> stack_isEmpty .)
    INTTYPE         reduce using rule 137 (functions_stack -> stack_isEmpty .)
    STRINGTYPE      reduce using rule 137 (functions_stack -> stack_isEmpty .)
    FLOATTYPE       reduce using rule 137 (functions_stack -> stack_isEmpty .)
    BOOLTYPE        reduce using rule 137 (functions_stack -> stack_isEmpty .)
    RKEY            reduce using rule 137 (functions_stack -> stack_isEmpty .)
    $end            reduce using rule 137 (functions_stack -> stack_isEmpty .)


state 58

    (143) queue_struct -> QUEUE . VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA

    VARIABLE        shift and go to state 87


state 59

    (144) functions_queue -> queue_enqueue .

    PRINT           reduce using rule 144 (functions_queue -> queue_enqueue .)
    STATIC          reduce using rule 144 (functions_queue -> queue_enqueue .)
    WRITE           reduce using rule 144 (functions_queue -> queue_enqueue .)
    IF              reduce using rule 144 (functions_queue -> queue_enqueue .)
    STACK           reduce using rule 144 (functions_queue -> queue_enqueue .)
    QUEUE           reduce using rule 144 (functions_queue -> queue_enqueue .)
    CONST           reduce using rule 144 (functions_queue -> queue_enqueue .)
    THREAD          reduce using rule 144 (functions_queue -> queue_enqueue .)
    WHILE           reduce using rule 144 (functions_queue -> queue_enqueue .)
    DO              reduce using rule 144 (functions_queue -> queue_enqueue .)
    VARIABLE        reduce using rule 144 (functions_queue -> queue_enqueue .)
    PUBLIC          reduce using rule 144 (functions_queue -> queue_enqueue .)
    PRIVATE         reduce using rule 144 (functions_queue -> queue_enqueue .)
    INTTYPE         reduce using rule 144 (functions_queue -> queue_enqueue .)
    STRINGTYPE      reduce using rule 144 (functions_queue -> queue_enqueue .)
    FLOATTYPE       reduce using rule 144 (functions_queue -> queue_enqueue .)
    BOOLTYPE        reduce using rule 144 (functions_queue -> queue_enqueue .)
    RKEY            reduce using rule 144 (functions_queue -> queue_enqueue .)
    $end            reduce using rule 144 (functions_queue -> queue_enqueue .)


state 60

    (145) functions_queue -> queue_dequeue .

    PRINT           reduce using rule 145 (functions_queue -> queue_dequeue .)
    STATIC          reduce using rule 145 (functions_queue -> queue_dequeue .)
    WRITE           reduce using rule 145 (functions_queue -> queue_dequeue .)
    IF              reduce using rule 145 (functions_queue -> queue_dequeue .)
    STACK           reduce using rule 145 (functions_queue -> queue_dequeue .)
    QUEUE           reduce using rule 145 (functions_queue -> queue_dequeue .)
    CONST           reduce using rule 145 (functions_queue -> queue_dequeue .)
    THREAD          reduce using rule 145 (functions_queue -> queue_dequeue .)
    WHILE           reduce using rule 145 (functions_queue -> queue_dequeue .)
    DO              reduce using rule 145 (functions_queue -> queue_dequeue .)
    VARIABLE        reduce using rule 145 (functions_queue -> queue_dequeue .)
    PUBLIC          reduce using rule 145 (functions_queue -> queue_dequeue .)
    PRIVATE         reduce using rule 145 (functions_queue -> queue_dequeue .)
    INTTYPE         reduce using rule 145 (functions_queue -> queue_dequeue .)
    STRINGTYPE      reduce using rule 145 (functions_queue -> queue_dequeue .)
    FLOATTYPE       reduce using rule 145 (functions_queue -> queue_dequeue .)
    BOOLTYPE        reduce using rule 145 (functions_queue -> queue_dequeue .)
    RKEY            reduce using rule 145 (functions_queue -> queue_dequeue .)
    $end            reduce using rule 145 (functions_queue -> queue_dequeue .)


state 61

    (146) functions_queue -> queue_clear .

    PRINT           reduce using rule 146 (functions_queue -> queue_clear .)
    STATIC          reduce using rule 146 (functions_queue -> queue_clear .)
    WRITE           reduce using rule 146 (functions_queue -> queue_clear .)
    IF              reduce using rule 146 (functions_queue -> queue_clear .)
    STACK           reduce using rule 146 (functions_queue -> queue_clear .)
    QUEUE           reduce using rule 146 (functions_queue -> queue_clear .)
    CONST           reduce using rule 146 (functions_queue -> queue_clear .)
    THREAD          reduce using rule 146 (functions_queue -> queue_clear .)
    WHILE           reduce using rule 146 (functions_queue -> queue_clear .)
    DO              reduce using rule 146 (functions_queue -> queue_clear .)
    VARIABLE        reduce using rule 146 (functions_queue -> queue_clear .)
    PUBLIC          reduce using rule 146 (functions_queue -> queue_clear .)
    PRIVATE         reduce using rule 146 (functions_queue -> queue_clear .)
    INTTYPE         reduce using rule 146 (functions_queue -> queue_clear .)
    STRINGTYPE      reduce using rule 146 (functions_queue -> queue_clear .)
    FLOATTYPE       reduce using rule 146 (functions_queue -> queue_clear .)
    BOOLTYPE        reduce using rule 146 (functions_queue -> queue_clear .)
    RKEY            reduce using rule 146 (functions_queue -> queue_clear .)
    $end            reduce using rule 146 (functions_queue -> queue_clear .)


state 62

    (147) functions_queue -> queue_isEmpty .

    PRINT           reduce using rule 147 (functions_queue -> queue_isEmpty .)
    STATIC          reduce using rule 147 (functions_queue -> queue_isEmpty .)
    WRITE           reduce using rule 147 (functions_queue -> queue_isEmpty .)
    IF              reduce using rule 147 (functions_queue -> queue_isEmpty .)
    STACK           reduce using rule 147 (functions_queue -> queue_isEmpty .)
    QUEUE           reduce using rule 147 (functions_queue -> queue_isEmpty .)
    CONST           reduce using rule 147 (functions_queue -> queue_isEmpty .)
    THREAD          reduce using rule 147 (functions_queue -> queue_isEmpty .)
    WHILE           reduce using rule 147 (functions_queue -> queue_isEmpty .)
    DO              reduce using rule 147 (functions_queue -> queue_isEmpty .)
    VARIABLE        reduce using rule 147 (functions_queue -> queue_isEmpty .)
    PUBLIC          reduce using rule 147 (functions_queue -> queue_isEmpty .)
    PRIVATE         reduce using rule 147 (functions_queue -> queue_isEmpty .)
    INTTYPE         reduce using rule 147 (functions_queue -> queue_isEmpty .)
    STRINGTYPE      reduce using rule 147 (functions_queue -> queue_isEmpty .)
    FLOATTYPE       reduce using rule 147 (functions_queue -> queue_isEmpty .)
    BOOLTYPE        reduce using rule 147 (functions_queue -> queue_isEmpty .)
    RKEY            reduce using rule 147 (functions_queue -> queue_isEmpty .)
    $end            reduce using rule 147 (functions_queue -> queue_isEmpty .)


state 63

    (148) functions_queue -> queue_peek .

    PRINT           reduce using rule 148 (functions_queue -> queue_peek .)
    STATIC          reduce using rule 148 (functions_queue -> queue_peek .)
    WRITE           reduce using rule 148 (functions_queue -> queue_peek .)
    IF              reduce using rule 148 (functions_queue -> queue_peek .)
    STACK           reduce using rule 148 (functions_queue -> queue_peek .)
    QUEUE           reduce using rule 148 (functions_queue -> queue_peek .)
    CONST           reduce using rule 148 (functions_queue -> queue_peek .)
    THREAD          reduce using rule 148 (functions_queue -> queue_peek .)
    WHILE           reduce using rule 148 (functions_queue -> queue_peek .)
    DO              reduce using rule 148 (functions_queue -> queue_peek .)
    VARIABLE        reduce using rule 148 (functions_queue -> queue_peek .)
    PUBLIC          reduce using rule 148 (functions_queue -> queue_peek .)
    PRIVATE         reduce using rule 148 (functions_queue -> queue_peek .)
    INTTYPE         reduce using rule 148 (functions_queue -> queue_peek .)
    STRINGTYPE      reduce using rule 148 (functions_queue -> queue_peek .)
    FLOATTYPE       reduce using rule 148 (functions_queue -> queue_peek .)
    BOOLTYPE        reduce using rule 148 (functions_queue -> queue_peek .)
    RKEY            reduce using rule 148 (functions_queue -> queue_peek .)
    $end            reduce using rule 148 (functions_queue -> queue_peek .)


state 64

    (67) constant_assignation -> access_modifiers . CONST assignation_type_value_multiple DOTANDCOMMA
    (69) variable_assignation -> access_modifiers . assignation_type_value_multiple DOTANDCOMMA
    (92) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (93) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (94) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (95) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (96) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    CONST           shift and go to state 88
    INTTYPE         shift and go to state 72
    STRINGTYPE      shift and go to state 30
    FLOATTYPE       shift and go to state 73
    BOOLTYPE        shift and go to state 74

    assignation_type_value_multiple shift and go to state 89

state 65

    (68) constant_assignation -> CONST . assignation_type_value_multiple DOTANDCOMMA
    (92) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (93) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (94) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (95) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (96) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    INTTYPE         shift and go to state 72
    STRINGTYPE      shift and go to state 30
    FLOATTYPE       shift and go to state 73
    BOOLTYPE        shift and go to state 74

    assignation_type_value_multiple shift and go to state 90

state 66

    (70) variable_assignation -> assignation_type_value_multiple . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 91


state 67

    (108) declaration_thread -> THREAD . thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (109) declaration_thread -> THREAD . thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (121) thread_identificator -> . VARIABLE

    VARIABLE        shift and go to state 93

    thread_identificator           shift and go to state 92

state 68

    (130) normal_while -> WHILE . LPARENT boolean_operation RPARENT LKEY all_block_code RKEY

    LPARENT         shift and go to state 94


state 69

    (131) do_while -> DO . LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT

    LKEY            shift and go to state 95


state 70

    (71) access_modifiers -> PUBLIC .

    CONST           reduce using rule 71 (access_modifiers -> PUBLIC .)
    INTTYPE         reduce using rule 71 (access_modifiers -> PUBLIC .)
    STRINGTYPE      reduce using rule 71 (access_modifiers -> PUBLIC .)
    FLOATTYPE       reduce using rule 71 (access_modifiers -> PUBLIC .)
    BOOLTYPE        reduce using rule 71 (access_modifiers -> PUBLIC .)


state 71

    (72) access_modifiers -> PRIVATE .

    CONST           reduce using rule 72 (access_modifiers -> PRIVATE .)
    INTTYPE         reduce using rule 72 (access_modifiers -> PRIVATE .)
    STRINGTYPE      reduce using rule 72 (access_modifiers -> PRIVATE .)
    FLOATTYPE       reduce using rule 72 (access_modifiers -> PRIVATE .)
    BOOLTYPE        reduce using rule 72 (access_modifiers -> PRIVATE .)


state 72

    (92) assignation_type_value_multiple -> INTTYPE . assignation_int_multiple
    (97) assignation_int_multiple -> . assignation_int
    (98) assignation_int_multiple -> . assignation_int COMMA assignation_int_multiple
    (78) assignation_int -> . VARIABLE ASSIGNATION INTEGER
    (79) assignation_int -> . VARIABLE ASSIGNATION VARIABLE
    (80) assignation_int -> . VARIABLE ASSIGNATION arithmetic_operation

    VARIABLE        shift and go to state 98

    assignation_int_multiple       shift and go to state 96
    assignation_int                shift and go to state 97

state 73

    (94) assignation_type_value_multiple -> FLOATTYPE . assignation_float_multiple
    (101) assignation_float_multiple -> . assignation_float
    (102) assignation_float_multiple -> . assignation_float COMMA assignation_float_multiple
    (83) assignation_float -> . VARIABLE ASSIGNATION FLOAT_NUMBER
    (84) assignation_float -> . VARIABLE ASSIGNATION VARIABLE
    (85) assignation_float -> . VARIABLE ASSIGNATION arithmetic_operation

    VARIABLE        shift and go to state 101

    assignation_float_multiple     shift and go to state 99
    assignation_float              shift and go to state 100

state 74

    (95) assignation_type_value_multiple -> BOOLTYPE . assignation_true_multiple
    (96) assignation_type_value_multiple -> BOOLTYPE . assignation_false_multiple
    (103) assignation_true_multiple -> . assignation_true
    (104) assignation_true_multiple -> . assignation_true COMMA assignation_true_multiple
    (105) assignation_false_multiple -> . assignation_false
    (106) assignation_false_multiple -> . assignation_false COMMA assignation_false_multiple
    (86) assignation_true -> . VARIABLE ASSIGNATION BOOLTRUE
    (87) assignation_true -> . VARIABLE ASSIGNATION VARIABLE
    (88) assignation_true -> . VARIABLE ASSIGNATION boolean_operation
    (89) assignation_false -> . VARIABLE ASSIGNATION BOOLFALSE
    (90) assignation_false -> . VARIABLE ASSIGNATION VARIABLE
    (91) assignation_false -> . VARIABLE ASSIGNATION boolean_operation

    VARIABLE        shift and go to state 106

    assignation_true_multiple      shift and go to state 102
    assignation_false_multiple     shift and go to state 103
    assignation_true               shift and go to state 104
    assignation_false              shift and go to state 105

state 75

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE . RPARENT LKEY all_block_code RKEY
    (5) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE . RPARENT LKEY all_block_code RKEY all_block_code

    RPARENT         shift and go to state 107


state 76

    (112) concurrent_method -> STATIC VOID . thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (121) thread_identificator -> . VARIABLE

    VARIABLE        shift and go to state 93

    thread_identificator           shift and go to state 108

state 77

    (93) assignation_type_value_multiple -> STRINGTYPE assignation_string_multiple .

    DOTANDCOMMA     reduce using rule 93 (assignation_type_value_multiple -> STRINGTYPE assignation_string_multiple .)


state 78

    (99) assignation_string_multiple -> assignation_string .
    (100) assignation_string_multiple -> assignation_string . COMMA assignation_string_multiple

    DOTANDCOMMA     reduce using rule 99 (assignation_string_multiple -> assignation_string .)
    COMMA           shift and go to state 109


state 79

    (81) assignation_string -> VARIABLE . ASSIGNATION STRING
    (82) assignation_string -> VARIABLE . ASSIGNATION VARIABLE

    ASSIGNATION     shift and go to state 110


state 80

    (138) stack_push -> VARIABLE DOT . PUSH LPARENT value RPARENT DOTANDCOMMA
    (139) stack_pop -> VARIABLE DOT . POP LPARENT RPARENT DOTANDCOMMA
    (140) stack_clear -> VARIABLE DOT . CLEAR LPARENT RPARENT DOTANDCOMMA
    (141) stack_peek -> VARIABLE DOT . PEEK LPARENT RPARENT DOTANDCOMMA
    (142) stack_isEmpty -> VARIABLE DOT . ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (149) queue_enqueue -> VARIABLE DOT . ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (150) queue_dequeue -> VARIABLE DOT . DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (151) queue_clear -> VARIABLE DOT . CLEAR LPARENT RPARENT DOTANDCOMMA
    (153) queue_isEmpty -> VARIABLE DOT . ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (152) queue_peek -> VARIABLE DOT . PEEK LPARENT RPARENT DOTANDCOMMA

    PUSH            shift and go to state 111
    POP             shift and go to state 112
    CLEAR           shift and go to state 113
    PEEK            shift and go to state 114
    ISEMPTY         shift and go to state 115
    ENQUEUE         shift and go to state 116
    DEQUEUE         shift and go to state 117


state 81

    (3) block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY . all_block_code
    (16) all_block_code -> . block_code
    (17) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . thread_main
    (9) block_code -> . concurrent_method
    (10) block_code -> . normal_if
    (11) block_code -> . block_while
    (12) block_code -> . stack_struct
    (13) block_code -> . functions_stack
    (14) block_code -> . queue_struct
    (15) block_code -> . functions_queue
    (65) def_const_or_var -> . constant_assignation
    (66) def_const_or_var -> . variable_assignation
    (35) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (36) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (107) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (112) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (113) concurrent_method -> . WRITE
    (124) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (125) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (128) block_while -> . normal_while
    (129) block_while -> . do_while
    (132) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (133) functions_stack -> . stack_push
    (134) functions_stack -> . stack_pop
    (135) functions_stack -> . stack_clear
    (136) functions_stack -> . stack_peek
    (137) functions_stack -> . stack_isEmpty
    (143) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (144) functions_queue -> . queue_enqueue
    (145) functions_queue -> . queue_dequeue
    (146) functions_queue -> . queue_clear
    (147) functions_queue -> . queue_isEmpty
    (148) functions_queue -> . queue_peek
    (67) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (68) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (69) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (70) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (108) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (109) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (130) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (131) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (138) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (139) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (140) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (141) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (142) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (149) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (150) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (151) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (153) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (152) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (71) access_modifiers -> . PUBLIC
    (72) access_modifiers -> . PRIVATE
    (92) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (93) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (94) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (95) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (96) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 46
    STATIC          shift and go to state 29
    WRITE           shift and go to state 48
    IF              shift and go to state 49
    STACK           shift and go to state 52
    QUEUE           shift and go to state 58
    CONST           shift and go to state 65
    THREAD          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    VARIABLE        shift and go to state 31
    PUBLIC          shift and go to state 70
    PRIVATE         shift and go to state 71
    INTTYPE         shift and go to state 72
    STRINGTYPE      shift and go to state 30
    FLOATTYPE       shift and go to state 73
    BOOLTYPE        shift and go to state 74

    all_block_code                 shift and go to state 118
    block_code                     shift and go to state 33
    def_const_or_var               shift and go to state 34
    print_data                     shift and go to state 35
    thread_main                    shift and go to state 36
    concurrent_method              shift and go to state 37
    normal_if                      shift and go to state 38
    block_while                    shift and go to state 39
    stack_struct                   shift and go to state 40
    functions_stack                shift and go to state 41
    queue_struct                   shift and go to state 42
    functions_queue                shift and go to state 43
    constant_assignation           shift and go to state 44
    variable_assignation           shift and go to state 45
    declaration_thread             shift and go to state 47
    normal_while                   shift and go to state 50
    do_while                       shift and go to state 51
    stack_push                     shift and go to state 53
    stack_pop                      shift and go to state 54
    stack_clear                    shift and go to state 55
    stack_peek                     shift and go to state 56
    stack_isEmpty                  shift and go to state 57
    queue_enqueue                  shift and go to state 59
    queue_dequeue                  shift and go to state 60
    queue_clear                    shift and go to state 61
    queue_isEmpty                  shift and go to state 62
    queue_peek                     shift and go to state 63
    access_modifiers               shift and go to state 64
    assignation_type_value_multiple shift and go to state 66

state 82

    (17) all_block_code -> block_code all_block_code .

    RKEY            reduce using rule 17 (all_block_code -> block_code all_block_code .)
    $end            reduce using rule 17 (all_block_code -> block_code all_block_code .)


state 83

    (35) print_data -> PRINT LPARENT . STRING RPARENT DOTANDCOMMA
    (36) print_data -> PRINT LPARENT . VARIABLE RPARENT DOTANDCOMMA

    STRING          shift and go to state 119
    VARIABLE        shift and go to state 120


state 84

    (107) thread_main -> declaration_thread declaration_thread . thread_init thread_init thread_wait thread_wait
    (110) thread_init -> . thread_identificator DOT START LPARENT RPARENT DOTANDCOMMA
    (121) thread_identificator -> . VARIABLE

    VARIABLE        shift and go to state 93

    thread_init                    shift and go to state 121
    thread_identificator           shift and go to state 122

state 85

    (124) normal_if -> IF LPARENT . boolean_operation RPARENT LKEY block_if RKEY other_if
    (125) normal_if -> IF LPARENT . boolean_operation RPARENT LKEY block_if RKEY
    (60) boolean_operation -> . value_boolean
    (61) boolean_operation -> . LOGICNOT value_boolean
    (62) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (27) value_boolean -> . BOOLTRUE
    (28) value_boolean -> . BOOLFALSE
    (29) value_boolean -> . VARIABLE
    (30) value_boolean -> . comparison_operation
    (52) comparison_operation -> . value_numeric
    (53) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (31) value_numeric -> . INTEGER
    (32) value_numeric -> . FLOAT_NUMBER
    (33) value_numeric -> . DECIMAL_NUMBER
    (34) value_numeric -> . VARIABLE

    LOGICNOT        shift and go to state 125
    BOOLTRUE        shift and go to state 126
    BOOLFALSE       shift and go to state 127
    VARIABLE        shift and go to state 128
    INTEGER         shift and go to state 131
    FLOAT_NUMBER    shift and go to state 132
    DECIMAL_NUMBER  shift and go to state 133

    boolean_operation              shift and go to state 123
    value_boolean                  shift and go to state 124
    comparison_operation           shift and go to state 129
    value_numeric                  shift and go to state 130

state 86

    (132) stack_struct -> STACK VARIABLE . ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA

    ASSIGNATION     shift and go to state 134


state 87

    (143) queue_struct -> QUEUE VARIABLE . ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA

    ASSIGNATION     shift and go to state 135


state 88

    (67) constant_assignation -> access_modifiers CONST . assignation_type_value_multiple DOTANDCOMMA
    (92) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (93) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (94) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (95) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (96) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    INTTYPE         shift and go to state 72
    STRINGTYPE      shift and go to state 30
    FLOATTYPE       shift and go to state 73
    BOOLTYPE        shift and go to state 74

    assignation_type_value_multiple shift and go to state 136

state 89

    (69) variable_assignation -> access_modifiers assignation_type_value_multiple . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 137


state 90

    (68) constant_assignation -> CONST assignation_type_value_multiple . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 138


state 91

    (70) variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .

    PRINT           reduce using rule 70 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    STATIC          reduce using rule 70 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    WRITE           reduce using rule 70 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    IF              reduce using rule 70 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    STACK           reduce using rule 70 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    QUEUE           reduce using rule 70 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    CONST           reduce using rule 70 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    THREAD          reduce using rule 70 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    WHILE           reduce using rule 70 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    DO              reduce using rule 70 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    VARIABLE        reduce using rule 70 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    PUBLIC          reduce using rule 70 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    PRIVATE         reduce using rule 70 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    INTTYPE         reduce using rule 70 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 70 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 70 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 70 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    RKEY            reduce using rule 70 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    $end            reduce using rule 70 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)


state 92

    (108) declaration_thread -> THREAD thread_identificator . ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (109) declaration_thread -> THREAD thread_identificator . ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA

    ASSIGNATION     shift and go to state 139


state 93

    (121) thread_identificator -> VARIABLE .

    ASSIGNATION     reduce using rule 121 (thread_identificator -> VARIABLE .)
    LPARENT         reduce using rule 121 (thread_identificator -> VARIABLE .)
    DOT             reduce using rule 121 (thread_identificator -> VARIABLE .)
    RPARENT         reduce using rule 121 (thread_identificator -> VARIABLE .)


state 94

    (130) normal_while -> WHILE LPARENT . boolean_operation RPARENT LKEY all_block_code RKEY
    (60) boolean_operation -> . value_boolean
    (61) boolean_operation -> . LOGICNOT value_boolean
    (62) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (27) value_boolean -> . BOOLTRUE
    (28) value_boolean -> . BOOLFALSE
    (29) value_boolean -> . VARIABLE
    (30) value_boolean -> . comparison_operation
    (52) comparison_operation -> . value_numeric
    (53) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (31) value_numeric -> . INTEGER
    (32) value_numeric -> . FLOAT_NUMBER
    (33) value_numeric -> . DECIMAL_NUMBER
    (34) value_numeric -> . VARIABLE

    LOGICNOT        shift and go to state 125
    BOOLTRUE        shift and go to state 126
    BOOLFALSE       shift and go to state 127
    VARIABLE        shift and go to state 128
    INTEGER         shift and go to state 131
    FLOAT_NUMBER    shift and go to state 132
    DECIMAL_NUMBER  shift and go to state 133

    boolean_operation              shift and go to state 140
    value_boolean                  shift and go to state 124
    comparison_operation           shift and go to state 129
    value_numeric                  shift and go to state 130

state 95

    (131) do_while -> DO LKEY . all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (16) all_block_code -> . block_code
    (17) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . thread_main
    (9) block_code -> . concurrent_method
    (10) block_code -> . normal_if
    (11) block_code -> . block_while
    (12) block_code -> . stack_struct
    (13) block_code -> . functions_stack
    (14) block_code -> . queue_struct
    (15) block_code -> . functions_queue
    (65) def_const_or_var -> . constant_assignation
    (66) def_const_or_var -> . variable_assignation
    (35) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (36) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (107) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (112) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (113) concurrent_method -> . WRITE
    (124) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (125) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (128) block_while -> . normal_while
    (129) block_while -> . do_while
    (132) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (133) functions_stack -> . stack_push
    (134) functions_stack -> . stack_pop
    (135) functions_stack -> . stack_clear
    (136) functions_stack -> . stack_peek
    (137) functions_stack -> . stack_isEmpty
    (143) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (144) functions_queue -> . queue_enqueue
    (145) functions_queue -> . queue_dequeue
    (146) functions_queue -> . queue_clear
    (147) functions_queue -> . queue_isEmpty
    (148) functions_queue -> . queue_peek
    (67) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (68) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (69) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (70) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (108) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (109) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (130) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (131) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (138) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (139) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (140) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (141) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (142) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (149) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (150) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (151) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (153) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (152) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (71) access_modifiers -> . PUBLIC
    (72) access_modifiers -> . PRIVATE
    (92) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (93) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (94) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (95) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (96) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 46
    STATIC          shift and go to state 29
    WRITE           shift and go to state 48
    IF              shift and go to state 49
    STACK           shift and go to state 52
    QUEUE           shift and go to state 58
    CONST           shift and go to state 65
    THREAD          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    VARIABLE        shift and go to state 31
    PUBLIC          shift and go to state 70
    PRIVATE         shift and go to state 71
    INTTYPE         shift and go to state 72
    STRINGTYPE      shift and go to state 30
    FLOATTYPE       shift and go to state 73
    BOOLTYPE        shift and go to state 74

    all_block_code                 shift and go to state 141
    block_code                     shift and go to state 33
    def_const_or_var               shift and go to state 34
    print_data                     shift and go to state 35
    thread_main                    shift and go to state 36
    concurrent_method              shift and go to state 37
    normal_if                      shift and go to state 38
    block_while                    shift and go to state 39
    stack_struct                   shift and go to state 40
    functions_stack                shift and go to state 41
    queue_struct                   shift and go to state 42
    functions_queue                shift and go to state 43
    constant_assignation           shift and go to state 44
    variable_assignation           shift and go to state 45
    declaration_thread             shift and go to state 47
    normal_while                   shift and go to state 50
    do_while                       shift and go to state 51
    stack_push                     shift and go to state 53
    stack_pop                      shift and go to state 54
    stack_clear                    shift and go to state 55
    stack_peek                     shift and go to state 56
    stack_isEmpty                  shift and go to state 57
    queue_enqueue                  shift and go to state 59
    queue_dequeue                  shift and go to state 60
    queue_clear                    shift and go to state 61
    queue_isEmpty                  shift and go to state 62
    queue_peek                     shift and go to state 63
    access_modifiers               shift and go to state 64
    assignation_type_value_multiple shift and go to state 66

state 96

    (92) assignation_type_value_multiple -> INTTYPE assignation_int_multiple .

    DOTANDCOMMA     reduce using rule 92 (assignation_type_value_multiple -> INTTYPE assignation_int_multiple .)


state 97

    (97) assignation_int_multiple -> assignation_int .
    (98) assignation_int_multiple -> assignation_int . COMMA assignation_int_multiple

    DOTANDCOMMA     reduce using rule 97 (assignation_int_multiple -> assignation_int .)
    COMMA           shift and go to state 142


state 98

    (78) assignation_int -> VARIABLE . ASSIGNATION INTEGER
    (79) assignation_int -> VARIABLE . ASSIGNATION VARIABLE
    (80) assignation_int -> VARIABLE . ASSIGNATION arithmetic_operation

    ASSIGNATION     shift and go to state 143


state 99

    (94) assignation_type_value_multiple -> FLOATTYPE assignation_float_multiple .

    DOTANDCOMMA     reduce using rule 94 (assignation_type_value_multiple -> FLOATTYPE assignation_float_multiple .)


state 100

    (101) assignation_float_multiple -> assignation_float .
    (102) assignation_float_multiple -> assignation_float . COMMA assignation_float_multiple

    DOTANDCOMMA     reduce using rule 101 (assignation_float_multiple -> assignation_float .)
    COMMA           shift and go to state 144


state 101

    (83) assignation_float -> VARIABLE . ASSIGNATION FLOAT_NUMBER
    (84) assignation_float -> VARIABLE . ASSIGNATION VARIABLE
    (85) assignation_float -> VARIABLE . ASSIGNATION arithmetic_operation

    ASSIGNATION     shift and go to state 145


state 102

    (95) assignation_type_value_multiple -> BOOLTYPE assignation_true_multiple .

    DOTANDCOMMA     reduce using rule 95 (assignation_type_value_multiple -> BOOLTYPE assignation_true_multiple .)


state 103

    (96) assignation_type_value_multiple -> BOOLTYPE assignation_false_multiple .

    DOTANDCOMMA     reduce using rule 96 (assignation_type_value_multiple -> BOOLTYPE assignation_false_multiple .)


state 104

    (103) assignation_true_multiple -> assignation_true .
    (104) assignation_true_multiple -> assignation_true . COMMA assignation_true_multiple

    DOTANDCOMMA     reduce using rule 103 (assignation_true_multiple -> assignation_true .)
    COMMA           shift and go to state 146


state 105

    (105) assignation_false_multiple -> assignation_false .
    (106) assignation_false_multiple -> assignation_false . COMMA assignation_false_multiple

    DOTANDCOMMA     reduce using rule 105 (assignation_false_multiple -> assignation_false .)
    COMMA           shift and go to state 147


state 106

    (86) assignation_true -> VARIABLE . ASSIGNATION BOOLTRUE
    (87) assignation_true -> VARIABLE . ASSIGNATION VARIABLE
    (88) assignation_true -> VARIABLE . ASSIGNATION boolean_operation
    (89) assignation_false -> VARIABLE . ASSIGNATION BOOLFALSE
    (90) assignation_false -> VARIABLE . ASSIGNATION VARIABLE
    (91) assignation_false -> VARIABLE . ASSIGNATION boolean_operation

    ASSIGNATION     shift and go to state 148


state 107

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT . LKEY all_block_code RKEY
    (5) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT . LKEY all_block_code RKEY all_block_code

    LKEY            shift and go to state 149


state 108

    (112) concurrent_method -> STATIC VOID thread_identificator . LPARENT RPARENT LKEY thread_logic RKEY

    LPARENT         shift and go to state 150


state 109

    (100) assignation_string_multiple -> assignation_string COMMA . assignation_string_multiple
    (99) assignation_string_multiple -> . assignation_string
    (100) assignation_string_multiple -> . assignation_string COMMA assignation_string_multiple
    (81) assignation_string -> . VARIABLE ASSIGNATION STRING
    (82) assignation_string -> . VARIABLE ASSIGNATION VARIABLE

    VARIABLE        shift and go to state 79

    assignation_string             shift and go to state 78
    assignation_string_multiple    shift and go to state 151

state 110

    (81) assignation_string -> VARIABLE ASSIGNATION . STRING
    (82) assignation_string -> VARIABLE ASSIGNATION . VARIABLE

    STRING          shift and go to state 153
    VARIABLE        shift and go to state 152


state 111

    (138) stack_push -> VARIABLE DOT PUSH . LPARENT value RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 154


state 112

    (139) stack_pop -> VARIABLE DOT POP . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 155


state 113

    (140) stack_clear -> VARIABLE DOT CLEAR . LPARENT RPARENT DOTANDCOMMA
    (151) queue_clear -> VARIABLE DOT CLEAR . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 156


state 114

    (141) stack_peek -> VARIABLE DOT PEEK . LPARENT RPARENT DOTANDCOMMA
    (152) queue_peek -> VARIABLE DOT PEEK . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 157


state 115

    (142) stack_isEmpty -> VARIABLE DOT ISEMPTY . LPARENT RPARENT DOTANDCOMMA
    (153) queue_isEmpty -> VARIABLE DOT ISEMPTY . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 158


state 116

    (149) queue_enqueue -> VARIABLE DOT ENQUEUE . LPARENT value RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 159


state 117

    (150) queue_dequeue -> VARIABLE DOT DEQUEUE . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 160


state 118

    (3) block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code .

    $end            reduce using rule 3 (block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code .)


state 119

    (35) print_data -> PRINT LPARENT STRING . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 161


state 120

    (36) print_data -> PRINT LPARENT VARIABLE . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 162


state 121

    (107) thread_main -> declaration_thread declaration_thread thread_init . thread_init thread_wait thread_wait
    (110) thread_init -> . thread_identificator DOT START LPARENT RPARENT DOTANDCOMMA
    (121) thread_identificator -> . VARIABLE

    VARIABLE        shift and go to state 93

    thread_init                    shift and go to state 163
    thread_identificator           shift and go to state 122

state 122

    (110) thread_init -> thread_identificator . DOT START LPARENT RPARENT DOTANDCOMMA

    DOT             shift and go to state 164


state 123

    (124) normal_if -> IF LPARENT boolean_operation . RPARENT LKEY block_if RKEY other_if
    (125) normal_if -> IF LPARENT boolean_operation . RPARENT LKEY block_if RKEY

    RPARENT         shift and go to state 165


state 124

    (60) boolean_operation -> value_boolean .
    (62) boolean_operation -> value_boolean . boolean_operator boolean_operation
    (63) boolean_operator -> . LOGICAND
    (64) boolean_operator -> . LOGICOR

    RPARENT         reduce using rule 60 (boolean_operation -> value_boolean .)
    COMMA           reduce using rule 60 (boolean_operation -> value_boolean .)
    DOTANDCOMMA     reduce using rule 60 (boolean_operation -> value_boolean .)
    LOGICAND        shift and go to state 167
    LOGICOR         shift and go to state 168

    boolean_operator               shift and go to state 166

state 125

    (61) boolean_operation -> LOGICNOT . value_boolean
    (27) value_boolean -> . BOOLTRUE
    (28) value_boolean -> . BOOLFALSE
    (29) value_boolean -> . VARIABLE
    (30) value_boolean -> . comparison_operation
    (52) comparison_operation -> . value_numeric
    (53) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (31) value_numeric -> . INTEGER
    (32) value_numeric -> . FLOAT_NUMBER
    (33) value_numeric -> . DECIMAL_NUMBER
    (34) value_numeric -> . VARIABLE

    BOOLTRUE        shift and go to state 126
    BOOLFALSE       shift and go to state 127
    VARIABLE        shift and go to state 128
    INTEGER         shift and go to state 131
    FLOAT_NUMBER    shift and go to state 132
    DECIMAL_NUMBER  shift and go to state 133

    value_boolean                  shift and go to state 169
    comparison_operation           shift and go to state 129
    value_numeric                  shift and go to state 130

state 126

    (27) value_boolean -> BOOLTRUE .

    LOGICAND        reduce using rule 27 (value_boolean -> BOOLTRUE .)
    LOGICOR         reduce using rule 27 (value_boolean -> BOOLTRUE .)
    RPARENT         reduce using rule 27 (value_boolean -> BOOLTRUE .)
    COMMA           reduce using rule 27 (value_boolean -> BOOLTRUE .)
    DOTANDCOMMA     reduce using rule 27 (value_boolean -> BOOLTRUE .)


state 127

    (28) value_boolean -> BOOLFALSE .

    LOGICAND        reduce using rule 28 (value_boolean -> BOOLFALSE .)
    LOGICOR         reduce using rule 28 (value_boolean -> BOOLFALSE .)
    RPARENT         reduce using rule 28 (value_boolean -> BOOLFALSE .)
    COMMA           reduce using rule 28 (value_boolean -> BOOLFALSE .)
    DOTANDCOMMA     reduce using rule 28 (value_boolean -> BOOLFALSE .)


state 128

    (29) value_boolean -> VARIABLE .
    (34) value_numeric -> VARIABLE .

  ! reduce/reduce conflict for LOGICAND resolved using rule 29 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for LOGICOR resolved using rule 29 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for RPARENT resolved using rule 29 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 29 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 29 (value_boolean -> VARIABLE .)
    LOGICAND        reduce using rule 29 (value_boolean -> VARIABLE .)
    LOGICOR         reduce using rule 29 (value_boolean -> VARIABLE .)
    RPARENT         reduce using rule 29 (value_boolean -> VARIABLE .)
    COMMA           reduce using rule 29 (value_boolean -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 29 (value_boolean -> VARIABLE .)
    GREATER_THAN    reduce using rule 34 (value_numeric -> VARIABLE .)
    SMALLER_THAN    reduce using rule 34 (value_numeric -> VARIABLE .)
    EQUAL_COMPARATION reduce using rule 34 (value_numeric -> VARIABLE .)
    INEQUALITY      reduce using rule 34 (value_numeric -> VARIABLE .)
    GREATER_THAN_OR_EQUAL reduce using rule 34 (value_numeric -> VARIABLE .)
    SMALLER_THAN_OR_EQUAL reduce using rule 34 (value_numeric -> VARIABLE .)

  ! LOGICAND        [ reduce using rule 34 (value_numeric -> VARIABLE .) ]
  ! LOGICOR         [ reduce using rule 34 (value_numeric -> VARIABLE .) ]
  ! RPARENT         [ reduce using rule 34 (value_numeric -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 34 (value_numeric -> VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 34 (value_numeric -> VARIABLE .) ]


state 129

    (30) value_boolean -> comparison_operation .

    LOGICAND        reduce using rule 30 (value_boolean -> comparison_operation .)
    LOGICOR         reduce using rule 30 (value_boolean -> comparison_operation .)
    RPARENT         reduce using rule 30 (value_boolean -> comparison_operation .)
    COMMA           reduce using rule 30 (value_boolean -> comparison_operation .)
    DOTANDCOMMA     reduce using rule 30 (value_boolean -> comparison_operation .)


state 130

    (52) comparison_operation -> value_numeric .
    (53) comparison_operation -> value_numeric . comparison_operator comparison_operation
    (54) comparison_operator -> . GREATER_THAN
    (55) comparison_operator -> . SMALLER_THAN
    (56) comparison_operator -> . EQUAL_COMPARATION
    (57) comparison_operator -> . INEQUALITY
    (58) comparison_operator -> . GREATER_THAN_OR_EQUAL
    (59) comparison_operator -> . SMALLER_THAN_OR_EQUAL

    LOGICAND        reduce using rule 52 (comparison_operation -> value_numeric .)
    LOGICOR         reduce using rule 52 (comparison_operation -> value_numeric .)
    RPARENT         reduce using rule 52 (comparison_operation -> value_numeric .)
    COMMA           reduce using rule 52 (comparison_operation -> value_numeric .)
    DOTANDCOMMA     reduce using rule 52 (comparison_operation -> value_numeric .)
    GREATER_THAN    shift and go to state 171
    SMALLER_THAN    shift and go to state 172
    EQUAL_COMPARATION shift and go to state 173
    INEQUALITY      shift and go to state 174
    GREATER_THAN_OR_EQUAL shift and go to state 175
    SMALLER_THAN_OR_EQUAL shift and go to state 176

    comparison_operator            shift and go to state 170

state 131

    (31) value_numeric -> INTEGER .

    GREATER_THAN    reduce using rule 31 (value_numeric -> INTEGER .)
    SMALLER_THAN    reduce using rule 31 (value_numeric -> INTEGER .)
    EQUAL_COMPARATION reduce using rule 31 (value_numeric -> INTEGER .)
    INEQUALITY      reduce using rule 31 (value_numeric -> INTEGER .)
    GREATER_THAN_OR_EQUAL reduce using rule 31 (value_numeric -> INTEGER .)
    SMALLER_THAN_OR_EQUAL reduce using rule 31 (value_numeric -> INTEGER .)
    LOGICAND        reduce using rule 31 (value_numeric -> INTEGER .)
    LOGICOR         reduce using rule 31 (value_numeric -> INTEGER .)
    RPARENT         reduce using rule 31 (value_numeric -> INTEGER .)
    COMMA           reduce using rule 31 (value_numeric -> INTEGER .)
    DOTANDCOMMA     reduce using rule 31 (value_numeric -> INTEGER .)
    PLUS            reduce using rule 31 (value_numeric -> INTEGER .)
    MINUS           reduce using rule 31 (value_numeric -> INTEGER .)
    TIMES           reduce using rule 31 (value_numeric -> INTEGER .)
    DIVIDE          reduce using rule 31 (value_numeric -> INTEGER .)
    PERCENT         reduce using rule 31 (value_numeric -> INTEGER .)


state 132

    (32) value_numeric -> FLOAT_NUMBER .

    GREATER_THAN    reduce using rule 32 (value_numeric -> FLOAT_NUMBER .)
    SMALLER_THAN    reduce using rule 32 (value_numeric -> FLOAT_NUMBER .)
    EQUAL_COMPARATION reduce using rule 32 (value_numeric -> FLOAT_NUMBER .)
    INEQUALITY      reduce using rule 32 (value_numeric -> FLOAT_NUMBER .)
    GREATER_THAN_OR_EQUAL reduce using rule 32 (value_numeric -> FLOAT_NUMBER .)
    SMALLER_THAN_OR_EQUAL reduce using rule 32 (value_numeric -> FLOAT_NUMBER .)
    LOGICAND        reduce using rule 32 (value_numeric -> FLOAT_NUMBER .)
    LOGICOR         reduce using rule 32 (value_numeric -> FLOAT_NUMBER .)
    RPARENT         reduce using rule 32 (value_numeric -> FLOAT_NUMBER .)
    COMMA           reduce using rule 32 (value_numeric -> FLOAT_NUMBER .)
    DOTANDCOMMA     reduce using rule 32 (value_numeric -> FLOAT_NUMBER .)
    PLUS            reduce using rule 32 (value_numeric -> FLOAT_NUMBER .)
    MINUS           reduce using rule 32 (value_numeric -> FLOAT_NUMBER .)
    TIMES           reduce using rule 32 (value_numeric -> FLOAT_NUMBER .)
    DIVIDE          reduce using rule 32 (value_numeric -> FLOAT_NUMBER .)
    PERCENT         reduce using rule 32 (value_numeric -> FLOAT_NUMBER .)


state 133

    (33) value_numeric -> DECIMAL_NUMBER .

    GREATER_THAN    reduce using rule 33 (value_numeric -> DECIMAL_NUMBER .)
    SMALLER_THAN    reduce using rule 33 (value_numeric -> DECIMAL_NUMBER .)
    EQUAL_COMPARATION reduce using rule 33 (value_numeric -> DECIMAL_NUMBER .)
    INEQUALITY      reduce using rule 33 (value_numeric -> DECIMAL_NUMBER .)
    GREATER_THAN_OR_EQUAL reduce using rule 33 (value_numeric -> DECIMAL_NUMBER .)
    SMALLER_THAN_OR_EQUAL reduce using rule 33 (value_numeric -> DECIMAL_NUMBER .)
    LOGICAND        reduce using rule 33 (value_numeric -> DECIMAL_NUMBER .)
    LOGICOR         reduce using rule 33 (value_numeric -> DECIMAL_NUMBER .)
    RPARENT         reduce using rule 33 (value_numeric -> DECIMAL_NUMBER .)
    COMMA           reduce using rule 33 (value_numeric -> DECIMAL_NUMBER .)
    DOTANDCOMMA     reduce using rule 33 (value_numeric -> DECIMAL_NUMBER .)
    PLUS            reduce using rule 33 (value_numeric -> DECIMAL_NUMBER .)
    MINUS           reduce using rule 33 (value_numeric -> DECIMAL_NUMBER .)
    TIMES           reduce using rule 33 (value_numeric -> DECIMAL_NUMBER .)
    DIVIDE          reduce using rule 33 (value_numeric -> DECIMAL_NUMBER .)
    PERCENT         reduce using rule 33 (value_numeric -> DECIMAL_NUMBER .)


state 134

    (132) stack_struct -> STACK VARIABLE ASSIGNATION . NEW STACK LPARENT RPARENT DOTANDCOMMA

    NEW             shift and go to state 177


state 135

    (143) queue_struct -> QUEUE VARIABLE ASSIGNATION . NEW QUEUE LPARENT RPARENT DOTANDCOMMA

    NEW             shift and go to state 178


state 136

    (67) constant_assignation -> access_modifiers CONST assignation_type_value_multiple . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 179


state 137

    (69) variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .

    PRINT           reduce using rule 69 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    STATIC          reduce using rule 69 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    WRITE           reduce using rule 69 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    IF              reduce using rule 69 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    STACK           reduce using rule 69 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    QUEUE           reduce using rule 69 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    CONST           reduce using rule 69 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    THREAD          reduce using rule 69 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    WHILE           reduce using rule 69 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    DO              reduce using rule 69 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    VARIABLE        reduce using rule 69 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    PUBLIC          reduce using rule 69 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    PRIVATE         reduce using rule 69 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    INTTYPE         reduce using rule 69 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 69 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 69 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 69 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    RKEY            reduce using rule 69 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    $end            reduce using rule 69 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)


state 138

    (68) constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .

    PRINT           reduce using rule 68 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    STATIC          reduce using rule 68 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    WRITE           reduce using rule 68 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    IF              reduce using rule 68 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    STACK           reduce using rule 68 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    QUEUE           reduce using rule 68 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    CONST           reduce using rule 68 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    THREAD          reduce using rule 68 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    WHILE           reduce using rule 68 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    DO              reduce using rule 68 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    VARIABLE        reduce using rule 68 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    PUBLIC          reduce using rule 68 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    PRIVATE         reduce using rule 68 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    INTTYPE         reduce using rule 68 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 68 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 68 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 68 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    RKEY            reduce using rule 68 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    $end            reduce using rule 68 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)


state 139

    (108) declaration_thread -> THREAD thread_identificator ASSIGNATION . NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (109) declaration_thread -> THREAD thread_identificator ASSIGNATION . NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA

    NEW             shift and go to state 180


state 140

    (130) normal_while -> WHILE LPARENT boolean_operation . RPARENT LKEY all_block_code RKEY

    RPARENT         shift and go to state 181


state 141

    (131) do_while -> DO LKEY all_block_code . RKEY WHILE LPARENT boolean_operation RPARENT

    RKEY            shift and go to state 182


state 142

    (98) assignation_int_multiple -> assignation_int COMMA . assignation_int_multiple
    (97) assignation_int_multiple -> . assignation_int
    (98) assignation_int_multiple -> . assignation_int COMMA assignation_int_multiple
    (78) assignation_int -> . VARIABLE ASSIGNATION INTEGER
    (79) assignation_int -> . VARIABLE ASSIGNATION VARIABLE
    (80) assignation_int -> . VARIABLE ASSIGNATION arithmetic_operation

    VARIABLE        shift and go to state 98

    assignation_int                shift and go to state 97
    assignation_int_multiple       shift and go to state 183

state 143

    (78) assignation_int -> VARIABLE ASSIGNATION . INTEGER
    (79) assignation_int -> VARIABLE ASSIGNATION . VARIABLE
    (80) assignation_int -> VARIABLE ASSIGNATION . arithmetic_operation
    (45) arithmetic_operation -> . value_numeric
    (46) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (31) value_numeric -> . INTEGER
    (32) value_numeric -> . FLOAT_NUMBER
    (33) value_numeric -> . DECIMAL_NUMBER
    (34) value_numeric -> . VARIABLE

    INTEGER         shift and go to state 185
    VARIABLE        shift and go to state 184
    FLOAT_NUMBER    shift and go to state 132
    DECIMAL_NUMBER  shift and go to state 133

    arithmetic_operation           shift and go to state 186
    value_numeric                  shift and go to state 187

state 144

    (102) assignation_float_multiple -> assignation_float COMMA . assignation_float_multiple
    (101) assignation_float_multiple -> . assignation_float
    (102) assignation_float_multiple -> . assignation_float COMMA assignation_float_multiple
    (83) assignation_float -> . VARIABLE ASSIGNATION FLOAT_NUMBER
    (84) assignation_float -> . VARIABLE ASSIGNATION VARIABLE
    (85) assignation_float -> . VARIABLE ASSIGNATION arithmetic_operation

    VARIABLE        shift and go to state 101

    assignation_float              shift and go to state 100
    assignation_float_multiple     shift and go to state 188

state 145

    (83) assignation_float -> VARIABLE ASSIGNATION . FLOAT_NUMBER
    (84) assignation_float -> VARIABLE ASSIGNATION . VARIABLE
    (85) assignation_float -> VARIABLE ASSIGNATION . arithmetic_operation
    (45) arithmetic_operation -> . value_numeric
    (46) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (31) value_numeric -> . INTEGER
    (32) value_numeric -> . FLOAT_NUMBER
    (33) value_numeric -> . DECIMAL_NUMBER
    (34) value_numeric -> . VARIABLE

    FLOAT_NUMBER    shift and go to state 190
    VARIABLE        shift and go to state 189
    INTEGER         shift and go to state 131
    DECIMAL_NUMBER  shift and go to state 133

    arithmetic_operation           shift and go to state 191
    value_numeric                  shift and go to state 187

state 146

    (104) assignation_true_multiple -> assignation_true COMMA . assignation_true_multiple
    (103) assignation_true_multiple -> . assignation_true
    (104) assignation_true_multiple -> . assignation_true COMMA assignation_true_multiple
    (86) assignation_true -> . VARIABLE ASSIGNATION BOOLTRUE
    (87) assignation_true -> . VARIABLE ASSIGNATION VARIABLE
    (88) assignation_true -> . VARIABLE ASSIGNATION boolean_operation

    VARIABLE        shift and go to state 193

    assignation_true               shift and go to state 104
    assignation_true_multiple      shift and go to state 192

state 147

    (106) assignation_false_multiple -> assignation_false COMMA . assignation_false_multiple
    (105) assignation_false_multiple -> . assignation_false
    (106) assignation_false_multiple -> . assignation_false COMMA assignation_false_multiple
    (89) assignation_false -> . VARIABLE ASSIGNATION BOOLFALSE
    (90) assignation_false -> . VARIABLE ASSIGNATION VARIABLE
    (91) assignation_false -> . VARIABLE ASSIGNATION boolean_operation

    VARIABLE        shift and go to state 195

    assignation_false              shift and go to state 105
    assignation_false_multiple     shift and go to state 194

state 148

    (86) assignation_true -> VARIABLE ASSIGNATION . BOOLTRUE
    (87) assignation_true -> VARIABLE ASSIGNATION . VARIABLE
    (88) assignation_true -> VARIABLE ASSIGNATION . boolean_operation
    (89) assignation_false -> VARIABLE ASSIGNATION . BOOLFALSE
    (90) assignation_false -> VARIABLE ASSIGNATION . VARIABLE
    (91) assignation_false -> VARIABLE ASSIGNATION . boolean_operation
    (60) boolean_operation -> . value_boolean
    (61) boolean_operation -> . LOGICNOT value_boolean
    (62) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (27) value_boolean -> . BOOLTRUE
    (28) value_boolean -> . BOOLFALSE
    (29) value_boolean -> . VARIABLE
    (30) value_boolean -> . comparison_operation
    (52) comparison_operation -> . value_numeric
    (53) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (31) value_numeric -> . INTEGER
    (32) value_numeric -> . FLOAT_NUMBER
    (33) value_numeric -> . DECIMAL_NUMBER
    (34) value_numeric -> . VARIABLE

    BOOLTRUE        shift and go to state 197
    VARIABLE        shift and go to state 196
    BOOLFALSE       shift and go to state 199
    LOGICNOT        shift and go to state 125
    INTEGER         shift and go to state 131
    FLOAT_NUMBER    shift and go to state 132
    DECIMAL_NUMBER  shift and go to state 133

    boolean_operation              shift and go to state 198
    value_boolean                  shift and go to state 124
    comparison_operation           shift and go to state 129
    value_numeric                  shift and go to state 130

state 149

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY . all_block_code RKEY
    (5) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY . all_block_code RKEY all_block_code
    (16) all_block_code -> . block_code
    (17) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . thread_main
    (9) block_code -> . concurrent_method
    (10) block_code -> . normal_if
    (11) block_code -> . block_while
    (12) block_code -> . stack_struct
    (13) block_code -> . functions_stack
    (14) block_code -> . queue_struct
    (15) block_code -> . functions_queue
    (65) def_const_or_var -> . constant_assignation
    (66) def_const_or_var -> . variable_assignation
    (35) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (36) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (107) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (112) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (113) concurrent_method -> . WRITE
    (124) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (125) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (128) block_while -> . normal_while
    (129) block_while -> . do_while
    (132) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (133) functions_stack -> . stack_push
    (134) functions_stack -> . stack_pop
    (135) functions_stack -> . stack_clear
    (136) functions_stack -> . stack_peek
    (137) functions_stack -> . stack_isEmpty
    (143) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (144) functions_queue -> . queue_enqueue
    (145) functions_queue -> . queue_dequeue
    (146) functions_queue -> . queue_clear
    (147) functions_queue -> . queue_isEmpty
    (148) functions_queue -> . queue_peek
    (67) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (68) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (69) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (70) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (108) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (109) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (130) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (131) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (138) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (139) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (140) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (141) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (142) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (149) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (150) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (151) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (153) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (152) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (71) access_modifiers -> . PUBLIC
    (72) access_modifiers -> . PRIVATE
    (92) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (93) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (94) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (95) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (96) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 46
    STATIC          shift and go to state 29
    WRITE           shift and go to state 48
    IF              shift and go to state 49
    STACK           shift and go to state 52
    QUEUE           shift and go to state 58
    CONST           shift and go to state 65
    THREAD          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    VARIABLE        shift and go to state 31
    PUBLIC          shift and go to state 70
    PRIVATE         shift and go to state 71
    INTTYPE         shift and go to state 72
    STRINGTYPE      shift and go to state 30
    FLOATTYPE       shift and go to state 73
    BOOLTYPE        shift and go to state 74

    all_block_code                 shift and go to state 200
    block_code                     shift and go to state 33
    def_const_or_var               shift and go to state 34
    print_data                     shift and go to state 35
    thread_main                    shift and go to state 36
    concurrent_method              shift and go to state 37
    normal_if                      shift and go to state 38
    block_while                    shift and go to state 39
    stack_struct                   shift and go to state 40
    functions_stack                shift and go to state 41
    queue_struct                   shift and go to state 42
    functions_queue                shift and go to state 43
    constant_assignation           shift and go to state 44
    variable_assignation           shift and go to state 45
    declaration_thread             shift and go to state 47
    normal_while                   shift and go to state 50
    do_while                       shift and go to state 51
    stack_push                     shift and go to state 53
    stack_pop                      shift and go to state 54
    stack_clear                    shift and go to state 55
    stack_peek                     shift and go to state 56
    stack_isEmpty                  shift and go to state 57
    queue_enqueue                  shift and go to state 59
    queue_dequeue                  shift and go to state 60
    queue_clear                    shift and go to state 61
    queue_isEmpty                  shift and go to state 62
    queue_peek                     shift and go to state 63
    access_modifiers               shift and go to state 64
    assignation_type_value_multiple shift and go to state 66

state 150

    (112) concurrent_method -> STATIC VOID thread_identificator LPARENT . RPARENT LKEY thread_logic RKEY

    RPARENT         shift and go to state 201


state 151

    (100) assignation_string_multiple -> assignation_string COMMA assignation_string_multiple .

    DOTANDCOMMA     reduce using rule 100 (assignation_string_multiple -> assignation_string COMMA assignation_string_multiple .)


state 152

    (82) assignation_string -> VARIABLE ASSIGNATION VARIABLE .

    COMMA           reduce using rule 82 (assignation_string -> VARIABLE ASSIGNATION VARIABLE .)
    DOTANDCOMMA     reduce using rule 82 (assignation_string -> VARIABLE ASSIGNATION VARIABLE .)


state 153

    (81) assignation_string -> VARIABLE ASSIGNATION STRING .

    COMMA           reduce using rule 81 (assignation_string -> VARIABLE ASSIGNATION STRING .)
    DOTANDCOMMA     reduce using rule 81 (assignation_string -> VARIABLE ASSIGNATION STRING .)


state 154

    (138) stack_push -> VARIABLE DOT PUSH LPARENT . value RPARENT DOTANDCOMMA
    (40) value -> . value_numeric
    (41) value -> . value_boolean
    (42) value -> . value_string
    (43) value -> . VARIABLE
    (44) value -> . read_data
    (31) value_numeric -> . INTEGER
    (32) value_numeric -> . FLOAT_NUMBER
    (33) value_numeric -> . DECIMAL_NUMBER
    (34) value_numeric -> . VARIABLE
    (27) value_boolean -> . BOOLTRUE
    (28) value_boolean -> . BOOLFALSE
    (29) value_boolean -> . VARIABLE
    (30) value_boolean -> . comparison_operation
    (24) value_string -> . STRING
    (25) value_string -> . CHAR
    (26) value_string -> . concatenation
    (37) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (52) comparison_operation -> . value_numeric
    (53) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (38) concatenation -> . STRING
    (39) concatenation -> . STRING PLUS concatenation

    VARIABLE        shift and go to state 202
    INTEGER         shift and go to state 131
    FLOAT_NUMBER    shift and go to state 132
    DECIMAL_NUMBER  shift and go to state 133
    BOOLTRUE        shift and go to state 126
    BOOLFALSE       shift and go to state 127
    STRING          shift and go to state 208
    CHAR            shift and go to state 209
    READ            shift and go to state 211

    value                          shift and go to state 203
    value_numeric                  shift and go to state 204
    value_boolean                  shift and go to state 205
    value_string                   shift and go to state 206
    read_data                      shift and go to state 207
    comparison_operation           shift and go to state 129
    concatenation                  shift and go to state 210

state 155

    (139) stack_pop -> VARIABLE DOT POP LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 212


state 156

    (140) stack_clear -> VARIABLE DOT CLEAR LPARENT . RPARENT DOTANDCOMMA
    (151) queue_clear -> VARIABLE DOT CLEAR LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 213


state 157

    (141) stack_peek -> VARIABLE DOT PEEK LPARENT . RPARENT DOTANDCOMMA
    (152) queue_peek -> VARIABLE DOT PEEK LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 214


state 158

    (142) stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT . RPARENT DOTANDCOMMA
    (153) queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 215


state 159

    (149) queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT . value RPARENT DOTANDCOMMA
    (40) value -> . value_numeric
    (41) value -> . value_boolean
    (42) value -> . value_string
    (43) value -> . VARIABLE
    (44) value -> . read_data
    (31) value_numeric -> . INTEGER
    (32) value_numeric -> . FLOAT_NUMBER
    (33) value_numeric -> . DECIMAL_NUMBER
    (34) value_numeric -> . VARIABLE
    (27) value_boolean -> . BOOLTRUE
    (28) value_boolean -> . BOOLFALSE
    (29) value_boolean -> . VARIABLE
    (30) value_boolean -> . comparison_operation
    (24) value_string -> . STRING
    (25) value_string -> . CHAR
    (26) value_string -> . concatenation
    (37) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (52) comparison_operation -> . value_numeric
    (53) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (38) concatenation -> . STRING
    (39) concatenation -> . STRING PLUS concatenation

    VARIABLE        shift and go to state 202
    INTEGER         shift and go to state 131
    FLOAT_NUMBER    shift and go to state 132
    DECIMAL_NUMBER  shift and go to state 133
    BOOLTRUE        shift and go to state 126
    BOOLFALSE       shift and go to state 127
    STRING          shift and go to state 208
    CHAR            shift and go to state 209
    READ            shift and go to state 211

    value                          shift and go to state 216
    value_numeric                  shift and go to state 204
    value_boolean                  shift and go to state 205
    value_string                   shift and go to state 206
    read_data                      shift and go to state 207
    comparison_operation           shift and go to state 129
    concatenation                  shift and go to state 210

state 160

    (150) queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 217


state 161

    (35) print_data -> PRINT LPARENT STRING RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 218


state 162

    (36) print_data -> PRINT LPARENT VARIABLE RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 219


state 163

    (107) thread_main -> declaration_thread declaration_thread thread_init thread_init . thread_wait thread_wait
    (111) thread_wait -> . thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA
    (121) thread_identificator -> . VARIABLE

    VARIABLE        shift and go to state 93

    thread_wait                    shift and go to state 220
    thread_identificator           shift and go to state 221

state 164

    (110) thread_init -> thread_identificator DOT . START LPARENT RPARENT DOTANDCOMMA

    START           shift and go to state 222


state 165

    (124) normal_if -> IF LPARENT boolean_operation RPARENT . LKEY block_if RKEY other_if
    (125) normal_if -> IF LPARENT boolean_operation RPARENT . LKEY block_if RKEY

    LKEY            shift and go to state 223


state 166

    (62) boolean_operation -> value_boolean boolean_operator . boolean_operation
    (60) boolean_operation -> . value_boolean
    (61) boolean_operation -> . LOGICNOT value_boolean
    (62) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (27) value_boolean -> . BOOLTRUE
    (28) value_boolean -> . BOOLFALSE
    (29) value_boolean -> . VARIABLE
    (30) value_boolean -> . comparison_operation
    (52) comparison_operation -> . value_numeric
    (53) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (31) value_numeric -> . INTEGER
    (32) value_numeric -> . FLOAT_NUMBER
    (33) value_numeric -> . DECIMAL_NUMBER
    (34) value_numeric -> . VARIABLE

    LOGICNOT        shift and go to state 125
    BOOLTRUE        shift and go to state 126
    BOOLFALSE       shift and go to state 127
    VARIABLE        shift and go to state 128
    INTEGER         shift and go to state 131
    FLOAT_NUMBER    shift and go to state 132
    DECIMAL_NUMBER  shift and go to state 133

    value_boolean                  shift and go to state 124
    boolean_operation              shift and go to state 224
    comparison_operation           shift and go to state 129
    value_numeric                  shift and go to state 130

state 167

    (63) boolean_operator -> LOGICAND .

    LOGICNOT        reduce using rule 63 (boolean_operator -> LOGICAND .)
    BOOLTRUE        reduce using rule 63 (boolean_operator -> LOGICAND .)
    BOOLFALSE       reduce using rule 63 (boolean_operator -> LOGICAND .)
    VARIABLE        reduce using rule 63 (boolean_operator -> LOGICAND .)
    INTEGER         reduce using rule 63 (boolean_operator -> LOGICAND .)
    FLOAT_NUMBER    reduce using rule 63 (boolean_operator -> LOGICAND .)
    DECIMAL_NUMBER  reduce using rule 63 (boolean_operator -> LOGICAND .)


state 168

    (64) boolean_operator -> LOGICOR .

    LOGICNOT        reduce using rule 64 (boolean_operator -> LOGICOR .)
    BOOLTRUE        reduce using rule 64 (boolean_operator -> LOGICOR .)
    BOOLFALSE       reduce using rule 64 (boolean_operator -> LOGICOR .)
    VARIABLE        reduce using rule 64 (boolean_operator -> LOGICOR .)
    INTEGER         reduce using rule 64 (boolean_operator -> LOGICOR .)
    FLOAT_NUMBER    reduce using rule 64 (boolean_operator -> LOGICOR .)
    DECIMAL_NUMBER  reduce using rule 64 (boolean_operator -> LOGICOR .)


state 169

    (61) boolean_operation -> LOGICNOT value_boolean .

    RPARENT         reduce using rule 61 (boolean_operation -> LOGICNOT value_boolean .)
    COMMA           reduce using rule 61 (boolean_operation -> LOGICNOT value_boolean .)
    DOTANDCOMMA     reduce using rule 61 (boolean_operation -> LOGICNOT value_boolean .)


state 170

    (53) comparison_operation -> value_numeric comparison_operator . comparison_operation
    (52) comparison_operation -> . value_numeric
    (53) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (31) value_numeric -> . INTEGER
    (32) value_numeric -> . FLOAT_NUMBER
    (33) value_numeric -> . DECIMAL_NUMBER
    (34) value_numeric -> . VARIABLE

    INTEGER         shift and go to state 131
    FLOAT_NUMBER    shift and go to state 132
    DECIMAL_NUMBER  shift and go to state 133
    VARIABLE        shift and go to state 226

    value_numeric                  shift and go to state 130
    comparison_operation           shift and go to state 225

state 171

    (54) comparison_operator -> GREATER_THAN .

    INTEGER         reduce using rule 54 (comparison_operator -> GREATER_THAN .)
    FLOAT_NUMBER    reduce using rule 54 (comparison_operator -> GREATER_THAN .)
    DECIMAL_NUMBER  reduce using rule 54 (comparison_operator -> GREATER_THAN .)
    VARIABLE        reduce using rule 54 (comparison_operator -> GREATER_THAN .)


state 172

    (55) comparison_operator -> SMALLER_THAN .

    INTEGER         reduce using rule 55 (comparison_operator -> SMALLER_THAN .)
    FLOAT_NUMBER    reduce using rule 55 (comparison_operator -> SMALLER_THAN .)
    DECIMAL_NUMBER  reduce using rule 55 (comparison_operator -> SMALLER_THAN .)
    VARIABLE        reduce using rule 55 (comparison_operator -> SMALLER_THAN .)


state 173

    (56) comparison_operator -> EQUAL_COMPARATION .

    INTEGER         reduce using rule 56 (comparison_operator -> EQUAL_COMPARATION .)
    FLOAT_NUMBER    reduce using rule 56 (comparison_operator -> EQUAL_COMPARATION .)
    DECIMAL_NUMBER  reduce using rule 56 (comparison_operator -> EQUAL_COMPARATION .)
    VARIABLE        reduce using rule 56 (comparison_operator -> EQUAL_COMPARATION .)


state 174

    (57) comparison_operator -> INEQUALITY .

    INTEGER         reduce using rule 57 (comparison_operator -> INEQUALITY .)
    FLOAT_NUMBER    reduce using rule 57 (comparison_operator -> INEQUALITY .)
    DECIMAL_NUMBER  reduce using rule 57 (comparison_operator -> INEQUALITY .)
    VARIABLE        reduce using rule 57 (comparison_operator -> INEQUALITY .)


state 175

    (58) comparison_operator -> GREATER_THAN_OR_EQUAL .

    INTEGER         reduce using rule 58 (comparison_operator -> GREATER_THAN_OR_EQUAL .)
    FLOAT_NUMBER    reduce using rule 58 (comparison_operator -> GREATER_THAN_OR_EQUAL .)
    DECIMAL_NUMBER  reduce using rule 58 (comparison_operator -> GREATER_THAN_OR_EQUAL .)
    VARIABLE        reduce using rule 58 (comparison_operator -> GREATER_THAN_OR_EQUAL .)


state 176

    (59) comparison_operator -> SMALLER_THAN_OR_EQUAL .

    INTEGER         reduce using rule 59 (comparison_operator -> SMALLER_THAN_OR_EQUAL .)
    FLOAT_NUMBER    reduce using rule 59 (comparison_operator -> SMALLER_THAN_OR_EQUAL .)
    DECIMAL_NUMBER  reduce using rule 59 (comparison_operator -> SMALLER_THAN_OR_EQUAL .)
    VARIABLE        reduce using rule 59 (comparison_operator -> SMALLER_THAN_OR_EQUAL .)


state 177

    (132) stack_struct -> STACK VARIABLE ASSIGNATION NEW . STACK LPARENT RPARENT DOTANDCOMMA

    STACK           shift and go to state 227


state 178

    (143) queue_struct -> QUEUE VARIABLE ASSIGNATION NEW . QUEUE LPARENT RPARENT DOTANDCOMMA

    QUEUE           shift and go to state 228


state 179

    (67) constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .

    PRINT           reduce using rule 67 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    STATIC          reduce using rule 67 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    WRITE           reduce using rule 67 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    IF              reduce using rule 67 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    STACK           reduce using rule 67 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    QUEUE           reduce using rule 67 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    CONST           reduce using rule 67 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    THREAD          reduce using rule 67 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    WHILE           reduce using rule 67 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    DO              reduce using rule 67 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    VARIABLE        reduce using rule 67 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    PUBLIC          reduce using rule 67 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    PRIVATE         reduce using rule 67 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    INTTYPE         reduce using rule 67 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 67 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 67 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 67 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    RKEY            reduce using rule 67 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    $end            reduce using rule 67 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)


state 180

    (108) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW . THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (109) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW . THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA

    THREAD          shift and go to state 229


state 181

    (130) normal_while -> WHILE LPARENT boolean_operation RPARENT . LKEY all_block_code RKEY

    LKEY            shift and go to state 230


state 182

    (131) do_while -> DO LKEY all_block_code RKEY . WHILE LPARENT boolean_operation RPARENT

    WHILE           shift and go to state 231


state 183

    (98) assignation_int_multiple -> assignation_int COMMA assignation_int_multiple .

    DOTANDCOMMA     reduce using rule 98 (assignation_int_multiple -> assignation_int COMMA assignation_int_multiple .)


state 184

    (79) assignation_int -> VARIABLE ASSIGNATION VARIABLE .
    (34) value_numeric -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 34 (value_numeric -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 34 (value_numeric -> VARIABLE .)
    PLUS            reduce using rule 34 (value_numeric -> VARIABLE .)
    MINUS           reduce using rule 34 (value_numeric -> VARIABLE .)
    TIMES           reduce using rule 34 (value_numeric -> VARIABLE .)
    DIVIDE          reduce using rule 34 (value_numeric -> VARIABLE .)
    PERCENT         reduce using rule 34 (value_numeric -> VARIABLE .)
    COMMA           reduce using rule 34 (value_numeric -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 34 (value_numeric -> VARIABLE .)

  ! COMMA           [ reduce using rule 79 (assignation_int -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 79 (assignation_int -> VARIABLE ASSIGNATION VARIABLE .) ]


state 185

    (78) assignation_int -> VARIABLE ASSIGNATION INTEGER .
    (31) value_numeric -> INTEGER .

  ! reduce/reduce conflict for COMMA resolved using rule 31 (value_numeric -> INTEGER .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 31 (value_numeric -> INTEGER .)
    PLUS            reduce using rule 31 (value_numeric -> INTEGER .)
    MINUS           reduce using rule 31 (value_numeric -> INTEGER .)
    TIMES           reduce using rule 31 (value_numeric -> INTEGER .)
    DIVIDE          reduce using rule 31 (value_numeric -> INTEGER .)
    PERCENT         reduce using rule 31 (value_numeric -> INTEGER .)
    COMMA           reduce using rule 31 (value_numeric -> INTEGER .)
    DOTANDCOMMA     reduce using rule 31 (value_numeric -> INTEGER .)

  ! COMMA           [ reduce using rule 78 (assignation_int -> VARIABLE ASSIGNATION INTEGER .) ]
  ! DOTANDCOMMA     [ reduce using rule 78 (assignation_int -> VARIABLE ASSIGNATION INTEGER .) ]


state 186

    (80) assignation_int -> VARIABLE ASSIGNATION arithmetic_operation .

    COMMA           reduce using rule 80 (assignation_int -> VARIABLE ASSIGNATION arithmetic_operation .)
    DOTANDCOMMA     reduce using rule 80 (assignation_int -> VARIABLE ASSIGNATION arithmetic_operation .)


state 187

    (45) arithmetic_operation -> value_numeric .
    (46) arithmetic_operation -> value_numeric . arithmetic_operator arithmetic_operation
    (47) arithmetic_operator -> . PLUS
    (48) arithmetic_operator -> . MINUS
    (49) arithmetic_operator -> . TIMES
    (50) arithmetic_operator -> . DIVIDE
    (51) arithmetic_operator -> . PERCENT

    COMMA           reduce using rule 45 (arithmetic_operation -> value_numeric .)
    DOTANDCOMMA     reduce using rule 45 (arithmetic_operation -> value_numeric .)
    PLUS            shift and go to state 233
    MINUS           shift and go to state 234
    TIMES           shift and go to state 235
    DIVIDE          shift and go to state 236
    PERCENT         shift and go to state 237

    arithmetic_operator            shift and go to state 232

state 188

    (102) assignation_float_multiple -> assignation_float COMMA assignation_float_multiple .

    DOTANDCOMMA     reduce using rule 102 (assignation_float_multiple -> assignation_float COMMA assignation_float_multiple .)


state 189

    (84) assignation_float -> VARIABLE ASSIGNATION VARIABLE .
    (34) value_numeric -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 34 (value_numeric -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 34 (value_numeric -> VARIABLE .)
    PLUS            reduce using rule 34 (value_numeric -> VARIABLE .)
    MINUS           reduce using rule 34 (value_numeric -> VARIABLE .)
    TIMES           reduce using rule 34 (value_numeric -> VARIABLE .)
    DIVIDE          reduce using rule 34 (value_numeric -> VARIABLE .)
    PERCENT         reduce using rule 34 (value_numeric -> VARIABLE .)
    COMMA           reduce using rule 34 (value_numeric -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 34 (value_numeric -> VARIABLE .)

  ! COMMA           [ reduce using rule 84 (assignation_float -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 84 (assignation_float -> VARIABLE ASSIGNATION VARIABLE .) ]


state 190

    (83) assignation_float -> VARIABLE ASSIGNATION FLOAT_NUMBER .
    (32) value_numeric -> FLOAT_NUMBER .

  ! reduce/reduce conflict for COMMA resolved using rule 32 (value_numeric -> FLOAT_NUMBER .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 32 (value_numeric -> FLOAT_NUMBER .)
    PLUS            reduce using rule 32 (value_numeric -> FLOAT_NUMBER .)
    MINUS           reduce using rule 32 (value_numeric -> FLOAT_NUMBER .)
    TIMES           reduce using rule 32 (value_numeric -> FLOAT_NUMBER .)
    DIVIDE          reduce using rule 32 (value_numeric -> FLOAT_NUMBER .)
    PERCENT         reduce using rule 32 (value_numeric -> FLOAT_NUMBER .)
    COMMA           reduce using rule 32 (value_numeric -> FLOAT_NUMBER .)
    DOTANDCOMMA     reduce using rule 32 (value_numeric -> FLOAT_NUMBER .)

  ! COMMA           [ reduce using rule 83 (assignation_float -> VARIABLE ASSIGNATION FLOAT_NUMBER .) ]
  ! DOTANDCOMMA     [ reduce using rule 83 (assignation_float -> VARIABLE ASSIGNATION FLOAT_NUMBER .) ]


state 191

    (85) assignation_float -> VARIABLE ASSIGNATION arithmetic_operation .

    COMMA           reduce using rule 85 (assignation_float -> VARIABLE ASSIGNATION arithmetic_operation .)
    DOTANDCOMMA     reduce using rule 85 (assignation_float -> VARIABLE ASSIGNATION arithmetic_operation .)


state 192

    (104) assignation_true_multiple -> assignation_true COMMA assignation_true_multiple .

    DOTANDCOMMA     reduce using rule 104 (assignation_true_multiple -> assignation_true COMMA assignation_true_multiple .)


state 193

    (86) assignation_true -> VARIABLE . ASSIGNATION BOOLTRUE
    (87) assignation_true -> VARIABLE . ASSIGNATION VARIABLE
    (88) assignation_true -> VARIABLE . ASSIGNATION boolean_operation

    ASSIGNATION     shift and go to state 238


state 194

    (106) assignation_false_multiple -> assignation_false COMMA assignation_false_multiple .

    DOTANDCOMMA     reduce using rule 106 (assignation_false_multiple -> assignation_false COMMA assignation_false_multiple .)


state 195

    (89) assignation_false -> VARIABLE . ASSIGNATION BOOLFALSE
    (90) assignation_false -> VARIABLE . ASSIGNATION VARIABLE
    (91) assignation_false -> VARIABLE . ASSIGNATION boolean_operation

    ASSIGNATION     shift and go to state 239


state 196

    (87) assignation_true -> VARIABLE ASSIGNATION VARIABLE .
    (90) assignation_false -> VARIABLE ASSIGNATION VARIABLE .
    (29) value_boolean -> VARIABLE .
    (34) value_numeric -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 87 (assignation_true -> VARIABLE ASSIGNATION VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 87 (assignation_true -> VARIABLE ASSIGNATION VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 29 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 29 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for LOGICAND resolved using rule 29 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for LOGICOR resolved using rule 29 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 29 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 29 (value_boolean -> VARIABLE .)
    LOGICAND        reduce using rule 29 (value_boolean -> VARIABLE .)
    LOGICOR         reduce using rule 29 (value_boolean -> VARIABLE .)
    COMMA           reduce using rule 29 (value_boolean -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 29 (value_boolean -> VARIABLE .)
    GREATER_THAN    reduce using rule 34 (value_numeric -> VARIABLE .)
    SMALLER_THAN    reduce using rule 34 (value_numeric -> VARIABLE .)
    EQUAL_COMPARATION reduce using rule 34 (value_numeric -> VARIABLE .)
    INEQUALITY      reduce using rule 34 (value_numeric -> VARIABLE .)
    GREATER_THAN_OR_EQUAL reduce using rule 34 (value_numeric -> VARIABLE .)
    SMALLER_THAN_OR_EQUAL reduce using rule 34 (value_numeric -> VARIABLE .)

  ! COMMA           [ reduce using rule 87 (assignation_true -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 87 (assignation_true -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! COMMA           [ reduce using rule 90 (assignation_false -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 90 (assignation_false -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! LOGICAND        [ reduce using rule 34 (value_numeric -> VARIABLE .) ]
  ! LOGICOR         [ reduce using rule 34 (value_numeric -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 34 (value_numeric -> VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 34 (value_numeric -> VARIABLE .) ]


state 197

    (86) assignation_true -> VARIABLE ASSIGNATION BOOLTRUE .
    (27) value_boolean -> BOOLTRUE .

  ! reduce/reduce conflict for COMMA resolved using rule 27 (value_boolean -> BOOLTRUE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 27 (value_boolean -> BOOLTRUE .)
    LOGICAND        reduce using rule 27 (value_boolean -> BOOLTRUE .)
    LOGICOR         reduce using rule 27 (value_boolean -> BOOLTRUE .)
    COMMA           reduce using rule 27 (value_boolean -> BOOLTRUE .)
    DOTANDCOMMA     reduce using rule 27 (value_boolean -> BOOLTRUE .)

  ! COMMA           [ reduce using rule 86 (assignation_true -> VARIABLE ASSIGNATION BOOLTRUE .) ]
  ! DOTANDCOMMA     [ reduce using rule 86 (assignation_true -> VARIABLE ASSIGNATION BOOLTRUE .) ]


state 198

    (88) assignation_true -> VARIABLE ASSIGNATION boolean_operation .
    (91) assignation_false -> VARIABLE ASSIGNATION boolean_operation .

  ! reduce/reduce conflict for COMMA resolved using rule 88 (assignation_true -> VARIABLE ASSIGNATION boolean_operation .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 88 (assignation_true -> VARIABLE ASSIGNATION boolean_operation .)
    COMMA           reduce using rule 88 (assignation_true -> VARIABLE ASSIGNATION boolean_operation .)
    DOTANDCOMMA     reduce using rule 88 (assignation_true -> VARIABLE ASSIGNATION boolean_operation .)

  ! COMMA           [ reduce using rule 91 (assignation_false -> VARIABLE ASSIGNATION boolean_operation .) ]
  ! DOTANDCOMMA     [ reduce using rule 91 (assignation_false -> VARIABLE ASSIGNATION boolean_operation .) ]


state 199

    (89) assignation_false -> VARIABLE ASSIGNATION BOOLFALSE .
    (28) value_boolean -> BOOLFALSE .

  ! reduce/reduce conflict for COMMA resolved using rule 28 (value_boolean -> BOOLFALSE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 28 (value_boolean -> BOOLFALSE .)
    LOGICAND        reduce using rule 28 (value_boolean -> BOOLFALSE .)
    LOGICOR         reduce using rule 28 (value_boolean -> BOOLFALSE .)
    COMMA           reduce using rule 28 (value_boolean -> BOOLFALSE .)
    DOTANDCOMMA     reduce using rule 28 (value_boolean -> BOOLFALSE .)

  ! COMMA           [ reduce using rule 89 (assignation_false -> VARIABLE ASSIGNATION BOOLFALSE .) ]
  ! DOTANDCOMMA     [ reduce using rule 89 (assignation_false -> VARIABLE ASSIGNATION BOOLFALSE .) ]


state 200

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code . RKEY
    (5) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code . RKEY all_block_code

    RKEY            shift and go to state 240


state 201

    (112) concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT . LKEY thread_logic RKEY

    LKEY            shift and go to state 241


state 202

    (43) value -> VARIABLE .
    (34) value_numeric -> VARIABLE .
    (29) value_boolean -> VARIABLE .

  ! reduce/reduce conflict for RPARENT resolved using rule 34 (value_numeric -> VARIABLE .)
  ! reduce/reduce conflict for RPARENT resolved using rule 29 (value_boolean -> VARIABLE .)
    GREATER_THAN    reduce using rule 34 (value_numeric -> VARIABLE .)
    SMALLER_THAN    reduce using rule 34 (value_numeric -> VARIABLE .)
    EQUAL_COMPARATION reduce using rule 34 (value_numeric -> VARIABLE .)
    INEQUALITY      reduce using rule 34 (value_numeric -> VARIABLE .)
    GREATER_THAN_OR_EQUAL reduce using rule 34 (value_numeric -> VARIABLE .)
    SMALLER_THAN_OR_EQUAL reduce using rule 34 (value_numeric -> VARIABLE .)
    RPARENT         reduce using rule 29 (value_boolean -> VARIABLE .)

  ! RPARENT         [ reduce using rule 43 (value -> VARIABLE .) ]
  ! RPARENT         [ reduce using rule 34 (value_numeric -> VARIABLE .) ]


state 203

    (138) stack_push -> VARIABLE DOT PUSH LPARENT value . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 242


state 204

    (40) value -> value_numeric .
    (52) comparison_operation -> value_numeric .
    (53) comparison_operation -> value_numeric . comparison_operator comparison_operation
    (54) comparison_operator -> . GREATER_THAN
    (55) comparison_operator -> . SMALLER_THAN
    (56) comparison_operator -> . EQUAL_COMPARATION
    (57) comparison_operator -> . INEQUALITY
    (58) comparison_operator -> . GREATER_THAN_OR_EQUAL
    (59) comparison_operator -> . SMALLER_THAN_OR_EQUAL

  ! reduce/reduce conflict for RPARENT resolved using rule 40 (value -> value_numeric .)
    RPARENT         reduce using rule 40 (value -> value_numeric .)
    GREATER_THAN    shift and go to state 171
    SMALLER_THAN    shift and go to state 172
    EQUAL_COMPARATION shift and go to state 173
    INEQUALITY      shift and go to state 174
    GREATER_THAN_OR_EQUAL shift and go to state 175
    SMALLER_THAN_OR_EQUAL shift and go to state 176

  ! RPARENT         [ reduce using rule 52 (comparison_operation -> value_numeric .) ]

    comparison_operator            shift and go to state 170

state 205

    (41) value -> value_boolean .

    RPARENT         reduce using rule 41 (value -> value_boolean .)


state 206

    (42) value -> value_string .

    RPARENT         reduce using rule 42 (value -> value_string .)


state 207

    (44) value -> read_data .

    RPARENT         reduce using rule 44 (value -> read_data .)


state 208

    (24) value_string -> STRING .
    (38) concatenation -> STRING .
    (39) concatenation -> STRING . PLUS concatenation

  ! reduce/reduce conflict for RPARENT resolved using rule 24 (value_string -> STRING .)
    RPARENT         reduce using rule 24 (value_string -> STRING .)
    PLUS            shift and go to state 243

  ! RPARENT         [ reduce using rule 38 (concatenation -> STRING .) ]


state 209

    (25) value_string -> CHAR .

    RPARENT         reduce using rule 25 (value_string -> CHAR .)


state 210

    (26) value_string -> concatenation .

    RPARENT         reduce using rule 26 (value_string -> concatenation .)


state 211

    (37) read_data -> READ . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 244


state 212

    (139) stack_pop -> VARIABLE DOT POP LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 245


state 213

    (140) stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT . DOTANDCOMMA
    (151) queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 246


state 214

    (141) stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT . DOTANDCOMMA
    (152) queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 247


state 215

    (142) stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT . DOTANDCOMMA
    (153) queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 248


state 216

    (149) queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 249


state 217

    (150) queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 250


state 218

    (35) print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 35 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 35 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 35 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    IF              reduce using rule 35 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 35 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 35 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 35 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 35 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 35 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    DO              reduce using rule 35 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 35 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 35 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 35 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 35 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 35 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 35 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 35 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 35 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    $end            reduce using rule 35 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)


state 219

    (36) print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 36 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 36 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 36 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    IF              reduce using rule 36 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 36 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 36 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 36 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 36 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 36 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    DO              reduce using rule 36 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 36 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 36 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 36 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 36 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 36 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 36 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 36 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 36 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    $end            reduce using rule 36 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)


state 220

    (107) thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait . thread_wait
    (111) thread_wait -> . thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA
    (121) thread_identificator -> . VARIABLE

    VARIABLE        shift and go to state 93

    thread_wait                    shift and go to state 251
    thread_identificator           shift and go to state 221

state 221

    (111) thread_wait -> thread_identificator . DOT JOIN LPARENT RPARENT DOTANDCOMMA

    DOT             shift and go to state 252


state 222

    (110) thread_init -> thread_identificator DOT START . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 253


state 223

    (124) normal_if -> IF LPARENT boolean_operation RPARENT LKEY . block_if RKEY other_if
    (125) normal_if -> IF LPARENT boolean_operation RPARENT LKEY . block_if RKEY
    (122) block_if -> . normal_if
    (123) block_if -> . all_block_code
    (124) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (125) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (16) all_block_code -> . block_code
    (17) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . thread_main
    (9) block_code -> . concurrent_method
    (10) block_code -> . normal_if
    (11) block_code -> . block_while
    (12) block_code -> . stack_struct
    (13) block_code -> . functions_stack
    (14) block_code -> . queue_struct
    (15) block_code -> . functions_queue
    (65) def_const_or_var -> . constant_assignation
    (66) def_const_or_var -> . variable_assignation
    (35) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (36) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (107) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (112) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (113) concurrent_method -> . WRITE
    (128) block_while -> . normal_while
    (129) block_while -> . do_while
    (132) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (133) functions_stack -> . stack_push
    (134) functions_stack -> . stack_pop
    (135) functions_stack -> . stack_clear
    (136) functions_stack -> . stack_peek
    (137) functions_stack -> . stack_isEmpty
    (143) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (144) functions_queue -> . queue_enqueue
    (145) functions_queue -> . queue_dequeue
    (146) functions_queue -> . queue_clear
    (147) functions_queue -> . queue_isEmpty
    (148) functions_queue -> . queue_peek
    (67) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (68) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (69) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (70) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (108) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (109) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (130) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (131) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (138) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (139) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (140) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (141) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (142) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (149) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (150) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (151) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (153) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (152) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (71) access_modifiers -> . PUBLIC
    (72) access_modifiers -> . PRIVATE
    (92) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (93) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (94) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (95) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (96) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    IF              shift and go to state 49
    PRINT           shift and go to state 46
    STATIC          shift and go to state 29
    WRITE           shift and go to state 48
    STACK           shift and go to state 52
    QUEUE           shift and go to state 58
    CONST           shift and go to state 65
    THREAD          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    VARIABLE        shift and go to state 31
    PUBLIC          shift and go to state 70
    PRIVATE         shift and go to state 71
    INTTYPE         shift and go to state 72
    STRINGTYPE      shift and go to state 30
    FLOATTYPE       shift and go to state 73
    BOOLTYPE        shift and go to state 74

    block_if                       shift and go to state 254
    normal_if                      shift and go to state 255
    all_block_code                 shift and go to state 256
    block_code                     shift and go to state 33
    def_const_or_var               shift and go to state 34
    print_data                     shift and go to state 35
    thread_main                    shift and go to state 36
    concurrent_method              shift and go to state 37
    block_while                    shift and go to state 39
    stack_struct                   shift and go to state 40
    functions_stack                shift and go to state 41
    queue_struct                   shift and go to state 42
    functions_queue                shift and go to state 43
    constant_assignation           shift and go to state 44
    variable_assignation           shift and go to state 45
    declaration_thread             shift and go to state 47
    normal_while                   shift and go to state 50
    do_while                       shift and go to state 51
    stack_push                     shift and go to state 53
    stack_pop                      shift and go to state 54
    stack_clear                    shift and go to state 55
    stack_peek                     shift and go to state 56
    stack_isEmpty                  shift and go to state 57
    queue_enqueue                  shift and go to state 59
    queue_dequeue                  shift and go to state 60
    queue_clear                    shift and go to state 61
    queue_isEmpty                  shift and go to state 62
    queue_peek                     shift and go to state 63
    access_modifiers               shift and go to state 64
    assignation_type_value_multiple shift and go to state 66

state 224

    (62) boolean_operation -> value_boolean boolean_operator boolean_operation .

    RPARENT         reduce using rule 62 (boolean_operation -> value_boolean boolean_operator boolean_operation .)
    COMMA           reduce using rule 62 (boolean_operation -> value_boolean boolean_operator boolean_operation .)
    DOTANDCOMMA     reduce using rule 62 (boolean_operation -> value_boolean boolean_operator boolean_operation .)


state 225

    (53) comparison_operation -> value_numeric comparison_operator comparison_operation .

    LOGICAND        reduce using rule 53 (comparison_operation -> value_numeric comparison_operator comparison_operation .)
    LOGICOR         reduce using rule 53 (comparison_operation -> value_numeric comparison_operator comparison_operation .)
    RPARENT         reduce using rule 53 (comparison_operation -> value_numeric comparison_operator comparison_operation .)
    COMMA           reduce using rule 53 (comparison_operation -> value_numeric comparison_operator comparison_operation .)
    DOTANDCOMMA     reduce using rule 53 (comparison_operation -> value_numeric comparison_operator comparison_operation .)


state 226

    (34) value_numeric -> VARIABLE .

    GREATER_THAN    reduce using rule 34 (value_numeric -> VARIABLE .)
    SMALLER_THAN    reduce using rule 34 (value_numeric -> VARIABLE .)
    EQUAL_COMPARATION reduce using rule 34 (value_numeric -> VARIABLE .)
    INEQUALITY      reduce using rule 34 (value_numeric -> VARIABLE .)
    GREATER_THAN_OR_EQUAL reduce using rule 34 (value_numeric -> VARIABLE .)
    SMALLER_THAN_OR_EQUAL reduce using rule 34 (value_numeric -> VARIABLE .)
    LOGICAND        reduce using rule 34 (value_numeric -> VARIABLE .)
    LOGICOR         reduce using rule 34 (value_numeric -> VARIABLE .)
    RPARENT         reduce using rule 34 (value_numeric -> VARIABLE .)
    COMMA           reduce using rule 34 (value_numeric -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 34 (value_numeric -> VARIABLE .)
    PLUS            reduce using rule 34 (value_numeric -> VARIABLE .)
    MINUS           reduce using rule 34 (value_numeric -> VARIABLE .)
    TIMES           reduce using rule 34 (value_numeric -> VARIABLE .)
    DIVIDE          reduce using rule 34 (value_numeric -> VARIABLE .)
    PERCENT         reduce using rule 34 (value_numeric -> VARIABLE .)


state 227

    (132) stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 257


state 228

    (143) queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 258


state 229

    (108) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD . LPARENT thread_identificator RPARENT DOTANDCOMMA
    (109) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD . LPARENT concurrent_method RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 259


state 230

    (130) normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY . all_block_code RKEY
    (16) all_block_code -> . block_code
    (17) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . thread_main
    (9) block_code -> . concurrent_method
    (10) block_code -> . normal_if
    (11) block_code -> . block_while
    (12) block_code -> . stack_struct
    (13) block_code -> . functions_stack
    (14) block_code -> . queue_struct
    (15) block_code -> . functions_queue
    (65) def_const_or_var -> . constant_assignation
    (66) def_const_or_var -> . variable_assignation
    (35) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (36) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (107) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (112) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (113) concurrent_method -> . WRITE
    (124) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (125) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (128) block_while -> . normal_while
    (129) block_while -> . do_while
    (132) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (133) functions_stack -> . stack_push
    (134) functions_stack -> . stack_pop
    (135) functions_stack -> . stack_clear
    (136) functions_stack -> . stack_peek
    (137) functions_stack -> . stack_isEmpty
    (143) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (144) functions_queue -> . queue_enqueue
    (145) functions_queue -> . queue_dequeue
    (146) functions_queue -> . queue_clear
    (147) functions_queue -> . queue_isEmpty
    (148) functions_queue -> . queue_peek
    (67) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (68) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (69) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (70) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (108) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (109) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (130) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (131) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (138) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (139) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (140) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (141) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (142) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (149) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (150) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (151) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (153) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (152) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (71) access_modifiers -> . PUBLIC
    (72) access_modifiers -> . PRIVATE
    (92) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (93) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (94) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (95) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (96) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 46
    STATIC          shift and go to state 29
    WRITE           shift and go to state 48
    IF              shift and go to state 49
    STACK           shift and go to state 52
    QUEUE           shift and go to state 58
    CONST           shift and go to state 65
    THREAD          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    VARIABLE        shift and go to state 31
    PUBLIC          shift and go to state 70
    PRIVATE         shift and go to state 71
    INTTYPE         shift and go to state 72
    STRINGTYPE      shift and go to state 30
    FLOATTYPE       shift and go to state 73
    BOOLTYPE        shift and go to state 74

    all_block_code                 shift and go to state 260
    block_code                     shift and go to state 33
    def_const_or_var               shift and go to state 34
    print_data                     shift and go to state 35
    thread_main                    shift and go to state 36
    concurrent_method              shift and go to state 37
    normal_if                      shift and go to state 38
    block_while                    shift and go to state 39
    stack_struct                   shift and go to state 40
    functions_stack                shift and go to state 41
    queue_struct                   shift and go to state 42
    functions_queue                shift and go to state 43
    constant_assignation           shift and go to state 44
    variable_assignation           shift and go to state 45
    declaration_thread             shift and go to state 47
    normal_while                   shift and go to state 50
    do_while                       shift and go to state 51
    stack_push                     shift and go to state 53
    stack_pop                      shift and go to state 54
    stack_clear                    shift and go to state 55
    stack_peek                     shift and go to state 56
    stack_isEmpty                  shift and go to state 57
    queue_enqueue                  shift and go to state 59
    queue_dequeue                  shift and go to state 60
    queue_clear                    shift and go to state 61
    queue_isEmpty                  shift and go to state 62
    queue_peek                     shift and go to state 63
    access_modifiers               shift and go to state 64
    assignation_type_value_multiple shift and go to state 66

state 231

    (131) do_while -> DO LKEY all_block_code RKEY WHILE . LPARENT boolean_operation RPARENT

    LPARENT         shift and go to state 261


state 232

    (46) arithmetic_operation -> value_numeric arithmetic_operator . arithmetic_operation
    (45) arithmetic_operation -> . value_numeric
    (46) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (31) value_numeric -> . INTEGER
    (32) value_numeric -> . FLOAT_NUMBER
    (33) value_numeric -> . DECIMAL_NUMBER
    (34) value_numeric -> . VARIABLE

    INTEGER         shift and go to state 131
    FLOAT_NUMBER    shift and go to state 132
    DECIMAL_NUMBER  shift and go to state 133
    VARIABLE        shift and go to state 226

    value_numeric                  shift and go to state 187
    arithmetic_operation           shift and go to state 262

state 233

    (47) arithmetic_operator -> PLUS .

    INTEGER         reduce using rule 47 (arithmetic_operator -> PLUS .)
    FLOAT_NUMBER    reduce using rule 47 (arithmetic_operator -> PLUS .)
    DECIMAL_NUMBER  reduce using rule 47 (arithmetic_operator -> PLUS .)
    VARIABLE        reduce using rule 47 (arithmetic_operator -> PLUS .)


state 234

    (48) arithmetic_operator -> MINUS .

    INTEGER         reduce using rule 48 (arithmetic_operator -> MINUS .)
    FLOAT_NUMBER    reduce using rule 48 (arithmetic_operator -> MINUS .)
    DECIMAL_NUMBER  reduce using rule 48 (arithmetic_operator -> MINUS .)
    VARIABLE        reduce using rule 48 (arithmetic_operator -> MINUS .)


state 235

    (49) arithmetic_operator -> TIMES .

    INTEGER         reduce using rule 49 (arithmetic_operator -> TIMES .)
    FLOAT_NUMBER    reduce using rule 49 (arithmetic_operator -> TIMES .)
    DECIMAL_NUMBER  reduce using rule 49 (arithmetic_operator -> TIMES .)
    VARIABLE        reduce using rule 49 (arithmetic_operator -> TIMES .)


state 236

    (50) arithmetic_operator -> DIVIDE .

    INTEGER         reduce using rule 50 (arithmetic_operator -> DIVIDE .)
    FLOAT_NUMBER    reduce using rule 50 (arithmetic_operator -> DIVIDE .)
    DECIMAL_NUMBER  reduce using rule 50 (arithmetic_operator -> DIVIDE .)
    VARIABLE        reduce using rule 50 (arithmetic_operator -> DIVIDE .)


state 237

    (51) arithmetic_operator -> PERCENT .

    INTEGER         reduce using rule 51 (arithmetic_operator -> PERCENT .)
    FLOAT_NUMBER    reduce using rule 51 (arithmetic_operator -> PERCENT .)
    DECIMAL_NUMBER  reduce using rule 51 (arithmetic_operator -> PERCENT .)
    VARIABLE        reduce using rule 51 (arithmetic_operator -> PERCENT .)


state 238

    (86) assignation_true -> VARIABLE ASSIGNATION . BOOLTRUE
    (87) assignation_true -> VARIABLE ASSIGNATION . VARIABLE
    (88) assignation_true -> VARIABLE ASSIGNATION . boolean_operation
    (60) boolean_operation -> . value_boolean
    (61) boolean_operation -> . LOGICNOT value_boolean
    (62) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (27) value_boolean -> . BOOLTRUE
    (28) value_boolean -> . BOOLFALSE
    (29) value_boolean -> . VARIABLE
    (30) value_boolean -> . comparison_operation
    (52) comparison_operation -> . value_numeric
    (53) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (31) value_numeric -> . INTEGER
    (32) value_numeric -> . FLOAT_NUMBER
    (33) value_numeric -> . DECIMAL_NUMBER
    (34) value_numeric -> . VARIABLE

    BOOLTRUE        shift and go to state 197
    VARIABLE        shift and go to state 263
    LOGICNOT        shift and go to state 125
    BOOLFALSE       shift and go to state 127
    INTEGER         shift and go to state 131
    FLOAT_NUMBER    shift and go to state 132
    DECIMAL_NUMBER  shift and go to state 133

    boolean_operation              shift and go to state 264
    value_boolean                  shift and go to state 124
    comparison_operation           shift and go to state 129
    value_numeric                  shift and go to state 130

state 239

    (89) assignation_false -> VARIABLE ASSIGNATION . BOOLFALSE
    (90) assignation_false -> VARIABLE ASSIGNATION . VARIABLE
    (91) assignation_false -> VARIABLE ASSIGNATION . boolean_operation
    (60) boolean_operation -> . value_boolean
    (61) boolean_operation -> . LOGICNOT value_boolean
    (62) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (27) value_boolean -> . BOOLTRUE
    (28) value_boolean -> . BOOLFALSE
    (29) value_boolean -> . VARIABLE
    (30) value_boolean -> . comparison_operation
    (52) comparison_operation -> . value_numeric
    (53) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (31) value_numeric -> . INTEGER
    (32) value_numeric -> . FLOAT_NUMBER
    (33) value_numeric -> . DECIMAL_NUMBER
    (34) value_numeric -> . VARIABLE

    BOOLFALSE       shift and go to state 199
    VARIABLE        shift and go to state 265
    LOGICNOT        shift and go to state 125
    BOOLTRUE        shift and go to state 126
    INTEGER         shift and go to state 131
    FLOAT_NUMBER    shift and go to state 132
    DECIMAL_NUMBER  shift and go to state 133

    boolean_operation              shift and go to state 266
    value_boolean                  shift and go to state 124
    comparison_operation           shift and go to state 129
    value_numeric                  shift and go to state 130

state 240

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY .
    (5) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY . all_block_code
    (16) all_block_code -> . block_code
    (17) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . thread_main
    (9) block_code -> . concurrent_method
    (10) block_code -> . normal_if
    (11) block_code -> . block_while
    (12) block_code -> . stack_struct
    (13) block_code -> . functions_stack
    (14) block_code -> . queue_struct
    (15) block_code -> . functions_queue
    (65) def_const_or_var -> . constant_assignation
    (66) def_const_or_var -> . variable_assignation
    (35) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (36) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (107) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (112) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (113) concurrent_method -> . WRITE
    (124) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (125) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (128) block_while -> . normal_while
    (129) block_while -> . do_while
    (132) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (133) functions_stack -> . stack_push
    (134) functions_stack -> . stack_pop
    (135) functions_stack -> . stack_clear
    (136) functions_stack -> . stack_peek
    (137) functions_stack -> . stack_isEmpty
    (143) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (144) functions_queue -> . queue_enqueue
    (145) functions_queue -> . queue_dequeue
    (146) functions_queue -> . queue_clear
    (147) functions_queue -> . queue_isEmpty
    (148) functions_queue -> . queue_peek
    (67) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (68) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (69) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (70) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (108) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (109) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (130) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (131) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (138) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (139) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (140) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (141) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (142) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (149) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (150) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (151) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (153) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (152) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (71) access_modifiers -> . PUBLIC
    (72) access_modifiers -> . PRIVATE
    (92) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (93) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (94) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (95) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (96) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    RKEY            reduce using rule 4 (block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY .)
    PRINT           shift and go to state 46
    STATIC          shift and go to state 29
    WRITE           shift and go to state 48
    IF              shift and go to state 49
    STACK           shift and go to state 52
    QUEUE           shift and go to state 58
    CONST           shift and go to state 65
    THREAD          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    VARIABLE        shift and go to state 31
    PUBLIC          shift and go to state 70
    PRIVATE         shift and go to state 71
    INTTYPE         shift and go to state 72
    STRINGTYPE      shift and go to state 30
    FLOATTYPE       shift and go to state 73
    BOOLTYPE        shift and go to state 74

    all_block_code                 shift and go to state 267
    block_code                     shift and go to state 33
    def_const_or_var               shift and go to state 34
    print_data                     shift and go to state 35
    thread_main                    shift and go to state 36
    concurrent_method              shift and go to state 37
    normal_if                      shift and go to state 38
    block_while                    shift and go to state 39
    stack_struct                   shift and go to state 40
    functions_stack                shift and go to state 41
    queue_struct                   shift and go to state 42
    functions_queue                shift and go to state 43
    constant_assignation           shift and go to state 44
    variable_assignation           shift and go to state 45
    declaration_thread             shift and go to state 47
    normal_while                   shift and go to state 50
    do_while                       shift and go to state 51
    stack_push                     shift and go to state 53
    stack_pop                      shift and go to state 54
    stack_clear                    shift and go to state 55
    stack_peek                     shift and go to state 56
    stack_isEmpty                  shift and go to state 57
    queue_enqueue                  shift and go to state 59
    queue_dequeue                  shift and go to state 60
    queue_clear                    shift and go to state 61
    queue_isEmpty                  shift and go to state 62
    queue_peek                     shift and go to state 63
    access_modifiers               shift and go to state 64
    assignation_type_value_multiple shift and go to state 66

state 241

    (112) concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY . thread_logic RKEY
    (114) thread_logic -> . thread_sentence
    (115) thread_logic -> . thread_logic thread_sentence
    (116) thread_sentence -> . thread_expression DOTANDCOMMA
    (117) thread_expression -> . thread_identificator DOT concurrent_method LPARENT RPARENT
    (118) thread_expression -> . PRINT LPARENT STRING RPARENT
    (121) thread_identificator -> . VARIABLE

    PRINT           shift and go to state 272
    VARIABLE        shift and go to state 93

    thread_identificator           shift and go to state 268
    thread_logic                   shift and go to state 269
    thread_sentence                shift and go to state 270
    thread_expression              shift and go to state 271

state 242

    (138) stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 273


state 243

    (39) concatenation -> STRING PLUS . concatenation
    (38) concatenation -> . STRING
    (39) concatenation -> . STRING PLUS concatenation

    STRING          shift and go to state 274

    concatenation                  shift and go to state 275

state 244

    (37) read_data -> READ LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 276


state 245

    (139) stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 139 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 139 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 139 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 139 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 139 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 139 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 139 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 139 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 139 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 139 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 139 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 139 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 139 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 139 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 139 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 139 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 139 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 139 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 139 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)


state 246

    (140) stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .
    (151) queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .

  ! reduce/reduce conflict for PRINT resolved using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STATIC resolved using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WRITE resolved using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for IF resolved using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STACK resolved using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for QUEUE resolved using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for CONST resolved using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for THREAD resolved using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WHILE resolved using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DO resolved using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for INTTYPE resolved using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STRINGTYPE resolved using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FLOATTYPE resolved using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for BOOLTYPE resolved using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for RKEY resolved using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for $end resolved using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    PRINT           reduce using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 140 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)

  ! PRINT           [ reduce using rule 151 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! STATIC          [ reduce using rule 151 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! WRITE           [ reduce using rule 151 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! IF              [ reduce using rule 151 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! STACK           [ reduce using rule 151 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! QUEUE           [ reduce using rule 151 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! CONST           [ reduce using rule 151 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! THREAD          [ reduce using rule 151 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! WHILE           [ reduce using rule 151 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! DO              [ reduce using rule 151 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! VARIABLE        [ reduce using rule 151 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! PUBLIC          [ reduce using rule 151 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! PRIVATE         [ reduce using rule 151 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! INTTYPE         [ reduce using rule 151 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! STRINGTYPE      [ reduce using rule 151 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! FLOATTYPE       [ reduce using rule 151 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! BOOLTYPE        [ reduce using rule 151 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! RKEY            [ reduce using rule 151 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! $end            [ reduce using rule 151 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]


state 247

    (141) stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .
    (152) queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .

  ! reduce/reduce conflict for PRINT resolved using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STATIC resolved using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WRITE resolved using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for IF resolved using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STACK resolved using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for QUEUE resolved using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for CONST resolved using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for THREAD resolved using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WHILE resolved using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DO resolved using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for INTTYPE resolved using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STRINGTYPE resolved using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FLOATTYPE resolved using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for BOOLTYPE resolved using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for RKEY resolved using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for $end resolved using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    PRINT           reduce using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 141 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)

  ! PRINT           [ reduce using rule 152 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! STATIC          [ reduce using rule 152 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! WRITE           [ reduce using rule 152 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! IF              [ reduce using rule 152 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! STACK           [ reduce using rule 152 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! QUEUE           [ reduce using rule 152 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! CONST           [ reduce using rule 152 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! THREAD          [ reduce using rule 152 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! WHILE           [ reduce using rule 152 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! DO              [ reduce using rule 152 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! VARIABLE        [ reduce using rule 152 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! PUBLIC          [ reduce using rule 152 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! PRIVATE         [ reduce using rule 152 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! INTTYPE         [ reduce using rule 152 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! STRINGTYPE      [ reduce using rule 152 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! FLOATTYPE       [ reduce using rule 152 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! BOOLTYPE        [ reduce using rule 152 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! RKEY            [ reduce using rule 152 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! $end            [ reduce using rule 152 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]


state 248

    (142) stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .
    (153) queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .

  ! reduce/reduce conflict for PRINT resolved using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STATIC resolved using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WRITE resolved using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for IF resolved using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STACK resolved using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for QUEUE resolved using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for CONST resolved using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for THREAD resolved using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WHILE resolved using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DO resolved using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for INTTYPE resolved using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STRINGTYPE resolved using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FLOATTYPE resolved using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for BOOLTYPE resolved using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for RKEY resolved using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for $end resolved using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    PRINT           reduce using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 142 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)

  ! PRINT           [ reduce using rule 153 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! STATIC          [ reduce using rule 153 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! WRITE           [ reduce using rule 153 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! IF              [ reduce using rule 153 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! STACK           [ reduce using rule 153 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! QUEUE           [ reduce using rule 153 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! CONST           [ reduce using rule 153 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! THREAD          [ reduce using rule 153 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! WHILE           [ reduce using rule 153 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! DO              [ reduce using rule 153 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! VARIABLE        [ reduce using rule 153 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! PUBLIC          [ reduce using rule 153 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! PRIVATE         [ reduce using rule 153 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! INTTYPE         [ reduce using rule 153 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! STRINGTYPE      [ reduce using rule 153 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! FLOATTYPE       [ reduce using rule 153 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! BOOLTYPE        [ reduce using rule 153 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! RKEY            [ reduce using rule 153 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! $end            [ reduce using rule 153 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]


state 249

    (149) queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 277


state 250

    (150) queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 150 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 150 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 150 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 150 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 150 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 150 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 150 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 150 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 150 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 150 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 150 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 150 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 150 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 150 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 150 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 150 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 150 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 150 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 150 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)


state 251

    (107) thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .

    PRINT           reduce using rule 107 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    STATIC          reduce using rule 107 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    WRITE           reduce using rule 107 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    IF              reduce using rule 107 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    STACK           reduce using rule 107 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    QUEUE           reduce using rule 107 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    CONST           reduce using rule 107 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    THREAD          reduce using rule 107 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    WHILE           reduce using rule 107 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    DO              reduce using rule 107 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    VARIABLE        reduce using rule 107 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    PUBLIC          reduce using rule 107 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    PRIVATE         reduce using rule 107 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    INTTYPE         reduce using rule 107 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    STRINGTYPE      reduce using rule 107 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    FLOATTYPE       reduce using rule 107 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    BOOLTYPE        reduce using rule 107 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    RKEY            reduce using rule 107 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    $end            reduce using rule 107 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)


state 252

    (111) thread_wait -> thread_identificator DOT . JOIN LPARENT RPARENT DOTANDCOMMA

    JOIN            shift and go to state 278


state 253

    (110) thread_init -> thread_identificator DOT START LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 279


state 254

    (124) normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if . RKEY other_if
    (125) normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if . RKEY

    RKEY            shift and go to state 280


state 255

    (122) block_if -> normal_if .
    (10) block_code -> normal_if .

  ! reduce/reduce conflict for RKEY resolved using rule 10 (block_code -> normal_if .)
    PRINT           reduce using rule 10 (block_code -> normal_if .)
    STATIC          reduce using rule 10 (block_code -> normal_if .)
    WRITE           reduce using rule 10 (block_code -> normal_if .)
    IF              reduce using rule 10 (block_code -> normal_if .)
    STACK           reduce using rule 10 (block_code -> normal_if .)
    QUEUE           reduce using rule 10 (block_code -> normal_if .)
    CONST           reduce using rule 10 (block_code -> normal_if .)
    THREAD          reduce using rule 10 (block_code -> normal_if .)
    WHILE           reduce using rule 10 (block_code -> normal_if .)
    DO              reduce using rule 10 (block_code -> normal_if .)
    VARIABLE        reduce using rule 10 (block_code -> normal_if .)
    PUBLIC          reduce using rule 10 (block_code -> normal_if .)
    PRIVATE         reduce using rule 10 (block_code -> normal_if .)
    INTTYPE         reduce using rule 10 (block_code -> normal_if .)
    STRINGTYPE      reduce using rule 10 (block_code -> normal_if .)
    FLOATTYPE       reduce using rule 10 (block_code -> normal_if .)
    BOOLTYPE        reduce using rule 10 (block_code -> normal_if .)
    RKEY            reduce using rule 10 (block_code -> normal_if .)

  ! RKEY            [ reduce using rule 122 (block_if -> normal_if .) ]


state 256

    (123) block_if -> all_block_code .

    RKEY            reduce using rule 123 (block_if -> all_block_code .)


state 257

    (132) stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 281


state 258

    (143) queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 282


state 259

    (108) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT . thread_identificator RPARENT DOTANDCOMMA
    (109) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT . concurrent_method RPARENT DOTANDCOMMA
    (121) thread_identificator -> . VARIABLE
    (112) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (113) concurrent_method -> . WRITE

    VARIABLE        shift and go to state 93
    STATIC          shift and go to state 29
    WRITE           shift and go to state 48

    thread_identificator           shift and go to state 283
    concurrent_method              shift and go to state 284

state 260

    (130) normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code . RKEY

    RKEY            shift and go to state 285


state 261

    (131) do_while -> DO LKEY all_block_code RKEY WHILE LPARENT . boolean_operation RPARENT
    (60) boolean_operation -> . value_boolean
    (61) boolean_operation -> . LOGICNOT value_boolean
    (62) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (27) value_boolean -> . BOOLTRUE
    (28) value_boolean -> . BOOLFALSE
    (29) value_boolean -> . VARIABLE
    (30) value_boolean -> . comparison_operation
    (52) comparison_operation -> . value_numeric
    (53) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (31) value_numeric -> . INTEGER
    (32) value_numeric -> . FLOAT_NUMBER
    (33) value_numeric -> . DECIMAL_NUMBER
    (34) value_numeric -> . VARIABLE

    LOGICNOT        shift and go to state 125
    BOOLTRUE        shift and go to state 126
    BOOLFALSE       shift and go to state 127
    VARIABLE        shift and go to state 128
    INTEGER         shift and go to state 131
    FLOAT_NUMBER    shift and go to state 132
    DECIMAL_NUMBER  shift and go to state 133

    boolean_operation              shift and go to state 286
    value_boolean                  shift and go to state 124
    comparison_operation           shift and go to state 129
    value_numeric                  shift and go to state 130

state 262

    (46) arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .

    COMMA           reduce using rule 46 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .)
    DOTANDCOMMA     reduce using rule 46 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .)


state 263

    (87) assignation_true -> VARIABLE ASSIGNATION VARIABLE .
    (29) value_boolean -> VARIABLE .
    (34) value_numeric -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 29 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 29 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for LOGICAND resolved using rule 29 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for LOGICOR resolved using rule 29 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 29 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 29 (value_boolean -> VARIABLE .)
    LOGICAND        reduce using rule 29 (value_boolean -> VARIABLE .)
    LOGICOR         reduce using rule 29 (value_boolean -> VARIABLE .)
    COMMA           reduce using rule 29 (value_boolean -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 29 (value_boolean -> VARIABLE .)
    GREATER_THAN    reduce using rule 34 (value_numeric -> VARIABLE .)
    SMALLER_THAN    reduce using rule 34 (value_numeric -> VARIABLE .)
    EQUAL_COMPARATION reduce using rule 34 (value_numeric -> VARIABLE .)
    INEQUALITY      reduce using rule 34 (value_numeric -> VARIABLE .)
    GREATER_THAN_OR_EQUAL reduce using rule 34 (value_numeric -> VARIABLE .)
    SMALLER_THAN_OR_EQUAL reduce using rule 34 (value_numeric -> VARIABLE .)

  ! COMMA           [ reduce using rule 87 (assignation_true -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 87 (assignation_true -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! LOGICAND        [ reduce using rule 34 (value_numeric -> VARIABLE .) ]
  ! LOGICOR         [ reduce using rule 34 (value_numeric -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 34 (value_numeric -> VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 34 (value_numeric -> VARIABLE .) ]


state 264

    (88) assignation_true -> VARIABLE ASSIGNATION boolean_operation .

    COMMA           reduce using rule 88 (assignation_true -> VARIABLE ASSIGNATION boolean_operation .)
    DOTANDCOMMA     reduce using rule 88 (assignation_true -> VARIABLE ASSIGNATION boolean_operation .)


state 265

    (90) assignation_false -> VARIABLE ASSIGNATION VARIABLE .
    (29) value_boolean -> VARIABLE .
    (34) value_numeric -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 29 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 29 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for LOGICAND resolved using rule 29 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for LOGICOR resolved using rule 29 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 29 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 29 (value_boolean -> VARIABLE .)
    LOGICAND        reduce using rule 29 (value_boolean -> VARIABLE .)
    LOGICOR         reduce using rule 29 (value_boolean -> VARIABLE .)
    COMMA           reduce using rule 29 (value_boolean -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 29 (value_boolean -> VARIABLE .)
    GREATER_THAN    reduce using rule 34 (value_numeric -> VARIABLE .)
    SMALLER_THAN    reduce using rule 34 (value_numeric -> VARIABLE .)
    EQUAL_COMPARATION reduce using rule 34 (value_numeric -> VARIABLE .)
    INEQUALITY      reduce using rule 34 (value_numeric -> VARIABLE .)
    GREATER_THAN_OR_EQUAL reduce using rule 34 (value_numeric -> VARIABLE .)
    SMALLER_THAN_OR_EQUAL reduce using rule 34 (value_numeric -> VARIABLE .)

  ! COMMA           [ reduce using rule 90 (assignation_false -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 90 (assignation_false -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! LOGICAND        [ reduce using rule 34 (value_numeric -> VARIABLE .) ]
  ! LOGICOR         [ reduce using rule 34 (value_numeric -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 34 (value_numeric -> VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 34 (value_numeric -> VARIABLE .) ]


state 266

    (91) assignation_false -> VARIABLE ASSIGNATION boolean_operation .

    COMMA           reduce using rule 91 (assignation_false -> VARIABLE ASSIGNATION boolean_operation .)
    DOTANDCOMMA     reduce using rule 91 (assignation_false -> VARIABLE ASSIGNATION boolean_operation .)


state 267

    (5) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code .

    RKEY            reduce using rule 5 (block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code .)


state 268

    (117) thread_expression -> thread_identificator . DOT concurrent_method LPARENT RPARENT

    DOT             shift and go to state 287


state 269

    (112) concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic . RKEY
    (115) thread_logic -> thread_logic . thread_sentence
    (116) thread_sentence -> . thread_expression DOTANDCOMMA
    (117) thread_expression -> . thread_identificator DOT concurrent_method LPARENT RPARENT
    (118) thread_expression -> . PRINT LPARENT STRING RPARENT
    (121) thread_identificator -> . VARIABLE

    RKEY            shift and go to state 288
    PRINT           shift and go to state 272
    VARIABLE        shift and go to state 93

    thread_identificator           shift and go to state 268
    thread_sentence                shift and go to state 289
    thread_expression              shift and go to state 271

state 270

    (114) thread_logic -> thread_sentence .

    RKEY            reduce using rule 114 (thread_logic -> thread_sentence .)
    PRINT           reduce using rule 114 (thread_logic -> thread_sentence .)
    VARIABLE        reduce using rule 114 (thread_logic -> thread_sentence .)


state 271

    (116) thread_sentence -> thread_expression . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 290


state 272

    (118) thread_expression -> PRINT . LPARENT STRING RPARENT

    LPARENT         shift and go to state 291


state 273

    (138) stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 138 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 138 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 138 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    IF              reduce using rule 138 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 138 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 138 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 138 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 138 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 138 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    DO              reduce using rule 138 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 138 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 138 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 138 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 138 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 138 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 138 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 138 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 138 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    $end            reduce using rule 138 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)


state 274

    (38) concatenation -> STRING .
    (39) concatenation -> STRING . PLUS concatenation

    RPARENT         reduce using rule 38 (concatenation -> STRING .)
    PLUS            shift and go to state 243


state 275

    (39) concatenation -> STRING PLUS concatenation .

    RPARENT         reduce using rule 39 (concatenation -> STRING PLUS concatenation .)


state 276

    (37) read_data -> READ LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 292


state 277

    (149) queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 149 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 149 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 149 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    IF              reduce using rule 149 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 149 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 149 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 149 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 149 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 149 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    DO              reduce using rule 149 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 149 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 149 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 149 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 149 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 149 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 149 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 149 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 149 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    $end            reduce using rule 149 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)


state 278

    (111) thread_wait -> thread_identificator DOT JOIN . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 293


state 279

    (110) thread_init -> thread_identificator DOT START LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 294


state 280

    (124) normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY . other_if
    (125) normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .
    (126) other_if -> . ELSE LKEY block_if RKEY
    (127) other_if -> . ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if

    PRINT           reduce using rule 125 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    STATIC          reduce using rule 125 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    WRITE           reduce using rule 125 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    IF              reduce using rule 125 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    STACK           reduce using rule 125 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    QUEUE           reduce using rule 125 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    CONST           reduce using rule 125 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    THREAD          reduce using rule 125 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    WHILE           reduce using rule 125 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    DO              reduce using rule 125 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    VARIABLE        reduce using rule 125 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    PUBLIC          reduce using rule 125 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    PRIVATE         reduce using rule 125 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    INTTYPE         reduce using rule 125 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    STRINGTYPE      reduce using rule 125 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    FLOATTYPE       reduce using rule 125 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    BOOLTYPE        reduce using rule 125 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    RKEY            reduce using rule 125 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    $end            reduce using rule 125 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    ELSE            shift and go to state 296
    ELSE_IF         shift and go to state 297

    other_if                       shift and go to state 295

state 281

    (132) stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 298


state 282

    (143) queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 299


state 283

    (108) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 300


state 284

    (109) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 301


state 285

    (130) normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .

    PRINT           reduce using rule 130 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    STATIC          reduce using rule 130 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    WRITE           reduce using rule 130 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    IF              reduce using rule 130 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    STACK           reduce using rule 130 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    QUEUE           reduce using rule 130 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    CONST           reduce using rule 130 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    THREAD          reduce using rule 130 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    WHILE           reduce using rule 130 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    DO              reduce using rule 130 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    VARIABLE        reduce using rule 130 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    PUBLIC          reduce using rule 130 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    PRIVATE         reduce using rule 130 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    INTTYPE         reduce using rule 130 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    STRINGTYPE      reduce using rule 130 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    FLOATTYPE       reduce using rule 130 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    BOOLTYPE        reduce using rule 130 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    RKEY            reduce using rule 130 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    $end            reduce using rule 130 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)


state 286

    (131) do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation . RPARENT

    RPARENT         shift and go to state 302


state 287

    (117) thread_expression -> thread_identificator DOT . concurrent_method LPARENT RPARENT
    (112) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (113) concurrent_method -> . WRITE

    STATIC          shift and go to state 29
    WRITE           shift and go to state 48

    concurrent_method              shift and go to state 303

state 288

    (112) concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .

    PRINT           reduce using rule 112 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    STATIC          reduce using rule 112 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    WRITE           reduce using rule 112 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    IF              reduce using rule 112 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    STACK           reduce using rule 112 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    QUEUE           reduce using rule 112 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    CONST           reduce using rule 112 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    THREAD          reduce using rule 112 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    WHILE           reduce using rule 112 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    DO              reduce using rule 112 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    VARIABLE        reduce using rule 112 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    PUBLIC          reduce using rule 112 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    PRIVATE         reduce using rule 112 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    INTTYPE         reduce using rule 112 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    STRINGTYPE      reduce using rule 112 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    FLOATTYPE       reduce using rule 112 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    BOOLTYPE        reduce using rule 112 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    RKEY            reduce using rule 112 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    $end            reduce using rule 112 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    RPARENT         reduce using rule 112 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    LPARENT         reduce using rule 112 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)


state 289

    (115) thread_logic -> thread_logic thread_sentence .

    RKEY            reduce using rule 115 (thread_logic -> thread_logic thread_sentence .)
    PRINT           reduce using rule 115 (thread_logic -> thread_logic thread_sentence .)
    VARIABLE        reduce using rule 115 (thread_logic -> thread_logic thread_sentence .)


state 290

    (116) thread_sentence -> thread_expression DOTANDCOMMA .

    RKEY            reduce using rule 116 (thread_sentence -> thread_expression DOTANDCOMMA .)
    PRINT           reduce using rule 116 (thread_sentence -> thread_expression DOTANDCOMMA .)
    VARIABLE        reduce using rule 116 (thread_sentence -> thread_expression DOTANDCOMMA .)


state 291

    (118) thread_expression -> PRINT LPARENT . STRING RPARENT

    STRING          shift and go to state 304


state 292

    (37) read_data -> READ LPARENT RPARENT DOTANDCOMMA .

    RPARENT         reduce using rule 37 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)


state 293

    (111) thread_wait -> thread_identificator DOT JOIN LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 305


state 294

    (110) thread_init -> thread_identificator DOT START LPARENT RPARENT DOTANDCOMMA .

    VARIABLE        reduce using rule 110 (thread_init -> thread_identificator DOT START LPARENT RPARENT DOTANDCOMMA .)


state 295

    (124) normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .

    PRINT           reduce using rule 124 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    STATIC          reduce using rule 124 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    WRITE           reduce using rule 124 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    IF              reduce using rule 124 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    STACK           reduce using rule 124 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    QUEUE           reduce using rule 124 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    CONST           reduce using rule 124 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    THREAD          reduce using rule 124 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    WHILE           reduce using rule 124 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    DO              reduce using rule 124 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    VARIABLE        reduce using rule 124 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    PUBLIC          reduce using rule 124 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    PRIVATE         reduce using rule 124 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    INTTYPE         reduce using rule 124 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    STRINGTYPE      reduce using rule 124 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    FLOATTYPE       reduce using rule 124 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    BOOLTYPE        reduce using rule 124 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    RKEY            reduce using rule 124 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    $end            reduce using rule 124 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)


state 296

    (126) other_if -> ELSE . LKEY block_if RKEY

    LKEY            shift and go to state 306


state 297

    (127) other_if -> ELSE_IF . LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if

    LPARENT         shift and go to state 307


state 298

    (132) stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 132 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 132 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 132 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 132 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 132 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 132 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 132 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 132 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 132 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 132 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 132 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 132 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 132 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 132 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 132 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 132 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 132 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 132 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 132 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)


state 299

    (143) queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 143 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 143 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 143 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 143 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 143 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 143 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 143 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 143 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 143 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 143 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 143 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 143 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 143 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 143 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 143 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 143 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 143 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 143 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 143 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)


state 300

    (108) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 308


state 301

    (109) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 309


state 302

    (131) do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .

    PRINT           reduce using rule 131 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    STATIC          reduce using rule 131 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    WRITE           reduce using rule 131 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    IF              reduce using rule 131 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    STACK           reduce using rule 131 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    QUEUE           reduce using rule 131 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    CONST           reduce using rule 131 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    THREAD          reduce using rule 131 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    WHILE           reduce using rule 131 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    DO              reduce using rule 131 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    VARIABLE        reduce using rule 131 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    PUBLIC          reduce using rule 131 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    PRIVATE         reduce using rule 131 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    INTTYPE         reduce using rule 131 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    STRINGTYPE      reduce using rule 131 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    FLOATTYPE       reduce using rule 131 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    BOOLTYPE        reduce using rule 131 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    RKEY            reduce using rule 131 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    $end            reduce using rule 131 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)


state 303

    (117) thread_expression -> thread_identificator DOT concurrent_method . LPARENT RPARENT

    LPARENT         shift and go to state 310


state 304

    (118) thread_expression -> PRINT LPARENT STRING . RPARENT

    RPARENT         shift and go to state 311


state 305

    (111) thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 312


state 306

    (126) other_if -> ELSE LKEY . block_if RKEY
    (122) block_if -> . normal_if
    (123) block_if -> . all_block_code
    (124) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (125) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (16) all_block_code -> . block_code
    (17) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . thread_main
    (9) block_code -> . concurrent_method
    (10) block_code -> . normal_if
    (11) block_code -> . block_while
    (12) block_code -> . stack_struct
    (13) block_code -> . functions_stack
    (14) block_code -> . queue_struct
    (15) block_code -> . functions_queue
    (65) def_const_or_var -> . constant_assignation
    (66) def_const_or_var -> . variable_assignation
    (35) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (36) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (107) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (112) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (113) concurrent_method -> . WRITE
    (128) block_while -> . normal_while
    (129) block_while -> . do_while
    (132) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (133) functions_stack -> . stack_push
    (134) functions_stack -> . stack_pop
    (135) functions_stack -> . stack_clear
    (136) functions_stack -> . stack_peek
    (137) functions_stack -> . stack_isEmpty
    (143) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (144) functions_queue -> . queue_enqueue
    (145) functions_queue -> . queue_dequeue
    (146) functions_queue -> . queue_clear
    (147) functions_queue -> . queue_isEmpty
    (148) functions_queue -> . queue_peek
    (67) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (68) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (69) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (70) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (108) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (109) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (130) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (131) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (138) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (139) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (140) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (141) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (142) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (149) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (150) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (151) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (153) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (152) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (71) access_modifiers -> . PUBLIC
    (72) access_modifiers -> . PRIVATE
    (92) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (93) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (94) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (95) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (96) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    IF              shift and go to state 49
    PRINT           shift and go to state 46
    STATIC          shift and go to state 29
    WRITE           shift and go to state 48
    STACK           shift and go to state 52
    QUEUE           shift and go to state 58
    CONST           shift and go to state 65
    THREAD          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    VARIABLE        shift and go to state 31
    PUBLIC          shift and go to state 70
    PRIVATE         shift and go to state 71
    INTTYPE         shift and go to state 72
    STRINGTYPE      shift and go to state 30
    FLOATTYPE       shift and go to state 73
    BOOLTYPE        shift and go to state 74

    block_if                       shift and go to state 313
    normal_if                      shift and go to state 255
    all_block_code                 shift and go to state 256
    block_code                     shift and go to state 33
    def_const_or_var               shift and go to state 34
    print_data                     shift and go to state 35
    thread_main                    shift and go to state 36
    concurrent_method              shift and go to state 37
    block_while                    shift and go to state 39
    stack_struct                   shift and go to state 40
    functions_stack                shift and go to state 41
    queue_struct                   shift and go to state 42
    functions_queue                shift and go to state 43
    constant_assignation           shift and go to state 44
    variable_assignation           shift and go to state 45
    declaration_thread             shift and go to state 47
    normal_while                   shift and go to state 50
    do_while                       shift and go to state 51
    stack_push                     shift and go to state 53
    stack_pop                      shift and go to state 54
    stack_clear                    shift and go to state 55
    stack_peek                     shift and go to state 56
    stack_isEmpty                  shift and go to state 57
    queue_enqueue                  shift and go to state 59
    queue_dequeue                  shift and go to state 60
    queue_clear                    shift and go to state 61
    queue_isEmpty                  shift and go to state 62
    queue_peek                     shift and go to state 63
    access_modifiers               shift and go to state 64
    assignation_type_value_multiple shift and go to state 66

state 307

    (127) other_if -> ELSE_IF LPARENT . boolean_operation RPARENT LKEY block_if RKEY other_if
    (60) boolean_operation -> . value_boolean
    (61) boolean_operation -> . LOGICNOT value_boolean
    (62) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (27) value_boolean -> . BOOLTRUE
    (28) value_boolean -> . BOOLFALSE
    (29) value_boolean -> . VARIABLE
    (30) value_boolean -> . comparison_operation
    (52) comparison_operation -> . value_numeric
    (53) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (31) value_numeric -> . INTEGER
    (32) value_numeric -> . FLOAT_NUMBER
    (33) value_numeric -> . DECIMAL_NUMBER
    (34) value_numeric -> . VARIABLE

    LOGICNOT        shift and go to state 125
    BOOLTRUE        shift and go to state 126
    BOOLFALSE       shift and go to state 127
    VARIABLE        shift and go to state 128
    INTEGER         shift and go to state 131
    FLOAT_NUMBER    shift and go to state 132
    DECIMAL_NUMBER  shift and go to state 133

    boolean_operation              shift and go to state 314
    value_boolean                  shift and go to state 124
    comparison_operation           shift and go to state 129
    value_numeric                  shift and go to state 130

state 308

    (108) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA .

    THREAD          reduce using rule 108 (declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 108 (declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA .)


state 309

    (109) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA .

    THREAD          reduce using rule 109 (declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 109 (declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA .)


state 310

    (117) thread_expression -> thread_identificator DOT concurrent_method LPARENT . RPARENT

    RPARENT         shift and go to state 315


state 311

    (118) thread_expression -> PRINT LPARENT STRING RPARENT .

    DOTANDCOMMA     reduce using rule 118 (thread_expression -> PRINT LPARENT STRING RPARENT .)


state 312

    (111) thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .

    VARIABLE        reduce using rule 111 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    PRINT           reduce using rule 111 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 111 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 111 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 111 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 111 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 111 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 111 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 111 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 111 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 111 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 111 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 111 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 111 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 111 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 111 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 111 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 111 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 111 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)


state 313

    (126) other_if -> ELSE LKEY block_if . RKEY

    RKEY            shift and go to state 316


state 314

    (127) other_if -> ELSE_IF LPARENT boolean_operation . RPARENT LKEY block_if RKEY other_if

    RPARENT         shift and go to state 317


state 315

    (117) thread_expression -> thread_identificator DOT concurrent_method LPARENT RPARENT .

    DOTANDCOMMA     reduce using rule 117 (thread_expression -> thread_identificator DOT concurrent_method LPARENT RPARENT .)


state 316

    (126) other_if -> ELSE LKEY block_if RKEY .

    PRINT           reduce using rule 126 (other_if -> ELSE LKEY block_if RKEY .)
    STATIC          reduce using rule 126 (other_if -> ELSE LKEY block_if RKEY .)
    WRITE           reduce using rule 126 (other_if -> ELSE LKEY block_if RKEY .)
    IF              reduce using rule 126 (other_if -> ELSE LKEY block_if RKEY .)
    STACK           reduce using rule 126 (other_if -> ELSE LKEY block_if RKEY .)
    QUEUE           reduce using rule 126 (other_if -> ELSE LKEY block_if RKEY .)
    CONST           reduce using rule 126 (other_if -> ELSE LKEY block_if RKEY .)
    THREAD          reduce using rule 126 (other_if -> ELSE LKEY block_if RKEY .)
    WHILE           reduce using rule 126 (other_if -> ELSE LKEY block_if RKEY .)
    DO              reduce using rule 126 (other_if -> ELSE LKEY block_if RKEY .)
    VARIABLE        reduce using rule 126 (other_if -> ELSE LKEY block_if RKEY .)
    PUBLIC          reduce using rule 126 (other_if -> ELSE LKEY block_if RKEY .)
    PRIVATE         reduce using rule 126 (other_if -> ELSE LKEY block_if RKEY .)
    INTTYPE         reduce using rule 126 (other_if -> ELSE LKEY block_if RKEY .)
    STRINGTYPE      reduce using rule 126 (other_if -> ELSE LKEY block_if RKEY .)
    FLOATTYPE       reduce using rule 126 (other_if -> ELSE LKEY block_if RKEY .)
    BOOLTYPE        reduce using rule 126 (other_if -> ELSE LKEY block_if RKEY .)
    RKEY            reduce using rule 126 (other_if -> ELSE LKEY block_if RKEY .)
    $end            reduce using rule 126 (other_if -> ELSE LKEY block_if RKEY .)


state 317

    (127) other_if -> ELSE_IF LPARENT boolean_operation RPARENT . LKEY block_if RKEY other_if

    LKEY            shift and go to state 318


state 318

    (127) other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY . block_if RKEY other_if
    (122) block_if -> . normal_if
    (123) block_if -> . all_block_code
    (124) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (125) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (16) all_block_code -> . block_code
    (17) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . thread_main
    (9) block_code -> . concurrent_method
    (10) block_code -> . normal_if
    (11) block_code -> . block_while
    (12) block_code -> . stack_struct
    (13) block_code -> . functions_stack
    (14) block_code -> . queue_struct
    (15) block_code -> . functions_queue
    (65) def_const_or_var -> . constant_assignation
    (66) def_const_or_var -> . variable_assignation
    (35) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (36) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (107) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (112) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (113) concurrent_method -> . WRITE
    (128) block_while -> . normal_while
    (129) block_while -> . do_while
    (132) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (133) functions_stack -> . stack_push
    (134) functions_stack -> . stack_pop
    (135) functions_stack -> . stack_clear
    (136) functions_stack -> . stack_peek
    (137) functions_stack -> . stack_isEmpty
    (143) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (144) functions_queue -> . queue_enqueue
    (145) functions_queue -> . queue_dequeue
    (146) functions_queue -> . queue_clear
    (147) functions_queue -> . queue_isEmpty
    (148) functions_queue -> . queue_peek
    (67) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (68) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (69) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (70) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (108) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (109) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (130) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (131) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (138) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (139) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (140) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (141) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (142) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (149) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (150) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (151) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (153) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (152) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (71) access_modifiers -> . PUBLIC
    (72) access_modifiers -> . PRIVATE
    (92) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (93) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (94) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (95) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (96) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    IF              shift and go to state 49
    PRINT           shift and go to state 46
    STATIC          shift and go to state 29
    WRITE           shift and go to state 48
    STACK           shift and go to state 52
    QUEUE           shift and go to state 58
    CONST           shift and go to state 65
    THREAD          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    VARIABLE        shift and go to state 31
    PUBLIC          shift and go to state 70
    PRIVATE         shift and go to state 71
    INTTYPE         shift and go to state 72
    STRINGTYPE      shift and go to state 30
    FLOATTYPE       shift and go to state 73
    BOOLTYPE        shift and go to state 74

    block_if                       shift and go to state 319
    normal_if                      shift and go to state 255
    all_block_code                 shift and go to state 256
    block_code                     shift and go to state 33
    def_const_or_var               shift and go to state 34
    print_data                     shift and go to state 35
    thread_main                    shift and go to state 36
    concurrent_method              shift and go to state 37
    block_while                    shift and go to state 39
    stack_struct                   shift and go to state 40
    functions_stack                shift and go to state 41
    queue_struct                   shift and go to state 42
    functions_queue                shift and go to state 43
    constant_assignation           shift and go to state 44
    variable_assignation           shift and go to state 45
    declaration_thread             shift and go to state 47
    normal_while                   shift and go to state 50
    do_while                       shift and go to state 51
    stack_push                     shift and go to state 53
    stack_pop                      shift and go to state 54
    stack_clear                    shift and go to state 55
    stack_peek                     shift and go to state 56
    stack_isEmpty                  shift and go to state 57
    queue_enqueue                  shift and go to state 59
    queue_dequeue                  shift and go to state 60
    queue_clear                    shift and go to state 61
    queue_isEmpty                  shift and go to state 62
    queue_peek                     shift and go to state 63
    access_modifiers               shift and go to state 64
    assignation_type_value_multiple shift and go to state 66

state 319

    (127) other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if . RKEY other_if

    RKEY            shift and go to state 320


state 320

    (127) other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY . other_if
    (126) other_if -> . ELSE LKEY block_if RKEY
    (127) other_if -> . ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if

    ELSE            shift and go to state 296
    ELSE_IF         shift and go to state 297

    other_if                       shift and go to state 321

state 321

    (127) other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .

    PRINT           reduce using rule 127 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    STATIC          reduce using rule 127 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    WRITE           reduce using rule 127 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    IF              reduce using rule 127 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    STACK           reduce using rule 127 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    QUEUE           reduce using rule 127 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    CONST           reduce using rule 127 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    THREAD          reduce using rule 127 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    WHILE           reduce using rule 127 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    DO              reduce using rule 127 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    VARIABLE        reduce using rule 127 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    PUBLIC          reduce using rule 127 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    PRIVATE         reduce using rule 127 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    INTTYPE         reduce using rule 127 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    STRINGTYPE      reduce using rule 127 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    FLOATTYPE       reduce using rule 127 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    BOOLTYPE        reduce using rule 127 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    RKEY            reduce using rule 127 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    $end            reduce using rule 127 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 128 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (value_numeric -> VARIABLE) in state 128
WARNING: reduce/reduce conflict in state 184 resolved using rule (value_numeric -> VARIABLE)
WARNING: rejected rule (assignation_int -> VARIABLE ASSIGNATION VARIABLE) in state 184
WARNING: reduce/reduce conflict in state 185 resolved using rule (value_numeric -> INTEGER)
WARNING: rejected rule (assignation_int -> VARIABLE ASSIGNATION INTEGER) in state 185
WARNING: reduce/reduce conflict in state 189 resolved using rule (value_numeric -> VARIABLE)
WARNING: rejected rule (assignation_float -> VARIABLE ASSIGNATION VARIABLE) in state 189
WARNING: reduce/reduce conflict in state 190 resolved using rule (value_numeric -> FLOAT_NUMBER)
WARNING: rejected rule (assignation_float -> VARIABLE ASSIGNATION FLOAT_NUMBER) in state 190
WARNING: reduce/reduce conflict in state 196 resolved using rule (assignation_true -> VARIABLE ASSIGNATION VARIABLE)
WARNING: rejected rule (assignation_false -> VARIABLE ASSIGNATION VARIABLE) in state 196
WARNING: reduce/reduce conflict in state 196 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (assignation_true -> VARIABLE ASSIGNATION VARIABLE) in state 196
WARNING: reduce/reduce conflict in state 196 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (value_numeric -> VARIABLE) in state 196
WARNING: reduce/reduce conflict in state 197 resolved using rule (value_boolean -> BOOLTRUE)
WARNING: rejected rule (assignation_true -> VARIABLE ASSIGNATION BOOLTRUE) in state 197
WARNING: reduce/reduce conflict in state 198 resolved using rule (assignation_true -> VARIABLE ASSIGNATION boolean_operation)
WARNING: rejected rule (assignation_false -> VARIABLE ASSIGNATION boolean_operation) in state 198
WARNING: reduce/reduce conflict in state 199 resolved using rule (value_boolean -> BOOLFALSE)
WARNING: rejected rule (assignation_false -> VARIABLE ASSIGNATION BOOLFALSE) in state 199
WARNING: reduce/reduce conflict in state 202 resolved using rule (value_numeric -> VARIABLE)
WARNING: rejected rule (value -> VARIABLE) in state 202
WARNING: reduce/reduce conflict in state 202 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (value_numeric -> VARIABLE) in state 202
WARNING: reduce/reduce conflict in state 204 resolved using rule (value -> value_numeric)
WARNING: rejected rule (comparison_operation -> value_numeric) in state 204
WARNING: reduce/reduce conflict in state 208 resolved using rule (value_string -> STRING)
WARNING: rejected rule (concatenation -> STRING) in state 208
WARNING: reduce/reduce conflict in state 246 resolved using rule (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA)
WARNING: rejected rule (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA) in state 246
WARNING: reduce/reduce conflict in state 247 resolved using rule (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA)
WARNING: rejected rule (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA) in state 247
WARNING: reduce/reduce conflict in state 248 resolved using rule (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA)
WARNING: rejected rule (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA) in state 248
WARNING: reduce/reduce conflict in state 255 resolved using rule (block_code -> normal_if)
WARNING: rejected rule (block_if -> normal_if) in state 255
WARNING: reduce/reduce conflict in state 263 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (assignation_true -> VARIABLE ASSIGNATION VARIABLE) in state 263
WARNING: reduce/reduce conflict in state 263 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (value_numeric -> VARIABLE) in state 263
WARNING: reduce/reduce conflict in state 265 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (assignation_false -> VARIABLE ASSIGNATION VARIABLE) in state 265
WARNING: reduce/reduce conflict in state 265 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (value_numeric -> VARIABLE) in state 265
WARNING: Rule (assignation_int -> VARIABLE ASSIGNATION VARIABLE) is never reduced
WARNING: Rule (assignation_int -> VARIABLE ASSIGNATION INTEGER) is never reduced
WARNING: Rule (assignation_float -> VARIABLE ASSIGNATION VARIABLE) is never reduced
WARNING: Rule (assignation_float -> VARIABLE ASSIGNATION FLOAT_NUMBER) is never reduced
WARNING: Rule (assignation_false -> VARIABLE ASSIGNATION VARIABLE) is never reduced
WARNING: Rule (assignation_true -> VARIABLE ASSIGNATION VARIABLE) is never reduced
WARNING: Rule (assignation_true -> VARIABLE ASSIGNATION BOOLTRUE) is never reduced
WARNING: Rule (assignation_false -> VARIABLE ASSIGNATION BOOLFALSE) is never reduced
WARNING: Rule (value -> VARIABLE) is never reduced
WARNING: Rule (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA) is never reduced
WARNING: Rule (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA) is never reduced
WARNING: Rule (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA) is never reduced
WARNING: Rule (block_if -> normal_if) is never reduced
