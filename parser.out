Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ACTION
    ADDITION_ASSIGNMENT
    ASYNC
    AWAIT
    BACK_SLASH
    BREAK
    CONCURRENT
    DECREMENT
    DICTIONARY
    DIVISION_ASSIGNMENT
    DOLLARSIGN
    DOUBLEPOINT
    DOUBLE_QUOTATION_MARKS
    FOR
    FOREACH
    ID
    IDENTIFIER
    IN
    INCREMENT
    JUMP_LINE
    LONG
    MODULE_ASSIGNMENT
    MULTIPLICATION_ASSIGNMENT
    NAMESPACE
    PIPE
    PUT
    REMOVE
    RETURN
    SIPLE_QUOTATION_MARKS
    SUBTRACTION_ASSIGNMENT
    SWITCH
    TABULATION
    TASK

Grammar

Rule 0     S' -> program
Rule 1     program -> USING SYSTEM DOTANDCOMMA block_publicClass
Rule 2     block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_main_method RKEY
Rule 3     block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code
Rule 4     block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
Rule 5     block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code
Rule 6     block_code -> def_const_or_var
Rule 7     block_code -> print_data
Rule 8     block_code -> thread_main
Rule 9     block_code -> concurrent_method
Rule 10    block_code -> block_try_catch
Rule 11    block_code -> lists
Rule 12    block_code -> functions_list
Rule 13    block_code -> statement_lambda
Rule 14    block_code -> enums
Rule 15    block_code -> normal_if
Rule 16    block_code -> block_while
Rule 17    block_code -> stack_struct
Rule 18    block_code -> functions_stack
Rule 19    block_code -> queue_struct
Rule 20    block_code -> functions_queue
Rule 21    all_block_code -> block_code
Rule 22    all_block_code -> block_code all_block_code
Rule 23    data_type -> CHARTYPE
Rule 24    data_type -> STRINGTYPE
Rule 25    data_type -> FLOATTYPE
Rule 26    data_type -> DECIMALTYPE
Rule 27    data_type -> INTTYPE
Rule 28    data_type -> BOOLTYPE
Rule 29    value_string -> STRING
Rule 30    value_string -> CHAR
Rule 31    value_string -> concatenation
Rule 32    value_boolean -> BOOLTRUE
Rule 33    value_boolean -> BOOLFALSE
Rule 34    value_boolean -> VARIABLE
Rule 35    value_boolean -> comparison_operation
Rule 36    value_numeric -> INTEGER
Rule 37    value_numeric -> FLOAT_NUMBER
Rule 38    value_numeric -> DECIMAL_NUMBER
Rule 39    value_numeric -> VARIABLE
Rule 40    print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA
Rule 41    print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
Rule 42    read_data -> READ LPARENT RPARENT DOTANDCOMMA
Rule 43    concatenation -> STRING
Rule 44    concatenation -> STRING PLUS concatenation
Rule 45    value -> value_numeric
Rule 46    value -> value_boolean
Rule 47    value -> value_string
Rule 48    value -> VARIABLE
Rule 49    value -> read_data
Rule 50    arithmetic_operation -> value_numeric
Rule 51    arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation
Rule 52    arithmetic_operator -> PLUS
Rule 53    arithmetic_operator -> MINUS
Rule 54    arithmetic_operator -> TIMES
Rule 55    arithmetic_operator -> DIVIDE
Rule 56    arithmetic_operator -> PERCENT
Rule 57    comparison_operation -> value_numeric
Rule 58    comparison_operation -> value_numeric comparison_operator comparison_operation
Rule 59    comparison_operator -> GREATER_THAN
Rule 60    comparison_operator -> SMALLER_THAN
Rule 61    comparison_operator -> EQUAL_COMPARATION
Rule 62    comparison_operator -> INEQUALITY
Rule 63    comparison_operator -> GREATER_THAN_OR_EQUAL
Rule 64    comparison_operator -> SMALLER_THAN_OR_EQUAL
Rule 65    boolean_operation -> value_boolean
Rule 66    boolean_operation -> LOGICNOT value_boolean
Rule 67    boolean_operation -> value_boolean boolean_operator boolean_operation
Rule 68    boolean_operator -> LOGICAND
Rule 69    boolean_operator -> LOGICOR
Rule 70    def_const_or_var -> constant_assignation
Rule 71    def_const_or_var -> variable_assignation
Rule 72    constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
Rule 73    constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA
Rule 74    variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA
Rule 75    variable_assignation -> assignation_type_value_multiple DOTANDCOMMA
Rule 76    access_modifiers -> PUBLIC
Rule 77    access_modifiers -> PRIVATE
Rule 78    assignation_type_value -> INTTYPE assignation_int
Rule 79    assignation_type_value -> STRINGTYPE assignation_string
Rule 80    assignation_type_value -> FLOATTYPE assignation_float
Rule 81    assignation_type_value -> BOOLTYPE assignation_true
Rule 82    assignation_type_value -> BOOLTYPE assignation_false
Rule 83    assignation_int -> VARIABLE ASSIGNATION INTEGER
Rule 84    assignation_int -> VARIABLE ASSIGNATION VARIABLE
Rule 85    assignation_int -> VARIABLE ASSIGNATION arithmetic_operation
Rule 86    assignation_string -> VARIABLE ASSIGNATION STRING
Rule 87    assignation_string -> VARIABLE ASSIGNATION VARIABLE
Rule 88    assignation_float -> VARIABLE ASSIGNATION FLOAT_NUMBER
Rule 89    assignation_float -> VARIABLE ASSIGNATION VARIABLE
Rule 90    assignation_float -> VARIABLE ASSIGNATION arithmetic_operation
Rule 91    assignation_true -> VARIABLE ASSIGNATION BOOLTRUE
Rule 92    assignation_true -> VARIABLE ASSIGNATION VARIABLE
Rule 93    assignation_true -> VARIABLE ASSIGNATION boolean_operation
Rule 94    assignation_false -> VARIABLE ASSIGNATION BOOLFALSE
Rule 95    assignation_false -> VARIABLE ASSIGNATION VARIABLE
Rule 96    assignation_false -> VARIABLE ASSIGNATION boolean_operation
Rule 97    assignation_type_value_multiple -> INTTYPE assignation_int_multiple
Rule 98    assignation_type_value_multiple -> STRINGTYPE assignation_string_multiple
Rule 99    assignation_type_value_multiple -> FLOATTYPE assignation_float_multiple
Rule 100   assignation_type_value_multiple -> BOOLTYPE assignation_true_multiple
Rule 101   assignation_type_value_multiple -> BOOLTYPE assignation_false_multiple
Rule 102   assignation_int_multiple -> assignation_int
Rule 103   assignation_int_multiple -> assignation_int COMMA assignation_int_multiple
Rule 104   assignation_string_multiple -> assignation_string
Rule 105   assignation_string_multiple -> assignation_string COMMA assignation_string_multiple
Rule 106   assignation_float_multiple -> assignation_float
Rule 107   assignation_float_multiple -> assignation_float COMMA assignation_float_multiple
Rule 108   assignation_true_multiple -> assignation_true
Rule 109   assignation_true_multiple -> assignation_true COMMA assignation_true_multiple
Rule 110   assignation_false_multiple -> assignation_false
Rule 111   assignation_false_multiple -> assignation_false COMMA assignation_false_multiple
Rule 112   thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
Rule 113   declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
Rule 114   declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
Rule 115   thread_init -> thread_identificator DOT START LPARENT RPARENT DOTANDCOMMA
Rule 116   thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA
Rule 117   concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
Rule 118   concurrent_method -> WRITE
Rule 119   thread_logic -> thread_sentence
Rule 120   thread_logic -> thread_logic thread_sentence
Rule 121   thread_sentence -> thread_expression DOTANDCOMMA
Rule 122   thread_expression -> thread_identificator DOT concurrent_method LPARENT RPARENT
Rule 123   thread_expression -> PRINT LPARENT STRING RPARENT
Rule 124   thread_arguments -> thread_expression
Rule 125   thread_arguments -> thread_arguments COMMA thread_expression
Rule 126   thread_identificator -> VARIABLE
Rule 127   block_try_catch -> try_catch_simply
Rule 128   block_try_catch -> try_catch_finally
Rule 129   try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
Rule 130   try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
Rule 131   block_code_try -> def_const_or_var
Rule 132   block_code_try -> print_data
Rule 133   all_block_code_try -> block_code_try
Rule 134   all_block_code_try -> block_code_try all_block_code_try
Rule 135   lists -> list_empty
Rule 136   lists -> list_full
Rule 137   list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
Rule 138   list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
Rule 139   list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
Rule 140   list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
Rule 141   strings_list -> STRING
Rule 142   strings_list -> STRING COMMA strings_list
Rule 143   ints_list -> INTEGER
Rule 144   ints_list -> INTEGER COMMA ints_list
Rule 145   functions_list -> list_func_clear
Rule 146   functions_list -> list_func_count
Rule 147   functions_list -> list_func_add
Rule 148   functions_list -> list_func_removeat
Rule 149   list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
Rule 150   list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
Rule 151   list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
Rule 152   list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
Rule 153   list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
Rule 154   list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
Rule 155   statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
Rule 156   enums -> ENUM METHOD LKEY list_enums RKEY
Rule 157   list_enums -> METHOD
Rule 158   list_enums -> METHOD COMMA list_enums
Rule 159   block_if -> normal_if
Rule 160   block_if -> all_block_code
Rule 161   normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
Rule 162   normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
Rule 163   other_if -> ELSE LKEY block_if RKEY
Rule 164   other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
Rule 165   block_while -> normal_while
Rule 166   block_while -> do_while
Rule 167   normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
Rule 168   do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
Rule 169   stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
Rule 170   functions_stack -> stack_push
Rule 171   functions_stack -> stack_pop
Rule 172   functions_stack -> stack_clear
Rule 173   functions_stack -> stack_peek
Rule 174   functions_stack -> stack_isEmpty
Rule 175   stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
Rule 176   stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
Rule 177   stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
Rule 178   stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
Rule 179   stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
Rule 180   queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
Rule 181   functions_queue -> queue_enqueue
Rule 182   functions_queue -> queue_dequeue
Rule 183   functions_queue -> queue_clear
Rule 184   functions_queue -> queue_isEmpty
Rule 185   functions_queue -> queue_peek
Rule 186   queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
Rule 187   queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
Rule 188   queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
Rule 189   queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
Rule 190   queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA

Terminals, with rules where they appear

ACTION               : 
ADD                  : 151 152
ADDITION_ASSIGNMENT  : 
ARROW                : 155
ASSIGNATION          : 83 84 85 86 87 88 89 90 91 92 93 94 95 96 113 114 137 138 139 140 169 180
ASYNC                : 
AWAIT                : 
BACK_SLASH           : 
BOOLFALSE            : 33 94
BOOLTRUE             : 32 91
BOOLTYPE             : 28 81 82 100 101
BREAK                : 
CATCH                : 129 130
CHAR                 : 30
CHARTYPE             : 23
CLASS                : 2
CLEAR                : 149 177 188
COMMA                : 103 105 107 109 111 125 142 144 158
CONCURRENT           : 
CONST                : 72 73
COUNT                : 150
DECIMALTYPE          : 26
DECIMAL_NUMBER       : 38
DECREMENT            : 
DEQUEUE              : 187
DICTIONARY           : 
DIVIDE               : 55
DIVISION_ASSIGNMENT  : 
DO                   : 168
DOLLARSIGN           : 
DOT                  : 115 116 122 149 150 151 152 153 154 175 176 177 178 179 186 187 188 189 190
DOTANDCOMMA          : 1 40 41 42 72 73 74 75 113 114 115 116 121 129 130 137 138 139 140 149 150 151 152 153 154 169 175 176 177 178 179 180 186 187 188 189 190
DOUBLEPOINT          : 
DOUBLE_QUOTATION_MARKS : 
ELSE                 : 163
ELSE_IF              : 164
ENQUEUE              : 186
ENUM                 : 156
EQUAL_COMPARATION    : 61
ERROR                : 129 129 130 130
EXCEPTION            : 129 130
FINALLY              : 130
FLOATTYPE            : 25 80 99
FLOAT_NUMBER         : 37 88
FOR                  : 
FOREACH              : 
GREATER_THAN         : 59 137 137 138 138 139 139 140 140
GREATER_THAN_OR_EQUAL : 63
ID                   : 
IDENTIFIER           : 
IF                   : 161 162
IN                   : 
INCREMENT            : 
INEQUALITY           : 62
INTEGER              : 36 83 143 144 151 153
INTTYPE              : 27 78 97 138 138 140 140
ISEMPTY              : 179 190
JOIN                 : 116
JUMP_LINE            : 
LBRACKET             : 3 4 5
LIST                 : 137 137 138 138 139 139 140 140
LKEY                 : 2 3 4 5 117 129 129 130 130 130 139 140 155 156 161 162 163 164 167 168
LOGICAND             : 68
LOGICNOT             : 66
LOGICOR              : 69
LONG                 : 
LPARENT              : 3 4 5 40 41 42 113 114 115 116 117 122 123 129 129 130 130 137 138 139 140 149 150 151 152 153 154 155 161 162 164 167 168 169 175 176 177 178 179 180 186 187 188 189 190
MAIN                 : 3 4 5
METHOD               : 156 157 158
MINUS                : 53
MODULE_ASSIGNMENT    : 
MULTIPLICATION_ASSIGNMENT : 
NAMESPACE            : 
NEW                  : 113 114 137 138 139 140 169 180
PEEK                 : 178 189
PERCENT              : 56
PIPE                 : 
PLUS                 : 44 52
POP                  : 176
PRINT                : 40 41 123 129 130
PRIVATE              : 77
PUBLIC               : 2 76
PUSH                 : 175
PUT                  : 
QUEUE                : 180 180
RBRACKET             : 3 4 5
READ                 : 42
REMOVE               : 
REMOVEAT             : 153 154
RETURN               : 
RKEY                 : 2 3 4 5 117 129 129 130 130 130 139 140 155 156 161 162 163 164 167 168
RPARENT              : 3 4 5 40 41 42 113 114 115 116 117 122 123 129 129 130 130 137 138 139 140 149 150 151 152 153 154 155 161 162 164 167 168 169 175 176 177 178 179 180 186 187 188 189 190
SIPLE_QUOTATION_MARKS : 
SMALLER_THAN         : 60 137 137 138 138 139 139 140 140
SMALLER_THAN_OR_EQUAL : 64
STACK                : 169 169
START                : 115
STATIC               : 3 4 5 117
STRING               : 29 40 43 44 86 123 141 142 152 154
STRINGTYPE           : 3 4 5 24 79 98 137 137 139 139
SUBTRACTION_ASSIGNMENT : 
SWITCH               : 
SYSTEM               : 1
TABULATION           : 
TASK                 : 
THREAD               : 113 113 114 114
TIMES                : 54
TRY                  : 129 130
USING                : 1
VARIABLE             : 2 3 4 5 34 39 41 48 83 84 84 85 86 87 87 88 89 89 90 91 92 92 93 94 95 95 96 126 137 138 139 140 149 150 151 152 153 154 155 169 175 176 177 178 179 180 186 187 188 189 190
VOID                 : 3 4 5 117
WHILE                : 167 168
WRITE                : 118
error                : 

Nonterminals, with rules where they appear

access_modifiers     : 72 74
all_block_code       : 3 3 4 5 5 22 155 160 167 168
all_block_code_try   : 129 130 130 134
arithmetic_operation : 51 85 90
arithmetic_operator  : 51
assignation_false    : 82 110 111
assignation_false_multiple : 101 111
assignation_float    : 80 106 107
assignation_float_multiple : 99 107
assignation_int      : 78 102 103
assignation_int_multiple : 97 103
assignation_string   : 79 104 105
assignation_string_multiple : 98 105
assignation_true     : 81 108 109
assignation_true_multiple : 100 109
assignation_type_value : 
assignation_type_value_multiple : 72 73 74 75
block_code           : 21 22
block_code_try       : 133 134
block_if             : 161 162 163 164
block_main_method    : 2
block_publicClass    : 1
block_try_catch      : 10
block_while          : 16
boolean_operation    : 67 93 96 161 162 164 167 168
boolean_operator     : 67
comparison_operation : 35 58
comparison_operator  : 58
concatenation        : 31 44
concurrent_method    : 9 114 122
constant_assignation : 70
data_type            : 
declaration_thread   : 112 112
def_const_or_var     : 6 131
do_while             : 166
enums                : 14
functions_list       : 12
functions_queue      : 20
functions_stack      : 18
ints_list            : 140 144
list_empty           : 135
list_enums           : 156 158
list_full            : 136
list_func_add        : 147
list_func_clear      : 145
list_func_count      : 146
list_func_removeat   : 148
lists                : 11
normal_if            : 15 159
normal_while         : 165
other_if             : 161 164
print_data           : 7 132
program              : 0
queue_clear          : 183
queue_dequeue        : 182
queue_enqueue        : 181
queue_isEmpty        : 184
queue_peek           : 185
queue_struct         : 19
read_data            : 49
stack_clear          : 172
stack_isEmpty        : 174
stack_peek           : 173
stack_pop            : 171
stack_push           : 170
stack_struct         : 17
statement_lambda     : 13
strings_list         : 139 142
thread_arguments     : 125
thread_expression    : 121 124 125
thread_identificator : 113 113 114 115 116 117 122
thread_init          : 112 112
thread_logic         : 117 120
thread_main          : 8
thread_sentence      : 119 120
thread_wait          : 112 112
try_catch_finally    : 128
try_catch_simply     : 127
value                : 175 186
value_boolean        : 46 65 66 67
value_numeric        : 45 50 51 57 58
value_string         : 47
variable_assignation : 71

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . USING SYSTEM DOTANDCOMMA block_publicClass

    USING           shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> USING . SYSTEM DOTANDCOMMA block_publicClass

    SYSTEM          shift and go to state 3


state 3

    (1) program -> USING SYSTEM . DOTANDCOMMA block_publicClass

    DOTANDCOMMA     shift and go to state 4


state 4

    (1) program -> USING SYSTEM DOTANDCOMMA . block_publicClass
    (2) block_publicClass -> . PUBLIC CLASS VARIABLE LKEY block_main_method RKEY
    (3) block_publicClass -> . STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    PUBLIC          shift and go to state 6
    STATIC          shift and go to state 7

    block_publicClass              shift and go to state 5

state 5

    (1) program -> USING SYSTEM DOTANDCOMMA block_publicClass .

    $end            reduce using rule 1 (program -> USING SYSTEM DOTANDCOMMA block_publicClass .)


state 6

    (2) block_publicClass -> PUBLIC . CLASS VARIABLE LKEY block_main_method RKEY

    CLASS           shift and go to state 8


state 7

    (3) block_publicClass -> STATIC . VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    VOID            shift and go to state 9


state 8

    (2) block_publicClass -> PUBLIC CLASS . VARIABLE LKEY block_main_method RKEY

    VARIABLE        shift and go to state 10


state 9

    (3) block_publicClass -> STATIC VOID . MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    MAIN            shift and go to state 11


state 10

    (2) block_publicClass -> PUBLIC CLASS VARIABLE . LKEY block_main_method RKEY

    LKEY            shift and go to state 12


state 11

    (3) block_publicClass -> STATIC VOID MAIN . LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    LPARENT         shift and go to state 13


state 12

    (2) block_publicClass -> PUBLIC CLASS VARIABLE LKEY . block_main_method RKEY
    (4) block_main_method -> . STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (5) block_main_method -> . STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    STATIC          shift and go to state 15

    block_main_method              shift and go to state 14

state 13

    (3) block_publicClass -> STATIC VOID MAIN LPARENT . STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    STRINGTYPE      shift and go to state 16


state 14

    (2) block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_main_method . RKEY

    RKEY            shift and go to state 17


state 15

    (4) block_main_method -> STATIC . VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (5) block_main_method -> STATIC . VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    VOID            shift and go to state 18


state 16

    (3) block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE . LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    LBRACKET        shift and go to state 19


state 17

    (2) block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_main_method RKEY .

    $end            reduce using rule 2 (block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_main_method RKEY .)


state 18

    (4) block_main_method -> STATIC VOID . MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (5) block_main_method -> STATIC VOID . MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    MAIN            shift and go to state 20


state 19

    (3) block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET . RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    RBRACKET        shift and go to state 21


state 20

    (4) block_main_method -> STATIC VOID MAIN . LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (5) block_main_method -> STATIC VOID MAIN . LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    LPARENT         shift and go to state 22


state 21

    (3) block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET . VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    VARIABLE        shift and go to state 23


state 22

    (4) block_main_method -> STATIC VOID MAIN LPARENT . STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (5) block_main_method -> STATIC VOID MAIN LPARENT . STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    STRINGTYPE      shift and go to state 24


state 23

    (3) block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE . RPARENT LKEY all_block_code RKEY all_block_code

    RPARENT         shift and go to state 25


state 24

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE . LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (5) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE . LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    LBRACKET        shift and go to state 26


state 25

    (3) block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT . LKEY all_block_code RKEY all_block_code

    LKEY            shift and go to state 27


state 26

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET . RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (5) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET . RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    RBRACKET        shift and go to state 28


state 27

    (3) block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY . all_block_code RKEY all_block_code
    (21) all_block_code -> . block_code
    (22) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . thread_main
    (9) block_code -> . concurrent_method
    (10) block_code -> . block_try_catch
    (11) block_code -> . lists
    (12) block_code -> . functions_list
    (13) block_code -> . statement_lambda
    (14) block_code -> . enums
    (15) block_code -> . normal_if
    (16) block_code -> . block_while
    (17) block_code -> . stack_struct
    (18) block_code -> . functions_stack
    (19) block_code -> . queue_struct
    (20) block_code -> . functions_queue
    (70) def_const_or_var -> . constant_assignation
    (71) def_const_or_var -> . variable_assignation
    (40) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (41) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (112) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (117) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (118) concurrent_method -> . WRITE
    (127) block_try_catch -> . try_catch_simply
    (128) block_try_catch -> . try_catch_finally
    (135) lists -> . list_empty
    (136) lists -> . list_full
    (145) functions_list -> . list_func_clear
    (146) functions_list -> . list_func_count
    (147) functions_list -> . list_func_add
    (148) functions_list -> . list_func_removeat
    (155) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (156) enums -> . ENUM METHOD LKEY list_enums RKEY
    (161) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (162) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (165) block_while -> . normal_while
    (166) block_while -> . do_while
    (169) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (170) functions_stack -> . stack_push
    (171) functions_stack -> . stack_pop
    (172) functions_stack -> . stack_clear
    (173) functions_stack -> . stack_peek
    (174) functions_stack -> . stack_isEmpty
    (180) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (181) functions_queue -> . queue_enqueue
    (182) functions_queue -> . queue_dequeue
    (183) functions_queue -> . queue_clear
    (184) functions_queue -> . queue_isEmpty
    (185) functions_queue -> . queue_peek
    (72) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (73) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (74) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (75) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (113) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (114) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (129) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (130) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (137) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (138) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (139) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (140) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (149) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (150) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (151) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (152) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (153) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (154) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (167) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (168) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (175) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (176) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (177) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (178) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (179) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (186) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (187) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (188) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (190) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (189) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (76) access_modifiers -> . PUBLIC
    (77) access_modifiers -> . PRIVATE
    (97) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (98) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (99) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (100) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (101) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 52
    STATIC          shift and go to state 29
    WRITE           shift and go to state 54
    LPARENT         shift and go to state 30
    ENUM            shift and go to state 63
    IF              shift and go to state 64
    STACK           shift and go to state 67
    QUEUE           shift and go to state 73
    CONST           shift and go to state 80
    THREAD          shift and go to state 82
    TRY             shift and go to state 83
    LIST            shift and go to state 84
    VARIABLE        shift and go to state 32
    WHILE           shift and go to state 86
    DO              shift and go to state 87
    PUBLIC          shift and go to state 88
    PRIVATE         shift and go to state 89
    INTTYPE         shift and go to state 85
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 90
    BOOLTYPE        shift and go to state 91

    all_block_code                 shift and go to state 33
    block_code                     shift and go to state 34
    def_const_or_var               shift and go to state 35
    print_data                     shift and go to state 36
    thread_main                    shift and go to state 37
    concurrent_method              shift and go to state 38
    block_try_catch                shift and go to state 39
    lists                          shift and go to state 40
    functions_list                 shift and go to state 41
    statement_lambda               shift and go to state 42
    enums                          shift and go to state 43
    normal_if                      shift and go to state 44
    block_while                    shift and go to state 45
    stack_struct                   shift and go to state 46
    functions_stack                shift and go to state 47
    queue_struct                   shift and go to state 48
    functions_queue                shift and go to state 49
    constant_assignation           shift and go to state 50
    variable_assignation           shift and go to state 51
    declaration_thread             shift and go to state 53
    try_catch_simply               shift and go to state 55
    try_catch_finally              shift and go to state 56
    list_empty                     shift and go to state 57
    list_full                      shift and go to state 58
    list_func_clear                shift and go to state 59
    list_func_count                shift and go to state 60
    list_func_add                  shift and go to state 61
    list_func_removeat             shift and go to state 62
    normal_while                   shift and go to state 65
    do_while                       shift and go to state 66
    stack_push                     shift and go to state 68
    stack_pop                      shift and go to state 69
    stack_clear                    shift and go to state 70
    stack_peek                     shift and go to state 71
    stack_isEmpty                  shift and go to state 72
    queue_enqueue                  shift and go to state 74
    queue_dequeue                  shift and go to state 75
    queue_clear                    shift and go to state 76
    queue_isEmpty                  shift and go to state 77
    queue_peek                     shift and go to state 78
    access_modifiers               shift and go to state 79
    assignation_type_value_multiple shift and go to state 81

state 28

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET . VARIABLE RPARENT LKEY all_block_code RKEY
    (5) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET . VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    VARIABLE        shift and go to state 92


state 29

    (117) concurrent_method -> STATIC . VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY

    VOID            shift and go to state 93


state 30

    (155) statement_lambda -> LPARENT . VARIABLE ARROW LKEY all_block_code RKEY RPARENT

    VARIABLE        shift and go to state 94


state 31

    (98) assignation_type_value_multiple -> STRINGTYPE . assignation_string_multiple
    (104) assignation_string_multiple -> . assignation_string
    (105) assignation_string_multiple -> . assignation_string COMMA assignation_string_multiple
    (86) assignation_string -> . VARIABLE ASSIGNATION STRING
    (87) assignation_string -> . VARIABLE ASSIGNATION VARIABLE

    VARIABLE        shift and go to state 97

    assignation_string_multiple    shift and go to state 95
    assignation_string             shift and go to state 96

state 32

    (149) list_func_clear -> VARIABLE . DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (150) list_func_count -> VARIABLE . DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (151) list_func_add -> VARIABLE . DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (152) list_func_add -> VARIABLE . DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (153) list_func_removeat -> VARIABLE . DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (154) list_func_removeat -> VARIABLE . DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (175) stack_push -> VARIABLE . DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (176) stack_pop -> VARIABLE . DOT POP LPARENT RPARENT DOTANDCOMMA
    (177) stack_clear -> VARIABLE . DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (178) stack_peek -> VARIABLE . DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (179) stack_isEmpty -> VARIABLE . DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (186) queue_enqueue -> VARIABLE . DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (187) queue_dequeue -> VARIABLE . DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (188) queue_clear -> VARIABLE . DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (190) queue_isEmpty -> VARIABLE . DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (189) queue_peek -> VARIABLE . DOT PEEK LPARENT RPARENT DOTANDCOMMA

    DOT             shift and go to state 98


state 33

    (3) block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code . RKEY all_block_code

    RKEY            shift and go to state 99


state 34

    (21) all_block_code -> block_code .
    (22) all_block_code -> block_code . all_block_code
    (21) all_block_code -> . block_code
    (22) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . thread_main
    (9) block_code -> . concurrent_method
    (10) block_code -> . block_try_catch
    (11) block_code -> . lists
    (12) block_code -> . functions_list
    (13) block_code -> . statement_lambda
    (14) block_code -> . enums
    (15) block_code -> . normal_if
    (16) block_code -> . block_while
    (17) block_code -> . stack_struct
    (18) block_code -> . functions_stack
    (19) block_code -> . queue_struct
    (20) block_code -> . functions_queue
    (70) def_const_or_var -> . constant_assignation
    (71) def_const_or_var -> . variable_assignation
    (40) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (41) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (112) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (117) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (118) concurrent_method -> . WRITE
    (127) block_try_catch -> . try_catch_simply
    (128) block_try_catch -> . try_catch_finally
    (135) lists -> . list_empty
    (136) lists -> . list_full
    (145) functions_list -> . list_func_clear
    (146) functions_list -> . list_func_count
    (147) functions_list -> . list_func_add
    (148) functions_list -> . list_func_removeat
    (155) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (156) enums -> . ENUM METHOD LKEY list_enums RKEY
    (161) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (162) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (165) block_while -> . normal_while
    (166) block_while -> . do_while
    (169) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (170) functions_stack -> . stack_push
    (171) functions_stack -> . stack_pop
    (172) functions_stack -> . stack_clear
    (173) functions_stack -> . stack_peek
    (174) functions_stack -> . stack_isEmpty
    (180) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (181) functions_queue -> . queue_enqueue
    (182) functions_queue -> . queue_dequeue
    (183) functions_queue -> . queue_clear
    (184) functions_queue -> . queue_isEmpty
    (185) functions_queue -> . queue_peek
    (72) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (73) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (74) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (75) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (113) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (114) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (129) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (130) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (137) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (138) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (139) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (140) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (149) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (150) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (151) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (152) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (153) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (154) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (167) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (168) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (175) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (176) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (177) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (178) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (179) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (186) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (187) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (188) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (190) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (189) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (76) access_modifiers -> . PUBLIC
    (77) access_modifiers -> . PRIVATE
    (97) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (98) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (99) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (100) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (101) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    RKEY            reduce using rule 21 (all_block_code -> block_code .)
    $end            reduce using rule 21 (all_block_code -> block_code .)
    PRINT           shift and go to state 52
    STATIC          shift and go to state 29
    WRITE           shift and go to state 54
    LPARENT         shift and go to state 30
    ENUM            shift and go to state 63
    IF              shift and go to state 64
    STACK           shift and go to state 67
    QUEUE           shift and go to state 73
    CONST           shift and go to state 80
    THREAD          shift and go to state 82
    TRY             shift and go to state 83
    LIST            shift and go to state 84
    VARIABLE        shift and go to state 32
    WHILE           shift and go to state 86
    DO              shift and go to state 87
    PUBLIC          shift and go to state 88
    PRIVATE         shift and go to state 89
    INTTYPE         shift and go to state 85
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 90
    BOOLTYPE        shift and go to state 91

    block_code                     shift and go to state 34
    all_block_code                 shift and go to state 100
    def_const_or_var               shift and go to state 35
    print_data                     shift and go to state 36
    thread_main                    shift and go to state 37
    concurrent_method              shift and go to state 38
    block_try_catch                shift and go to state 39
    lists                          shift and go to state 40
    functions_list                 shift and go to state 41
    statement_lambda               shift and go to state 42
    enums                          shift and go to state 43
    normal_if                      shift and go to state 44
    block_while                    shift and go to state 45
    stack_struct                   shift and go to state 46
    functions_stack                shift and go to state 47
    queue_struct                   shift and go to state 48
    functions_queue                shift and go to state 49
    constant_assignation           shift and go to state 50
    variable_assignation           shift and go to state 51
    declaration_thread             shift and go to state 53
    try_catch_simply               shift and go to state 55
    try_catch_finally              shift and go to state 56
    list_empty                     shift and go to state 57
    list_full                      shift and go to state 58
    list_func_clear                shift and go to state 59
    list_func_count                shift and go to state 60
    list_func_add                  shift and go to state 61
    list_func_removeat             shift and go to state 62
    normal_while                   shift and go to state 65
    do_while                       shift and go to state 66
    stack_push                     shift and go to state 68
    stack_pop                      shift and go to state 69
    stack_clear                    shift and go to state 70
    stack_peek                     shift and go to state 71
    stack_isEmpty                  shift and go to state 72
    queue_enqueue                  shift and go to state 74
    queue_dequeue                  shift and go to state 75
    queue_clear                    shift and go to state 76
    queue_isEmpty                  shift and go to state 77
    queue_peek                     shift and go to state 78
    access_modifiers               shift and go to state 79
    assignation_type_value_multiple shift and go to state 81

state 35

    (6) block_code -> def_const_or_var .

    PRINT           reduce using rule 6 (block_code -> def_const_or_var .)
    STATIC          reduce using rule 6 (block_code -> def_const_or_var .)
    WRITE           reduce using rule 6 (block_code -> def_const_or_var .)
    LPARENT         reduce using rule 6 (block_code -> def_const_or_var .)
    ENUM            reduce using rule 6 (block_code -> def_const_or_var .)
    IF              reduce using rule 6 (block_code -> def_const_or_var .)
    STACK           reduce using rule 6 (block_code -> def_const_or_var .)
    QUEUE           reduce using rule 6 (block_code -> def_const_or_var .)
    CONST           reduce using rule 6 (block_code -> def_const_or_var .)
    THREAD          reduce using rule 6 (block_code -> def_const_or_var .)
    TRY             reduce using rule 6 (block_code -> def_const_or_var .)
    LIST            reduce using rule 6 (block_code -> def_const_or_var .)
    VARIABLE        reduce using rule 6 (block_code -> def_const_or_var .)
    WHILE           reduce using rule 6 (block_code -> def_const_or_var .)
    DO              reduce using rule 6 (block_code -> def_const_or_var .)
    PUBLIC          reduce using rule 6 (block_code -> def_const_or_var .)
    PRIVATE         reduce using rule 6 (block_code -> def_const_or_var .)
    INTTYPE         reduce using rule 6 (block_code -> def_const_or_var .)
    STRINGTYPE      reduce using rule 6 (block_code -> def_const_or_var .)
    FLOATTYPE       reduce using rule 6 (block_code -> def_const_or_var .)
    BOOLTYPE        reduce using rule 6 (block_code -> def_const_or_var .)
    RKEY            reduce using rule 6 (block_code -> def_const_or_var .)
    $end            reduce using rule 6 (block_code -> def_const_or_var .)


state 36

    (7) block_code -> print_data .

    PRINT           reduce using rule 7 (block_code -> print_data .)
    STATIC          reduce using rule 7 (block_code -> print_data .)
    WRITE           reduce using rule 7 (block_code -> print_data .)
    LPARENT         reduce using rule 7 (block_code -> print_data .)
    ENUM            reduce using rule 7 (block_code -> print_data .)
    IF              reduce using rule 7 (block_code -> print_data .)
    STACK           reduce using rule 7 (block_code -> print_data .)
    QUEUE           reduce using rule 7 (block_code -> print_data .)
    CONST           reduce using rule 7 (block_code -> print_data .)
    THREAD          reduce using rule 7 (block_code -> print_data .)
    TRY             reduce using rule 7 (block_code -> print_data .)
    LIST            reduce using rule 7 (block_code -> print_data .)
    VARIABLE        reduce using rule 7 (block_code -> print_data .)
    WHILE           reduce using rule 7 (block_code -> print_data .)
    DO              reduce using rule 7 (block_code -> print_data .)
    PUBLIC          reduce using rule 7 (block_code -> print_data .)
    PRIVATE         reduce using rule 7 (block_code -> print_data .)
    INTTYPE         reduce using rule 7 (block_code -> print_data .)
    STRINGTYPE      reduce using rule 7 (block_code -> print_data .)
    FLOATTYPE       reduce using rule 7 (block_code -> print_data .)
    BOOLTYPE        reduce using rule 7 (block_code -> print_data .)
    RKEY            reduce using rule 7 (block_code -> print_data .)
    $end            reduce using rule 7 (block_code -> print_data .)


state 37

    (8) block_code -> thread_main .

    PRINT           reduce using rule 8 (block_code -> thread_main .)
    STATIC          reduce using rule 8 (block_code -> thread_main .)
    WRITE           reduce using rule 8 (block_code -> thread_main .)
    LPARENT         reduce using rule 8 (block_code -> thread_main .)
    ENUM            reduce using rule 8 (block_code -> thread_main .)
    IF              reduce using rule 8 (block_code -> thread_main .)
    STACK           reduce using rule 8 (block_code -> thread_main .)
    QUEUE           reduce using rule 8 (block_code -> thread_main .)
    CONST           reduce using rule 8 (block_code -> thread_main .)
    THREAD          reduce using rule 8 (block_code -> thread_main .)
    TRY             reduce using rule 8 (block_code -> thread_main .)
    LIST            reduce using rule 8 (block_code -> thread_main .)
    VARIABLE        reduce using rule 8 (block_code -> thread_main .)
    WHILE           reduce using rule 8 (block_code -> thread_main .)
    DO              reduce using rule 8 (block_code -> thread_main .)
    PUBLIC          reduce using rule 8 (block_code -> thread_main .)
    PRIVATE         reduce using rule 8 (block_code -> thread_main .)
    INTTYPE         reduce using rule 8 (block_code -> thread_main .)
    STRINGTYPE      reduce using rule 8 (block_code -> thread_main .)
    FLOATTYPE       reduce using rule 8 (block_code -> thread_main .)
    BOOLTYPE        reduce using rule 8 (block_code -> thread_main .)
    RKEY            reduce using rule 8 (block_code -> thread_main .)
    $end            reduce using rule 8 (block_code -> thread_main .)


state 38

    (9) block_code -> concurrent_method .

    PRINT           reduce using rule 9 (block_code -> concurrent_method .)
    STATIC          reduce using rule 9 (block_code -> concurrent_method .)
    WRITE           reduce using rule 9 (block_code -> concurrent_method .)
    LPARENT         reduce using rule 9 (block_code -> concurrent_method .)
    ENUM            reduce using rule 9 (block_code -> concurrent_method .)
    IF              reduce using rule 9 (block_code -> concurrent_method .)
    STACK           reduce using rule 9 (block_code -> concurrent_method .)
    QUEUE           reduce using rule 9 (block_code -> concurrent_method .)
    CONST           reduce using rule 9 (block_code -> concurrent_method .)
    THREAD          reduce using rule 9 (block_code -> concurrent_method .)
    TRY             reduce using rule 9 (block_code -> concurrent_method .)
    LIST            reduce using rule 9 (block_code -> concurrent_method .)
    VARIABLE        reduce using rule 9 (block_code -> concurrent_method .)
    WHILE           reduce using rule 9 (block_code -> concurrent_method .)
    DO              reduce using rule 9 (block_code -> concurrent_method .)
    PUBLIC          reduce using rule 9 (block_code -> concurrent_method .)
    PRIVATE         reduce using rule 9 (block_code -> concurrent_method .)
    INTTYPE         reduce using rule 9 (block_code -> concurrent_method .)
    STRINGTYPE      reduce using rule 9 (block_code -> concurrent_method .)
    FLOATTYPE       reduce using rule 9 (block_code -> concurrent_method .)
    BOOLTYPE        reduce using rule 9 (block_code -> concurrent_method .)
    RKEY            reduce using rule 9 (block_code -> concurrent_method .)
    $end            reduce using rule 9 (block_code -> concurrent_method .)


state 39

    (10) block_code -> block_try_catch .

    PRINT           reduce using rule 10 (block_code -> block_try_catch .)
    STATIC          reduce using rule 10 (block_code -> block_try_catch .)
    WRITE           reduce using rule 10 (block_code -> block_try_catch .)
    LPARENT         reduce using rule 10 (block_code -> block_try_catch .)
    ENUM            reduce using rule 10 (block_code -> block_try_catch .)
    IF              reduce using rule 10 (block_code -> block_try_catch .)
    STACK           reduce using rule 10 (block_code -> block_try_catch .)
    QUEUE           reduce using rule 10 (block_code -> block_try_catch .)
    CONST           reduce using rule 10 (block_code -> block_try_catch .)
    THREAD          reduce using rule 10 (block_code -> block_try_catch .)
    TRY             reduce using rule 10 (block_code -> block_try_catch .)
    LIST            reduce using rule 10 (block_code -> block_try_catch .)
    VARIABLE        reduce using rule 10 (block_code -> block_try_catch .)
    WHILE           reduce using rule 10 (block_code -> block_try_catch .)
    DO              reduce using rule 10 (block_code -> block_try_catch .)
    PUBLIC          reduce using rule 10 (block_code -> block_try_catch .)
    PRIVATE         reduce using rule 10 (block_code -> block_try_catch .)
    INTTYPE         reduce using rule 10 (block_code -> block_try_catch .)
    STRINGTYPE      reduce using rule 10 (block_code -> block_try_catch .)
    FLOATTYPE       reduce using rule 10 (block_code -> block_try_catch .)
    BOOLTYPE        reduce using rule 10 (block_code -> block_try_catch .)
    RKEY            reduce using rule 10 (block_code -> block_try_catch .)
    $end            reduce using rule 10 (block_code -> block_try_catch .)


state 40

    (11) block_code -> lists .

    PRINT           reduce using rule 11 (block_code -> lists .)
    STATIC          reduce using rule 11 (block_code -> lists .)
    WRITE           reduce using rule 11 (block_code -> lists .)
    LPARENT         reduce using rule 11 (block_code -> lists .)
    ENUM            reduce using rule 11 (block_code -> lists .)
    IF              reduce using rule 11 (block_code -> lists .)
    STACK           reduce using rule 11 (block_code -> lists .)
    QUEUE           reduce using rule 11 (block_code -> lists .)
    CONST           reduce using rule 11 (block_code -> lists .)
    THREAD          reduce using rule 11 (block_code -> lists .)
    TRY             reduce using rule 11 (block_code -> lists .)
    LIST            reduce using rule 11 (block_code -> lists .)
    VARIABLE        reduce using rule 11 (block_code -> lists .)
    WHILE           reduce using rule 11 (block_code -> lists .)
    DO              reduce using rule 11 (block_code -> lists .)
    PUBLIC          reduce using rule 11 (block_code -> lists .)
    PRIVATE         reduce using rule 11 (block_code -> lists .)
    INTTYPE         reduce using rule 11 (block_code -> lists .)
    STRINGTYPE      reduce using rule 11 (block_code -> lists .)
    FLOATTYPE       reduce using rule 11 (block_code -> lists .)
    BOOLTYPE        reduce using rule 11 (block_code -> lists .)
    RKEY            reduce using rule 11 (block_code -> lists .)
    $end            reduce using rule 11 (block_code -> lists .)


state 41

    (12) block_code -> functions_list .

    PRINT           reduce using rule 12 (block_code -> functions_list .)
    STATIC          reduce using rule 12 (block_code -> functions_list .)
    WRITE           reduce using rule 12 (block_code -> functions_list .)
    LPARENT         reduce using rule 12 (block_code -> functions_list .)
    ENUM            reduce using rule 12 (block_code -> functions_list .)
    IF              reduce using rule 12 (block_code -> functions_list .)
    STACK           reduce using rule 12 (block_code -> functions_list .)
    QUEUE           reduce using rule 12 (block_code -> functions_list .)
    CONST           reduce using rule 12 (block_code -> functions_list .)
    THREAD          reduce using rule 12 (block_code -> functions_list .)
    TRY             reduce using rule 12 (block_code -> functions_list .)
    LIST            reduce using rule 12 (block_code -> functions_list .)
    VARIABLE        reduce using rule 12 (block_code -> functions_list .)
    WHILE           reduce using rule 12 (block_code -> functions_list .)
    DO              reduce using rule 12 (block_code -> functions_list .)
    PUBLIC          reduce using rule 12 (block_code -> functions_list .)
    PRIVATE         reduce using rule 12 (block_code -> functions_list .)
    INTTYPE         reduce using rule 12 (block_code -> functions_list .)
    STRINGTYPE      reduce using rule 12 (block_code -> functions_list .)
    FLOATTYPE       reduce using rule 12 (block_code -> functions_list .)
    BOOLTYPE        reduce using rule 12 (block_code -> functions_list .)
    RKEY            reduce using rule 12 (block_code -> functions_list .)
    $end            reduce using rule 12 (block_code -> functions_list .)


state 42

    (13) block_code -> statement_lambda .

    PRINT           reduce using rule 13 (block_code -> statement_lambda .)
    STATIC          reduce using rule 13 (block_code -> statement_lambda .)
    WRITE           reduce using rule 13 (block_code -> statement_lambda .)
    LPARENT         reduce using rule 13 (block_code -> statement_lambda .)
    ENUM            reduce using rule 13 (block_code -> statement_lambda .)
    IF              reduce using rule 13 (block_code -> statement_lambda .)
    STACK           reduce using rule 13 (block_code -> statement_lambda .)
    QUEUE           reduce using rule 13 (block_code -> statement_lambda .)
    CONST           reduce using rule 13 (block_code -> statement_lambda .)
    THREAD          reduce using rule 13 (block_code -> statement_lambda .)
    TRY             reduce using rule 13 (block_code -> statement_lambda .)
    LIST            reduce using rule 13 (block_code -> statement_lambda .)
    VARIABLE        reduce using rule 13 (block_code -> statement_lambda .)
    WHILE           reduce using rule 13 (block_code -> statement_lambda .)
    DO              reduce using rule 13 (block_code -> statement_lambda .)
    PUBLIC          reduce using rule 13 (block_code -> statement_lambda .)
    PRIVATE         reduce using rule 13 (block_code -> statement_lambda .)
    INTTYPE         reduce using rule 13 (block_code -> statement_lambda .)
    STRINGTYPE      reduce using rule 13 (block_code -> statement_lambda .)
    FLOATTYPE       reduce using rule 13 (block_code -> statement_lambda .)
    BOOLTYPE        reduce using rule 13 (block_code -> statement_lambda .)
    RKEY            reduce using rule 13 (block_code -> statement_lambda .)
    $end            reduce using rule 13 (block_code -> statement_lambda .)


state 43

    (14) block_code -> enums .

    PRINT           reduce using rule 14 (block_code -> enums .)
    STATIC          reduce using rule 14 (block_code -> enums .)
    WRITE           reduce using rule 14 (block_code -> enums .)
    LPARENT         reduce using rule 14 (block_code -> enums .)
    ENUM            reduce using rule 14 (block_code -> enums .)
    IF              reduce using rule 14 (block_code -> enums .)
    STACK           reduce using rule 14 (block_code -> enums .)
    QUEUE           reduce using rule 14 (block_code -> enums .)
    CONST           reduce using rule 14 (block_code -> enums .)
    THREAD          reduce using rule 14 (block_code -> enums .)
    TRY             reduce using rule 14 (block_code -> enums .)
    LIST            reduce using rule 14 (block_code -> enums .)
    VARIABLE        reduce using rule 14 (block_code -> enums .)
    WHILE           reduce using rule 14 (block_code -> enums .)
    DO              reduce using rule 14 (block_code -> enums .)
    PUBLIC          reduce using rule 14 (block_code -> enums .)
    PRIVATE         reduce using rule 14 (block_code -> enums .)
    INTTYPE         reduce using rule 14 (block_code -> enums .)
    STRINGTYPE      reduce using rule 14 (block_code -> enums .)
    FLOATTYPE       reduce using rule 14 (block_code -> enums .)
    BOOLTYPE        reduce using rule 14 (block_code -> enums .)
    RKEY            reduce using rule 14 (block_code -> enums .)
    $end            reduce using rule 14 (block_code -> enums .)


state 44

    (15) block_code -> normal_if .

    PRINT           reduce using rule 15 (block_code -> normal_if .)
    STATIC          reduce using rule 15 (block_code -> normal_if .)
    WRITE           reduce using rule 15 (block_code -> normal_if .)
    LPARENT         reduce using rule 15 (block_code -> normal_if .)
    ENUM            reduce using rule 15 (block_code -> normal_if .)
    IF              reduce using rule 15 (block_code -> normal_if .)
    STACK           reduce using rule 15 (block_code -> normal_if .)
    QUEUE           reduce using rule 15 (block_code -> normal_if .)
    CONST           reduce using rule 15 (block_code -> normal_if .)
    THREAD          reduce using rule 15 (block_code -> normal_if .)
    TRY             reduce using rule 15 (block_code -> normal_if .)
    LIST            reduce using rule 15 (block_code -> normal_if .)
    VARIABLE        reduce using rule 15 (block_code -> normal_if .)
    WHILE           reduce using rule 15 (block_code -> normal_if .)
    DO              reduce using rule 15 (block_code -> normal_if .)
    PUBLIC          reduce using rule 15 (block_code -> normal_if .)
    PRIVATE         reduce using rule 15 (block_code -> normal_if .)
    INTTYPE         reduce using rule 15 (block_code -> normal_if .)
    STRINGTYPE      reduce using rule 15 (block_code -> normal_if .)
    FLOATTYPE       reduce using rule 15 (block_code -> normal_if .)
    BOOLTYPE        reduce using rule 15 (block_code -> normal_if .)
    RKEY            reduce using rule 15 (block_code -> normal_if .)
    $end            reduce using rule 15 (block_code -> normal_if .)


state 45

    (16) block_code -> block_while .

    PRINT           reduce using rule 16 (block_code -> block_while .)
    STATIC          reduce using rule 16 (block_code -> block_while .)
    WRITE           reduce using rule 16 (block_code -> block_while .)
    LPARENT         reduce using rule 16 (block_code -> block_while .)
    ENUM            reduce using rule 16 (block_code -> block_while .)
    IF              reduce using rule 16 (block_code -> block_while .)
    STACK           reduce using rule 16 (block_code -> block_while .)
    QUEUE           reduce using rule 16 (block_code -> block_while .)
    CONST           reduce using rule 16 (block_code -> block_while .)
    THREAD          reduce using rule 16 (block_code -> block_while .)
    TRY             reduce using rule 16 (block_code -> block_while .)
    LIST            reduce using rule 16 (block_code -> block_while .)
    VARIABLE        reduce using rule 16 (block_code -> block_while .)
    WHILE           reduce using rule 16 (block_code -> block_while .)
    DO              reduce using rule 16 (block_code -> block_while .)
    PUBLIC          reduce using rule 16 (block_code -> block_while .)
    PRIVATE         reduce using rule 16 (block_code -> block_while .)
    INTTYPE         reduce using rule 16 (block_code -> block_while .)
    STRINGTYPE      reduce using rule 16 (block_code -> block_while .)
    FLOATTYPE       reduce using rule 16 (block_code -> block_while .)
    BOOLTYPE        reduce using rule 16 (block_code -> block_while .)
    RKEY            reduce using rule 16 (block_code -> block_while .)
    $end            reduce using rule 16 (block_code -> block_while .)


state 46

    (17) block_code -> stack_struct .

    PRINT           reduce using rule 17 (block_code -> stack_struct .)
    STATIC          reduce using rule 17 (block_code -> stack_struct .)
    WRITE           reduce using rule 17 (block_code -> stack_struct .)
    LPARENT         reduce using rule 17 (block_code -> stack_struct .)
    ENUM            reduce using rule 17 (block_code -> stack_struct .)
    IF              reduce using rule 17 (block_code -> stack_struct .)
    STACK           reduce using rule 17 (block_code -> stack_struct .)
    QUEUE           reduce using rule 17 (block_code -> stack_struct .)
    CONST           reduce using rule 17 (block_code -> stack_struct .)
    THREAD          reduce using rule 17 (block_code -> stack_struct .)
    TRY             reduce using rule 17 (block_code -> stack_struct .)
    LIST            reduce using rule 17 (block_code -> stack_struct .)
    VARIABLE        reduce using rule 17 (block_code -> stack_struct .)
    WHILE           reduce using rule 17 (block_code -> stack_struct .)
    DO              reduce using rule 17 (block_code -> stack_struct .)
    PUBLIC          reduce using rule 17 (block_code -> stack_struct .)
    PRIVATE         reduce using rule 17 (block_code -> stack_struct .)
    INTTYPE         reduce using rule 17 (block_code -> stack_struct .)
    STRINGTYPE      reduce using rule 17 (block_code -> stack_struct .)
    FLOATTYPE       reduce using rule 17 (block_code -> stack_struct .)
    BOOLTYPE        reduce using rule 17 (block_code -> stack_struct .)
    RKEY            reduce using rule 17 (block_code -> stack_struct .)
    $end            reduce using rule 17 (block_code -> stack_struct .)


state 47

    (18) block_code -> functions_stack .

    PRINT           reduce using rule 18 (block_code -> functions_stack .)
    STATIC          reduce using rule 18 (block_code -> functions_stack .)
    WRITE           reduce using rule 18 (block_code -> functions_stack .)
    LPARENT         reduce using rule 18 (block_code -> functions_stack .)
    ENUM            reduce using rule 18 (block_code -> functions_stack .)
    IF              reduce using rule 18 (block_code -> functions_stack .)
    STACK           reduce using rule 18 (block_code -> functions_stack .)
    QUEUE           reduce using rule 18 (block_code -> functions_stack .)
    CONST           reduce using rule 18 (block_code -> functions_stack .)
    THREAD          reduce using rule 18 (block_code -> functions_stack .)
    TRY             reduce using rule 18 (block_code -> functions_stack .)
    LIST            reduce using rule 18 (block_code -> functions_stack .)
    VARIABLE        reduce using rule 18 (block_code -> functions_stack .)
    WHILE           reduce using rule 18 (block_code -> functions_stack .)
    DO              reduce using rule 18 (block_code -> functions_stack .)
    PUBLIC          reduce using rule 18 (block_code -> functions_stack .)
    PRIVATE         reduce using rule 18 (block_code -> functions_stack .)
    INTTYPE         reduce using rule 18 (block_code -> functions_stack .)
    STRINGTYPE      reduce using rule 18 (block_code -> functions_stack .)
    FLOATTYPE       reduce using rule 18 (block_code -> functions_stack .)
    BOOLTYPE        reduce using rule 18 (block_code -> functions_stack .)
    RKEY            reduce using rule 18 (block_code -> functions_stack .)
    $end            reduce using rule 18 (block_code -> functions_stack .)


state 48

    (19) block_code -> queue_struct .

    PRINT           reduce using rule 19 (block_code -> queue_struct .)
    STATIC          reduce using rule 19 (block_code -> queue_struct .)
    WRITE           reduce using rule 19 (block_code -> queue_struct .)
    LPARENT         reduce using rule 19 (block_code -> queue_struct .)
    ENUM            reduce using rule 19 (block_code -> queue_struct .)
    IF              reduce using rule 19 (block_code -> queue_struct .)
    STACK           reduce using rule 19 (block_code -> queue_struct .)
    QUEUE           reduce using rule 19 (block_code -> queue_struct .)
    CONST           reduce using rule 19 (block_code -> queue_struct .)
    THREAD          reduce using rule 19 (block_code -> queue_struct .)
    TRY             reduce using rule 19 (block_code -> queue_struct .)
    LIST            reduce using rule 19 (block_code -> queue_struct .)
    VARIABLE        reduce using rule 19 (block_code -> queue_struct .)
    WHILE           reduce using rule 19 (block_code -> queue_struct .)
    DO              reduce using rule 19 (block_code -> queue_struct .)
    PUBLIC          reduce using rule 19 (block_code -> queue_struct .)
    PRIVATE         reduce using rule 19 (block_code -> queue_struct .)
    INTTYPE         reduce using rule 19 (block_code -> queue_struct .)
    STRINGTYPE      reduce using rule 19 (block_code -> queue_struct .)
    FLOATTYPE       reduce using rule 19 (block_code -> queue_struct .)
    BOOLTYPE        reduce using rule 19 (block_code -> queue_struct .)
    RKEY            reduce using rule 19 (block_code -> queue_struct .)
    $end            reduce using rule 19 (block_code -> queue_struct .)


state 49

    (20) block_code -> functions_queue .

    PRINT           reduce using rule 20 (block_code -> functions_queue .)
    STATIC          reduce using rule 20 (block_code -> functions_queue .)
    WRITE           reduce using rule 20 (block_code -> functions_queue .)
    LPARENT         reduce using rule 20 (block_code -> functions_queue .)
    ENUM            reduce using rule 20 (block_code -> functions_queue .)
    IF              reduce using rule 20 (block_code -> functions_queue .)
    STACK           reduce using rule 20 (block_code -> functions_queue .)
    QUEUE           reduce using rule 20 (block_code -> functions_queue .)
    CONST           reduce using rule 20 (block_code -> functions_queue .)
    THREAD          reduce using rule 20 (block_code -> functions_queue .)
    TRY             reduce using rule 20 (block_code -> functions_queue .)
    LIST            reduce using rule 20 (block_code -> functions_queue .)
    VARIABLE        reduce using rule 20 (block_code -> functions_queue .)
    WHILE           reduce using rule 20 (block_code -> functions_queue .)
    DO              reduce using rule 20 (block_code -> functions_queue .)
    PUBLIC          reduce using rule 20 (block_code -> functions_queue .)
    PRIVATE         reduce using rule 20 (block_code -> functions_queue .)
    INTTYPE         reduce using rule 20 (block_code -> functions_queue .)
    STRINGTYPE      reduce using rule 20 (block_code -> functions_queue .)
    FLOATTYPE       reduce using rule 20 (block_code -> functions_queue .)
    BOOLTYPE        reduce using rule 20 (block_code -> functions_queue .)
    RKEY            reduce using rule 20 (block_code -> functions_queue .)
    $end            reduce using rule 20 (block_code -> functions_queue .)


state 50

    (70) def_const_or_var -> constant_assignation .

    PRINT           reduce using rule 70 (def_const_or_var -> constant_assignation .)
    STATIC          reduce using rule 70 (def_const_or_var -> constant_assignation .)
    WRITE           reduce using rule 70 (def_const_or_var -> constant_assignation .)
    LPARENT         reduce using rule 70 (def_const_or_var -> constant_assignation .)
    ENUM            reduce using rule 70 (def_const_or_var -> constant_assignation .)
    IF              reduce using rule 70 (def_const_or_var -> constant_assignation .)
    STACK           reduce using rule 70 (def_const_or_var -> constant_assignation .)
    QUEUE           reduce using rule 70 (def_const_or_var -> constant_assignation .)
    CONST           reduce using rule 70 (def_const_or_var -> constant_assignation .)
    THREAD          reduce using rule 70 (def_const_or_var -> constant_assignation .)
    TRY             reduce using rule 70 (def_const_or_var -> constant_assignation .)
    LIST            reduce using rule 70 (def_const_or_var -> constant_assignation .)
    VARIABLE        reduce using rule 70 (def_const_or_var -> constant_assignation .)
    WHILE           reduce using rule 70 (def_const_or_var -> constant_assignation .)
    DO              reduce using rule 70 (def_const_or_var -> constant_assignation .)
    PUBLIC          reduce using rule 70 (def_const_or_var -> constant_assignation .)
    PRIVATE         reduce using rule 70 (def_const_or_var -> constant_assignation .)
    INTTYPE         reduce using rule 70 (def_const_or_var -> constant_assignation .)
    STRINGTYPE      reduce using rule 70 (def_const_or_var -> constant_assignation .)
    FLOATTYPE       reduce using rule 70 (def_const_or_var -> constant_assignation .)
    BOOLTYPE        reduce using rule 70 (def_const_or_var -> constant_assignation .)
    RKEY            reduce using rule 70 (def_const_or_var -> constant_assignation .)
    $end            reduce using rule 70 (def_const_or_var -> constant_assignation .)


state 51

    (71) def_const_or_var -> variable_assignation .

    PRINT           reduce using rule 71 (def_const_or_var -> variable_assignation .)
    STATIC          reduce using rule 71 (def_const_or_var -> variable_assignation .)
    WRITE           reduce using rule 71 (def_const_or_var -> variable_assignation .)
    LPARENT         reduce using rule 71 (def_const_or_var -> variable_assignation .)
    ENUM            reduce using rule 71 (def_const_or_var -> variable_assignation .)
    IF              reduce using rule 71 (def_const_or_var -> variable_assignation .)
    STACK           reduce using rule 71 (def_const_or_var -> variable_assignation .)
    QUEUE           reduce using rule 71 (def_const_or_var -> variable_assignation .)
    CONST           reduce using rule 71 (def_const_or_var -> variable_assignation .)
    THREAD          reduce using rule 71 (def_const_or_var -> variable_assignation .)
    TRY             reduce using rule 71 (def_const_or_var -> variable_assignation .)
    LIST            reduce using rule 71 (def_const_or_var -> variable_assignation .)
    VARIABLE        reduce using rule 71 (def_const_or_var -> variable_assignation .)
    WHILE           reduce using rule 71 (def_const_or_var -> variable_assignation .)
    DO              reduce using rule 71 (def_const_or_var -> variable_assignation .)
    PUBLIC          reduce using rule 71 (def_const_or_var -> variable_assignation .)
    PRIVATE         reduce using rule 71 (def_const_or_var -> variable_assignation .)
    INTTYPE         reduce using rule 71 (def_const_or_var -> variable_assignation .)
    STRINGTYPE      reduce using rule 71 (def_const_or_var -> variable_assignation .)
    FLOATTYPE       reduce using rule 71 (def_const_or_var -> variable_assignation .)
    BOOLTYPE        reduce using rule 71 (def_const_or_var -> variable_assignation .)
    RKEY            reduce using rule 71 (def_const_or_var -> variable_assignation .)
    $end            reduce using rule 71 (def_const_or_var -> variable_assignation .)


state 52

    (40) print_data -> PRINT . LPARENT STRING RPARENT DOTANDCOMMA
    (41) print_data -> PRINT . LPARENT VARIABLE RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 101


state 53

    (112) thread_main -> declaration_thread . declaration_thread thread_init thread_init thread_wait thread_wait
    (113) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (114) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA

    THREAD          shift and go to state 82

    declaration_thread             shift and go to state 102

state 54

    (118) concurrent_method -> WRITE .

    PRINT           reduce using rule 118 (concurrent_method -> WRITE .)
    STATIC          reduce using rule 118 (concurrent_method -> WRITE .)
    WRITE           reduce using rule 118 (concurrent_method -> WRITE .)
    LPARENT         reduce using rule 118 (concurrent_method -> WRITE .)
    ENUM            reduce using rule 118 (concurrent_method -> WRITE .)
    IF              reduce using rule 118 (concurrent_method -> WRITE .)
    STACK           reduce using rule 118 (concurrent_method -> WRITE .)
    QUEUE           reduce using rule 118 (concurrent_method -> WRITE .)
    CONST           reduce using rule 118 (concurrent_method -> WRITE .)
    THREAD          reduce using rule 118 (concurrent_method -> WRITE .)
    TRY             reduce using rule 118 (concurrent_method -> WRITE .)
    LIST            reduce using rule 118 (concurrent_method -> WRITE .)
    VARIABLE        reduce using rule 118 (concurrent_method -> WRITE .)
    WHILE           reduce using rule 118 (concurrent_method -> WRITE .)
    DO              reduce using rule 118 (concurrent_method -> WRITE .)
    PUBLIC          reduce using rule 118 (concurrent_method -> WRITE .)
    PRIVATE         reduce using rule 118 (concurrent_method -> WRITE .)
    INTTYPE         reduce using rule 118 (concurrent_method -> WRITE .)
    STRINGTYPE      reduce using rule 118 (concurrent_method -> WRITE .)
    FLOATTYPE       reduce using rule 118 (concurrent_method -> WRITE .)
    BOOLTYPE        reduce using rule 118 (concurrent_method -> WRITE .)
    RKEY            reduce using rule 118 (concurrent_method -> WRITE .)
    $end            reduce using rule 118 (concurrent_method -> WRITE .)
    RPARENT         reduce using rule 118 (concurrent_method -> WRITE .)


state 55

    (127) block_try_catch -> try_catch_simply .

    PRINT           reduce using rule 127 (block_try_catch -> try_catch_simply .)
    STATIC          reduce using rule 127 (block_try_catch -> try_catch_simply .)
    WRITE           reduce using rule 127 (block_try_catch -> try_catch_simply .)
    LPARENT         reduce using rule 127 (block_try_catch -> try_catch_simply .)
    ENUM            reduce using rule 127 (block_try_catch -> try_catch_simply .)
    IF              reduce using rule 127 (block_try_catch -> try_catch_simply .)
    STACK           reduce using rule 127 (block_try_catch -> try_catch_simply .)
    QUEUE           reduce using rule 127 (block_try_catch -> try_catch_simply .)
    CONST           reduce using rule 127 (block_try_catch -> try_catch_simply .)
    THREAD          reduce using rule 127 (block_try_catch -> try_catch_simply .)
    TRY             reduce using rule 127 (block_try_catch -> try_catch_simply .)
    LIST            reduce using rule 127 (block_try_catch -> try_catch_simply .)
    VARIABLE        reduce using rule 127 (block_try_catch -> try_catch_simply .)
    WHILE           reduce using rule 127 (block_try_catch -> try_catch_simply .)
    DO              reduce using rule 127 (block_try_catch -> try_catch_simply .)
    PUBLIC          reduce using rule 127 (block_try_catch -> try_catch_simply .)
    PRIVATE         reduce using rule 127 (block_try_catch -> try_catch_simply .)
    INTTYPE         reduce using rule 127 (block_try_catch -> try_catch_simply .)
    STRINGTYPE      reduce using rule 127 (block_try_catch -> try_catch_simply .)
    FLOATTYPE       reduce using rule 127 (block_try_catch -> try_catch_simply .)
    BOOLTYPE        reduce using rule 127 (block_try_catch -> try_catch_simply .)
    RKEY            reduce using rule 127 (block_try_catch -> try_catch_simply .)
    $end            reduce using rule 127 (block_try_catch -> try_catch_simply .)


state 56

    (128) block_try_catch -> try_catch_finally .

    PRINT           reduce using rule 128 (block_try_catch -> try_catch_finally .)
    STATIC          reduce using rule 128 (block_try_catch -> try_catch_finally .)
    WRITE           reduce using rule 128 (block_try_catch -> try_catch_finally .)
    LPARENT         reduce using rule 128 (block_try_catch -> try_catch_finally .)
    ENUM            reduce using rule 128 (block_try_catch -> try_catch_finally .)
    IF              reduce using rule 128 (block_try_catch -> try_catch_finally .)
    STACK           reduce using rule 128 (block_try_catch -> try_catch_finally .)
    QUEUE           reduce using rule 128 (block_try_catch -> try_catch_finally .)
    CONST           reduce using rule 128 (block_try_catch -> try_catch_finally .)
    THREAD          reduce using rule 128 (block_try_catch -> try_catch_finally .)
    TRY             reduce using rule 128 (block_try_catch -> try_catch_finally .)
    LIST            reduce using rule 128 (block_try_catch -> try_catch_finally .)
    VARIABLE        reduce using rule 128 (block_try_catch -> try_catch_finally .)
    WHILE           reduce using rule 128 (block_try_catch -> try_catch_finally .)
    DO              reduce using rule 128 (block_try_catch -> try_catch_finally .)
    PUBLIC          reduce using rule 128 (block_try_catch -> try_catch_finally .)
    PRIVATE         reduce using rule 128 (block_try_catch -> try_catch_finally .)
    INTTYPE         reduce using rule 128 (block_try_catch -> try_catch_finally .)
    STRINGTYPE      reduce using rule 128 (block_try_catch -> try_catch_finally .)
    FLOATTYPE       reduce using rule 128 (block_try_catch -> try_catch_finally .)
    BOOLTYPE        reduce using rule 128 (block_try_catch -> try_catch_finally .)
    RKEY            reduce using rule 128 (block_try_catch -> try_catch_finally .)
    $end            reduce using rule 128 (block_try_catch -> try_catch_finally .)


state 57

    (135) lists -> list_empty .

    PRINT           reduce using rule 135 (lists -> list_empty .)
    STATIC          reduce using rule 135 (lists -> list_empty .)
    WRITE           reduce using rule 135 (lists -> list_empty .)
    LPARENT         reduce using rule 135 (lists -> list_empty .)
    ENUM            reduce using rule 135 (lists -> list_empty .)
    IF              reduce using rule 135 (lists -> list_empty .)
    STACK           reduce using rule 135 (lists -> list_empty .)
    QUEUE           reduce using rule 135 (lists -> list_empty .)
    CONST           reduce using rule 135 (lists -> list_empty .)
    THREAD          reduce using rule 135 (lists -> list_empty .)
    TRY             reduce using rule 135 (lists -> list_empty .)
    LIST            reduce using rule 135 (lists -> list_empty .)
    VARIABLE        reduce using rule 135 (lists -> list_empty .)
    WHILE           reduce using rule 135 (lists -> list_empty .)
    DO              reduce using rule 135 (lists -> list_empty .)
    PUBLIC          reduce using rule 135 (lists -> list_empty .)
    PRIVATE         reduce using rule 135 (lists -> list_empty .)
    INTTYPE         reduce using rule 135 (lists -> list_empty .)
    STRINGTYPE      reduce using rule 135 (lists -> list_empty .)
    FLOATTYPE       reduce using rule 135 (lists -> list_empty .)
    BOOLTYPE        reduce using rule 135 (lists -> list_empty .)
    RKEY            reduce using rule 135 (lists -> list_empty .)
    $end            reduce using rule 135 (lists -> list_empty .)


state 58

    (136) lists -> list_full .

    PRINT           reduce using rule 136 (lists -> list_full .)
    STATIC          reduce using rule 136 (lists -> list_full .)
    WRITE           reduce using rule 136 (lists -> list_full .)
    LPARENT         reduce using rule 136 (lists -> list_full .)
    ENUM            reduce using rule 136 (lists -> list_full .)
    IF              reduce using rule 136 (lists -> list_full .)
    STACK           reduce using rule 136 (lists -> list_full .)
    QUEUE           reduce using rule 136 (lists -> list_full .)
    CONST           reduce using rule 136 (lists -> list_full .)
    THREAD          reduce using rule 136 (lists -> list_full .)
    TRY             reduce using rule 136 (lists -> list_full .)
    LIST            reduce using rule 136 (lists -> list_full .)
    VARIABLE        reduce using rule 136 (lists -> list_full .)
    WHILE           reduce using rule 136 (lists -> list_full .)
    DO              reduce using rule 136 (lists -> list_full .)
    PUBLIC          reduce using rule 136 (lists -> list_full .)
    PRIVATE         reduce using rule 136 (lists -> list_full .)
    INTTYPE         reduce using rule 136 (lists -> list_full .)
    STRINGTYPE      reduce using rule 136 (lists -> list_full .)
    FLOATTYPE       reduce using rule 136 (lists -> list_full .)
    BOOLTYPE        reduce using rule 136 (lists -> list_full .)
    RKEY            reduce using rule 136 (lists -> list_full .)
    $end            reduce using rule 136 (lists -> list_full .)


state 59

    (145) functions_list -> list_func_clear .

    PRINT           reduce using rule 145 (functions_list -> list_func_clear .)
    STATIC          reduce using rule 145 (functions_list -> list_func_clear .)
    WRITE           reduce using rule 145 (functions_list -> list_func_clear .)
    LPARENT         reduce using rule 145 (functions_list -> list_func_clear .)
    ENUM            reduce using rule 145 (functions_list -> list_func_clear .)
    IF              reduce using rule 145 (functions_list -> list_func_clear .)
    STACK           reduce using rule 145 (functions_list -> list_func_clear .)
    QUEUE           reduce using rule 145 (functions_list -> list_func_clear .)
    CONST           reduce using rule 145 (functions_list -> list_func_clear .)
    THREAD          reduce using rule 145 (functions_list -> list_func_clear .)
    TRY             reduce using rule 145 (functions_list -> list_func_clear .)
    LIST            reduce using rule 145 (functions_list -> list_func_clear .)
    VARIABLE        reduce using rule 145 (functions_list -> list_func_clear .)
    WHILE           reduce using rule 145 (functions_list -> list_func_clear .)
    DO              reduce using rule 145 (functions_list -> list_func_clear .)
    PUBLIC          reduce using rule 145 (functions_list -> list_func_clear .)
    PRIVATE         reduce using rule 145 (functions_list -> list_func_clear .)
    INTTYPE         reduce using rule 145 (functions_list -> list_func_clear .)
    STRINGTYPE      reduce using rule 145 (functions_list -> list_func_clear .)
    FLOATTYPE       reduce using rule 145 (functions_list -> list_func_clear .)
    BOOLTYPE        reduce using rule 145 (functions_list -> list_func_clear .)
    RKEY            reduce using rule 145 (functions_list -> list_func_clear .)
    $end            reduce using rule 145 (functions_list -> list_func_clear .)


state 60

    (146) functions_list -> list_func_count .

    PRINT           reduce using rule 146 (functions_list -> list_func_count .)
    STATIC          reduce using rule 146 (functions_list -> list_func_count .)
    WRITE           reduce using rule 146 (functions_list -> list_func_count .)
    LPARENT         reduce using rule 146 (functions_list -> list_func_count .)
    ENUM            reduce using rule 146 (functions_list -> list_func_count .)
    IF              reduce using rule 146 (functions_list -> list_func_count .)
    STACK           reduce using rule 146 (functions_list -> list_func_count .)
    QUEUE           reduce using rule 146 (functions_list -> list_func_count .)
    CONST           reduce using rule 146 (functions_list -> list_func_count .)
    THREAD          reduce using rule 146 (functions_list -> list_func_count .)
    TRY             reduce using rule 146 (functions_list -> list_func_count .)
    LIST            reduce using rule 146 (functions_list -> list_func_count .)
    VARIABLE        reduce using rule 146 (functions_list -> list_func_count .)
    WHILE           reduce using rule 146 (functions_list -> list_func_count .)
    DO              reduce using rule 146 (functions_list -> list_func_count .)
    PUBLIC          reduce using rule 146 (functions_list -> list_func_count .)
    PRIVATE         reduce using rule 146 (functions_list -> list_func_count .)
    INTTYPE         reduce using rule 146 (functions_list -> list_func_count .)
    STRINGTYPE      reduce using rule 146 (functions_list -> list_func_count .)
    FLOATTYPE       reduce using rule 146 (functions_list -> list_func_count .)
    BOOLTYPE        reduce using rule 146 (functions_list -> list_func_count .)
    RKEY            reduce using rule 146 (functions_list -> list_func_count .)
    $end            reduce using rule 146 (functions_list -> list_func_count .)


state 61

    (147) functions_list -> list_func_add .

    PRINT           reduce using rule 147 (functions_list -> list_func_add .)
    STATIC          reduce using rule 147 (functions_list -> list_func_add .)
    WRITE           reduce using rule 147 (functions_list -> list_func_add .)
    LPARENT         reduce using rule 147 (functions_list -> list_func_add .)
    ENUM            reduce using rule 147 (functions_list -> list_func_add .)
    IF              reduce using rule 147 (functions_list -> list_func_add .)
    STACK           reduce using rule 147 (functions_list -> list_func_add .)
    QUEUE           reduce using rule 147 (functions_list -> list_func_add .)
    CONST           reduce using rule 147 (functions_list -> list_func_add .)
    THREAD          reduce using rule 147 (functions_list -> list_func_add .)
    TRY             reduce using rule 147 (functions_list -> list_func_add .)
    LIST            reduce using rule 147 (functions_list -> list_func_add .)
    VARIABLE        reduce using rule 147 (functions_list -> list_func_add .)
    WHILE           reduce using rule 147 (functions_list -> list_func_add .)
    DO              reduce using rule 147 (functions_list -> list_func_add .)
    PUBLIC          reduce using rule 147 (functions_list -> list_func_add .)
    PRIVATE         reduce using rule 147 (functions_list -> list_func_add .)
    INTTYPE         reduce using rule 147 (functions_list -> list_func_add .)
    STRINGTYPE      reduce using rule 147 (functions_list -> list_func_add .)
    FLOATTYPE       reduce using rule 147 (functions_list -> list_func_add .)
    BOOLTYPE        reduce using rule 147 (functions_list -> list_func_add .)
    RKEY            reduce using rule 147 (functions_list -> list_func_add .)
    $end            reduce using rule 147 (functions_list -> list_func_add .)


state 62

    (148) functions_list -> list_func_removeat .

    PRINT           reduce using rule 148 (functions_list -> list_func_removeat .)
    STATIC          reduce using rule 148 (functions_list -> list_func_removeat .)
    WRITE           reduce using rule 148 (functions_list -> list_func_removeat .)
    LPARENT         reduce using rule 148 (functions_list -> list_func_removeat .)
    ENUM            reduce using rule 148 (functions_list -> list_func_removeat .)
    IF              reduce using rule 148 (functions_list -> list_func_removeat .)
    STACK           reduce using rule 148 (functions_list -> list_func_removeat .)
    QUEUE           reduce using rule 148 (functions_list -> list_func_removeat .)
    CONST           reduce using rule 148 (functions_list -> list_func_removeat .)
    THREAD          reduce using rule 148 (functions_list -> list_func_removeat .)
    TRY             reduce using rule 148 (functions_list -> list_func_removeat .)
    LIST            reduce using rule 148 (functions_list -> list_func_removeat .)
    VARIABLE        reduce using rule 148 (functions_list -> list_func_removeat .)
    WHILE           reduce using rule 148 (functions_list -> list_func_removeat .)
    DO              reduce using rule 148 (functions_list -> list_func_removeat .)
    PUBLIC          reduce using rule 148 (functions_list -> list_func_removeat .)
    PRIVATE         reduce using rule 148 (functions_list -> list_func_removeat .)
    INTTYPE         reduce using rule 148 (functions_list -> list_func_removeat .)
    STRINGTYPE      reduce using rule 148 (functions_list -> list_func_removeat .)
    FLOATTYPE       reduce using rule 148 (functions_list -> list_func_removeat .)
    BOOLTYPE        reduce using rule 148 (functions_list -> list_func_removeat .)
    RKEY            reduce using rule 148 (functions_list -> list_func_removeat .)
    $end            reduce using rule 148 (functions_list -> list_func_removeat .)


state 63

    (156) enums -> ENUM . METHOD LKEY list_enums RKEY

    METHOD          shift and go to state 103


state 64

    (161) normal_if -> IF . LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (162) normal_if -> IF . LPARENT boolean_operation RPARENT LKEY block_if RKEY

    LPARENT         shift and go to state 104


state 65

    (165) block_while -> normal_while .

    PRINT           reduce using rule 165 (block_while -> normal_while .)
    STATIC          reduce using rule 165 (block_while -> normal_while .)
    WRITE           reduce using rule 165 (block_while -> normal_while .)
    LPARENT         reduce using rule 165 (block_while -> normal_while .)
    ENUM            reduce using rule 165 (block_while -> normal_while .)
    IF              reduce using rule 165 (block_while -> normal_while .)
    STACK           reduce using rule 165 (block_while -> normal_while .)
    QUEUE           reduce using rule 165 (block_while -> normal_while .)
    CONST           reduce using rule 165 (block_while -> normal_while .)
    THREAD          reduce using rule 165 (block_while -> normal_while .)
    TRY             reduce using rule 165 (block_while -> normal_while .)
    LIST            reduce using rule 165 (block_while -> normal_while .)
    VARIABLE        reduce using rule 165 (block_while -> normal_while .)
    WHILE           reduce using rule 165 (block_while -> normal_while .)
    DO              reduce using rule 165 (block_while -> normal_while .)
    PUBLIC          reduce using rule 165 (block_while -> normal_while .)
    PRIVATE         reduce using rule 165 (block_while -> normal_while .)
    INTTYPE         reduce using rule 165 (block_while -> normal_while .)
    STRINGTYPE      reduce using rule 165 (block_while -> normal_while .)
    FLOATTYPE       reduce using rule 165 (block_while -> normal_while .)
    BOOLTYPE        reduce using rule 165 (block_while -> normal_while .)
    RKEY            reduce using rule 165 (block_while -> normal_while .)
    $end            reduce using rule 165 (block_while -> normal_while .)


state 66

    (166) block_while -> do_while .

    PRINT           reduce using rule 166 (block_while -> do_while .)
    STATIC          reduce using rule 166 (block_while -> do_while .)
    WRITE           reduce using rule 166 (block_while -> do_while .)
    LPARENT         reduce using rule 166 (block_while -> do_while .)
    ENUM            reduce using rule 166 (block_while -> do_while .)
    IF              reduce using rule 166 (block_while -> do_while .)
    STACK           reduce using rule 166 (block_while -> do_while .)
    QUEUE           reduce using rule 166 (block_while -> do_while .)
    CONST           reduce using rule 166 (block_while -> do_while .)
    THREAD          reduce using rule 166 (block_while -> do_while .)
    TRY             reduce using rule 166 (block_while -> do_while .)
    LIST            reduce using rule 166 (block_while -> do_while .)
    VARIABLE        reduce using rule 166 (block_while -> do_while .)
    WHILE           reduce using rule 166 (block_while -> do_while .)
    DO              reduce using rule 166 (block_while -> do_while .)
    PUBLIC          reduce using rule 166 (block_while -> do_while .)
    PRIVATE         reduce using rule 166 (block_while -> do_while .)
    INTTYPE         reduce using rule 166 (block_while -> do_while .)
    STRINGTYPE      reduce using rule 166 (block_while -> do_while .)
    FLOATTYPE       reduce using rule 166 (block_while -> do_while .)
    BOOLTYPE        reduce using rule 166 (block_while -> do_while .)
    RKEY            reduce using rule 166 (block_while -> do_while .)
    $end            reduce using rule 166 (block_while -> do_while .)


state 67

    (169) stack_struct -> STACK . VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA

    VARIABLE        shift and go to state 105


state 68

    (170) functions_stack -> stack_push .

    PRINT           reduce using rule 170 (functions_stack -> stack_push .)
    STATIC          reduce using rule 170 (functions_stack -> stack_push .)
    WRITE           reduce using rule 170 (functions_stack -> stack_push .)
    LPARENT         reduce using rule 170 (functions_stack -> stack_push .)
    ENUM            reduce using rule 170 (functions_stack -> stack_push .)
    IF              reduce using rule 170 (functions_stack -> stack_push .)
    STACK           reduce using rule 170 (functions_stack -> stack_push .)
    QUEUE           reduce using rule 170 (functions_stack -> stack_push .)
    CONST           reduce using rule 170 (functions_stack -> stack_push .)
    THREAD          reduce using rule 170 (functions_stack -> stack_push .)
    TRY             reduce using rule 170 (functions_stack -> stack_push .)
    LIST            reduce using rule 170 (functions_stack -> stack_push .)
    VARIABLE        reduce using rule 170 (functions_stack -> stack_push .)
    WHILE           reduce using rule 170 (functions_stack -> stack_push .)
    DO              reduce using rule 170 (functions_stack -> stack_push .)
    PUBLIC          reduce using rule 170 (functions_stack -> stack_push .)
    PRIVATE         reduce using rule 170 (functions_stack -> stack_push .)
    INTTYPE         reduce using rule 170 (functions_stack -> stack_push .)
    STRINGTYPE      reduce using rule 170 (functions_stack -> stack_push .)
    FLOATTYPE       reduce using rule 170 (functions_stack -> stack_push .)
    BOOLTYPE        reduce using rule 170 (functions_stack -> stack_push .)
    RKEY            reduce using rule 170 (functions_stack -> stack_push .)
    $end            reduce using rule 170 (functions_stack -> stack_push .)


state 69

    (171) functions_stack -> stack_pop .

    PRINT           reduce using rule 171 (functions_stack -> stack_pop .)
    STATIC          reduce using rule 171 (functions_stack -> stack_pop .)
    WRITE           reduce using rule 171 (functions_stack -> stack_pop .)
    LPARENT         reduce using rule 171 (functions_stack -> stack_pop .)
    ENUM            reduce using rule 171 (functions_stack -> stack_pop .)
    IF              reduce using rule 171 (functions_stack -> stack_pop .)
    STACK           reduce using rule 171 (functions_stack -> stack_pop .)
    QUEUE           reduce using rule 171 (functions_stack -> stack_pop .)
    CONST           reduce using rule 171 (functions_stack -> stack_pop .)
    THREAD          reduce using rule 171 (functions_stack -> stack_pop .)
    TRY             reduce using rule 171 (functions_stack -> stack_pop .)
    LIST            reduce using rule 171 (functions_stack -> stack_pop .)
    VARIABLE        reduce using rule 171 (functions_stack -> stack_pop .)
    WHILE           reduce using rule 171 (functions_stack -> stack_pop .)
    DO              reduce using rule 171 (functions_stack -> stack_pop .)
    PUBLIC          reduce using rule 171 (functions_stack -> stack_pop .)
    PRIVATE         reduce using rule 171 (functions_stack -> stack_pop .)
    INTTYPE         reduce using rule 171 (functions_stack -> stack_pop .)
    STRINGTYPE      reduce using rule 171 (functions_stack -> stack_pop .)
    FLOATTYPE       reduce using rule 171 (functions_stack -> stack_pop .)
    BOOLTYPE        reduce using rule 171 (functions_stack -> stack_pop .)
    RKEY            reduce using rule 171 (functions_stack -> stack_pop .)
    $end            reduce using rule 171 (functions_stack -> stack_pop .)


state 70

    (172) functions_stack -> stack_clear .

    PRINT           reduce using rule 172 (functions_stack -> stack_clear .)
    STATIC          reduce using rule 172 (functions_stack -> stack_clear .)
    WRITE           reduce using rule 172 (functions_stack -> stack_clear .)
    LPARENT         reduce using rule 172 (functions_stack -> stack_clear .)
    ENUM            reduce using rule 172 (functions_stack -> stack_clear .)
    IF              reduce using rule 172 (functions_stack -> stack_clear .)
    STACK           reduce using rule 172 (functions_stack -> stack_clear .)
    QUEUE           reduce using rule 172 (functions_stack -> stack_clear .)
    CONST           reduce using rule 172 (functions_stack -> stack_clear .)
    THREAD          reduce using rule 172 (functions_stack -> stack_clear .)
    TRY             reduce using rule 172 (functions_stack -> stack_clear .)
    LIST            reduce using rule 172 (functions_stack -> stack_clear .)
    VARIABLE        reduce using rule 172 (functions_stack -> stack_clear .)
    WHILE           reduce using rule 172 (functions_stack -> stack_clear .)
    DO              reduce using rule 172 (functions_stack -> stack_clear .)
    PUBLIC          reduce using rule 172 (functions_stack -> stack_clear .)
    PRIVATE         reduce using rule 172 (functions_stack -> stack_clear .)
    INTTYPE         reduce using rule 172 (functions_stack -> stack_clear .)
    STRINGTYPE      reduce using rule 172 (functions_stack -> stack_clear .)
    FLOATTYPE       reduce using rule 172 (functions_stack -> stack_clear .)
    BOOLTYPE        reduce using rule 172 (functions_stack -> stack_clear .)
    RKEY            reduce using rule 172 (functions_stack -> stack_clear .)
    $end            reduce using rule 172 (functions_stack -> stack_clear .)


state 71

    (173) functions_stack -> stack_peek .

    PRINT           reduce using rule 173 (functions_stack -> stack_peek .)
    STATIC          reduce using rule 173 (functions_stack -> stack_peek .)
    WRITE           reduce using rule 173 (functions_stack -> stack_peek .)
    LPARENT         reduce using rule 173 (functions_stack -> stack_peek .)
    ENUM            reduce using rule 173 (functions_stack -> stack_peek .)
    IF              reduce using rule 173 (functions_stack -> stack_peek .)
    STACK           reduce using rule 173 (functions_stack -> stack_peek .)
    QUEUE           reduce using rule 173 (functions_stack -> stack_peek .)
    CONST           reduce using rule 173 (functions_stack -> stack_peek .)
    THREAD          reduce using rule 173 (functions_stack -> stack_peek .)
    TRY             reduce using rule 173 (functions_stack -> stack_peek .)
    LIST            reduce using rule 173 (functions_stack -> stack_peek .)
    VARIABLE        reduce using rule 173 (functions_stack -> stack_peek .)
    WHILE           reduce using rule 173 (functions_stack -> stack_peek .)
    DO              reduce using rule 173 (functions_stack -> stack_peek .)
    PUBLIC          reduce using rule 173 (functions_stack -> stack_peek .)
    PRIVATE         reduce using rule 173 (functions_stack -> stack_peek .)
    INTTYPE         reduce using rule 173 (functions_stack -> stack_peek .)
    STRINGTYPE      reduce using rule 173 (functions_stack -> stack_peek .)
    FLOATTYPE       reduce using rule 173 (functions_stack -> stack_peek .)
    BOOLTYPE        reduce using rule 173 (functions_stack -> stack_peek .)
    RKEY            reduce using rule 173 (functions_stack -> stack_peek .)
    $end            reduce using rule 173 (functions_stack -> stack_peek .)


state 72

    (174) functions_stack -> stack_isEmpty .

    PRINT           reduce using rule 174 (functions_stack -> stack_isEmpty .)
    STATIC          reduce using rule 174 (functions_stack -> stack_isEmpty .)
    WRITE           reduce using rule 174 (functions_stack -> stack_isEmpty .)
    LPARENT         reduce using rule 174 (functions_stack -> stack_isEmpty .)
    ENUM            reduce using rule 174 (functions_stack -> stack_isEmpty .)
    IF              reduce using rule 174 (functions_stack -> stack_isEmpty .)
    STACK           reduce using rule 174 (functions_stack -> stack_isEmpty .)
    QUEUE           reduce using rule 174 (functions_stack -> stack_isEmpty .)
    CONST           reduce using rule 174 (functions_stack -> stack_isEmpty .)
    THREAD          reduce using rule 174 (functions_stack -> stack_isEmpty .)
    TRY             reduce using rule 174 (functions_stack -> stack_isEmpty .)
    LIST            reduce using rule 174 (functions_stack -> stack_isEmpty .)
    VARIABLE        reduce using rule 174 (functions_stack -> stack_isEmpty .)
    WHILE           reduce using rule 174 (functions_stack -> stack_isEmpty .)
    DO              reduce using rule 174 (functions_stack -> stack_isEmpty .)
    PUBLIC          reduce using rule 174 (functions_stack -> stack_isEmpty .)
    PRIVATE         reduce using rule 174 (functions_stack -> stack_isEmpty .)
    INTTYPE         reduce using rule 174 (functions_stack -> stack_isEmpty .)
    STRINGTYPE      reduce using rule 174 (functions_stack -> stack_isEmpty .)
    FLOATTYPE       reduce using rule 174 (functions_stack -> stack_isEmpty .)
    BOOLTYPE        reduce using rule 174 (functions_stack -> stack_isEmpty .)
    RKEY            reduce using rule 174 (functions_stack -> stack_isEmpty .)
    $end            reduce using rule 174 (functions_stack -> stack_isEmpty .)


state 73

    (180) queue_struct -> QUEUE . VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA

    VARIABLE        shift and go to state 106


state 74

    (181) functions_queue -> queue_enqueue .

    PRINT           reduce using rule 181 (functions_queue -> queue_enqueue .)
    STATIC          reduce using rule 181 (functions_queue -> queue_enqueue .)
    WRITE           reduce using rule 181 (functions_queue -> queue_enqueue .)
    LPARENT         reduce using rule 181 (functions_queue -> queue_enqueue .)
    ENUM            reduce using rule 181 (functions_queue -> queue_enqueue .)
    IF              reduce using rule 181 (functions_queue -> queue_enqueue .)
    STACK           reduce using rule 181 (functions_queue -> queue_enqueue .)
    QUEUE           reduce using rule 181 (functions_queue -> queue_enqueue .)
    CONST           reduce using rule 181 (functions_queue -> queue_enqueue .)
    THREAD          reduce using rule 181 (functions_queue -> queue_enqueue .)
    TRY             reduce using rule 181 (functions_queue -> queue_enqueue .)
    LIST            reduce using rule 181 (functions_queue -> queue_enqueue .)
    VARIABLE        reduce using rule 181 (functions_queue -> queue_enqueue .)
    WHILE           reduce using rule 181 (functions_queue -> queue_enqueue .)
    DO              reduce using rule 181 (functions_queue -> queue_enqueue .)
    PUBLIC          reduce using rule 181 (functions_queue -> queue_enqueue .)
    PRIVATE         reduce using rule 181 (functions_queue -> queue_enqueue .)
    INTTYPE         reduce using rule 181 (functions_queue -> queue_enqueue .)
    STRINGTYPE      reduce using rule 181 (functions_queue -> queue_enqueue .)
    FLOATTYPE       reduce using rule 181 (functions_queue -> queue_enqueue .)
    BOOLTYPE        reduce using rule 181 (functions_queue -> queue_enqueue .)
    RKEY            reduce using rule 181 (functions_queue -> queue_enqueue .)
    $end            reduce using rule 181 (functions_queue -> queue_enqueue .)


state 75

    (182) functions_queue -> queue_dequeue .

    PRINT           reduce using rule 182 (functions_queue -> queue_dequeue .)
    STATIC          reduce using rule 182 (functions_queue -> queue_dequeue .)
    WRITE           reduce using rule 182 (functions_queue -> queue_dequeue .)
    LPARENT         reduce using rule 182 (functions_queue -> queue_dequeue .)
    ENUM            reduce using rule 182 (functions_queue -> queue_dequeue .)
    IF              reduce using rule 182 (functions_queue -> queue_dequeue .)
    STACK           reduce using rule 182 (functions_queue -> queue_dequeue .)
    QUEUE           reduce using rule 182 (functions_queue -> queue_dequeue .)
    CONST           reduce using rule 182 (functions_queue -> queue_dequeue .)
    THREAD          reduce using rule 182 (functions_queue -> queue_dequeue .)
    TRY             reduce using rule 182 (functions_queue -> queue_dequeue .)
    LIST            reduce using rule 182 (functions_queue -> queue_dequeue .)
    VARIABLE        reduce using rule 182 (functions_queue -> queue_dequeue .)
    WHILE           reduce using rule 182 (functions_queue -> queue_dequeue .)
    DO              reduce using rule 182 (functions_queue -> queue_dequeue .)
    PUBLIC          reduce using rule 182 (functions_queue -> queue_dequeue .)
    PRIVATE         reduce using rule 182 (functions_queue -> queue_dequeue .)
    INTTYPE         reduce using rule 182 (functions_queue -> queue_dequeue .)
    STRINGTYPE      reduce using rule 182 (functions_queue -> queue_dequeue .)
    FLOATTYPE       reduce using rule 182 (functions_queue -> queue_dequeue .)
    BOOLTYPE        reduce using rule 182 (functions_queue -> queue_dequeue .)
    RKEY            reduce using rule 182 (functions_queue -> queue_dequeue .)
    $end            reduce using rule 182 (functions_queue -> queue_dequeue .)


state 76

    (183) functions_queue -> queue_clear .

    PRINT           reduce using rule 183 (functions_queue -> queue_clear .)
    STATIC          reduce using rule 183 (functions_queue -> queue_clear .)
    WRITE           reduce using rule 183 (functions_queue -> queue_clear .)
    LPARENT         reduce using rule 183 (functions_queue -> queue_clear .)
    ENUM            reduce using rule 183 (functions_queue -> queue_clear .)
    IF              reduce using rule 183 (functions_queue -> queue_clear .)
    STACK           reduce using rule 183 (functions_queue -> queue_clear .)
    QUEUE           reduce using rule 183 (functions_queue -> queue_clear .)
    CONST           reduce using rule 183 (functions_queue -> queue_clear .)
    THREAD          reduce using rule 183 (functions_queue -> queue_clear .)
    TRY             reduce using rule 183 (functions_queue -> queue_clear .)
    LIST            reduce using rule 183 (functions_queue -> queue_clear .)
    VARIABLE        reduce using rule 183 (functions_queue -> queue_clear .)
    WHILE           reduce using rule 183 (functions_queue -> queue_clear .)
    DO              reduce using rule 183 (functions_queue -> queue_clear .)
    PUBLIC          reduce using rule 183 (functions_queue -> queue_clear .)
    PRIVATE         reduce using rule 183 (functions_queue -> queue_clear .)
    INTTYPE         reduce using rule 183 (functions_queue -> queue_clear .)
    STRINGTYPE      reduce using rule 183 (functions_queue -> queue_clear .)
    FLOATTYPE       reduce using rule 183 (functions_queue -> queue_clear .)
    BOOLTYPE        reduce using rule 183 (functions_queue -> queue_clear .)
    RKEY            reduce using rule 183 (functions_queue -> queue_clear .)
    $end            reduce using rule 183 (functions_queue -> queue_clear .)


state 77

    (184) functions_queue -> queue_isEmpty .

    PRINT           reduce using rule 184 (functions_queue -> queue_isEmpty .)
    STATIC          reduce using rule 184 (functions_queue -> queue_isEmpty .)
    WRITE           reduce using rule 184 (functions_queue -> queue_isEmpty .)
    LPARENT         reduce using rule 184 (functions_queue -> queue_isEmpty .)
    ENUM            reduce using rule 184 (functions_queue -> queue_isEmpty .)
    IF              reduce using rule 184 (functions_queue -> queue_isEmpty .)
    STACK           reduce using rule 184 (functions_queue -> queue_isEmpty .)
    QUEUE           reduce using rule 184 (functions_queue -> queue_isEmpty .)
    CONST           reduce using rule 184 (functions_queue -> queue_isEmpty .)
    THREAD          reduce using rule 184 (functions_queue -> queue_isEmpty .)
    TRY             reduce using rule 184 (functions_queue -> queue_isEmpty .)
    LIST            reduce using rule 184 (functions_queue -> queue_isEmpty .)
    VARIABLE        reduce using rule 184 (functions_queue -> queue_isEmpty .)
    WHILE           reduce using rule 184 (functions_queue -> queue_isEmpty .)
    DO              reduce using rule 184 (functions_queue -> queue_isEmpty .)
    PUBLIC          reduce using rule 184 (functions_queue -> queue_isEmpty .)
    PRIVATE         reduce using rule 184 (functions_queue -> queue_isEmpty .)
    INTTYPE         reduce using rule 184 (functions_queue -> queue_isEmpty .)
    STRINGTYPE      reduce using rule 184 (functions_queue -> queue_isEmpty .)
    FLOATTYPE       reduce using rule 184 (functions_queue -> queue_isEmpty .)
    BOOLTYPE        reduce using rule 184 (functions_queue -> queue_isEmpty .)
    RKEY            reduce using rule 184 (functions_queue -> queue_isEmpty .)
    $end            reduce using rule 184 (functions_queue -> queue_isEmpty .)


state 78

    (185) functions_queue -> queue_peek .

    PRINT           reduce using rule 185 (functions_queue -> queue_peek .)
    STATIC          reduce using rule 185 (functions_queue -> queue_peek .)
    WRITE           reduce using rule 185 (functions_queue -> queue_peek .)
    LPARENT         reduce using rule 185 (functions_queue -> queue_peek .)
    ENUM            reduce using rule 185 (functions_queue -> queue_peek .)
    IF              reduce using rule 185 (functions_queue -> queue_peek .)
    STACK           reduce using rule 185 (functions_queue -> queue_peek .)
    QUEUE           reduce using rule 185 (functions_queue -> queue_peek .)
    CONST           reduce using rule 185 (functions_queue -> queue_peek .)
    THREAD          reduce using rule 185 (functions_queue -> queue_peek .)
    TRY             reduce using rule 185 (functions_queue -> queue_peek .)
    LIST            reduce using rule 185 (functions_queue -> queue_peek .)
    VARIABLE        reduce using rule 185 (functions_queue -> queue_peek .)
    WHILE           reduce using rule 185 (functions_queue -> queue_peek .)
    DO              reduce using rule 185 (functions_queue -> queue_peek .)
    PUBLIC          reduce using rule 185 (functions_queue -> queue_peek .)
    PRIVATE         reduce using rule 185 (functions_queue -> queue_peek .)
    INTTYPE         reduce using rule 185 (functions_queue -> queue_peek .)
    STRINGTYPE      reduce using rule 185 (functions_queue -> queue_peek .)
    FLOATTYPE       reduce using rule 185 (functions_queue -> queue_peek .)
    BOOLTYPE        reduce using rule 185 (functions_queue -> queue_peek .)
    RKEY            reduce using rule 185 (functions_queue -> queue_peek .)
    $end            reduce using rule 185 (functions_queue -> queue_peek .)


state 79

    (72) constant_assignation -> access_modifiers . CONST assignation_type_value_multiple DOTANDCOMMA
    (74) variable_assignation -> access_modifiers . assignation_type_value_multiple DOTANDCOMMA
    (97) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (98) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (99) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (100) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (101) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    CONST           shift and go to state 107
    INTTYPE         shift and go to state 85
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 90
    BOOLTYPE        shift and go to state 91

    assignation_type_value_multiple shift and go to state 108

state 80

    (73) constant_assignation -> CONST . assignation_type_value_multiple DOTANDCOMMA
    (97) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (98) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (99) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (100) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (101) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    INTTYPE         shift and go to state 85
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 90
    BOOLTYPE        shift and go to state 91

    assignation_type_value_multiple shift and go to state 109

state 81

    (75) variable_assignation -> assignation_type_value_multiple . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 110


state 82

    (113) declaration_thread -> THREAD . thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (114) declaration_thread -> THREAD . thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (126) thread_identificator -> . VARIABLE

    VARIABLE        shift and go to state 112

    thread_identificator           shift and go to state 111

state 83

    (129) try_catch_simply -> TRY . LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (130) try_catch_finally -> TRY . LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    LKEY            shift and go to state 113


state 84

    (137) list_empty -> LIST . SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (138) list_empty -> LIST . SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (139) list_full -> LIST . SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (140) list_full -> LIST . SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    SMALLER_THAN    shift and go to state 114


state 85

    (97) assignation_type_value_multiple -> INTTYPE . assignation_int_multiple
    (102) assignation_int_multiple -> . assignation_int
    (103) assignation_int_multiple -> . assignation_int COMMA assignation_int_multiple
    (83) assignation_int -> . VARIABLE ASSIGNATION INTEGER
    (84) assignation_int -> . VARIABLE ASSIGNATION VARIABLE
    (85) assignation_int -> . VARIABLE ASSIGNATION arithmetic_operation

    VARIABLE        shift and go to state 117

    assignation_int_multiple       shift and go to state 115
    assignation_int                shift and go to state 116

state 86

    (167) normal_while -> WHILE . LPARENT boolean_operation RPARENT LKEY all_block_code RKEY

    LPARENT         shift and go to state 118


state 87

    (168) do_while -> DO . LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT

    LKEY            shift and go to state 119


state 88

    (76) access_modifiers -> PUBLIC .

    CONST           reduce using rule 76 (access_modifiers -> PUBLIC .)
    INTTYPE         reduce using rule 76 (access_modifiers -> PUBLIC .)
    STRINGTYPE      reduce using rule 76 (access_modifiers -> PUBLIC .)
    FLOATTYPE       reduce using rule 76 (access_modifiers -> PUBLIC .)
    BOOLTYPE        reduce using rule 76 (access_modifiers -> PUBLIC .)


state 89

    (77) access_modifiers -> PRIVATE .

    CONST           reduce using rule 77 (access_modifiers -> PRIVATE .)
    INTTYPE         reduce using rule 77 (access_modifiers -> PRIVATE .)
    STRINGTYPE      reduce using rule 77 (access_modifiers -> PRIVATE .)
    FLOATTYPE       reduce using rule 77 (access_modifiers -> PRIVATE .)
    BOOLTYPE        reduce using rule 77 (access_modifiers -> PRIVATE .)


state 90

    (99) assignation_type_value_multiple -> FLOATTYPE . assignation_float_multiple
    (106) assignation_float_multiple -> . assignation_float
    (107) assignation_float_multiple -> . assignation_float COMMA assignation_float_multiple
    (88) assignation_float -> . VARIABLE ASSIGNATION FLOAT_NUMBER
    (89) assignation_float -> . VARIABLE ASSIGNATION VARIABLE
    (90) assignation_float -> . VARIABLE ASSIGNATION arithmetic_operation

    VARIABLE        shift and go to state 122

    assignation_float_multiple     shift and go to state 120
    assignation_float              shift and go to state 121

state 91

    (100) assignation_type_value_multiple -> BOOLTYPE . assignation_true_multiple
    (101) assignation_type_value_multiple -> BOOLTYPE . assignation_false_multiple
    (108) assignation_true_multiple -> . assignation_true
    (109) assignation_true_multiple -> . assignation_true COMMA assignation_true_multiple
    (110) assignation_false_multiple -> . assignation_false
    (111) assignation_false_multiple -> . assignation_false COMMA assignation_false_multiple
    (91) assignation_true -> . VARIABLE ASSIGNATION BOOLTRUE
    (92) assignation_true -> . VARIABLE ASSIGNATION VARIABLE
    (93) assignation_true -> . VARIABLE ASSIGNATION boolean_operation
    (94) assignation_false -> . VARIABLE ASSIGNATION BOOLFALSE
    (95) assignation_false -> . VARIABLE ASSIGNATION VARIABLE
    (96) assignation_false -> . VARIABLE ASSIGNATION boolean_operation

    VARIABLE        shift and go to state 127

    assignation_true_multiple      shift and go to state 123
    assignation_false_multiple     shift and go to state 124
    assignation_true               shift and go to state 125
    assignation_false              shift and go to state 126

state 92

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE . RPARENT LKEY all_block_code RKEY
    (5) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE . RPARENT LKEY all_block_code RKEY all_block_code

    RPARENT         shift and go to state 128


state 93

    (117) concurrent_method -> STATIC VOID . thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (126) thread_identificator -> . VARIABLE

    VARIABLE        shift and go to state 112

    thread_identificator           shift and go to state 129

state 94

    (155) statement_lambda -> LPARENT VARIABLE . ARROW LKEY all_block_code RKEY RPARENT

    ARROW           shift and go to state 130


state 95

    (98) assignation_type_value_multiple -> STRINGTYPE assignation_string_multiple .

    DOTANDCOMMA     reduce using rule 98 (assignation_type_value_multiple -> STRINGTYPE assignation_string_multiple .)


state 96

    (104) assignation_string_multiple -> assignation_string .
    (105) assignation_string_multiple -> assignation_string . COMMA assignation_string_multiple

    DOTANDCOMMA     reduce using rule 104 (assignation_string_multiple -> assignation_string .)
    COMMA           shift and go to state 131


state 97

    (86) assignation_string -> VARIABLE . ASSIGNATION STRING
    (87) assignation_string -> VARIABLE . ASSIGNATION VARIABLE

    ASSIGNATION     shift and go to state 132


state 98

    (149) list_func_clear -> VARIABLE DOT . CLEAR LPARENT RPARENT DOTANDCOMMA
    (150) list_func_count -> VARIABLE DOT . COUNT LPARENT RPARENT DOTANDCOMMA
    (151) list_func_add -> VARIABLE DOT . ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (152) list_func_add -> VARIABLE DOT . ADD LPARENT STRING RPARENT DOTANDCOMMA
    (153) list_func_removeat -> VARIABLE DOT . REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (154) list_func_removeat -> VARIABLE DOT . REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (175) stack_push -> VARIABLE DOT . PUSH LPARENT value RPARENT DOTANDCOMMA
    (176) stack_pop -> VARIABLE DOT . POP LPARENT RPARENT DOTANDCOMMA
    (177) stack_clear -> VARIABLE DOT . CLEAR LPARENT RPARENT DOTANDCOMMA
    (178) stack_peek -> VARIABLE DOT . PEEK LPARENT RPARENT DOTANDCOMMA
    (179) stack_isEmpty -> VARIABLE DOT . ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (186) queue_enqueue -> VARIABLE DOT . ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (187) queue_dequeue -> VARIABLE DOT . DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (188) queue_clear -> VARIABLE DOT . CLEAR LPARENT RPARENT DOTANDCOMMA
    (190) queue_isEmpty -> VARIABLE DOT . ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (189) queue_peek -> VARIABLE DOT . PEEK LPARENT RPARENT DOTANDCOMMA

    CLEAR           shift and go to state 133
    COUNT           shift and go to state 134
    ADD             shift and go to state 135
    REMOVEAT        shift and go to state 136
    PUSH            shift and go to state 137
    POP             shift and go to state 138
    PEEK            shift and go to state 139
    ISEMPTY         shift and go to state 140
    ENQUEUE         shift and go to state 141
    DEQUEUE         shift and go to state 142


state 99

    (3) block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY . all_block_code
    (21) all_block_code -> . block_code
    (22) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . thread_main
    (9) block_code -> . concurrent_method
    (10) block_code -> . block_try_catch
    (11) block_code -> . lists
    (12) block_code -> . functions_list
    (13) block_code -> . statement_lambda
    (14) block_code -> . enums
    (15) block_code -> . normal_if
    (16) block_code -> . block_while
    (17) block_code -> . stack_struct
    (18) block_code -> . functions_stack
    (19) block_code -> . queue_struct
    (20) block_code -> . functions_queue
    (70) def_const_or_var -> . constant_assignation
    (71) def_const_or_var -> . variable_assignation
    (40) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (41) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (112) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (117) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (118) concurrent_method -> . WRITE
    (127) block_try_catch -> . try_catch_simply
    (128) block_try_catch -> . try_catch_finally
    (135) lists -> . list_empty
    (136) lists -> . list_full
    (145) functions_list -> . list_func_clear
    (146) functions_list -> . list_func_count
    (147) functions_list -> . list_func_add
    (148) functions_list -> . list_func_removeat
    (155) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (156) enums -> . ENUM METHOD LKEY list_enums RKEY
    (161) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (162) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (165) block_while -> . normal_while
    (166) block_while -> . do_while
    (169) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (170) functions_stack -> . stack_push
    (171) functions_stack -> . stack_pop
    (172) functions_stack -> . stack_clear
    (173) functions_stack -> . stack_peek
    (174) functions_stack -> . stack_isEmpty
    (180) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (181) functions_queue -> . queue_enqueue
    (182) functions_queue -> . queue_dequeue
    (183) functions_queue -> . queue_clear
    (184) functions_queue -> . queue_isEmpty
    (185) functions_queue -> . queue_peek
    (72) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (73) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (74) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (75) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (113) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (114) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (129) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (130) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (137) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (138) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (139) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (140) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (149) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (150) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (151) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (152) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (153) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (154) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (167) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (168) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (175) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (176) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (177) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (178) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (179) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (186) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (187) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (188) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (190) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (189) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (76) access_modifiers -> . PUBLIC
    (77) access_modifiers -> . PRIVATE
    (97) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (98) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (99) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (100) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (101) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 52
    STATIC          shift and go to state 29
    WRITE           shift and go to state 54
    LPARENT         shift and go to state 30
    ENUM            shift and go to state 63
    IF              shift and go to state 64
    STACK           shift and go to state 67
    QUEUE           shift and go to state 73
    CONST           shift and go to state 80
    THREAD          shift and go to state 82
    TRY             shift and go to state 83
    LIST            shift and go to state 84
    VARIABLE        shift and go to state 32
    WHILE           shift and go to state 86
    DO              shift and go to state 87
    PUBLIC          shift and go to state 88
    PRIVATE         shift and go to state 89
    INTTYPE         shift and go to state 85
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 90
    BOOLTYPE        shift and go to state 91

    all_block_code                 shift and go to state 143
    block_code                     shift and go to state 34
    def_const_or_var               shift and go to state 35
    print_data                     shift and go to state 36
    thread_main                    shift and go to state 37
    concurrent_method              shift and go to state 38
    block_try_catch                shift and go to state 39
    lists                          shift and go to state 40
    functions_list                 shift and go to state 41
    statement_lambda               shift and go to state 42
    enums                          shift and go to state 43
    normal_if                      shift and go to state 44
    block_while                    shift and go to state 45
    stack_struct                   shift and go to state 46
    functions_stack                shift and go to state 47
    queue_struct                   shift and go to state 48
    functions_queue                shift and go to state 49
    constant_assignation           shift and go to state 50
    variable_assignation           shift and go to state 51
    declaration_thread             shift and go to state 53
    try_catch_simply               shift and go to state 55
    try_catch_finally              shift and go to state 56
    list_empty                     shift and go to state 57
    list_full                      shift and go to state 58
    list_func_clear                shift and go to state 59
    list_func_count                shift and go to state 60
    list_func_add                  shift and go to state 61
    list_func_removeat             shift and go to state 62
    normal_while                   shift and go to state 65
    do_while                       shift and go to state 66
    stack_push                     shift and go to state 68
    stack_pop                      shift and go to state 69
    stack_clear                    shift and go to state 70
    stack_peek                     shift and go to state 71
    stack_isEmpty                  shift and go to state 72
    queue_enqueue                  shift and go to state 74
    queue_dequeue                  shift and go to state 75
    queue_clear                    shift and go to state 76
    queue_isEmpty                  shift and go to state 77
    queue_peek                     shift and go to state 78
    access_modifiers               shift and go to state 79
    assignation_type_value_multiple shift and go to state 81

state 100

    (22) all_block_code -> block_code all_block_code .

    RKEY            reduce using rule 22 (all_block_code -> block_code all_block_code .)
    $end            reduce using rule 22 (all_block_code -> block_code all_block_code .)


state 101

    (40) print_data -> PRINT LPARENT . STRING RPARENT DOTANDCOMMA
    (41) print_data -> PRINT LPARENT . VARIABLE RPARENT DOTANDCOMMA

    STRING          shift and go to state 144
    VARIABLE        shift and go to state 145


state 102

    (112) thread_main -> declaration_thread declaration_thread . thread_init thread_init thread_wait thread_wait
    (115) thread_init -> . thread_identificator DOT START LPARENT RPARENT DOTANDCOMMA
    (126) thread_identificator -> . VARIABLE

    VARIABLE        shift and go to state 112

    thread_init                    shift and go to state 146
    thread_identificator           shift and go to state 147

state 103

    (156) enums -> ENUM METHOD . LKEY list_enums RKEY

    LKEY            shift and go to state 148


state 104

    (161) normal_if -> IF LPARENT . boolean_operation RPARENT LKEY block_if RKEY other_if
    (162) normal_if -> IF LPARENT . boolean_operation RPARENT LKEY block_if RKEY
    (65) boolean_operation -> . value_boolean
    (66) boolean_operation -> . LOGICNOT value_boolean
    (67) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (32) value_boolean -> . BOOLTRUE
    (33) value_boolean -> . BOOLFALSE
    (34) value_boolean -> . VARIABLE
    (35) value_boolean -> . comparison_operation
    (57) comparison_operation -> . value_numeric
    (58) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (36) value_numeric -> . INTEGER
    (37) value_numeric -> . FLOAT_NUMBER
    (38) value_numeric -> . DECIMAL_NUMBER
    (39) value_numeric -> . VARIABLE

    LOGICNOT        shift and go to state 151
    BOOLTRUE        shift and go to state 152
    BOOLFALSE       shift and go to state 153
    VARIABLE        shift and go to state 154
    INTEGER         shift and go to state 157
    FLOAT_NUMBER    shift and go to state 158
    DECIMAL_NUMBER  shift and go to state 159

    boolean_operation              shift and go to state 149
    value_boolean                  shift and go to state 150
    comparison_operation           shift and go to state 155
    value_numeric                  shift and go to state 156

state 105

    (169) stack_struct -> STACK VARIABLE . ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA

    ASSIGNATION     shift and go to state 160


state 106

    (180) queue_struct -> QUEUE VARIABLE . ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA

    ASSIGNATION     shift and go to state 161


state 107

    (72) constant_assignation -> access_modifiers CONST . assignation_type_value_multiple DOTANDCOMMA
    (97) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (98) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (99) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (100) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (101) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    INTTYPE         shift and go to state 85
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 90
    BOOLTYPE        shift and go to state 91

    assignation_type_value_multiple shift and go to state 162

state 108

    (74) variable_assignation -> access_modifiers assignation_type_value_multiple . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 163


state 109

    (73) constant_assignation -> CONST assignation_type_value_multiple . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 164


state 110

    (75) variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .

    PRINT           reduce using rule 75 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    STATIC          reduce using rule 75 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    WRITE           reduce using rule 75 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    LPARENT         reduce using rule 75 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    ENUM            reduce using rule 75 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    IF              reduce using rule 75 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    STACK           reduce using rule 75 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    QUEUE           reduce using rule 75 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    CONST           reduce using rule 75 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    THREAD          reduce using rule 75 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    TRY             reduce using rule 75 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    LIST            reduce using rule 75 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    VARIABLE        reduce using rule 75 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    WHILE           reduce using rule 75 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    DO              reduce using rule 75 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    PUBLIC          reduce using rule 75 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    PRIVATE         reduce using rule 75 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    INTTYPE         reduce using rule 75 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 75 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 75 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 75 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    RKEY            reduce using rule 75 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    $end            reduce using rule 75 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)


state 111

    (113) declaration_thread -> THREAD thread_identificator . ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (114) declaration_thread -> THREAD thread_identificator . ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA

    ASSIGNATION     shift and go to state 165


state 112

    (126) thread_identificator -> VARIABLE .

    ASSIGNATION     reduce using rule 126 (thread_identificator -> VARIABLE .)
    LPARENT         reduce using rule 126 (thread_identificator -> VARIABLE .)
    DOT             reduce using rule 126 (thread_identificator -> VARIABLE .)
    RPARENT         reduce using rule 126 (thread_identificator -> VARIABLE .)


state 113

    (129) try_catch_simply -> TRY LKEY . all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (130) try_catch_finally -> TRY LKEY . all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (133) all_block_code_try -> . block_code_try
    (134) all_block_code_try -> . block_code_try all_block_code_try
    (131) block_code_try -> . def_const_or_var
    (132) block_code_try -> . print_data
    (70) def_const_or_var -> . constant_assignation
    (71) def_const_or_var -> . variable_assignation
    (40) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (41) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (72) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (73) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (74) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (75) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (76) access_modifiers -> . PUBLIC
    (77) access_modifiers -> . PRIVATE
    (97) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (98) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (99) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (100) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (101) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 52
    CONST           shift and go to state 80
    PUBLIC          shift and go to state 88
    PRIVATE         shift and go to state 89
    INTTYPE         shift and go to state 85
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 90
    BOOLTYPE        shift and go to state 91

    all_block_code_try             shift and go to state 166
    block_code_try                 shift and go to state 167
    def_const_or_var               shift and go to state 168
    print_data                     shift and go to state 169
    constant_assignation           shift and go to state 50
    variable_assignation           shift and go to state 51
    access_modifiers               shift and go to state 79
    assignation_type_value_multiple shift and go to state 81

state 114

    (137) list_empty -> LIST SMALLER_THAN . STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (138) list_empty -> LIST SMALLER_THAN . INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (139) list_full -> LIST SMALLER_THAN . STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (140) list_full -> LIST SMALLER_THAN . INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    STRINGTYPE      shift and go to state 170
    INTTYPE         shift and go to state 171


state 115

    (97) assignation_type_value_multiple -> INTTYPE assignation_int_multiple .

    DOTANDCOMMA     reduce using rule 97 (assignation_type_value_multiple -> INTTYPE assignation_int_multiple .)


state 116

    (102) assignation_int_multiple -> assignation_int .
    (103) assignation_int_multiple -> assignation_int . COMMA assignation_int_multiple

    DOTANDCOMMA     reduce using rule 102 (assignation_int_multiple -> assignation_int .)
    COMMA           shift and go to state 172


state 117

    (83) assignation_int -> VARIABLE . ASSIGNATION INTEGER
    (84) assignation_int -> VARIABLE . ASSIGNATION VARIABLE
    (85) assignation_int -> VARIABLE . ASSIGNATION arithmetic_operation

    ASSIGNATION     shift and go to state 173


state 118

    (167) normal_while -> WHILE LPARENT . boolean_operation RPARENT LKEY all_block_code RKEY
    (65) boolean_operation -> . value_boolean
    (66) boolean_operation -> . LOGICNOT value_boolean
    (67) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (32) value_boolean -> . BOOLTRUE
    (33) value_boolean -> . BOOLFALSE
    (34) value_boolean -> . VARIABLE
    (35) value_boolean -> . comparison_operation
    (57) comparison_operation -> . value_numeric
    (58) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (36) value_numeric -> . INTEGER
    (37) value_numeric -> . FLOAT_NUMBER
    (38) value_numeric -> . DECIMAL_NUMBER
    (39) value_numeric -> . VARIABLE

    LOGICNOT        shift and go to state 151
    BOOLTRUE        shift and go to state 152
    BOOLFALSE       shift and go to state 153
    VARIABLE        shift and go to state 154
    INTEGER         shift and go to state 157
    FLOAT_NUMBER    shift and go to state 158
    DECIMAL_NUMBER  shift and go to state 159

    boolean_operation              shift and go to state 174
    value_boolean                  shift and go to state 150
    comparison_operation           shift and go to state 155
    value_numeric                  shift and go to state 156

state 119

    (168) do_while -> DO LKEY . all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (21) all_block_code -> . block_code
    (22) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . thread_main
    (9) block_code -> . concurrent_method
    (10) block_code -> . block_try_catch
    (11) block_code -> . lists
    (12) block_code -> . functions_list
    (13) block_code -> . statement_lambda
    (14) block_code -> . enums
    (15) block_code -> . normal_if
    (16) block_code -> . block_while
    (17) block_code -> . stack_struct
    (18) block_code -> . functions_stack
    (19) block_code -> . queue_struct
    (20) block_code -> . functions_queue
    (70) def_const_or_var -> . constant_assignation
    (71) def_const_or_var -> . variable_assignation
    (40) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (41) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (112) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (117) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (118) concurrent_method -> . WRITE
    (127) block_try_catch -> . try_catch_simply
    (128) block_try_catch -> . try_catch_finally
    (135) lists -> . list_empty
    (136) lists -> . list_full
    (145) functions_list -> . list_func_clear
    (146) functions_list -> . list_func_count
    (147) functions_list -> . list_func_add
    (148) functions_list -> . list_func_removeat
    (155) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (156) enums -> . ENUM METHOD LKEY list_enums RKEY
    (161) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (162) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (165) block_while -> . normal_while
    (166) block_while -> . do_while
    (169) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (170) functions_stack -> . stack_push
    (171) functions_stack -> . stack_pop
    (172) functions_stack -> . stack_clear
    (173) functions_stack -> . stack_peek
    (174) functions_stack -> . stack_isEmpty
    (180) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (181) functions_queue -> . queue_enqueue
    (182) functions_queue -> . queue_dequeue
    (183) functions_queue -> . queue_clear
    (184) functions_queue -> . queue_isEmpty
    (185) functions_queue -> . queue_peek
    (72) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (73) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (74) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (75) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (113) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (114) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (129) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (130) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (137) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (138) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (139) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (140) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (149) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (150) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (151) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (152) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (153) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (154) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (167) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (168) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (175) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (176) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (177) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (178) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (179) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (186) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (187) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (188) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (190) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (189) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (76) access_modifiers -> . PUBLIC
    (77) access_modifiers -> . PRIVATE
    (97) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (98) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (99) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (100) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (101) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 52
    STATIC          shift and go to state 29
    WRITE           shift and go to state 54
    LPARENT         shift and go to state 30
    ENUM            shift and go to state 63
    IF              shift and go to state 64
    STACK           shift and go to state 67
    QUEUE           shift and go to state 73
    CONST           shift and go to state 80
    THREAD          shift and go to state 82
    TRY             shift and go to state 83
    LIST            shift and go to state 84
    VARIABLE        shift and go to state 32
    WHILE           shift and go to state 86
    DO              shift and go to state 87
    PUBLIC          shift and go to state 88
    PRIVATE         shift and go to state 89
    INTTYPE         shift and go to state 85
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 90
    BOOLTYPE        shift and go to state 91

    all_block_code                 shift and go to state 175
    block_code                     shift and go to state 34
    def_const_or_var               shift and go to state 35
    print_data                     shift and go to state 36
    thread_main                    shift and go to state 37
    concurrent_method              shift and go to state 38
    block_try_catch                shift and go to state 39
    lists                          shift and go to state 40
    functions_list                 shift and go to state 41
    statement_lambda               shift and go to state 42
    enums                          shift and go to state 43
    normal_if                      shift and go to state 44
    block_while                    shift and go to state 45
    stack_struct                   shift and go to state 46
    functions_stack                shift and go to state 47
    queue_struct                   shift and go to state 48
    functions_queue                shift and go to state 49
    constant_assignation           shift and go to state 50
    variable_assignation           shift and go to state 51
    declaration_thread             shift and go to state 53
    try_catch_simply               shift and go to state 55
    try_catch_finally              shift and go to state 56
    list_empty                     shift and go to state 57
    list_full                      shift and go to state 58
    list_func_clear                shift and go to state 59
    list_func_count                shift and go to state 60
    list_func_add                  shift and go to state 61
    list_func_removeat             shift and go to state 62
    normal_while                   shift and go to state 65
    do_while                       shift and go to state 66
    stack_push                     shift and go to state 68
    stack_pop                      shift and go to state 69
    stack_clear                    shift and go to state 70
    stack_peek                     shift and go to state 71
    stack_isEmpty                  shift and go to state 72
    queue_enqueue                  shift and go to state 74
    queue_dequeue                  shift and go to state 75
    queue_clear                    shift and go to state 76
    queue_isEmpty                  shift and go to state 77
    queue_peek                     shift and go to state 78
    access_modifiers               shift and go to state 79
    assignation_type_value_multiple shift and go to state 81

state 120

    (99) assignation_type_value_multiple -> FLOATTYPE assignation_float_multiple .

    DOTANDCOMMA     reduce using rule 99 (assignation_type_value_multiple -> FLOATTYPE assignation_float_multiple .)


state 121

    (106) assignation_float_multiple -> assignation_float .
    (107) assignation_float_multiple -> assignation_float . COMMA assignation_float_multiple

    DOTANDCOMMA     reduce using rule 106 (assignation_float_multiple -> assignation_float .)
    COMMA           shift and go to state 176


state 122

    (88) assignation_float -> VARIABLE . ASSIGNATION FLOAT_NUMBER
    (89) assignation_float -> VARIABLE . ASSIGNATION VARIABLE
    (90) assignation_float -> VARIABLE . ASSIGNATION arithmetic_operation

    ASSIGNATION     shift and go to state 177


state 123

    (100) assignation_type_value_multiple -> BOOLTYPE assignation_true_multiple .

    DOTANDCOMMA     reduce using rule 100 (assignation_type_value_multiple -> BOOLTYPE assignation_true_multiple .)


state 124

    (101) assignation_type_value_multiple -> BOOLTYPE assignation_false_multiple .

    DOTANDCOMMA     reduce using rule 101 (assignation_type_value_multiple -> BOOLTYPE assignation_false_multiple .)


state 125

    (108) assignation_true_multiple -> assignation_true .
    (109) assignation_true_multiple -> assignation_true . COMMA assignation_true_multiple

    DOTANDCOMMA     reduce using rule 108 (assignation_true_multiple -> assignation_true .)
    COMMA           shift and go to state 178


state 126

    (110) assignation_false_multiple -> assignation_false .
    (111) assignation_false_multiple -> assignation_false . COMMA assignation_false_multiple

    DOTANDCOMMA     reduce using rule 110 (assignation_false_multiple -> assignation_false .)
    COMMA           shift and go to state 179


state 127

    (91) assignation_true -> VARIABLE . ASSIGNATION BOOLTRUE
    (92) assignation_true -> VARIABLE . ASSIGNATION VARIABLE
    (93) assignation_true -> VARIABLE . ASSIGNATION boolean_operation
    (94) assignation_false -> VARIABLE . ASSIGNATION BOOLFALSE
    (95) assignation_false -> VARIABLE . ASSIGNATION VARIABLE
    (96) assignation_false -> VARIABLE . ASSIGNATION boolean_operation

    ASSIGNATION     shift and go to state 180


state 128

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT . LKEY all_block_code RKEY
    (5) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT . LKEY all_block_code RKEY all_block_code

    LKEY            shift and go to state 181


state 129

    (117) concurrent_method -> STATIC VOID thread_identificator . LPARENT RPARENT LKEY thread_logic RKEY

    LPARENT         shift and go to state 182


state 130

    (155) statement_lambda -> LPARENT VARIABLE ARROW . LKEY all_block_code RKEY RPARENT

    LKEY            shift and go to state 183


state 131

    (105) assignation_string_multiple -> assignation_string COMMA . assignation_string_multiple
    (104) assignation_string_multiple -> . assignation_string
    (105) assignation_string_multiple -> . assignation_string COMMA assignation_string_multiple
    (86) assignation_string -> . VARIABLE ASSIGNATION STRING
    (87) assignation_string -> . VARIABLE ASSIGNATION VARIABLE

    VARIABLE        shift and go to state 97

    assignation_string             shift and go to state 96
    assignation_string_multiple    shift and go to state 184

state 132

    (86) assignation_string -> VARIABLE ASSIGNATION . STRING
    (87) assignation_string -> VARIABLE ASSIGNATION . VARIABLE

    STRING          shift and go to state 186
    VARIABLE        shift and go to state 185


state 133

    (149) list_func_clear -> VARIABLE DOT CLEAR . LPARENT RPARENT DOTANDCOMMA
    (177) stack_clear -> VARIABLE DOT CLEAR . LPARENT RPARENT DOTANDCOMMA
    (188) queue_clear -> VARIABLE DOT CLEAR . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 187


state 134

    (150) list_func_count -> VARIABLE DOT COUNT . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 188


state 135

    (151) list_func_add -> VARIABLE DOT ADD . LPARENT INTEGER RPARENT DOTANDCOMMA
    (152) list_func_add -> VARIABLE DOT ADD . LPARENT STRING RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 189


state 136

    (153) list_func_removeat -> VARIABLE DOT REMOVEAT . LPARENT INTEGER RPARENT DOTANDCOMMA
    (154) list_func_removeat -> VARIABLE DOT REMOVEAT . LPARENT STRING RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 190


state 137

    (175) stack_push -> VARIABLE DOT PUSH . LPARENT value RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 191


state 138

    (176) stack_pop -> VARIABLE DOT POP . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 192


state 139

    (178) stack_peek -> VARIABLE DOT PEEK . LPARENT RPARENT DOTANDCOMMA
    (189) queue_peek -> VARIABLE DOT PEEK . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 193


state 140

    (179) stack_isEmpty -> VARIABLE DOT ISEMPTY . LPARENT RPARENT DOTANDCOMMA
    (190) queue_isEmpty -> VARIABLE DOT ISEMPTY . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 194


state 141

    (186) queue_enqueue -> VARIABLE DOT ENQUEUE . LPARENT value RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 195


state 142

    (187) queue_dequeue -> VARIABLE DOT DEQUEUE . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 196


state 143

    (3) block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code .

    $end            reduce using rule 3 (block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code .)


state 144

    (40) print_data -> PRINT LPARENT STRING . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 197


state 145

    (41) print_data -> PRINT LPARENT VARIABLE . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 198


state 146

    (112) thread_main -> declaration_thread declaration_thread thread_init . thread_init thread_wait thread_wait
    (115) thread_init -> . thread_identificator DOT START LPARENT RPARENT DOTANDCOMMA
    (126) thread_identificator -> . VARIABLE

    VARIABLE        shift and go to state 112

    thread_init                    shift and go to state 199
    thread_identificator           shift and go to state 147

state 147

    (115) thread_init -> thread_identificator . DOT START LPARENT RPARENT DOTANDCOMMA

    DOT             shift and go to state 200


state 148

    (156) enums -> ENUM METHOD LKEY . list_enums RKEY
    (157) list_enums -> . METHOD
    (158) list_enums -> . METHOD COMMA list_enums

    METHOD          shift and go to state 201

    list_enums                     shift and go to state 202

state 149

    (161) normal_if -> IF LPARENT boolean_operation . RPARENT LKEY block_if RKEY other_if
    (162) normal_if -> IF LPARENT boolean_operation . RPARENT LKEY block_if RKEY

    RPARENT         shift and go to state 203


state 150

    (65) boolean_operation -> value_boolean .
    (67) boolean_operation -> value_boolean . boolean_operator boolean_operation
    (68) boolean_operator -> . LOGICAND
    (69) boolean_operator -> . LOGICOR

    RPARENT         reduce using rule 65 (boolean_operation -> value_boolean .)
    COMMA           reduce using rule 65 (boolean_operation -> value_boolean .)
    DOTANDCOMMA     reduce using rule 65 (boolean_operation -> value_boolean .)
    LOGICAND        shift and go to state 205
    LOGICOR         shift and go to state 206

    boolean_operator               shift and go to state 204

state 151

    (66) boolean_operation -> LOGICNOT . value_boolean
    (32) value_boolean -> . BOOLTRUE
    (33) value_boolean -> . BOOLFALSE
    (34) value_boolean -> . VARIABLE
    (35) value_boolean -> . comparison_operation
    (57) comparison_operation -> . value_numeric
    (58) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (36) value_numeric -> . INTEGER
    (37) value_numeric -> . FLOAT_NUMBER
    (38) value_numeric -> . DECIMAL_NUMBER
    (39) value_numeric -> . VARIABLE

    BOOLTRUE        shift and go to state 152
    BOOLFALSE       shift and go to state 153
    VARIABLE        shift and go to state 154
    INTEGER         shift and go to state 157
    FLOAT_NUMBER    shift and go to state 158
    DECIMAL_NUMBER  shift and go to state 159

    value_boolean                  shift and go to state 207
    comparison_operation           shift and go to state 155
    value_numeric                  shift and go to state 156

state 152

    (32) value_boolean -> BOOLTRUE .

    LOGICAND        reduce using rule 32 (value_boolean -> BOOLTRUE .)
    LOGICOR         reduce using rule 32 (value_boolean -> BOOLTRUE .)
    RPARENT         reduce using rule 32 (value_boolean -> BOOLTRUE .)
    COMMA           reduce using rule 32 (value_boolean -> BOOLTRUE .)
    DOTANDCOMMA     reduce using rule 32 (value_boolean -> BOOLTRUE .)


state 153

    (33) value_boolean -> BOOLFALSE .

    LOGICAND        reduce using rule 33 (value_boolean -> BOOLFALSE .)
    LOGICOR         reduce using rule 33 (value_boolean -> BOOLFALSE .)
    RPARENT         reduce using rule 33 (value_boolean -> BOOLFALSE .)
    COMMA           reduce using rule 33 (value_boolean -> BOOLFALSE .)
    DOTANDCOMMA     reduce using rule 33 (value_boolean -> BOOLFALSE .)


state 154

    (34) value_boolean -> VARIABLE .
    (39) value_numeric -> VARIABLE .

  ! reduce/reduce conflict for LOGICAND resolved using rule 34 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for LOGICOR resolved using rule 34 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for RPARENT resolved using rule 34 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 34 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 34 (value_boolean -> VARIABLE .)
    LOGICAND        reduce using rule 34 (value_boolean -> VARIABLE .)
    LOGICOR         reduce using rule 34 (value_boolean -> VARIABLE .)
    RPARENT         reduce using rule 34 (value_boolean -> VARIABLE .)
    COMMA           reduce using rule 34 (value_boolean -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 34 (value_boolean -> VARIABLE .)
    GREATER_THAN    reduce using rule 39 (value_numeric -> VARIABLE .)
    SMALLER_THAN    reduce using rule 39 (value_numeric -> VARIABLE .)
    EQUAL_COMPARATION reduce using rule 39 (value_numeric -> VARIABLE .)
    INEQUALITY      reduce using rule 39 (value_numeric -> VARIABLE .)
    GREATER_THAN_OR_EQUAL reduce using rule 39 (value_numeric -> VARIABLE .)
    SMALLER_THAN_OR_EQUAL reduce using rule 39 (value_numeric -> VARIABLE .)

  ! LOGICAND        [ reduce using rule 39 (value_numeric -> VARIABLE .) ]
  ! LOGICOR         [ reduce using rule 39 (value_numeric -> VARIABLE .) ]
  ! RPARENT         [ reduce using rule 39 (value_numeric -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 39 (value_numeric -> VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 39 (value_numeric -> VARIABLE .) ]


state 155

    (35) value_boolean -> comparison_operation .

    LOGICAND        reduce using rule 35 (value_boolean -> comparison_operation .)
    LOGICOR         reduce using rule 35 (value_boolean -> comparison_operation .)
    RPARENT         reduce using rule 35 (value_boolean -> comparison_operation .)
    COMMA           reduce using rule 35 (value_boolean -> comparison_operation .)
    DOTANDCOMMA     reduce using rule 35 (value_boolean -> comparison_operation .)


state 156

    (57) comparison_operation -> value_numeric .
    (58) comparison_operation -> value_numeric . comparison_operator comparison_operation
    (59) comparison_operator -> . GREATER_THAN
    (60) comparison_operator -> . SMALLER_THAN
    (61) comparison_operator -> . EQUAL_COMPARATION
    (62) comparison_operator -> . INEQUALITY
    (63) comparison_operator -> . GREATER_THAN_OR_EQUAL
    (64) comparison_operator -> . SMALLER_THAN_OR_EQUAL

    LOGICAND        reduce using rule 57 (comparison_operation -> value_numeric .)
    LOGICOR         reduce using rule 57 (comparison_operation -> value_numeric .)
    RPARENT         reduce using rule 57 (comparison_operation -> value_numeric .)
    COMMA           reduce using rule 57 (comparison_operation -> value_numeric .)
    DOTANDCOMMA     reduce using rule 57 (comparison_operation -> value_numeric .)
    GREATER_THAN    shift and go to state 209
    SMALLER_THAN    shift and go to state 210
    EQUAL_COMPARATION shift and go to state 211
    INEQUALITY      shift and go to state 212
    GREATER_THAN_OR_EQUAL shift and go to state 213
    SMALLER_THAN_OR_EQUAL shift and go to state 214

    comparison_operator            shift and go to state 208

state 157

    (36) value_numeric -> INTEGER .

    GREATER_THAN    reduce using rule 36 (value_numeric -> INTEGER .)
    SMALLER_THAN    reduce using rule 36 (value_numeric -> INTEGER .)
    EQUAL_COMPARATION reduce using rule 36 (value_numeric -> INTEGER .)
    INEQUALITY      reduce using rule 36 (value_numeric -> INTEGER .)
    GREATER_THAN_OR_EQUAL reduce using rule 36 (value_numeric -> INTEGER .)
    SMALLER_THAN_OR_EQUAL reduce using rule 36 (value_numeric -> INTEGER .)
    LOGICAND        reduce using rule 36 (value_numeric -> INTEGER .)
    LOGICOR         reduce using rule 36 (value_numeric -> INTEGER .)
    RPARENT         reduce using rule 36 (value_numeric -> INTEGER .)
    COMMA           reduce using rule 36 (value_numeric -> INTEGER .)
    DOTANDCOMMA     reduce using rule 36 (value_numeric -> INTEGER .)
    PLUS            reduce using rule 36 (value_numeric -> INTEGER .)
    MINUS           reduce using rule 36 (value_numeric -> INTEGER .)
    TIMES           reduce using rule 36 (value_numeric -> INTEGER .)
    DIVIDE          reduce using rule 36 (value_numeric -> INTEGER .)
    PERCENT         reduce using rule 36 (value_numeric -> INTEGER .)


state 158

    (37) value_numeric -> FLOAT_NUMBER .

    GREATER_THAN    reduce using rule 37 (value_numeric -> FLOAT_NUMBER .)
    SMALLER_THAN    reduce using rule 37 (value_numeric -> FLOAT_NUMBER .)
    EQUAL_COMPARATION reduce using rule 37 (value_numeric -> FLOAT_NUMBER .)
    INEQUALITY      reduce using rule 37 (value_numeric -> FLOAT_NUMBER .)
    GREATER_THAN_OR_EQUAL reduce using rule 37 (value_numeric -> FLOAT_NUMBER .)
    SMALLER_THAN_OR_EQUAL reduce using rule 37 (value_numeric -> FLOAT_NUMBER .)
    LOGICAND        reduce using rule 37 (value_numeric -> FLOAT_NUMBER .)
    LOGICOR         reduce using rule 37 (value_numeric -> FLOAT_NUMBER .)
    RPARENT         reduce using rule 37 (value_numeric -> FLOAT_NUMBER .)
    COMMA           reduce using rule 37 (value_numeric -> FLOAT_NUMBER .)
    DOTANDCOMMA     reduce using rule 37 (value_numeric -> FLOAT_NUMBER .)
    PLUS            reduce using rule 37 (value_numeric -> FLOAT_NUMBER .)
    MINUS           reduce using rule 37 (value_numeric -> FLOAT_NUMBER .)
    TIMES           reduce using rule 37 (value_numeric -> FLOAT_NUMBER .)
    DIVIDE          reduce using rule 37 (value_numeric -> FLOAT_NUMBER .)
    PERCENT         reduce using rule 37 (value_numeric -> FLOAT_NUMBER .)


state 159

    (38) value_numeric -> DECIMAL_NUMBER .

    GREATER_THAN    reduce using rule 38 (value_numeric -> DECIMAL_NUMBER .)
    SMALLER_THAN    reduce using rule 38 (value_numeric -> DECIMAL_NUMBER .)
    EQUAL_COMPARATION reduce using rule 38 (value_numeric -> DECIMAL_NUMBER .)
    INEQUALITY      reduce using rule 38 (value_numeric -> DECIMAL_NUMBER .)
    GREATER_THAN_OR_EQUAL reduce using rule 38 (value_numeric -> DECIMAL_NUMBER .)
    SMALLER_THAN_OR_EQUAL reduce using rule 38 (value_numeric -> DECIMAL_NUMBER .)
    LOGICAND        reduce using rule 38 (value_numeric -> DECIMAL_NUMBER .)
    LOGICOR         reduce using rule 38 (value_numeric -> DECIMAL_NUMBER .)
    RPARENT         reduce using rule 38 (value_numeric -> DECIMAL_NUMBER .)
    COMMA           reduce using rule 38 (value_numeric -> DECIMAL_NUMBER .)
    DOTANDCOMMA     reduce using rule 38 (value_numeric -> DECIMAL_NUMBER .)
    PLUS            reduce using rule 38 (value_numeric -> DECIMAL_NUMBER .)
    MINUS           reduce using rule 38 (value_numeric -> DECIMAL_NUMBER .)
    TIMES           reduce using rule 38 (value_numeric -> DECIMAL_NUMBER .)
    DIVIDE          reduce using rule 38 (value_numeric -> DECIMAL_NUMBER .)
    PERCENT         reduce using rule 38 (value_numeric -> DECIMAL_NUMBER .)


state 160

    (169) stack_struct -> STACK VARIABLE ASSIGNATION . NEW STACK LPARENT RPARENT DOTANDCOMMA

    NEW             shift and go to state 215


state 161

    (180) queue_struct -> QUEUE VARIABLE ASSIGNATION . NEW QUEUE LPARENT RPARENT DOTANDCOMMA

    NEW             shift and go to state 216


state 162

    (72) constant_assignation -> access_modifiers CONST assignation_type_value_multiple . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 217


state 163

    (74) variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .

    PRINT           reduce using rule 74 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    STATIC          reduce using rule 74 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    WRITE           reduce using rule 74 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    LPARENT         reduce using rule 74 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    ENUM            reduce using rule 74 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    IF              reduce using rule 74 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    STACK           reduce using rule 74 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    QUEUE           reduce using rule 74 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    CONST           reduce using rule 74 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    THREAD          reduce using rule 74 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    TRY             reduce using rule 74 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    LIST            reduce using rule 74 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    VARIABLE        reduce using rule 74 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    WHILE           reduce using rule 74 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    DO              reduce using rule 74 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    PUBLIC          reduce using rule 74 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    PRIVATE         reduce using rule 74 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    INTTYPE         reduce using rule 74 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 74 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 74 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 74 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    RKEY            reduce using rule 74 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    $end            reduce using rule 74 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)


state 164

    (73) constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .

    PRINT           reduce using rule 73 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    STATIC          reduce using rule 73 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    WRITE           reduce using rule 73 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    LPARENT         reduce using rule 73 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    ENUM            reduce using rule 73 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    IF              reduce using rule 73 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    STACK           reduce using rule 73 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    QUEUE           reduce using rule 73 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    CONST           reduce using rule 73 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    THREAD          reduce using rule 73 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    TRY             reduce using rule 73 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    LIST            reduce using rule 73 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    VARIABLE        reduce using rule 73 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    WHILE           reduce using rule 73 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    DO              reduce using rule 73 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    PUBLIC          reduce using rule 73 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    PRIVATE         reduce using rule 73 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    INTTYPE         reduce using rule 73 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 73 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 73 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 73 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    RKEY            reduce using rule 73 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    $end            reduce using rule 73 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)


state 165

    (113) declaration_thread -> THREAD thread_identificator ASSIGNATION . NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (114) declaration_thread -> THREAD thread_identificator ASSIGNATION . NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA

    NEW             shift and go to state 218


state 166

    (129) try_catch_simply -> TRY LKEY all_block_code_try . RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (130) try_catch_finally -> TRY LKEY all_block_code_try . RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    RKEY            shift and go to state 219


state 167

    (133) all_block_code_try -> block_code_try .
    (134) all_block_code_try -> block_code_try . all_block_code_try
    (133) all_block_code_try -> . block_code_try
    (134) all_block_code_try -> . block_code_try all_block_code_try
    (131) block_code_try -> . def_const_or_var
    (132) block_code_try -> . print_data
    (70) def_const_or_var -> . constant_assignation
    (71) def_const_or_var -> . variable_assignation
    (40) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (41) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (72) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (73) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (74) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (75) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (76) access_modifiers -> . PUBLIC
    (77) access_modifiers -> . PRIVATE
    (97) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (98) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (99) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (100) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (101) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    RKEY            reduce using rule 133 (all_block_code_try -> block_code_try .)
    PRINT           shift and go to state 52
    CONST           shift and go to state 80
    PUBLIC          shift and go to state 88
    PRIVATE         shift and go to state 89
    INTTYPE         shift and go to state 85
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 90
    BOOLTYPE        shift and go to state 91

    block_code_try                 shift and go to state 167
    all_block_code_try             shift and go to state 220
    def_const_or_var               shift and go to state 168
    print_data                     shift and go to state 169
    constant_assignation           shift and go to state 50
    variable_assignation           shift and go to state 51
    access_modifiers               shift and go to state 79
    assignation_type_value_multiple shift and go to state 81

state 168

    (131) block_code_try -> def_const_or_var .

    PRINT           reduce using rule 131 (block_code_try -> def_const_or_var .)
    CONST           reduce using rule 131 (block_code_try -> def_const_or_var .)
    PUBLIC          reduce using rule 131 (block_code_try -> def_const_or_var .)
    PRIVATE         reduce using rule 131 (block_code_try -> def_const_or_var .)
    INTTYPE         reduce using rule 131 (block_code_try -> def_const_or_var .)
    STRINGTYPE      reduce using rule 131 (block_code_try -> def_const_or_var .)
    FLOATTYPE       reduce using rule 131 (block_code_try -> def_const_or_var .)
    BOOLTYPE        reduce using rule 131 (block_code_try -> def_const_or_var .)
    RKEY            reduce using rule 131 (block_code_try -> def_const_or_var .)


state 169

    (132) block_code_try -> print_data .

    PRINT           reduce using rule 132 (block_code_try -> print_data .)
    CONST           reduce using rule 132 (block_code_try -> print_data .)
    PUBLIC          reduce using rule 132 (block_code_try -> print_data .)
    PRIVATE         reduce using rule 132 (block_code_try -> print_data .)
    INTTYPE         reduce using rule 132 (block_code_try -> print_data .)
    STRINGTYPE      reduce using rule 132 (block_code_try -> print_data .)
    FLOATTYPE       reduce using rule 132 (block_code_try -> print_data .)
    BOOLTYPE        reduce using rule 132 (block_code_try -> print_data .)
    RKEY            reduce using rule 132 (block_code_try -> print_data .)


state 170

    (137) list_empty -> LIST SMALLER_THAN STRINGTYPE . GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (139) list_full -> LIST SMALLER_THAN STRINGTYPE . GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    GREATER_THAN    shift and go to state 221


state 171

    (138) list_empty -> LIST SMALLER_THAN INTTYPE . GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (140) list_full -> LIST SMALLER_THAN INTTYPE . GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    GREATER_THAN    shift and go to state 222


state 172

    (103) assignation_int_multiple -> assignation_int COMMA . assignation_int_multiple
    (102) assignation_int_multiple -> . assignation_int
    (103) assignation_int_multiple -> . assignation_int COMMA assignation_int_multiple
    (83) assignation_int -> . VARIABLE ASSIGNATION INTEGER
    (84) assignation_int -> . VARIABLE ASSIGNATION VARIABLE
    (85) assignation_int -> . VARIABLE ASSIGNATION arithmetic_operation

    VARIABLE        shift and go to state 117

    assignation_int                shift and go to state 116
    assignation_int_multiple       shift and go to state 223

state 173

    (83) assignation_int -> VARIABLE ASSIGNATION . INTEGER
    (84) assignation_int -> VARIABLE ASSIGNATION . VARIABLE
    (85) assignation_int -> VARIABLE ASSIGNATION . arithmetic_operation
    (50) arithmetic_operation -> . value_numeric
    (51) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (36) value_numeric -> . INTEGER
    (37) value_numeric -> . FLOAT_NUMBER
    (38) value_numeric -> . DECIMAL_NUMBER
    (39) value_numeric -> . VARIABLE

    INTEGER         shift and go to state 225
    VARIABLE        shift and go to state 224
    FLOAT_NUMBER    shift and go to state 158
    DECIMAL_NUMBER  shift and go to state 159

    arithmetic_operation           shift and go to state 226
    value_numeric                  shift and go to state 227

state 174

    (167) normal_while -> WHILE LPARENT boolean_operation . RPARENT LKEY all_block_code RKEY

    RPARENT         shift and go to state 228


state 175

    (168) do_while -> DO LKEY all_block_code . RKEY WHILE LPARENT boolean_operation RPARENT

    RKEY            shift and go to state 229


state 176

    (107) assignation_float_multiple -> assignation_float COMMA . assignation_float_multiple
    (106) assignation_float_multiple -> . assignation_float
    (107) assignation_float_multiple -> . assignation_float COMMA assignation_float_multiple
    (88) assignation_float -> . VARIABLE ASSIGNATION FLOAT_NUMBER
    (89) assignation_float -> . VARIABLE ASSIGNATION VARIABLE
    (90) assignation_float -> . VARIABLE ASSIGNATION arithmetic_operation

    VARIABLE        shift and go to state 122

    assignation_float              shift and go to state 121
    assignation_float_multiple     shift and go to state 230

state 177

    (88) assignation_float -> VARIABLE ASSIGNATION . FLOAT_NUMBER
    (89) assignation_float -> VARIABLE ASSIGNATION . VARIABLE
    (90) assignation_float -> VARIABLE ASSIGNATION . arithmetic_operation
    (50) arithmetic_operation -> . value_numeric
    (51) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (36) value_numeric -> . INTEGER
    (37) value_numeric -> . FLOAT_NUMBER
    (38) value_numeric -> . DECIMAL_NUMBER
    (39) value_numeric -> . VARIABLE

    FLOAT_NUMBER    shift and go to state 232
    VARIABLE        shift and go to state 231
    INTEGER         shift and go to state 157
    DECIMAL_NUMBER  shift and go to state 159

    arithmetic_operation           shift and go to state 233
    value_numeric                  shift and go to state 227

state 178

    (109) assignation_true_multiple -> assignation_true COMMA . assignation_true_multiple
    (108) assignation_true_multiple -> . assignation_true
    (109) assignation_true_multiple -> . assignation_true COMMA assignation_true_multiple
    (91) assignation_true -> . VARIABLE ASSIGNATION BOOLTRUE
    (92) assignation_true -> . VARIABLE ASSIGNATION VARIABLE
    (93) assignation_true -> . VARIABLE ASSIGNATION boolean_operation

    VARIABLE        shift and go to state 235

    assignation_true               shift and go to state 125
    assignation_true_multiple      shift and go to state 234

state 179

    (111) assignation_false_multiple -> assignation_false COMMA . assignation_false_multiple
    (110) assignation_false_multiple -> . assignation_false
    (111) assignation_false_multiple -> . assignation_false COMMA assignation_false_multiple
    (94) assignation_false -> . VARIABLE ASSIGNATION BOOLFALSE
    (95) assignation_false -> . VARIABLE ASSIGNATION VARIABLE
    (96) assignation_false -> . VARIABLE ASSIGNATION boolean_operation

    VARIABLE        shift and go to state 237

    assignation_false              shift and go to state 126
    assignation_false_multiple     shift and go to state 236

state 180

    (91) assignation_true -> VARIABLE ASSIGNATION . BOOLTRUE
    (92) assignation_true -> VARIABLE ASSIGNATION . VARIABLE
    (93) assignation_true -> VARIABLE ASSIGNATION . boolean_operation
    (94) assignation_false -> VARIABLE ASSIGNATION . BOOLFALSE
    (95) assignation_false -> VARIABLE ASSIGNATION . VARIABLE
    (96) assignation_false -> VARIABLE ASSIGNATION . boolean_operation
    (65) boolean_operation -> . value_boolean
    (66) boolean_operation -> . LOGICNOT value_boolean
    (67) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (32) value_boolean -> . BOOLTRUE
    (33) value_boolean -> . BOOLFALSE
    (34) value_boolean -> . VARIABLE
    (35) value_boolean -> . comparison_operation
    (57) comparison_operation -> . value_numeric
    (58) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (36) value_numeric -> . INTEGER
    (37) value_numeric -> . FLOAT_NUMBER
    (38) value_numeric -> . DECIMAL_NUMBER
    (39) value_numeric -> . VARIABLE

    BOOLTRUE        shift and go to state 239
    VARIABLE        shift and go to state 238
    BOOLFALSE       shift and go to state 241
    LOGICNOT        shift and go to state 151
    INTEGER         shift and go to state 157
    FLOAT_NUMBER    shift and go to state 158
    DECIMAL_NUMBER  shift and go to state 159

    boolean_operation              shift and go to state 240
    value_boolean                  shift and go to state 150
    comparison_operation           shift and go to state 155
    value_numeric                  shift and go to state 156

state 181

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY . all_block_code RKEY
    (5) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY . all_block_code RKEY all_block_code
    (21) all_block_code -> . block_code
    (22) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . thread_main
    (9) block_code -> . concurrent_method
    (10) block_code -> . block_try_catch
    (11) block_code -> . lists
    (12) block_code -> . functions_list
    (13) block_code -> . statement_lambda
    (14) block_code -> . enums
    (15) block_code -> . normal_if
    (16) block_code -> . block_while
    (17) block_code -> . stack_struct
    (18) block_code -> . functions_stack
    (19) block_code -> . queue_struct
    (20) block_code -> . functions_queue
    (70) def_const_or_var -> . constant_assignation
    (71) def_const_or_var -> . variable_assignation
    (40) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (41) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (112) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (117) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (118) concurrent_method -> . WRITE
    (127) block_try_catch -> . try_catch_simply
    (128) block_try_catch -> . try_catch_finally
    (135) lists -> . list_empty
    (136) lists -> . list_full
    (145) functions_list -> . list_func_clear
    (146) functions_list -> . list_func_count
    (147) functions_list -> . list_func_add
    (148) functions_list -> . list_func_removeat
    (155) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (156) enums -> . ENUM METHOD LKEY list_enums RKEY
    (161) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (162) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (165) block_while -> . normal_while
    (166) block_while -> . do_while
    (169) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (170) functions_stack -> . stack_push
    (171) functions_stack -> . stack_pop
    (172) functions_stack -> . stack_clear
    (173) functions_stack -> . stack_peek
    (174) functions_stack -> . stack_isEmpty
    (180) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (181) functions_queue -> . queue_enqueue
    (182) functions_queue -> . queue_dequeue
    (183) functions_queue -> . queue_clear
    (184) functions_queue -> . queue_isEmpty
    (185) functions_queue -> . queue_peek
    (72) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (73) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (74) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (75) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (113) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (114) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (129) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (130) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (137) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (138) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (139) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (140) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (149) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (150) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (151) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (152) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (153) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (154) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (167) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (168) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (175) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (176) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (177) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (178) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (179) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (186) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (187) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (188) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (190) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (189) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (76) access_modifiers -> . PUBLIC
    (77) access_modifiers -> . PRIVATE
    (97) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (98) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (99) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (100) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (101) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 52
    STATIC          shift and go to state 29
    WRITE           shift and go to state 54
    LPARENT         shift and go to state 30
    ENUM            shift and go to state 63
    IF              shift and go to state 64
    STACK           shift and go to state 67
    QUEUE           shift and go to state 73
    CONST           shift and go to state 80
    THREAD          shift and go to state 82
    TRY             shift and go to state 83
    LIST            shift and go to state 84
    VARIABLE        shift and go to state 32
    WHILE           shift and go to state 86
    DO              shift and go to state 87
    PUBLIC          shift and go to state 88
    PRIVATE         shift and go to state 89
    INTTYPE         shift and go to state 85
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 90
    BOOLTYPE        shift and go to state 91

    all_block_code                 shift and go to state 242
    block_code                     shift and go to state 34
    def_const_or_var               shift and go to state 35
    print_data                     shift and go to state 36
    thread_main                    shift and go to state 37
    concurrent_method              shift and go to state 38
    block_try_catch                shift and go to state 39
    lists                          shift and go to state 40
    functions_list                 shift and go to state 41
    statement_lambda               shift and go to state 42
    enums                          shift and go to state 43
    normal_if                      shift and go to state 44
    block_while                    shift and go to state 45
    stack_struct                   shift and go to state 46
    functions_stack                shift and go to state 47
    queue_struct                   shift and go to state 48
    functions_queue                shift and go to state 49
    constant_assignation           shift and go to state 50
    variable_assignation           shift and go to state 51
    declaration_thread             shift and go to state 53
    try_catch_simply               shift and go to state 55
    try_catch_finally              shift and go to state 56
    list_empty                     shift and go to state 57
    list_full                      shift and go to state 58
    list_func_clear                shift and go to state 59
    list_func_count                shift and go to state 60
    list_func_add                  shift and go to state 61
    list_func_removeat             shift and go to state 62
    normal_while                   shift and go to state 65
    do_while                       shift and go to state 66
    stack_push                     shift and go to state 68
    stack_pop                      shift and go to state 69
    stack_clear                    shift and go to state 70
    stack_peek                     shift and go to state 71
    stack_isEmpty                  shift and go to state 72
    queue_enqueue                  shift and go to state 74
    queue_dequeue                  shift and go to state 75
    queue_clear                    shift and go to state 76
    queue_isEmpty                  shift and go to state 77
    queue_peek                     shift and go to state 78
    access_modifiers               shift and go to state 79
    assignation_type_value_multiple shift and go to state 81

state 182

    (117) concurrent_method -> STATIC VOID thread_identificator LPARENT . RPARENT LKEY thread_logic RKEY

    RPARENT         shift and go to state 243


state 183

    (155) statement_lambda -> LPARENT VARIABLE ARROW LKEY . all_block_code RKEY RPARENT
    (21) all_block_code -> . block_code
    (22) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . thread_main
    (9) block_code -> . concurrent_method
    (10) block_code -> . block_try_catch
    (11) block_code -> . lists
    (12) block_code -> . functions_list
    (13) block_code -> . statement_lambda
    (14) block_code -> . enums
    (15) block_code -> . normal_if
    (16) block_code -> . block_while
    (17) block_code -> . stack_struct
    (18) block_code -> . functions_stack
    (19) block_code -> . queue_struct
    (20) block_code -> . functions_queue
    (70) def_const_or_var -> . constant_assignation
    (71) def_const_or_var -> . variable_assignation
    (40) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (41) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (112) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (117) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (118) concurrent_method -> . WRITE
    (127) block_try_catch -> . try_catch_simply
    (128) block_try_catch -> . try_catch_finally
    (135) lists -> . list_empty
    (136) lists -> . list_full
    (145) functions_list -> . list_func_clear
    (146) functions_list -> . list_func_count
    (147) functions_list -> . list_func_add
    (148) functions_list -> . list_func_removeat
    (155) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (156) enums -> . ENUM METHOD LKEY list_enums RKEY
    (161) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (162) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (165) block_while -> . normal_while
    (166) block_while -> . do_while
    (169) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (170) functions_stack -> . stack_push
    (171) functions_stack -> . stack_pop
    (172) functions_stack -> . stack_clear
    (173) functions_stack -> . stack_peek
    (174) functions_stack -> . stack_isEmpty
    (180) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (181) functions_queue -> . queue_enqueue
    (182) functions_queue -> . queue_dequeue
    (183) functions_queue -> . queue_clear
    (184) functions_queue -> . queue_isEmpty
    (185) functions_queue -> . queue_peek
    (72) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (73) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (74) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (75) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (113) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (114) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (129) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (130) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (137) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (138) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (139) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (140) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (149) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (150) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (151) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (152) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (153) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (154) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (167) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (168) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (175) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (176) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (177) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (178) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (179) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (186) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (187) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (188) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (190) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (189) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (76) access_modifiers -> . PUBLIC
    (77) access_modifiers -> . PRIVATE
    (97) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (98) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (99) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (100) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (101) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 52
    STATIC          shift and go to state 29
    WRITE           shift and go to state 54
    LPARENT         shift and go to state 30
    ENUM            shift and go to state 63
    IF              shift and go to state 64
    STACK           shift and go to state 67
    QUEUE           shift and go to state 73
    CONST           shift and go to state 80
    THREAD          shift and go to state 82
    TRY             shift and go to state 83
    LIST            shift and go to state 84
    VARIABLE        shift and go to state 32
    WHILE           shift and go to state 86
    DO              shift and go to state 87
    PUBLIC          shift and go to state 88
    PRIVATE         shift and go to state 89
    INTTYPE         shift and go to state 85
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 90
    BOOLTYPE        shift and go to state 91

    all_block_code                 shift and go to state 244
    block_code                     shift and go to state 34
    def_const_or_var               shift and go to state 35
    print_data                     shift and go to state 36
    thread_main                    shift and go to state 37
    concurrent_method              shift and go to state 38
    block_try_catch                shift and go to state 39
    lists                          shift and go to state 40
    functions_list                 shift and go to state 41
    statement_lambda               shift and go to state 42
    enums                          shift and go to state 43
    normal_if                      shift and go to state 44
    block_while                    shift and go to state 45
    stack_struct                   shift and go to state 46
    functions_stack                shift and go to state 47
    queue_struct                   shift and go to state 48
    functions_queue                shift and go to state 49
    constant_assignation           shift and go to state 50
    variable_assignation           shift and go to state 51
    declaration_thread             shift and go to state 53
    try_catch_simply               shift and go to state 55
    try_catch_finally              shift and go to state 56
    list_empty                     shift and go to state 57
    list_full                      shift and go to state 58
    list_func_clear                shift and go to state 59
    list_func_count                shift and go to state 60
    list_func_add                  shift and go to state 61
    list_func_removeat             shift and go to state 62
    normal_while                   shift and go to state 65
    do_while                       shift and go to state 66
    stack_push                     shift and go to state 68
    stack_pop                      shift and go to state 69
    stack_clear                    shift and go to state 70
    stack_peek                     shift and go to state 71
    stack_isEmpty                  shift and go to state 72
    queue_enqueue                  shift and go to state 74
    queue_dequeue                  shift and go to state 75
    queue_clear                    shift and go to state 76
    queue_isEmpty                  shift and go to state 77
    queue_peek                     shift and go to state 78
    access_modifiers               shift and go to state 79
    assignation_type_value_multiple shift and go to state 81

state 184

    (105) assignation_string_multiple -> assignation_string COMMA assignation_string_multiple .

    DOTANDCOMMA     reduce using rule 105 (assignation_string_multiple -> assignation_string COMMA assignation_string_multiple .)


state 185

    (87) assignation_string -> VARIABLE ASSIGNATION VARIABLE .

    COMMA           reduce using rule 87 (assignation_string -> VARIABLE ASSIGNATION VARIABLE .)
    DOTANDCOMMA     reduce using rule 87 (assignation_string -> VARIABLE ASSIGNATION VARIABLE .)


state 186

    (86) assignation_string -> VARIABLE ASSIGNATION STRING .

    COMMA           reduce using rule 86 (assignation_string -> VARIABLE ASSIGNATION STRING .)
    DOTANDCOMMA     reduce using rule 86 (assignation_string -> VARIABLE ASSIGNATION STRING .)


state 187

    (149) list_func_clear -> VARIABLE DOT CLEAR LPARENT . RPARENT DOTANDCOMMA
    (177) stack_clear -> VARIABLE DOT CLEAR LPARENT . RPARENT DOTANDCOMMA
    (188) queue_clear -> VARIABLE DOT CLEAR LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 245


state 188

    (150) list_func_count -> VARIABLE DOT COUNT LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 246


state 189

    (151) list_func_add -> VARIABLE DOT ADD LPARENT . INTEGER RPARENT DOTANDCOMMA
    (152) list_func_add -> VARIABLE DOT ADD LPARENT . STRING RPARENT DOTANDCOMMA

    INTEGER         shift and go to state 247
    STRING          shift and go to state 248


state 190

    (153) list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT . INTEGER RPARENT DOTANDCOMMA
    (154) list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT . STRING RPARENT DOTANDCOMMA

    INTEGER         shift and go to state 249
    STRING          shift and go to state 250


state 191

    (175) stack_push -> VARIABLE DOT PUSH LPARENT . value RPARENT DOTANDCOMMA
    (45) value -> . value_numeric
    (46) value -> . value_boolean
    (47) value -> . value_string
    (48) value -> . VARIABLE
    (49) value -> . read_data
    (36) value_numeric -> . INTEGER
    (37) value_numeric -> . FLOAT_NUMBER
    (38) value_numeric -> . DECIMAL_NUMBER
    (39) value_numeric -> . VARIABLE
    (32) value_boolean -> . BOOLTRUE
    (33) value_boolean -> . BOOLFALSE
    (34) value_boolean -> . VARIABLE
    (35) value_boolean -> . comparison_operation
    (29) value_string -> . STRING
    (30) value_string -> . CHAR
    (31) value_string -> . concatenation
    (42) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (57) comparison_operation -> . value_numeric
    (58) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (43) concatenation -> . STRING
    (44) concatenation -> . STRING PLUS concatenation

    VARIABLE        shift and go to state 251
    INTEGER         shift and go to state 157
    FLOAT_NUMBER    shift and go to state 158
    DECIMAL_NUMBER  shift and go to state 159
    BOOLTRUE        shift and go to state 152
    BOOLFALSE       shift and go to state 153
    STRING          shift and go to state 257
    CHAR            shift and go to state 258
    READ            shift and go to state 260

    value                          shift and go to state 252
    value_numeric                  shift and go to state 253
    value_boolean                  shift and go to state 254
    value_string                   shift and go to state 255
    read_data                      shift and go to state 256
    comparison_operation           shift and go to state 155
    concatenation                  shift and go to state 259

state 192

    (176) stack_pop -> VARIABLE DOT POP LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 261


state 193

    (178) stack_peek -> VARIABLE DOT PEEK LPARENT . RPARENT DOTANDCOMMA
    (189) queue_peek -> VARIABLE DOT PEEK LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 262


state 194

    (179) stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT . RPARENT DOTANDCOMMA
    (190) queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 263


state 195

    (186) queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT . value RPARENT DOTANDCOMMA
    (45) value -> . value_numeric
    (46) value -> . value_boolean
    (47) value -> . value_string
    (48) value -> . VARIABLE
    (49) value -> . read_data
    (36) value_numeric -> . INTEGER
    (37) value_numeric -> . FLOAT_NUMBER
    (38) value_numeric -> . DECIMAL_NUMBER
    (39) value_numeric -> . VARIABLE
    (32) value_boolean -> . BOOLTRUE
    (33) value_boolean -> . BOOLFALSE
    (34) value_boolean -> . VARIABLE
    (35) value_boolean -> . comparison_operation
    (29) value_string -> . STRING
    (30) value_string -> . CHAR
    (31) value_string -> . concatenation
    (42) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (57) comparison_operation -> . value_numeric
    (58) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (43) concatenation -> . STRING
    (44) concatenation -> . STRING PLUS concatenation

    VARIABLE        shift and go to state 251
    INTEGER         shift and go to state 157
    FLOAT_NUMBER    shift and go to state 158
    DECIMAL_NUMBER  shift and go to state 159
    BOOLTRUE        shift and go to state 152
    BOOLFALSE       shift and go to state 153
    STRING          shift and go to state 257
    CHAR            shift and go to state 258
    READ            shift and go to state 260

    value                          shift and go to state 264
    value_numeric                  shift and go to state 253
    value_boolean                  shift and go to state 254
    value_string                   shift and go to state 255
    read_data                      shift and go to state 256
    comparison_operation           shift and go to state 155
    concatenation                  shift and go to state 259

state 196

    (187) queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 265


state 197

    (40) print_data -> PRINT LPARENT STRING RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 266


state 198

    (41) print_data -> PRINT LPARENT VARIABLE RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 267


state 199

    (112) thread_main -> declaration_thread declaration_thread thread_init thread_init . thread_wait thread_wait
    (116) thread_wait -> . thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA
    (126) thread_identificator -> . VARIABLE

    VARIABLE        shift and go to state 112

    thread_wait                    shift and go to state 268
    thread_identificator           shift and go to state 269

state 200

    (115) thread_init -> thread_identificator DOT . START LPARENT RPARENT DOTANDCOMMA

    START           shift and go to state 270


state 201

    (157) list_enums -> METHOD .
    (158) list_enums -> METHOD . COMMA list_enums

    RKEY            reduce using rule 157 (list_enums -> METHOD .)
    COMMA           shift and go to state 271


state 202

    (156) enums -> ENUM METHOD LKEY list_enums . RKEY

    RKEY            shift and go to state 272


state 203

    (161) normal_if -> IF LPARENT boolean_operation RPARENT . LKEY block_if RKEY other_if
    (162) normal_if -> IF LPARENT boolean_operation RPARENT . LKEY block_if RKEY

    LKEY            shift and go to state 273


state 204

    (67) boolean_operation -> value_boolean boolean_operator . boolean_operation
    (65) boolean_operation -> . value_boolean
    (66) boolean_operation -> . LOGICNOT value_boolean
    (67) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (32) value_boolean -> . BOOLTRUE
    (33) value_boolean -> . BOOLFALSE
    (34) value_boolean -> . VARIABLE
    (35) value_boolean -> . comparison_operation
    (57) comparison_operation -> . value_numeric
    (58) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (36) value_numeric -> . INTEGER
    (37) value_numeric -> . FLOAT_NUMBER
    (38) value_numeric -> . DECIMAL_NUMBER
    (39) value_numeric -> . VARIABLE

    LOGICNOT        shift and go to state 151
    BOOLTRUE        shift and go to state 152
    BOOLFALSE       shift and go to state 153
    VARIABLE        shift and go to state 154
    INTEGER         shift and go to state 157
    FLOAT_NUMBER    shift and go to state 158
    DECIMAL_NUMBER  shift and go to state 159

    value_boolean                  shift and go to state 150
    boolean_operation              shift and go to state 274
    comparison_operation           shift and go to state 155
    value_numeric                  shift and go to state 156

state 205

    (68) boolean_operator -> LOGICAND .

    LOGICNOT        reduce using rule 68 (boolean_operator -> LOGICAND .)
    BOOLTRUE        reduce using rule 68 (boolean_operator -> LOGICAND .)
    BOOLFALSE       reduce using rule 68 (boolean_operator -> LOGICAND .)
    VARIABLE        reduce using rule 68 (boolean_operator -> LOGICAND .)
    INTEGER         reduce using rule 68 (boolean_operator -> LOGICAND .)
    FLOAT_NUMBER    reduce using rule 68 (boolean_operator -> LOGICAND .)
    DECIMAL_NUMBER  reduce using rule 68 (boolean_operator -> LOGICAND .)


state 206

    (69) boolean_operator -> LOGICOR .

    LOGICNOT        reduce using rule 69 (boolean_operator -> LOGICOR .)
    BOOLTRUE        reduce using rule 69 (boolean_operator -> LOGICOR .)
    BOOLFALSE       reduce using rule 69 (boolean_operator -> LOGICOR .)
    VARIABLE        reduce using rule 69 (boolean_operator -> LOGICOR .)
    INTEGER         reduce using rule 69 (boolean_operator -> LOGICOR .)
    FLOAT_NUMBER    reduce using rule 69 (boolean_operator -> LOGICOR .)
    DECIMAL_NUMBER  reduce using rule 69 (boolean_operator -> LOGICOR .)


state 207

    (66) boolean_operation -> LOGICNOT value_boolean .

    RPARENT         reduce using rule 66 (boolean_operation -> LOGICNOT value_boolean .)
    COMMA           reduce using rule 66 (boolean_operation -> LOGICNOT value_boolean .)
    DOTANDCOMMA     reduce using rule 66 (boolean_operation -> LOGICNOT value_boolean .)


state 208

    (58) comparison_operation -> value_numeric comparison_operator . comparison_operation
    (57) comparison_operation -> . value_numeric
    (58) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (36) value_numeric -> . INTEGER
    (37) value_numeric -> . FLOAT_NUMBER
    (38) value_numeric -> . DECIMAL_NUMBER
    (39) value_numeric -> . VARIABLE

    INTEGER         shift and go to state 157
    FLOAT_NUMBER    shift and go to state 158
    DECIMAL_NUMBER  shift and go to state 159
    VARIABLE        shift and go to state 276

    value_numeric                  shift and go to state 156
    comparison_operation           shift and go to state 275

state 209

    (59) comparison_operator -> GREATER_THAN .

    INTEGER         reduce using rule 59 (comparison_operator -> GREATER_THAN .)
    FLOAT_NUMBER    reduce using rule 59 (comparison_operator -> GREATER_THAN .)
    DECIMAL_NUMBER  reduce using rule 59 (comparison_operator -> GREATER_THAN .)
    VARIABLE        reduce using rule 59 (comparison_operator -> GREATER_THAN .)


state 210

    (60) comparison_operator -> SMALLER_THAN .

    INTEGER         reduce using rule 60 (comparison_operator -> SMALLER_THAN .)
    FLOAT_NUMBER    reduce using rule 60 (comparison_operator -> SMALLER_THAN .)
    DECIMAL_NUMBER  reduce using rule 60 (comparison_operator -> SMALLER_THAN .)
    VARIABLE        reduce using rule 60 (comparison_operator -> SMALLER_THAN .)


state 211

    (61) comparison_operator -> EQUAL_COMPARATION .

    INTEGER         reduce using rule 61 (comparison_operator -> EQUAL_COMPARATION .)
    FLOAT_NUMBER    reduce using rule 61 (comparison_operator -> EQUAL_COMPARATION .)
    DECIMAL_NUMBER  reduce using rule 61 (comparison_operator -> EQUAL_COMPARATION .)
    VARIABLE        reduce using rule 61 (comparison_operator -> EQUAL_COMPARATION .)


state 212

    (62) comparison_operator -> INEQUALITY .

    INTEGER         reduce using rule 62 (comparison_operator -> INEQUALITY .)
    FLOAT_NUMBER    reduce using rule 62 (comparison_operator -> INEQUALITY .)
    DECIMAL_NUMBER  reduce using rule 62 (comparison_operator -> INEQUALITY .)
    VARIABLE        reduce using rule 62 (comparison_operator -> INEQUALITY .)


state 213

    (63) comparison_operator -> GREATER_THAN_OR_EQUAL .

    INTEGER         reduce using rule 63 (comparison_operator -> GREATER_THAN_OR_EQUAL .)
    FLOAT_NUMBER    reduce using rule 63 (comparison_operator -> GREATER_THAN_OR_EQUAL .)
    DECIMAL_NUMBER  reduce using rule 63 (comparison_operator -> GREATER_THAN_OR_EQUAL .)
    VARIABLE        reduce using rule 63 (comparison_operator -> GREATER_THAN_OR_EQUAL .)


state 214

    (64) comparison_operator -> SMALLER_THAN_OR_EQUAL .

    INTEGER         reduce using rule 64 (comparison_operator -> SMALLER_THAN_OR_EQUAL .)
    FLOAT_NUMBER    reduce using rule 64 (comparison_operator -> SMALLER_THAN_OR_EQUAL .)
    DECIMAL_NUMBER  reduce using rule 64 (comparison_operator -> SMALLER_THAN_OR_EQUAL .)
    VARIABLE        reduce using rule 64 (comparison_operator -> SMALLER_THAN_OR_EQUAL .)


state 215

    (169) stack_struct -> STACK VARIABLE ASSIGNATION NEW . STACK LPARENT RPARENT DOTANDCOMMA

    STACK           shift and go to state 277


state 216

    (180) queue_struct -> QUEUE VARIABLE ASSIGNATION NEW . QUEUE LPARENT RPARENT DOTANDCOMMA

    QUEUE           shift and go to state 278


state 217

    (72) constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .

    PRINT           reduce using rule 72 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    STATIC          reduce using rule 72 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    WRITE           reduce using rule 72 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    LPARENT         reduce using rule 72 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    ENUM            reduce using rule 72 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    IF              reduce using rule 72 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    STACK           reduce using rule 72 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    QUEUE           reduce using rule 72 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    CONST           reduce using rule 72 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    THREAD          reduce using rule 72 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    TRY             reduce using rule 72 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    LIST            reduce using rule 72 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    VARIABLE        reduce using rule 72 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    WHILE           reduce using rule 72 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    DO              reduce using rule 72 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    PUBLIC          reduce using rule 72 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    PRIVATE         reduce using rule 72 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    INTTYPE         reduce using rule 72 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 72 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 72 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 72 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    RKEY            reduce using rule 72 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    $end            reduce using rule 72 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)


state 218

    (113) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW . THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (114) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW . THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA

    THREAD          shift and go to state 279


state 219

    (129) try_catch_simply -> TRY LKEY all_block_code_try RKEY . CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (130) try_catch_finally -> TRY LKEY all_block_code_try RKEY . CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    CATCH           shift and go to state 280


state 220

    (134) all_block_code_try -> block_code_try all_block_code_try .

    RKEY            reduce using rule 134 (all_block_code_try -> block_code_try all_block_code_try .)


state 221

    (137) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN . VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (139) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN . VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    VARIABLE        shift and go to state 281


state 222

    (138) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN . VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (140) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN . VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    VARIABLE        shift and go to state 282


state 223

    (103) assignation_int_multiple -> assignation_int COMMA assignation_int_multiple .

    DOTANDCOMMA     reduce using rule 103 (assignation_int_multiple -> assignation_int COMMA assignation_int_multiple .)


state 224

    (84) assignation_int -> VARIABLE ASSIGNATION VARIABLE .
    (39) value_numeric -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 39 (value_numeric -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 39 (value_numeric -> VARIABLE .)
    PLUS            reduce using rule 39 (value_numeric -> VARIABLE .)
    MINUS           reduce using rule 39 (value_numeric -> VARIABLE .)
    TIMES           reduce using rule 39 (value_numeric -> VARIABLE .)
    DIVIDE          reduce using rule 39 (value_numeric -> VARIABLE .)
    PERCENT         reduce using rule 39 (value_numeric -> VARIABLE .)
    COMMA           reduce using rule 39 (value_numeric -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 39 (value_numeric -> VARIABLE .)

  ! COMMA           [ reduce using rule 84 (assignation_int -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 84 (assignation_int -> VARIABLE ASSIGNATION VARIABLE .) ]


state 225

    (83) assignation_int -> VARIABLE ASSIGNATION INTEGER .
    (36) value_numeric -> INTEGER .

  ! reduce/reduce conflict for COMMA resolved using rule 36 (value_numeric -> INTEGER .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 36 (value_numeric -> INTEGER .)
    PLUS            reduce using rule 36 (value_numeric -> INTEGER .)
    MINUS           reduce using rule 36 (value_numeric -> INTEGER .)
    TIMES           reduce using rule 36 (value_numeric -> INTEGER .)
    DIVIDE          reduce using rule 36 (value_numeric -> INTEGER .)
    PERCENT         reduce using rule 36 (value_numeric -> INTEGER .)
    COMMA           reduce using rule 36 (value_numeric -> INTEGER .)
    DOTANDCOMMA     reduce using rule 36 (value_numeric -> INTEGER .)

  ! COMMA           [ reduce using rule 83 (assignation_int -> VARIABLE ASSIGNATION INTEGER .) ]
  ! DOTANDCOMMA     [ reduce using rule 83 (assignation_int -> VARIABLE ASSIGNATION INTEGER .) ]


state 226

    (85) assignation_int -> VARIABLE ASSIGNATION arithmetic_operation .

    COMMA           reduce using rule 85 (assignation_int -> VARIABLE ASSIGNATION arithmetic_operation .)
    DOTANDCOMMA     reduce using rule 85 (assignation_int -> VARIABLE ASSIGNATION arithmetic_operation .)


state 227

    (50) arithmetic_operation -> value_numeric .
    (51) arithmetic_operation -> value_numeric . arithmetic_operator arithmetic_operation
    (52) arithmetic_operator -> . PLUS
    (53) arithmetic_operator -> . MINUS
    (54) arithmetic_operator -> . TIMES
    (55) arithmetic_operator -> . DIVIDE
    (56) arithmetic_operator -> . PERCENT

    COMMA           reduce using rule 50 (arithmetic_operation -> value_numeric .)
    DOTANDCOMMA     reduce using rule 50 (arithmetic_operation -> value_numeric .)
    PLUS            shift and go to state 284
    MINUS           shift and go to state 285
    TIMES           shift and go to state 286
    DIVIDE          shift and go to state 287
    PERCENT         shift and go to state 288

    arithmetic_operator            shift and go to state 283

state 228

    (167) normal_while -> WHILE LPARENT boolean_operation RPARENT . LKEY all_block_code RKEY

    LKEY            shift and go to state 289


state 229

    (168) do_while -> DO LKEY all_block_code RKEY . WHILE LPARENT boolean_operation RPARENT

    WHILE           shift and go to state 290


state 230

    (107) assignation_float_multiple -> assignation_float COMMA assignation_float_multiple .

    DOTANDCOMMA     reduce using rule 107 (assignation_float_multiple -> assignation_float COMMA assignation_float_multiple .)


state 231

    (89) assignation_float -> VARIABLE ASSIGNATION VARIABLE .
    (39) value_numeric -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 39 (value_numeric -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 39 (value_numeric -> VARIABLE .)
    PLUS            reduce using rule 39 (value_numeric -> VARIABLE .)
    MINUS           reduce using rule 39 (value_numeric -> VARIABLE .)
    TIMES           reduce using rule 39 (value_numeric -> VARIABLE .)
    DIVIDE          reduce using rule 39 (value_numeric -> VARIABLE .)
    PERCENT         reduce using rule 39 (value_numeric -> VARIABLE .)
    COMMA           reduce using rule 39 (value_numeric -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 39 (value_numeric -> VARIABLE .)

  ! COMMA           [ reduce using rule 89 (assignation_float -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 89 (assignation_float -> VARIABLE ASSIGNATION VARIABLE .) ]


state 232

    (88) assignation_float -> VARIABLE ASSIGNATION FLOAT_NUMBER .
    (37) value_numeric -> FLOAT_NUMBER .

  ! reduce/reduce conflict for COMMA resolved using rule 37 (value_numeric -> FLOAT_NUMBER .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 37 (value_numeric -> FLOAT_NUMBER .)
    PLUS            reduce using rule 37 (value_numeric -> FLOAT_NUMBER .)
    MINUS           reduce using rule 37 (value_numeric -> FLOAT_NUMBER .)
    TIMES           reduce using rule 37 (value_numeric -> FLOAT_NUMBER .)
    DIVIDE          reduce using rule 37 (value_numeric -> FLOAT_NUMBER .)
    PERCENT         reduce using rule 37 (value_numeric -> FLOAT_NUMBER .)
    COMMA           reduce using rule 37 (value_numeric -> FLOAT_NUMBER .)
    DOTANDCOMMA     reduce using rule 37 (value_numeric -> FLOAT_NUMBER .)

  ! COMMA           [ reduce using rule 88 (assignation_float -> VARIABLE ASSIGNATION FLOAT_NUMBER .) ]
  ! DOTANDCOMMA     [ reduce using rule 88 (assignation_float -> VARIABLE ASSIGNATION FLOAT_NUMBER .) ]


state 233

    (90) assignation_float -> VARIABLE ASSIGNATION arithmetic_operation .

    COMMA           reduce using rule 90 (assignation_float -> VARIABLE ASSIGNATION arithmetic_operation .)
    DOTANDCOMMA     reduce using rule 90 (assignation_float -> VARIABLE ASSIGNATION arithmetic_operation .)


state 234

    (109) assignation_true_multiple -> assignation_true COMMA assignation_true_multiple .

    DOTANDCOMMA     reduce using rule 109 (assignation_true_multiple -> assignation_true COMMA assignation_true_multiple .)


state 235

    (91) assignation_true -> VARIABLE . ASSIGNATION BOOLTRUE
    (92) assignation_true -> VARIABLE . ASSIGNATION VARIABLE
    (93) assignation_true -> VARIABLE . ASSIGNATION boolean_operation

    ASSIGNATION     shift and go to state 291


state 236

    (111) assignation_false_multiple -> assignation_false COMMA assignation_false_multiple .

    DOTANDCOMMA     reduce using rule 111 (assignation_false_multiple -> assignation_false COMMA assignation_false_multiple .)


state 237

    (94) assignation_false -> VARIABLE . ASSIGNATION BOOLFALSE
    (95) assignation_false -> VARIABLE . ASSIGNATION VARIABLE
    (96) assignation_false -> VARIABLE . ASSIGNATION boolean_operation

    ASSIGNATION     shift and go to state 292


state 238

    (92) assignation_true -> VARIABLE ASSIGNATION VARIABLE .
    (95) assignation_false -> VARIABLE ASSIGNATION VARIABLE .
    (34) value_boolean -> VARIABLE .
    (39) value_numeric -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 92 (assignation_true -> VARIABLE ASSIGNATION VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 92 (assignation_true -> VARIABLE ASSIGNATION VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 34 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 34 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for LOGICAND resolved using rule 34 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for LOGICOR resolved using rule 34 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 34 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 34 (value_boolean -> VARIABLE .)
    LOGICAND        reduce using rule 34 (value_boolean -> VARIABLE .)
    LOGICOR         reduce using rule 34 (value_boolean -> VARIABLE .)
    COMMA           reduce using rule 34 (value_boolean -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 34 (value_boolean -> VARIABLE .)
    GREATER_THAN    reduce using rule 39 (value_numeric -> VARIABLE .)
    SMALLER_THAN    reduce using rule 39 (value_numeric -> VARIABLE .)
    EQUAL_COMPARATION reduce using rule 39 (value_numeric -> VARIABLE .)
    INEQUALITY      reduce using rule 39 (value_numeric -> VARIABLE .)
    GREATER_THAN_OR_EQUAL reduce using rule 39 (value_numeric -> VARIABLE .)
    SMALLER_THAN_OR_EQUAL reduce using rule 39 (value_numeric -> VARIABLE .)

  ! COMMA           [ reduce using rule 92 (assignation_true -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 92 (assignation_true -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! COMMA           [ reduce using rule 95 (assignation_false -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 95 (assignation_false -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! LOGICAND        [ reduce using rule 39 (value_numeric -> VARIABLE .) ]
  ! LOGICOR         [ reduce using rule 39 (value_numeric -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 39 (value_numeric -> VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 39 (value_numeric -> VARIABLE .) ]


state 239

    (91) assignation_true -> VARIABLE ASSIGNATION BOOLTRUE .
    (32) value_boolean -> BOOLTRUE .

  ! reduce/reduce conflict for COMMA resolved using rule 32 (value_boolean -> BOOLTRUE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 32 (value_boolean -> BOOLTRUE .)
    LOGICAND        reduce using rule 32 (value_boolean -> BOOLTRUE .)
    LOGICOR         reduce using rule 32 (value_boolean -> BOOLTRUE .)
    COMMA           reduce using rule 32 (value_boolean -> BOOLTRUE .)
    DOTANDCOMMA     reduce using rule 32 (value_boolean -> BOOLTRUE .)

  ! COMMA           [ reduce using rule 91 (assignation_true -> VARIABLE ASSIGNATION BOOLTRUE .) ]
  ! DOTANDCOMMA     [ reduce using rule 91 (assignation_true -> VARIABLE ASSIGNATION BOOLTRUE .) ]


state 240

    (93) assignation_true -> VARIABLE ASSIGNATION boolean_operation .
    (96) assignation_false -> VARIABLE ASSIGNATION boolean_operation .

  ! reduce/reduce conflict for COMMA resolved using rule 93 (assignation_true -> VARIABLE ASSIGNATION boolean_operation .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 93 (assignation_true -> VARIABLE ASSIGNATION boolean_operation .)
    COMMA           reduce using rule 93 (assignation_true -> VARIABLE ASSIGNATION boolean_operation .)
    DOTANDCOMMA     reduce using rule 93 (assignation_true -> VARIABLE ASSIGNATION boolean_operation .)

  ! COMMA           [ reduce using rule 96 (assignation_false -> VARIABLE ASSIGNATION boolean_operation .) ]
  ! DOTANDCOMMA     [ reduce using rule 96 (assignation_false -> VARIABLE ASSIGNATION boolean_operation .) ]


state 241

    (94) assignation_false -> VARIABLE ASSIGNATION BOOLFALSE .
    (33) value_boolean -> BOOLFALSE .

  ! reduce/reduce conflict for COMMA resolved using rule 33 (value_boolean -> BOOLFALSE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 33 (value_boolean -> BOOLFALSE .)
    LOGICAND        reduce using rule 33 (value_boolean -> BOOLFALSE .)
    LOGICOR         reduce using rule 33 (value_boolean -> BOOLFALSE .)
    COMMA           reduce using rule 33 (value_boolean -> BOOLFALSE .)
    DOTANDCOMMA     reduce using rule 33 (value_boolean -> BOOLFALSE .)

  ! COMMA           [ reduce using rule 94 (assignation_false -> VARIABLE ASSIGNATION BOOLFALSE .) ]
  ! DOTANDCOMMA     [ reduce using rule 94 (assignation_false -> VARIABLE ASSIGNATION BOOLFALSE .) ]


state 242

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code . RKEY
    (5) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code . RKEY all_block_code

    RKEY            shift and go to state 293


state 243

    (117) concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT . LKEY thread_logic RKEY

    LKEY            shift and go to state 294


state 244

    (155) statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code . RKEY RPARENT

    RKEY            shift and go to state 295


state 245

    (149) list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT . DOTANDCOMMA
    (177) stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT . DOTANDCOMMA
    (188) queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 296


state 246

    (150) list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 297


state 247

    (151) list_func_add -> VARIABLE DOT ADD LPARENT INTEGER . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 298


state 248

    (152) list_func_add -> VARIABLE DOT ADD LPARENT STRING . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 299


state 249

    (153) list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 300


state 250

    (154) list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 301


state 251

    (48) value -> VARIABLE .
    (39) value_numeric -> VARIABLE .
    (34) value_boolean -> VARIABLE .

  ! reduce/reduce conflict for RPARENT resolved using rule 39 (value_numeric -> VARIABLE .)
  ! reduce/reduce conflict for RPARENT resolved using rule 34 (value_boolean -> VARIABLE .)
    GREATER_THAN    reduce using rule 39 (value_numeric -> VARIABLE .)
    SMALLER_THAN    reduce using rule 39 (value_numeric -> VARIABLE .)
    EQUAL_COMPARATION reduce using rule 39 (value_numeric -> VARIABLE .)
    INEQUALITY      reduce using rule 39 (value_numeric -> VARIABLE .)
    GREATER_THAN_OR_EQUAL reduce using rule 39 (value_numeric -> VARIABLE .)
    SMALLER_THAN_OR_EQUAL reduce using rule 39 (value_numeric -> VARIABLE .)
    RPARENT         reduce using rule 34 (value_boolean -> VARIABLE .)

  ! RPARENT         [ reduce using rule 48 (value -> VARIABLE .) ]
  ! RPARENT         [ reduce using rule 39 (value_numeric -> VARIABLE .) ]


state 252

    (175) stack_push -> VARIABLE DOT PUSH LPARENT value . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 302


state 253

    (45) value -> value_numeric .
    (57) comparison_operation -> value_numeric .
    (58) comparison_operation -> value_numeric . comparison_operator comparison_operation
    (59) comparison_operator -> . GREATER_THAN
    (60) comparison_operator -> . SMALLER_THAN
    (61) comparison_operator -> . EQUAL_COMPARATION
    (62) comparison_operator -> . INEQUALITY
    (63) comparison_operator -> . GREATER_THAN_OR_EQUAL
    (64) comparison_operator -> . SMALLER_THAN_OR_EQUAL

  ! reduce/reduce conflict for RPARENT resolved using rule 45 (value -> value_numeric .)
    RPARENT         reduce using rule 45 (value -> value_numeric .)
    GREATER_THAN    shift and go to state 209
    SMALLER_THAN    shift and go to state 210
    EQUAL_COMPARATION shift and go to state 211
    INEQUALITY      shift and go to state 212
    GREATER_THAN_OR_EQUAL shift and go to state 213
    SMALLER_THAN_OR_EQUAL shift and go to state 214

  ! RPARENT         [ reduce using rule 57 (comparison_operation -> value_numeric .) ]

    comparison_operator            shift and go to state 208

state 254

    (46) value -> value_boolean .

    RPARENT         reduce using rule 46 (value -> value_boolean .)


state 255

    (47) value -> value_string .

    RPARENT         reduce using rule 47 (value -> value_string .)


state 256

    (49) value -> read_data .

    RPARENT         reduce using rule 49 (value -> read_data .)


state 257

    (29) value_string -> STRING .
    (43) concatenation -> STRING .
    (44) concatenation -> STRING . PLUS concatenation

  ! reduce/reduce conflict for RPARENT resolved using rule 29 (value_string -> STRING .)
    RPARENT         reduce using rule 29 (value_string -> STRING .)
    PLUS            shift and go to state 303

  ! RPARENT         [ reduce using rule 43 (concatenation -> STRING .) ]


state 258

    (30) value_string -> CHAR .

    RPARENT         reduce using rule 30 (value_string -> CHAR .)


state 259

    (31) value_string -> concatenation .

    RPARENT         reduce using rule 31 (value_string -> concatenation .)


state 260

    (42) read_data -> READ . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 304


state 261

    (176) stack_pop -> VARIABLE DOT POP LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 305


state 262

    (178) stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT . DOTANDCOMMA
    (189) queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 306


state 263

    (179) stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT . DOTANDCOMMA
    (190) queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 307


state 264

    (186) queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 308


state 265

    (187) queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 309


state 266

    (40) print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 40 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 40 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 40 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 40 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 40 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    IF              reduce using rule 40 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 40 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 40 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 40 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 40 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 40 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 40 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 40 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 40 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    DO              reduce using rule 40 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 40 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 40 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 40 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 40 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 40 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 40 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 40 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    $end            reduce using rule 40 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)


state 267

    (41) print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 41 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 41 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 41 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 41 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 41 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    IF              reduce using rule 41 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 41 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 41 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 41 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 41 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 41 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 41 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 41 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 41 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    DO              reduce using rule 41 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 41 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 41 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 41 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 41 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 41 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 41 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 41 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    $end            reduce using rule 41 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)


state 268

    (112) thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait . thread_wait
    (116) thread_wait -> . thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA
    (126) thread_identificator -> . VARIABLE

    VARIABLE        shift and go to state 112

    thread_wait                    shift and go to state 310
    thread_identificator           shift and go to state 269

state 269

    (116) thread_wait -> thread_identificator . DOT JOIN LPARENT RPARENT DOTANDCOMMA

    DOT             shift and go to state 311


state 270

    (115) thread_init -> thread_identificator DOT START . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 312


state 271

    (158) list_enums -> METHOD COMMA . list_enums
    (157) list_enums -> . METHOD
    (158) list_enums -> . METHOD COMMA list_enums

    METHOD          shift and go to state 201

    list_enums                     shift and go to state 313

state 272

    (156) enums -> ENUM METHOD LKEY list_enums RKEY .

    PRINT           reduce using rule 156 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    STATIC          reduce using rule 156 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    WRITE           reduce using rule 156 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    LPARENT         reduce using rule 156 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    ENUM            reduce using rule 156 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    IF              reduce using rule 156 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    STACK           reduce using rule 156 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    QUEUE           reduce using rule 156 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    CONST           reduce using rule 156 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    THREAD          reduce using rule 156 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    TRY             reduce using rule 156 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    LIST            reduce using rule 156 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    VARIABLE        reduce using rule 156 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    WHILE           reduce using rule 156 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    DO              reduce using rule 156 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    PUBLIC          reduce using rule 156 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    PRIVATE         reduce using rule 156 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    INTTYPE         reduce using rule 156 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    STRINGTYPE      reduce using rule 156 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    FLOATTYPE       reduce using rule 156 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    BOOLTYPE        reduce using rule 156 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    RKEY            reduce using rule 156 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    $end            reduce using rule 156 (enums -> ENUM METHOD LKEY list_enums RKEY .)


state 273

    (161) normal_if -> IF LPARENT boolean_operation RPARENT LKEY . block_if RKEY other_if
    (162) normal_if -> IF LPARENT boolean_operation RPARENT LKEY . block_if RKEY
    (159) block_if -> . normal_if
    (160) block_if -> . all_block_code
    (161) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (162) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (21) all_block_code -> . block_code
    (22) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . thread_main
    (9) block_code -> . concurrent_method
    (10) block_code -> . block_try_catch
    (11) block_code -> . lists
    (12) block_code -> . functions_list
    (13) block_code -> . statement_lambda
    (14) block_code -> . enums
    (15) block_code -> . normal_if
    (16) block_code -> . block_while
    (17) block_code -> . stack_struct
    (18) block_code -> . functions_stack
    (19) block_code -> . queue_struct
    (20) block_code -> . functions_queue
    (70) def_const_or_var -> . constant_assignation
    (71) def_const_or_var -> . variable_assignation
    (40) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (41) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (112) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (117) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (118) concurrent_method -> . WRITE
    (127) block_try_catch -> . try_catch_simply
    (128) block_try_catch -> . try_catch_finally
    (135) lists -> . list_empty
    (136) lists -> . list_full
    (145) functions_list -> . list_func_clear
    (146) functions_list -> . list_func_count
    (147) functions_list -> . list_func_add
    (148) functions_list -> . list_func_removeat
    (155) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (156) enums -> . ENUM METHOD LKEY list_enums RKEY
    (165) block_while -> . normal_while
    (166) block_while -> . do_while
    (169) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (170) functions_stack -> . stack_push
    (171) functions_stack -> . stack_pop
    (172) functions_stack -> . stack_clear
    (173) functions_stack -> . stack_peek
    (174) functions_stack -> . stack_isEmpty
    (180) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (181) functions_queue -> . queue_enqueue
    (182) functions_queue -> . queue_dequeue
    (183) functions_queue -> . queue_clear
    (184) functions_queue -> . queue_isEmpty
    (185) functions_queue -> . queue_peek
    (72) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (73) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (74) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (75) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (113) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (114) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (129) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (130) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (137) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (138) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (139) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (140) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (149) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (150) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (151) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (152) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (153) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (154) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (167) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (168) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (175) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (176) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (177) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (178) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (179) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (186) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (187) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (188) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (190) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (189) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (76) access_modifiers -> . PUBLIC
    (77) access_modifiers -> . PRIVATE
    (97) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (98) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (99) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (100) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (101) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    IF              shift and go to state 64
    PRINT           shift and go to state 52
    STATIC          shift and go to state 29
    WRITE           shift and go to state 54
    LPARENT         shift and go to state 30
    ENUM            shift and go to state 63
    STACK           shift and go to state 67
    QUEUE           shift and go to state 73
    CONST           shift and go to state 80
    THREAD          shift and go to state 82
    TRY             shift and go to state 83
    LIST            shift and go to state 84
    VARIABLE        shift and go to state 32
    WHILE           shift and go to state 86
    DO              shift and go to state 87
    PUBLIC          shift and go to state 88
    PRIVATE         shift and go to state 89
    INTTYPE         shift and go to state 85
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 90
    BOOLTYPE        shift and go to state 91

    block_if                       shift and go to state 314
    normal_if                      shift and go to state 315
    all_block_code                 shift and go to state 316
    block_code                     shift and go to state 34
    def_const_or_var               shift and go to state 35
    print_data                     shift and go to state 36
    thread_main                    shift and go to state 37
    concurrent_method              shift and go to state 38
    block_try_catch                shift and go to state 39
    lists                          shift and go to state 40
    functions_list                 shift and go to state 41
    statement_lambda               shift and go to state 42
    enums                          shift and go to state 43
    block_while                    shift and go to state 45
    stack_struct                   shift and go to state 46
    functions_stack                shift and go to state 47
    queue_struct                   shift and go to state 48
    functions_queue                shift and go to state 49
    constant_assignation           shift and go to state 50
    variable_assignation           shift and go to state 51
    declaration_thread             shift and go to state 53
    try_catch_simply               shift and go to state 55
    try_catch_finally              shift and go to state 56
    list_empty                     shift and go to state 57
    list_full                      shift and go to state 58
    list_func_clear                shift and go to state 59
    list_func_count                shift and go to state 60
    list_func_add                  shift and go to state 61
    list_func_removeat             shift and go to state 62
    normal_while                   shift and go to state 65
    do_while                       shift and go to state 66
    stack_push                     shift and go to state 68
    stack_pop                      shift and go to state 69
    stack_clear                    shift and go to state 70
    stack_peek                     shift and go to state 71
    stack_isEmpty                  shift and go to state 72
    queue_enqueue                  shift and go to state 74
    queue_dequeue                  shift and go to state 75
    queue_clear                    shift and go to state 76
    queue_isEmpty                  shift and go to state 77
    queue_peek                     shift and go to state 78
    access_modifiers               shift and go to state 79
    assignation_type_value_multiple shift and go to state 81

state 274

    (67) boolean_operation -> value_boolean boolean_operator boolean_operation .

    RPARENT         reduce using rule 67 (boolean_operation -> value_boolean boolean_operator boolean_operation .)
    COMMA           reduce using rule 67 (boolean_operation -> value_boolean boolean_operator boolean_operation .)
    DOTANDCOMMA     reduce using rule 67 (boolean_operation -> value_boolean boolean_operator boolean_operation .)


state 275

    (58) comparison_operation -> value_numeric comparison_operator comparison_operation .

    LOGICAND        reduce using rule 58 (comparison_operation -> value_numeric comparison_operator comparison_operation .)
    LOGICOR         reduce using rule 58 (comparison_operation -> value_numeric comparison_operator comparison_operation .)
    RPARENT         reduce using rule 58 (comparison_operation -> value_numeric comparison_operator comparison_operation .)
    COMMA           reduce using rule 58 (comparison_operation -> value_numeric comparison_operator comparison_operation .)
    DOTANDCOMMA     reduce using rule 58 (comparison_operation -> value_numeric comparison_operator comparison_operation .)


state 276

    (39) value_numeric -> VARIABLE .

    GREATER_THAN    reduce using rule 39 (value_numeric -> VARIABLE .)
    SMALLER_THAN    reduce using rule 39 (value_numeric -> VARIABLE .)
    EQUAL_COMPARATION reduce using rule 39 (value_numeric -> VARIABLE .)
    INEQUALITY      reduce using rule 39 (value_numeric -> VARIABLE .)
    GREATER_THAN_OR_EQUAL reduce using rule 39 (value_numeric -> VARIABLE .)
    SMALLER_THAN_OR_EQUAL reduce using rule 39 (value_numeric -> VARIABLE .)
    LOGICAND        reduce using rule 39 (value_numeric -> VARIABLE .)
    LOGICOR         reduce using rule 39 (value_numeric -> VARIABLE .)
    RPARENT         reduce using rule 39 (value_numeric -> VARIABLE .)
    COMMA           reduce using rule 39 (value_numeric -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 39 (value_numeric -> VARIABLE .)
    PLUS            reduce using rule 39 (value_numeric -> VARIABLE .)
    MINUS           reduce using rule 39 (value_numeric -> VARIABLE .)
    TIMES           reduce using rule 39 (value_numeric -> VARIABLE .)
    DIVIDE          reduce using rule 39 (value_numeric -> VARIABLE .)
    PERCENT         reduce using rule 39 (value_numeric -> VARIABLE .)


state 277

    (169) stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 317


state 278

    (180) queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 318


state 279

    (113) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD . LPARENT thread_identificator RPARENT DOTANDCOMMA
    (114) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD . LPARENT concurrent_method RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 319


state 280

    (129) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH . LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (130) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH . LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    LPARENT         shift and go to state 320


state 281

    (137) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE . ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (139) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE . ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    ASSIGNATION     shift and go to state 321


state 282

    (138) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE . ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (140) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE . ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    ASSIGNATION     shift and go to state 322


state 283

    (51) arithmetic_operation -> value_numeric arithmetic_operator . arithmetic_operation
    (50) arithmetic_operation -> . value_numeric
    (51) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (36) value_numeric -> . INTEGER
    (37) value_numeric -> . FLOAT_NUMBER
    (38) value_numeric -> . DECIMAL_NUMBER
    (39) value_numeric -> . VARIABLE

    INTEGER         shift and go to state 157
    FLOAT_NUMBER    shift and go to state 158
    DECIMAL_NUMBER  shift and go to state 159
    VARIABLE        shift and go to state 276

    value_numeric                  shift and go to state 227
    arithmetic_operation           shift and go to state 323

state 284

    (52) arithmetic_operator -> PLUS .

    INTEGER         reduce using rule 52 (arithmetic_operator -> PLUS .)
    FLOAT_NUMBER    reduce using rule 52 (arithmetic_operator -> PLUS .)
    DECIMAL_NUMBER  reduce using rule 52 (arithmetic_operator -> PLUS .)
    VARIABLE        reduce using rule 52 (arithmetic_operator -> PLUS .)


state 285

    (53) arithmetic_operator -> MINUS .

    INTEGER         reduce using rule 53 (arithmetic_operator -> MINUS .)
    FLOAT_NUMBER    reduce using rule 53 (arithmetic_operator -> MINUS .)
    DECIMAL_NUMBER  reduce using rule 53 (arithmetic_operator -> MINUS .)
    VARIABLE        reduce using rule 53 (arithmetic_operator -> MINUS .)


state 286

    (54) arithmetic_operator -> TIMES .

    INTEGER         reduce using rule 54 (arithmetic_operator -> TIMES .)
    FLOAT_NUMBER    reduce using rule 54 (arithmetic_operator -> TIMES .)
    DECIMAL_NUMBER  reduce using rule 54 (arithmetic_operator -> TIMES .)
    VARIABLE        reduce using rule 54 (arithmetic_operator -> TIMES .)


state 287

    (55) arithmetic_operator -> DIVIDE .

    INTEGER         reduce using rule 55 (arithmetic_operator -> DIVIDE .)
    FLOAT_NUMBER    reduce using rule 55 (arithmetic_operator -> DIVIDE .)
    DECIMAL_NUMBER  reduce using rule 55 (arithmetic_operator -> DIVIDE .)
    VARIABLE        reduce using rule 55 (arithmetic_operator -> DIVIDE .)


state 288

    (56) arithmetic_operator -> PERCENT .

    INTEGER         reduce using rule 56 (arithmetic_operator -> PERCENT .)
    FLOAT_NUMBER    reduce using rule 56 (arithmetic_operator -> PERCENT .)
    DECIMAL_NUMBER  reduce using rule 56 (arithmetic_operator -> PERCENT .)
    VARIABLE        reduce using rule 56 (arithmetic_operator -> PERCENT .)


state 289

    (167) normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY . all_block_code RKEY
    (21) all_block_code -> . block_code
    (22) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . thread_main
    (9) block_code -> . concurrent_method
    (10) block_code -> . block_try_catch
    (11) block_code -> . lists
    (12) block_code -> . functions_list
    (13) block_code -> . statement_lambda
    (14) block_code -> . enums
    (15) block_code -> . normal_if
    (16) block_code -> . block_while
    (17) block_code -> . stack_struct
    (18) block_code -> . functions_stack
    (19) block_code -> . queue_struct
    (20) block_code -> . functions_queue
    (70) def_const_or_var -> . constant_assignation
    (71) def_const_or_var -> . variable_assignation
    (40) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (41) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (112) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (117) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (118) concurrent_method -> . WRITE
    (127) block_try_catch -> . try_catch_simply
    (128) block_try_catch -> . try_catch_finally
    (135) lists -> . list_empty
    (136) lists -> . list_full
    (145) functions_list -> . list_func_clear
    (146) functions_list -> . list_func_count
    (147) functions_list -> . list_func_add
    (148) functions_list -> . list_func_removeat
    (155) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (156) enums -> . ENUM METHOD LKEY list_enums RKEY
    (161) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (162) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (165) block_while -> . normal_while
    (166) block_while -> . do_while
    (169) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (170) functions_stack -> . stack_push
    (171) functions_stack -> . stack_pop
    (172) functions_stack -> . stack_clear
    (173) functions_stack -> . stack_peek
    (174) functions_stack -> . stack_isEmpty
    (180) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (181) functions_queue -> . queue_enqueue
    (182) functions_queue -> . queue_dequeue
    (183) functions_queue -> . queue_clear
    (184) functions_queue -> . queue_isEmpty
    (185) functions_queue -> . queue_peek
    (72) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (73) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (74) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (75) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (113) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (114) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (129) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (130) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (137) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (138) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (139) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (140) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (149) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (150) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (151) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (152) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (153) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (154) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (167) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (168) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (175) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (176) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (177) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (178) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (179) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (186) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (187) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (188) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (190) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (189) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (76) access_modifiers -> . PUBLIC
    (77) access_modifiers -> . PRIVATE
    (97) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (98) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (99) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (100) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (101) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 52
    STATIC          shift and go to state 29
    WRITE           shift and go to state 54
    LPARENT         shift and go to state 30
    ENUM            shift and go to state 63
    IF              shift and go to state 64
    STACK           shift and go to state 67
    QUEUE           shift and go to state 73
    CONST           shift and go to state 80
    THREAD          shift and go to state 82
    TRY             shift and go to state 83
    LIST            shift and go to state 84
    VARIABLE        shift and go to state 32
    WHILE           shift and go to state 86
    DO              shift and go to state 87
    PUBLIC          shift and go to state 88
    PRIVATE         shift and go to state 89
    INTTYPE         shift and go to state 85
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 90
    BOOLTYPE        shift and go to state 91

    all_block_code                 shift and go to state 324
    block_code                     shift and go to state 34
    def_const_or_var               shift and go to state 35
    print_data                     shift and go to state 36
    thread_main                    shift and go to state 37
    concurrent_method              shift and go to state 38
    block_try_catch                shift and go to state 39
    lists                          shift and go to state 40
    functions_list                 shift and go to state 41
    statement_lambda               shift and go to state 42
    enums                          shift and go to state 43
    normal_if                      shift and go to state 44
    block_while                    shift and go to state 45
    stack_struct                   shift and go to state 46
    functions_stack                shift and go to state 47
    queue_struct                   shift and go to state 48
    functions_queue                shift and go to state 49
    constant_assignation           shift and go to state 50
    variable_assignation           shift and go to state 51
    declaration_thread             shift and go to state 53
    try_catch_simply               shift and go to state 55
    try_catch_finally              shift and go to state 56
    list_empty                     shift and go to state 57
    list_full                      shift and go to state 58
    list_func_clear                shift and go to state 59
    list_func_count                shift and go to state 60
    list_func_add                  shift and go to state 61
    list_func_removeat             shift and go to state 62
    normal_while                   shift and go to state 65
    do_while                       shift and go to state 66
    stack_push                     shift and go to state 68
    stack_pop                      shift and go to state 69
    stack_clear                    shift and go to state 70
    stack_peek                     shift and go to state 71
    stack_isEmpty                  shift and go to state 72
    queue_enqueue                  shift and go to state 74
    queue_dequeue                  shift and go to state 75
    queue_clear                    shift and go to state 76
    queue_isEmpty                  shift and go to state 77
    queue_peek                     shift and go to state 78
    access_modifiers               shift and go to state 79
    assignation_type_value_multiple shift and go to state 81

state 290

    (168) do_while -> DO LKEY all_block_code RKEY WHILE . LPARENT boolean_operation RPARENT

    LPARENT         shift and go to state 325


state 291

    (91) assignation_true -> VARIABLE ASSIGNATION . BOOLTRUE
    (92) assignation_true -> VARIABLE ASSIGNATION . VARIABLE
    (93) assignation_true -> VARIABLE ASSIGNATION . boolean_operation
    (65) boolean_operation -> . value_boolean
    (66) boolean_operation -> . LOGICNOT value_boolean
    (67) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (32) value_boolean -> . BOOLTRUE
    (33) value_boolean -> . BOOLFALSE
    (34) value_boolean -> . VARIABLE
    (35) value_boolean -> . comparison_operation
    (57) comparison_operation -> . value_numeric
    (58) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (36) value_numeric -> . INTEGER
    (37) value_numeric -> . FLOAT_NUMBER
    (38) value_numeric -> . DECIMAL_NUMBER
    (39) value_numeric -> . VARIABLE

    BOOLTRUE        shift and go to state 239
    VARIABLE        shift and go to state 326
    LOGICNOT        shift and go to state 151
    BOOLFALSE       shift and go to state 153
    INTEGER         shift and go to state 157
    FLOAT_NUMBER    shift and go to state 158
    DECIMAL_NUMBER  shift and go to state 159

    boolean_operation              shift and go to state 327
    value_boolean                  shift and go to state 150
    comparison_operation           shift and go to state 155
    value_numeric                  shift and go to state 156

state 292

    (94) assignation_false -> VARIABLE ASSIGNATION . BOOLFALSE
    (95) assignation_false -> VARIABLE ASSIGNATION . VARIABLE
    (96) assignation_false -> VARIABLE ASSIGNATION . boolean_operation
    (65) boolean_operation -> . value_boolean
    (66) boolean_operation -> . LOGICNOT value_boolean
    (67) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (32) value_boolean -> . BOOLTRUE
    (33) value_boolean -> . BOOLFALSE
    (34) value_boolean -> . VARIABLE
    (35) value_boolean -> . comparison_operation
    (57) comparison_operation -> . value_numeric
    (58) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (36) value_numeric -> . INTEGER
    (37) value_numeric -> . FLOAT_NUMBER
    (38) value_numeric -> . DECIMAL_NUMBER
    (39) value_numeric -> . VARIABLE

    BOOLFALSE       shift and go to state 241
    VARIABLE        shift and go to state 328
    LOGICNOT        shift and go to state 151
    BOOLTRUE        shift and go to state 152
    INTEGER         shift and go to state 157
    FLOAT_NUMBER    shift and go to state 158
    DECIMAL_NUMBER  shift and go to state 159

    boolean_operation              shift and go to state 329
    value_boolean                  shift and go to state 150
    comparison_operation           shift and go to state 155
    value_numeric                  shift and go to state 156

state 293

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY .
    (5) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY . all_block_code
    (21) all_block_code -> . block_code
    (22) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . thread_main
    (9) block_code -> . concurrent_method
    (10) block_code -> . block_try_catch
    (11) block_code -> . lists
    (12) block_code -> . functions_list
    (13) block_code -> . statement_lambda
    (14) block_code -> . enums
    (15) block_code -> . normal_if
    (16) block_code -> . block_while
    (17) block_code -> . stack_struct
    (18) block_code -> . functions_stack
    (19) block_code -> . queue_struct
    (20) block_code -> . functions_queue
    (70) def_const_or_var -> . constant_assignation
    (71) def_const_or_var -> . variable_assignation
    (40) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (41) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (112) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (117) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (118) concurrent_method -> . WRITE
    (127) block_try_catch -> . try_catch_simply
    (128) block_try_catch -> . try_catch_finally
    (135) lists -> . list_empty
    (136) lists -> . list_full
    (145) functions_list -> . list_func_clear
    (146) functions_list -> . list_func_count
    (147) functions_list -> . list_func_add
    (148) functions_list -> . list_func_removeat
    (155) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (156) enums -> . ENUM METHOD LKEY list_enums RKEY
    (161) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (162) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (165) block_while -> . normal_while
    (166) block_while -> . do_while
    (169) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (170) functions_stack -> . stack_push
    (171) functions_stack -> . stack_pop
    (172) functions_stack -> . stack_clear
    (173) functions_stack -> . stack_peek
    (174) functions_stack -> . stack_isEmpty
    (180) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (181) functions_queue -> . queue_enqueue
    (182) functions_queue -> . queue_dequeue
    (183) functions_queue -> . queue_clear
    (184) functions_queue -> . queue_isEmpty
    (185) functions_queue -> . queue_peek
    (72) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (73) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (74) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (75) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (113) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (114) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (129) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (130) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (137) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (138) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (139) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (140) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (149) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (150) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (151) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (152) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (153) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (154) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (167) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (168) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (175) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (176) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (177) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (178) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (179) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (186) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (187) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (188) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (190) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (189) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (76) access_modifiers -> . PUBLIC
    (77) access_modifiers -> . PRIVATE
    (97) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (98) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (99) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (100) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (101) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    RKEY            reduce using rule 4 (block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY .)
    PRINT           shift and go to state 52
    STATIC          shift and go to state 29
    WRITE           shift and go to state 54
    LPARENT         shift and go to state 30
    ENUM            shift and go to state 63
    IF              shift and go to state 64
    STACK           shift and go to state 67
    QUEUE           shift and go to state 73
    CONST           shift and go to state 80
    THREAD          shift and go to state 82
    TRY             shift and go to state 83
    LIST            shift and go to state 84
    VARIABLE        shift and go to state 32
    WHILE           shift and go to state 86
    DO              shift and go to state 87
    PUBLIC          shift and go to state 88
    PRIVATE         shift and go to state 89
    INTTYPE         shift and go to state 85
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 90
    BOOLTYPE        shift and go to state 91

    all_block_code                 shift and go to state 330
    block_code                     shift and go to state 34
    def_const_or_var               shift and go to state 35
    print_data                     shift and go to state 36
    thread_main                    shift and go to state 37
    concurrent_method              shift and go to state 38
    block_try_catch                shift and go to state 39
    lists                          shift and go to state 40
    functions_list                 shift and go to state 41
    statement_lambda               shift and go to state 42
    enums                          shift and go to state 43
    normal_if                      shift and go to state 44
    block_while                    shift and go to state 45
    stack_struct                   shift and go to state 46
    functions_stack                shift and go to state 47
    queue_struct                   shift and go to state 48
    functions_queue                shift and go to state 49
    constant_assignation           shift and go to state 50
    variable_assignation           shift and go to state 51
    declaration_thread             shift and go to state 53
    try_catch_simply               shift and go to state 55
    try_catch_finally              shift and go to state 56
    list_empty                     shift and go to state 57
    list_full                      shift and go to state 58
    list_func_clear                shift and go to state 59
    list_func_count                shift and go to state 60
    list_func_add                  shift and go to state 61
    list_func_removeat             shift and go to state 62
    normal_while                   shift and go to state 65
    do_while                       shift and go to state 66
    stack_push                     shift and go to state 68
    stack_pop                      shift and go to state 69
    stack_clear                    shift and go to state 70
    stack_peek                     shift and go to state 71
    stack_isEmpty                  shift and go to state 72
    queue_enqueue                  shift and go to state 74
    queue_dequeue                  shift and go to state 75
    queue_clear                    shift and go to state 76
    queue_isEmpty                  shift and go to state 77
    queue_peek                     shift and go to state 78
    access_modifiers               shift and go to state 79
    assignation_type_value_multiple shift and go to state 81

state 294

    (117) concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY . thread_logic RKEY
    (119) thread_logic -> . thread_sentence
    (120) thread_logic -> . thread_logic thread_sentence
    (121) thread_sentence -> . thread_expression DOTANDCOMMA
    (122) thread_expression -> . thread_identificator DOT concurrent_method LPARENT RPARENT
    (123) thread_expression -> . PRINT LPARENT STRING RPARENT
    (126) thread_identificator -> . VARIABLE

    PRINT           shift and go to state 335
    VARIABLE        shift and go to state 112

    thread_identificator           shift and go to state 331
    thread_logic                   shift and go to state 332
    thread_sentence                shift and go to state 333
    thread_expression              shift and go to state 334

state 295

    (155) statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY . RPARENT

    RPARENT         shift and go to state 336


state 296

    (149) list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .
    (177) stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .
    (188) queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .

  ! reduce/reduce conflict for PRINT resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STATIC resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WRITE resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for LPARENT resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for ENUM resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for IF resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STACK resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for QUEUE resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for CONST resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for THREAD resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for TRY resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for LIST resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WHILE resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DO resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for INTTYPE resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STRINGTYPE resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FLOATTYPE resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for BOOLTYPE resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for RKEY resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for $end resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PRINT resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STATIC resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WRITE resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for LPARENT resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for ENUM resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for IF resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STACK resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for QUEUE resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for CONST resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for THREAD resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for TRY resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for LIST resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WHILE resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DO resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for INTTYPE resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STRINGTYPE resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FLOATTYPE resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for BOOLTYPE resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for RKEY resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for $end resolved using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    PRINT           reduce using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 149 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)

  ! PRINT           [ reduce using rule 177 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! STATIC          [ reduce using rule 177 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! WRITE           [ reduce using rule 177 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! LPARENT         [ reduce using rule 177 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! ENUM            [ reduce using rule 177 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! IF              [ reduce using rule 177 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! STACK           [ reduce using rule 177 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! QUEUE           [ reduce using rule 177 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! CONST           [ reduce using rule 177 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! THREAD          [ reduce using rule 177 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! TRY             [ reduce using rule 177 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! LIST            [ reduce using rule 177 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! VARIABLE        [ reduce using rule 177 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! WHILE           [ reduce using rule 177 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! DO              [ reduce using rule 177 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! PUBLIC          [ reduce using rule 177 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! PRIVATE         [ reduce using rule 177 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! INTTYPE         [ reduce using rule 177 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! STRINGTYPE      [ reduce using rule 177 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! FLOATTYPE       [ reduce using rule 177 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! BOOLTYPE        [ reduce using rule 177 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! RKEY            [ reduce using rule 177 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! $end            [ reduce using rule 177 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! PRINT           [ reduce using rule 188 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! STATIC          [ reduce using rule 188 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! WRITE           [ reduce using rule 188 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! LPARENT         [ reduce using rule 188 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! ENUM            [ reduce using rule 188 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! IF              [ reduce using rule 188 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! STACK           [ reduce using rule 188 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! QUEUE           [ reduce using rule 188 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! CONST           [ reduce using rule 188 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! THREAD          [ reduce using rule 188 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! TRY             [ reduce using rule 188 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! LIST            [ reduce using rule 188 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! VARIABLE        [ reduce using rule 188 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! WHILE           [ reduce using rule 188 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! DO              [ reduce using rule 188 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! PUBLIC          [ reduce using rule 188 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! PRIVATE         [ reduce using rule 188 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! INTTYPE         [ reduce using rule 188 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! STRINGTYPE      [ reduce using rule 188 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! FLOATTYPE       [ reduce using rule 188 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! BOOLTYPE        [ reduce using rule 188 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! RKEY            [ reduce using rule 188 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! $end            [ reduce using rule 188 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]


state 297

    (150) list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 150 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 150 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 150 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 150 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 150 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 150 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 150 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 150 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 150 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 150 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 150 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 150 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 150 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 150 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 150 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 150 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 150 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 150 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 150 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 150 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 150 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 150 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 150 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)


state 298

    (151) list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 337


state 299

    (152) list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 338


state 300

    (153) list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 339


state 301

    (154) list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 340


state 302

    (175) stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 341


state 303

    (44) concatenation -> STRING PLUS . concatenation
    (43) concatenation -> . STRING
    (44) concatenation -> . STRING PLUS concatenation

    STRING          shift and go to state 342

    concatenation                  shift and go to state 343

state 304

    (42) read_data -> READ LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 344


state 305

    (176) stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 176 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 176 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 176 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 176 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 176 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 176 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 176 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 176 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 176 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 176 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 176 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 176 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 176 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 176 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 176 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 176 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 176 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 176 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 176 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 176 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 176 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 176 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 176 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)


state 306

    (178) stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .
    (189) queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .

  ! reduce/reduce conflict for PRINT resolved using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STATIC resolved using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WRITE resolved using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for LPARENT resolved using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for ENUM resolved using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for IF resolved using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STACK resolved using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for QUEUE resolved using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for CONST resolved using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for THREAD resolved using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for TRY resolved using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for LIST resolved using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WHILE resolved using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DO resolved using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for INTTYPE resolved using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STRINGTYPE resolved using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FLOATTYPE resolved using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for BOOLTYPE resolved using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for RKEY resolved using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for $end resolved using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    PRINT           reduce using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 178 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)

  ! PRINT           [ reduce using rule 189 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! STATIC          [ reduce using rule 189 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! WRITE           [ reduce using rule 189 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! LPARENT         [ reduce using rule 189 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! ENUM            [ reduce using rule 189 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! IF              [ reduce using rule 189 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! STACK           [ reduce using rule 189 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! QUEUE           [ reduce using rule 189 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! CONST           [ reduce using rule 189 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! THREAD          [ reduce using rule 189 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! TRY             [ reduce using rule 189 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! LIST            [ reduce using rule 189 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! VARIABLE        [ reduce using rule 189 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! WHILE           [ reduce using rule 189 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! DO              [ reduce using rule 189 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! PUBLIC          [ reduce using rule 189 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! PRIVATE         [ reduce using rule 189 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! INTTYPE         [ reduce using rule 189 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! STRINGTYPE      [ reduce using rule 189 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! FLOATTYPE       [ reduce using rule 189 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! BOOLTYPE        [ reduce using rule 189 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! RKEY            [ reduce using rule 189 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! $end            [ reduce using rule 189 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]


state 307

    (179) stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .
    (190) queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .

  ! reduce/reduce conflict for PRINT resolved using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STATIC resolved using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WRITE resolved using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for LPARENT resolved using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for ENUM resolved using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for IF resolved using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STACK resolved using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for QUEUE resolved using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for CONST resolved using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for THREAD resolved using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for TRY resolved using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for LIST resolved using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WHILE resolved using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DO resolved using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for INTTYPE resolved using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STRINGTYPE resolved using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FLOATTYPE resolved using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for BOOLTYPE resolved using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for RKEY resolved using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for $end resolved using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    PRINT           reduce using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 179 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)

  ! PRINT           [ reduce using rule 190 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! STATIC          [ reduce using rule 190 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! WRITE           [ reduce using rule 190 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! LPARENT         [ reduce using rule 190 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! ENUM            [ reduce using rule 190 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! IF              [ reduce using rule 190 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! STACK           [ reduce using rule 190 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! QUEUE           [ reduce using rule 190 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! CONST           [ reduce using rule 190 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! THREAD          [ reduce using rule 190 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! TRY             [ reduce using rule 190 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! LIST            [ reduce using rule 190 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! VARIABLE        [ reduce using rule 190 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! WHILE           [ reduce using rule 190 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! DO              [ reduce using rule 190 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! PUBLIC          [ reduce using rule 190 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! PRIVATE         [ reduce using rule 190 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! INTTYPE         [ reduce using rule 190 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! STRINGTYPE      [ reduce using rule 190 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! FLOATTYPE       [ reduce using rule 190 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! BOOLTYPE        [ reduce using rule 190 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! RKEY            [ reduce using rule 190 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! $end            [ reduce using rule 190 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]


state 308

    (186) queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 345


state 309

    (187) queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 187 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 187 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 187 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 187 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 187 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 187 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 187 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 187 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 187 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 187 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 187 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 187 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 187 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 187 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 187 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 187 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 187 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 187 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 187 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 187 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 187 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 187 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 187 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)


state 310

    (112) thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .

    PRINT           reduce using rule 112 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    STATIC          reduce using rule 112 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    WRITE           reduce using rule 112 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    LPARENT         reduce using rule 112 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    ENUM            reduce using rule 112 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    IF              reduce using rule 112 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    STACK           reduce using rule 112 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    QUEUE           reduce using rule 112 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    CONST           reduce using rule 112 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    THREAD          reduce using rule 112 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    TRY             reduce using rule 112 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    LIST            reduce using rule 112 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    VARIABLE        reduce using rule 112 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    WHILE           reduce using rule 112 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    DO              reduce using rule 112 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    PUBLIC          reduce using rule 112 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    PRIVATE         reduce using rule 112 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    INTTYPE         reduce using rule 112 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    STRINGTYPE      reduce using rule 112 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    FLOATTYPE       reduce using rule 112 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    BOOLTYPE        reduce using rule 112 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    RKEY            reduce using rule 112 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    $end            reduce using rule 112 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)


state 311

    (116) thread_wait -> thread_identificator DOT . JOIN LPARENT RPARENT DOTANDCOMMA

    JOIN            shift and go to state 346


state 312

    (115) thread_init -> thread_identificator DOT START LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 347


state 313

    (158) list_enums -> METHOD COMMA list_enums .

    RKEY            reduce using rule 158 (list_enums -> METHOD COMMA list_enums .)


state 314

    (161) normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if . RKEY other_if
    (162) normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if . RKEY

    RKEY            shift and go to state 348


state 315

    (159) block_if -> normal_if .
    (15) block_code -> normal_if .

  ! reduce/reduce conflict for RKEY resolved using rule 15 (block_code -> normal_if .)
    PRINT           reduce using rule 15 (block_code -> normal_if .)
    STATIC          reduce using rule 15 (block_code -> normal_if .)
    WRITE           reduce using rule 15 (block_code -> normal_if .)
    LPARENT         reduce using rule 15 (block_code -> normal_if .)
    ENUM            reduce using rule 15 (block_code -> normal_if .)
    IF              reduce using rule 15 (block_code -> normal_if .)
    STACK           reduce using rule 15 (block_code -> normal_if .)
    QUEUE           reduce using rule 15 (block_code -> normal_if .)
    CONST           reduce using rule 15 (block_code -> normal_if .)
    THREAD          reduce using rule 15 (block_code -> normal_if .)
    TRY             reduce using rule 15 (block_code -> normal_if .)
    LIST            reduce using rule 15 (block_code -> normal_if .)
    VARIABLE        reduce using rule 15 (block_code -> normal_if .)
    WHILE           reduce using rule 15 (block_code -> normal_if .)
    DO              reduce using rule 15 (block_code -> normal_if .)
    PUBLIC          reduce using rule 15 (block_code -> normal_if .)
    PRIVATE         reduce using rule 15 (block_code -> normal_if .)
    INTTYPE         reduce using rule 15 (block_code -> normal_if .)
    STRINGTYPE      reduce using rule 15 (block_code -> normal_if .)
    FLOATTYPE       reduce using rule 15 (block_code -> normal_if .)
    BOOLTYPE        reduce using rule 15 (block_code -> normal_if .)
    RKEY            reduce using rule 15 (block_code -> normal_if .)

  ! RKEY            [ reduce using rule 159 (block_if -> normal_if .) ]


state 316

    (160) block_if -> all_block_code .

    RKEY            reduce using rule 160 (block_if -> all_block_code .)


state 317

    (169) stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 349


state 318

    (180) queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 350


state 319

    (113) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT . thread_identificator RPARENT DOTANDCOMMA
    (114) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT . concurrent_method RPARENT DOTANDCOMMA
    (126) thread_identificator -> . VARIABLE
    (117) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (118) concurrent_method -> . WRITE

    VARIABLE        shift and go to state 112
    STATIC          shift and go to state 29
    WRITE           shift and go to state 54

    thread_identificator           shift and go to state 351
    concurrent_method              shift and go to state 352

state 320

    (129) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT . EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (130) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT . EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    EXCEPTION       shift and go to state 353


state 321

    (137) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION . NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (139) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION . NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    NEW             shift and go to state 354


state 322

    (138) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION . NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (140) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION . NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    NEW             shift and go to state 355


state 323

    (51) arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .

    COMMA           reduce using rule 51 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .)
    DOTANDCOMMA     reduce using rule 51 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .)


state 324

    (167) normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code . RKEY

    RKEY            shift and go to state 356


state 325

    (168) do_while -> DO LKEY all_block_code RKEY WHILE LPARENT . boolean_operation RPARENT
    (65) boolean_operation -> . value_boolean
    (66) boolean_operation -> . LOGICNOT value_boolean
    (67) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (32) value_boolean -> . BOOLTRUE
    (33) value_boolean -> . BOOLFALSE
    (34) value_boolean -> . VARIABLE
    (35) value_boolean -> . comparison_operation
    (57) comparison_operation -> . value_numeric
    (58) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (36) value_numeric -> . INTEGER
    (37) value_numeric -> . FLOAT_NUMBER
    (38) value_numeric -> . DECIMAL_NUMBER
    (39) value_numeric -> . VARIABLE

    LOGICNOT        shift and go to state 151
    BOOLTRUE        shift and go to state 152
    BOOLFALSE       shift and go to state 153
    VARIABLE        shift and go to state 154
    INTEGER         shift and go to state 157
    FLOAT_NUMBER    shift and go to state 158
    DECIMAL_NUMBER  shift and go to state 159

    boolean_operation              shift and go to state 357
    value_boolean                  shift and go to state 150
    comparison_operation           shift and go to state 155
    value_numeric                  shift and go to state 156

state 326

    (92) assignation_true -> VARIABLE ASSIGNATION VARIABLE .
    (34) value_boolean -> VARIABLE .
    (39) value_numeric -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 34 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 34 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for LOGICAND resolved using rule 34 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for LOGICOR resolved using rule 34 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 34 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 34 (value_boolean -> VARIABLE .)
    LOGICAND        reduce using rule 34 (value_boolean -> VARIABLE .)
    LOGICOR         reduce using rule 34 (value_boolean -> VARIABLE .)
    COMMA           reduce using rule 34 (value_boolean -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 34 (value_boolean -> VARIABLE .)
    GREATER_THAN    reduce using rule 39 (value_numeric -> VARIABLE .)
    SMALLER_THAN    reduce using rule 39 (value_numeric -> VARIABLE .)
    EQUAL_COMPARATION reduce using rule 39 (value_numeric -> VARIABLE .)
    INEQUALITY      reduce using rule 39 (value_numeric -> VARIABLE .)
    GREATER_THAN_OR_EQUAL reduce using rule 39 (value_numeric -> VARIABLE .)
    SMALLER_THAN_OR_EQUAL reduce using rule 39 (value_numeric -> VARIABLE .)

  ! COMMA           [ reduce using rule 92 (assignation_true -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 92 (assignation_true -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! LOGICAND        [ reduce using rule 39 (value_numeric -> VARIABLE .) ]
  ! LOGICOR         [ reduce using rule 39 (value_numeric -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 39 (value_numeric -> VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 39 (value_numeric -> VARIABLE .) ]


state 327

    (93) assignation_true -> VARIABLE ASSIGNATION boolean_operation .

    COMMA           reduce using rule 93 (assignation_true -> VARIABLE ASSIGNATION boolean_operation .)
    DOTANDCOMMA     reduce using rule 93 (assignation_true -> VARIABLE ASSIGNATION boolean_operation .)


state 328

    (95) assignation_false -> VARIABLE ASSIGNATION VARIABLE .
    (34) value_boolean -> VARIABLE .
    (39) value_numeric -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 34 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 34 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for LOGICAND resolved using rule 34 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for LOGICOR resolved using rule 34 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 34 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 34 (value_boolean -> VARIABLE .)
    LOGICAND        reduce using rule 34 (value_boolean -> VARIABLE .)
    LOGICOR         reduce using rule 34 (value_boolean -> VARIABLE .)
    COMMA           reduce using rule 34 (value_boolean -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 34 (value_boolean -> VARIABLE .)
    GREATER_THAN    reduce using rule 39 (value_numeric -> VARIABLE .)
    SMALLER_THAN    reduce using rule 39 (value_numeric -> VARIABLE .)
    EQUAL_COMPARATION reduce using rule 39 (value_numeric -> VARIABLE .)
    INEQUALITY      reduce using rule 39 (value_numeric -> VARIABLE .)
    GREATER_THAN_OR_EQUAL reduce using rule 39 (value_numeric -> VARIABLE .)
    SMALLER_THAN_OR_EQUAL reduce using rule 39 (value_numeric -> VARIABLE .)

  ! COMMA           [ reduce using rule 95 (assignation_false -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 95 (assignation_false -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! LOGICAND        [ reduce using rule 39 (value_numeric -> VARIABLE .) ]
  ! LOGICOR         [ reduce using rule 39 (value_numeric -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 39 (value_numeric -> VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 39 (value_numeric -> VARIABLE .) ]


state 329

    (96) assignation_false -> VARIABLE ASSIGNATION boolean_operation .

    COMMA           reduce using rule 96 (assignation_false -> VARIABLE ASSIGNATION boolean_operation .)
    DOTANDCOMMA     reduce using rule 96 (assignation_false -> VARIABLE ASSIGNATION boolean_operation .)


state 330

    (5) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code .

    RKEY            reduce using rule 5 (block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code .)


state 331

    (122) thread_expression -> thread_identificator . DOT concurrent_method LPARENT RPARENT

    DOT             shift and go to state 358


state 332

    (117) concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic . RKEY
    (120) thread_logic -> thread_logic . thread_sentence
    (121) thread_sentence -> . thread_expression DOTANDCOMMA
    (122) thread_expression -> . thread_identificator DOT concurrent_method LPARENT RPARENT
    (123) thread_expression -> . PRINT LPARENT STRING RPARENT
    (126) thread_identificator -> . VARIABLE

    RKEY            shift and go to state 359
    PRINT           shift and go to state 335
    VARIABLE        shift and go to state 112

    thread_identificator           shift and go to state 331
    thread_sentence                shift and go to state 360
    thread_expression              shift and go to state 334

state 333

    (119) thread_logic -> thread_sentence .

    RKEY            reduce using rule 119 (thread_logic -> thread_sentence .)
    PRINT           reduce using rule 119 (thread_logic -> thread_sentence .)
    VARIABLE        reduce using rule 119 (thread_logic -> thread_sentence .)


state 334

    (121) thread_sentence -> thread_expression . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 361


state 335

    (123) thread_expression -> PRINT . LPARENT STRING RPARENT

    LPARENT         shift and go to state 362


state 336

    (155) statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .

    PRINT           reduce using rule 155 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    STATIC          reduce using rule 155 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    WRITE           reduce using rule 155 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    LPARENT         reduce using rule 155 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    ENUM            reduce using rule 155 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    IF              reduce using rule 155 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    STACK           reduce using rule 155 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    QUEUE           reduce using rule 155 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    CONST           reduce using rule 155 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    THREAD          reduce using rule 155 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    TRY             reduce using rule 155 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    LIST            reduce using rule 155 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    VARIABLE        reduce using rule 155 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    WHILE           reduce using rule 155 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    DO              reduce using rule 155 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    PUBLIC          reduce using rule 155 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    PRIVATE         reduce using rule 155 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    INTTYPE         reduce using rule 155 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    STRINGTYPE      reduce using rule 155 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    FLOATTYPE       reduce using rule 155 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    BOOLTYPE        reduce using rule 155 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    RKEY            reduce using rule 155 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    $end            reduce using rule 155 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)


state 337

    (151) list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 151 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 151 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 151 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 151 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 151 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    IF              reduce using rule 151 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 151 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 151 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 151 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 151 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 151 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 151 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 151 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 151 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    DO              reduce using rule 151 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 151 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 151 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 151 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 151 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 151 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 151 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 151 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    $end            reduce using rule 151 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)


state 338

    (152) list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 152 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 152 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 152 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 152 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 152 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    IF              reduce using rule 152 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 152 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 152 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 152 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 152 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 152 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 152 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 152 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 152 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    DO              reduce using rule 152 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 152 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 152 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 152 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 152 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 152 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 152 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 152 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    $end            reduce using rule 152 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)


state 339

    (153) list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 153 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 153 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 153 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 153 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 153 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    IF              reduce using rule 153 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 153 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 153 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 153 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 153 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 153 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 153 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 153 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 153 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    DO              reduce using rule 153 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 153 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 153 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 153 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 153 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 153 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 153 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 153 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    $end            reduce using rule 153 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)


state 340

    (154) list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 154 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 154 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 154 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 154 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 154 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    IF              reduce using rule 154 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 154 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 154 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 154 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 154 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 154 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 154 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 154 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 154 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    DO              reduce using rule 154 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 154 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 154 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 154 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 154 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 154 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 154 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 154 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    $end            reduce using rule 154 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)


state 341

    (175) stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 175 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 175 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 175 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 175 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 175 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    IF              reduce using rule 175 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 175 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 175 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 175 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 175 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 175 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 175 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 175 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 175 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    DO              reduce using rule 175 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 175 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 175 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 175 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 175 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 175 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 175 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 175 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    $end            reduce using rule 175 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)


state 342

    (43) concatenation -> STRING .
    (44) concatenation -> STRING . PLUS concatenation

    RPARENT         reduce using rule 43 (concatenation -> STRING .)
    PLUS            shift and go to state 303


state 343

    (44) concatenation -> STRING PLUS concatenation .

    RPARENT         reduce using rule 44 (concatenation -> STRING PLUS concatenation .)


state 344

    (42) read_data -> READ LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 363


state 345

    (186) queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 186 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 186 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 186 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 186 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 186 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    IF              reduce using rule 186 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 186 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 186 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 186 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 186 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 186 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 186 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 186 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 186 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    DO              reduce using rule 186 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 186 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 186 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 186 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 186 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 186 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 186 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 186 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    $end            reduce using rule 186 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)


state 346

    (116) thread_wait -> thread_identificator DOT JOIN . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 364


state 347

    (115) thread_init -> thread_identificator DOT START LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 365


state 348

    (161) normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY . other_if
    (162) normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .
    (163) other_if -> . ELSE LKEY block_if RKEY
    (164) other_if -> . ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if

    PRINT           reduce using rule 162 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    STATIC          reduce using rule 162 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    WRITE           reduce using rule 162 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    LPARENT         reduce using rule 162 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    ENUM            reduce using rule 162 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    IF              reduce using rule 162 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    STACK           reduce using rule 162 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    QUEUE           reduce using rule 162 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    CONST           reduce using rule 162 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    THREAD          reduce using rule 162 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    TRY             reduce using rule 162 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    LIST            reduce using rule 162 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    VARIABLE        reduce using rule 162 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    WHILE           reduce using rule 162 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    DO              reduce using rule 162 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    PUBLIC          reduce using rule 162 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    PRIVATE         reduce using rule 162 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    INTTYPE         reduce using rule 162 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    STRINGTYPE      reduce using rule 162 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    FLOATTYPE       reduce using rule 162 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    BOOLTYPE        reduce using rule 162 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    RKEY            reduce using rule 162 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    $end            reduce using rule 162 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    ELSE            shift and go to state 367
    ELSE_IF         shift and go to state 368

    other_if                       shift and go to state 366

state 349

    (169) stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 369


state 350

    (180) queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 370


state 351

    (113) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 371


state 352

    (114) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 372


state 353

    (129) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION . ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (130) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION . ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    ERROR           shift and go to state 373


state 354

    (137) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW . LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (139) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW . LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    LIST            shift and go to state 374


state 355

    (138) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW . LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (140) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW . LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    LIST            shift and go to state 375


state 356

    (167) normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .

    PRINT           reduce using rule 167 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    STATIC          reduce using rule 167 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    WRITE           reduce using rule 167 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    LPARENT         reduce using rule 167 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    ENUM            reduce using rule 167 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    IF              reduce using rule 167 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    STACK           reduce using rule 167 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    QUEUE           reduce using rule 167 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    CONST           reduce using rule 167 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    THREAD          reduce using rule 167 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    TRY             reduce using rule 167 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    LIST            reduce using rule 167 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    VARIABLE        reduce using rule 167 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    WHILE           reduce using rule 167 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    DO              reduce using rule 167 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    PUBLIC          reduce using rule 167 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    PRIVATE         reduce using rule 167 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    INTTYPE         reduce using rule 167 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    STRINGTYPE      reduce using rule 167 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    FLOATTYPE       reduce using rule 167 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    BOOLTYPE        reduce using rule 167 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    RKEY            reduce using rule 167 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    $end            reduce using rule 167 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)


state 357

    (168) do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation . RPARENT

    RPARENT         shift and go to state 376


state 358

    (122) thread_expression -> thread_identificator DOT . concurrent_method LPARENT RPARENT
    (117) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (118) concurrent_method -> . WRITE

    STATIC          shift and go to state 29
    WRITE           shift and go to state 54

    concurrent_method              shift and go to state 377

state 359

    (117) concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .

    PRINT           reduce using rule 117 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    STATIC          reduce using rule 117 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    WRITE           reduce using rule 117 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    LPARENT         reduce using rule 117 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    ENUM            reduce using rule 117 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    IF              reduce using rule 117 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    STACK           reduce using rule 117 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    QUEUE           reduce using rule 117 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    CONST           reduce using rule 117 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    THREAD          reduce using rule 117 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    TRY             reduce using rule 117 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    LIST            reduce using rule 117 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    VARIABLE        reduce using rule 117 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    WHILE           reduce using rule 117 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    DO              reduce using rule 117 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    PUBLIC          reduce using rule 117 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    PRIVATE         reduce using rule 117 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    INTTYPE         reduce using rule 117 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    STRINGTYPE      reduce using rule 117 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    FLOATTYPE       reduce using rule 117 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    BOOLTYPE        reduce using rule 117 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    RKEY            reduce using rule 117 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    $end            reduce using rule 117 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    RPARENT         reduce using rule 117 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)


state 360

    (120) thread_logic -> thread_logic thread_sentence .

    RKEY            reduce using rule 120 (thread_logic -> thread_logic thread_sentence .)
    PRINT           reduce using rule 120 (thread_logic -> thread_logic thread_sentence .)
    VARIABLE        reduce using rule 120 (thread_logic -> thread_logic thread_sentence .)


state 361

    (121) thread_sentence -> thread_expression DOTANDCOMMA .

    RKEY            reduce using rule 121 (thread_sentence -> thread_expression DOTANDCOMMA .)
    PRINT           reduce using rule 121 (thread_sentence -> thread_expression DOTANDCOMMA .)
    VARIABLE        reduce using rule 121 (thread_sentence -> thread_expression DOTANDCOMMA .)


state 362

    (123) thread_expression -> PRINT LPARENT . STRING RPARENT

    STRING          shift and go to state 378


state 363

    (42) read_data -> READ LPARENT RPARENT DOTANDCOMMA .

    RPARENT         reduce using rule 42 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)


state 364

    (116) thread_wait -> thread_identificator DOT JOIN LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 379


state 365

    (115) thread_init -> thread_identificator DOT START LPARENT RPARENT DOTANDCOMMA .

    VARIABLE        reduce using rule 115 (thread_init -> thread_identificator DOT START LPARENT RPARENT DOTANDCOMMA .)


state 366

    (161) normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .

    PRINT           reduce using rule 161 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    STATIC          reduce using rule 161 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    WRITE           reduce using rule 161 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    LPARENT         reduce using rule 161 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    ENUM            reduce using rule 161 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    IF              reduce using rule 161 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    STACK           reduce using rule 161 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    QUEUE           reduce using rule 161 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    CONST           reduce using rule 161 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    THREAD          reduce using rule 161 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    TRY             reduce using rule 161 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    LIST            reduce using rule 161 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    VARIABLE        reduce using rule 161 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    WHILE           reduce using rule 161 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    DO              reduce using rule 161 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    PUBLIC          reduce using rule 161 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    PRIVATE         reduce using rule 161 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    INTTYPE         reduce using rule 161 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    STRINGTYPE      reduce using rule 161 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    FLOATTYPE       reduce using rule 161 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    BOOLTYPE        reduce using rule 161 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    RKEY            reduce using rule 161 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    $end            reduce using rule 161 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)


state 367

    (163) other_if -> ELSE . LKEY block_if RKEY

    LKEY            shift and go to state 380


state 368

    (164) other_if -> ELSE_IF . LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if

    LPARENT         shift and go to state 381


state 369

    (169) stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 169 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 169 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 169 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 169 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 169 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 169 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 169 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 169 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 169 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 169 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 169 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 169 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 169 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 169 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 169 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 169 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 169 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 169 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 169 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 169 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 169 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 169 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 169 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)


state 370

    (180) queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 180 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 180 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 180 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 180 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 180 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 180 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 180 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 180 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 180 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 180 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 180 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 180 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 180 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 180 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 180 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 180 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 180 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 180 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 180 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 180 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 180 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 180 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 180 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)


state 371

    (113) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 382


state 372

    (114) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 383


state 373

    (129) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR . RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (130) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR . RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    RPARENT         shift and go to state 384


state 374

    (137) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST . SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (139) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST . SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    SMALLER_THAN    shift and go to state 385


state 375

    (138) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST . SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (140) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST . SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    SMALLER_THAN    shift and go to state 386


state 376

    (168) do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .

    PRINT           reduce using rule 168 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    STATIC          reduce using rule 168 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    WRITE           reduce using rule 168 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    LPARENT         reduce using rule 168 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    ENUM            reduce using rule 168 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    IF              reduce using rule 168 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    STACK           reduce using rule 168 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    QUEUE           reduce using rule 168 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    CONST           reduce using rule 168 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    THREAD          reduce using rule 168 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    TRY             reduce using rule 168 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    LIST            reduce using rule 168 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    VARIABLE        reduce using rule 168 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    WHILE           reduce using rule 168 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    DO              reduce using rule 168 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    PUBLIC          reduce using rule 168 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    PRIVATE         reduce using rule 168 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    INTTYPE         reduce using rule 168 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    STRINGTYPE      reduce using rule 168 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    FLOATTYPE       reduce using rule 168 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    BOOLTYPE        reduce using rule 168 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    RKEY            reduce using rule 168 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    $end            reduce using rule 168 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)


state 377

    (122) thread_expression -> thread_identificator DOT concurrent_method . LPARENT RPARENT

    LPARENT         shift and go to state 387


state 378

    (123) thread_expression -> PRINT LPARENT STRING . RPARENT

    RPARENT         shift and go to state 388


state 379

    (116) thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 389


state 380

    (163) other_if -> ELSE LKEY . block_if RKEY
    (159) block_if -> . normal_if
    (160) block_if -> . all_block_code
    (161) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (162) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (21) all_block_code -> . block_code
    (22) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . thread_main
    (9) block_code -> . concurrent_method
    (10) block_code -> . block_try_catch
    (11) block_code -> . lists
    (12) block_code -> . functions_list
    (13) block_code -> . statement_lambda
    (14) block_code -> . enums
    (15) block_code -> . normal_if
    (16) block_code -> . block_while
    (17) block_code -> . stack_struct
    (18) block_code -> . functions_stack
    (19) block_code -> . queue_struct
    (20) block_code -> . functions_queue
    (70) def_const_or_var -> . constant_assignation
    (71) def_const_or_var -> . variable_assignation
    (40) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (41) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (112) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (117) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (118) concurrent_method -> . WRITE
    (127) block_try_catch -> . try_catch_simply
    (128) block_try_catch -> . try_catch_finally
    (135) lists -> . list_empty
    (136) lists -> . list_full
    (145) functions_list -> . list_func_clear
    (146) functions_list -> . list_func_count
    (147) functions_list -> . list_func_add
    (148) functions_list -> . list_func_removeat
    (155) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (156) enums -> . ENUM METHOD LKEY list_enums RKEY
    (165) block_while -> . normal_while
    (166) block_while -> . do_while
    (169) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (170) functions_stack -> . stack_push
    (171) functions_stack -> . stack_pop
    (172) functions_stack -> . stack_clear
    (173) functions_stack -> . stack_peek
    (174) functions_stack -> . stack_isEmpty
    (180) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (181) functions_queue -> . queue_enqueue
    (182) functions_queue -> . queue_dequeue
    (183) functions_queue -> . queue_clear
    (184) functions_queue -> . queue_isEmpty
    (185) functions_queue -> . queue_peek
    (72) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (73) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (74) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (75) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (113) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (114) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (129) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (130) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (137) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (138) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (139) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (140) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (149) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (150) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (151) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (152) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (153) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (154) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (167) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (168) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (175) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (176) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (177) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (178) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (179) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (186) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (187) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (188) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (190) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (189) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (76) access_modifiers -> . PUBLIC
    (77) access_modifiers -> . PRIVATE
    (97) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (98) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (99) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (100) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (101) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    IF              shift and go to state 64
    PRINT           shift and go to state 52
    STATIC          shift and go to state 29
    WRITE           shift and go to state 54
    LPARENT         shift and go to state 30
    ENUM            shift and go to state 63
    STACK           shift and go to state 67
    QUEUE           shift and go to state 73
    CONST           shift and go to state 80
    THREAD          shift and go to state 82
    TRY             shift and go to state 83
    LIST            shift and go to state 84
    VARIABLE        shift and go to state 32
    WHILE           shift and go to state 86
    DO              shift and go to state 87
    PUBLIC          shift and go to state 88
    PRIVATE         shift and go to state 89
    INTTYPE         shift and go to state 85
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 90
    BOOLTYPE        shift and go to state 91

    block_if                       shift and go to state 390
    normal_if                      shift and go to state 315
    all_block_code                 shift and go to state 316
    block_code                     shift and go to state 34
    def_const_or_var               shift and go to state 35
    print_data                     shift and go to state 36
    thread_main                    shift and go to state 37
    concurrent_method              shift and go to state 38
    block_try_catch                shift and go to state 39
    lists                          shift and go to state 40
    functions_list                 shift and go to state 41
    statement_lambda               shift and go to state 42
    enums                          shift and go to state 43
    block_while                    shift and go to state 45
    stack_struct                   shift and go to state 46
    functions_stack                shift and go to state 47
    queue_struct                   shift and go to state 48
    functions_queue                shift and go to state 49
    constant_assignation           shift and go to state 50
    variable_assignation           shift and go to state 51
    declaration_thread             shift and go to state 53
    try_catch_simply               shift and go to state 55
    try_catch_finally              shift and go to state 56
    list_empty                     shift and go to state 57
    list_full                      shift and go to state 58
    list_func_clear                shift and go to state 59
    list_func_count                shift and go to state 60
    list_func_add                  shift and go to state 61
    list_func_removeat             shift and go to state 62
    normal_while                   shift and go to state 65
    do_while                       shift and go to state 66
    stack_push                     shift and go to state 68
    stack_pop                      shift and go to state 69
    stack_clear                    shift and go to state 70
    stack_peek                     shift and go to state 71
    stack_isEmpty                  shift and go to state 72
    queue_enqueue                  shift and go to state 74
    queue_dequeue                  shift and go to state 75
    queue_clear                    shift and go to state 76
    queue_isEmpty                  shift and go to state 77
    queue_peek                     shift and go to state 78
    access_modifiers               shift and go to state 79
    assignation_type_value_multiple shift and go to state 81

state 381

    (164) other_if -> ELSE_IF LPARENT . boolean_operation RPARENT LKEY block_if RKEY other_if
    (65) boolean_operation -> . value_boolean
    (66) boolean_operation -> . LOGICNOT value_boolean
    (67) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (32) value_boolean -> . BOOLTRUE
    (33) value_boolean -> . BOOLFALSE
    (34) value_boolean -> . VARIABLE
    (35) value_boolean -> . comparison_operation
    (57) comparison_operation -> . value_numeric
    (58) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (36) value_numeric -> . INTEGER
    (37) value_numeric -> . FLOAT_NUMBER
    (38) value_numeric -> . DECIMAL_NUMBER
    (39) value_numeric -> . VARIABLE

    LOGICNOT        shift and go to state 151
    BOOLTRUE        shift and go to state 152
    BOOLFALSE       shift and go to state 153
    VARIABLE        shift and go to state 154
    INTEGER         shift and go to state 157
    FLOAT_NUMBER    shift and go to state 158
    DECIMAL_NUMBER  shift and go to state 159

    boolean_operation              shift and go to state 391
    value_boolean                  shift and go to state 150
    comparison_operation           shift and go to state 155
    value_numeric                  shift and go to state 156

state 382

    (113) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA .

    THREAD          reduce using rule 113 (declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 113 (declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA .)


state 383

    (114) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA .

    THREAD          reduce using rule 114 (declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 114 (declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA .)


state 384

    (129) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT . LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (130) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT . LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    LKEY            shift and go to state 392


state 385

    (137) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN . STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (139) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN . STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    STRINGTYPE      shift and go to state 393


state 386

    (138) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN . INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (140) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN . INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    INTTYPE         shift and go to state 394


state 387

    (122) thread_expression -> thread_identificator DOT concurrent_method LPARENT . RPARENT

    RPARENT         shift and go to state 395


state 388

    (123) thread_expression -> PRINT LPARENT STRING RPARENT .

    DOTANDCOMMA     reduce using rule 123 (thread_expression -> PRINT LPARENT STRING RPARENT .)


state 389

    (116) thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .

    VARIABLE        reduce using rule 116 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    PRINT           reduce using rule 116 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 116 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 116 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 116 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 116 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 116 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 116 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 116 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 116 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 116 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 116 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 116 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 116 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 116 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 116 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 116 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 116 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 116 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 116 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 116 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 116 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 116 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)


state 390

    (163) other_if -> ELSE LKEY block_if . RKEY

    RKEY            shift and go to state 396


state 391

    (164) other_if -> ELSE_IF LPARENT boolean_operation . RPARENT LKEY block_if RKEY other_if

    RPARENT         shift and go to state 397


state 392

    (129) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY . PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (130) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY . PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    PRINT           shift and go to state 398


state 393

    (137) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE . GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (139) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE . GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    GREATER_THAN    shift and go to state 399


state 394

    (138) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE . GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (140) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE . GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    GREATER_THAN    shift and go to state 400


state 395

    (122) thread_expression -> thread_identificator DOT concurrent_method LPARENT RPARENT .

    DOTANDCOMMA     reduce using rule 122 (thread_expression -> thread_identificator DOT concurrent_method LPARENT RPARENT .)


state 396

    (163) other_if -> ELSE LKEY block_if RKEY .

    PRINT           reduce using rule 163 (other_if -> ELSE LKEY block_if RKEY .)
    STATIC          reduce using rule 163 (other_if -> ELSE LKEY block_if RKEY .)
    WRITE           reduce using rule 163 (other_if -> ELSE LKEY block_if RKEY .)
    LPARENT         reduce using rule 163 (other_if -> ELSE LKEY block_if RKEY .)
    ENUM            reduce using rule 163 (other_if -> ELSE LKEY block_if RKEY .)
    IF              reduce using rule 163 (other_if -> ELSE LKEY block_if RKEY .)
    STACK           reduce using rule 163 (other_if -> ELSE LKEY block_if RKEY .)
    QUEUE           reduce using rule 163 (other_if -> ELSE LKEY block_if RKEY .)
    CONST           reduce using rule 163 (other_if -> ELSE LKEY block_if RKEY .)
    THREAD          reduce using rule 163 (other_if -> ELSE LKEY block_if RKEY .)
    TRY             reduce using rule 163 (other_if -> ELSE LKEY block_if RKEY .)
    LIST            reduce using rule 163 (other_if -> ELSE LKEY block_if RKEY .)
    VARIABLE        reduce using rule 163 (other_if -> ELSE LKEY block_if RKEY .)
    WHILE           reduce using rule 163 (other_if -> ELSE LKEY block_if RKEY .)
    DO              reduce using rule 163 (other_if -> ELSE LKEY block_if RKEY .)
    PUBLIC          reduce using rule 163 (other_if -> ELSE LKEY block_if RKEY .)
    PRIVATE         reduce using rule 163 (other_if -> ELSE LKEY block_if RKEY .)
    INTTYPE         reduce using rule 163 (other_if -> ELSE LKEY block_if RKEY .)
    STRINGTYPE      reduce using rule 163 (other_if -> ELSE LKEY block_if RKEY .)
    FLOATTYPE       reduce using rule 163 (other_if -> ELSE LKEY block_if RKEY .)
    BOOLTYPE        reduce using rule 163 (other_if -> ELSE LKEY block_if RKEY .)
    RKEY            reduce using rule 163 (other_if -> ELSE LKEY block_if RKEY .)
    $end            reduce using rule 163 (other_if -> ELSE LKEY block_if RKEY .)


state 397

    (164) other_if -> ELSE_IF LPARENT boolean_operation RPARENT . LKEY block_if RKEY other_if

    LKEY            shift and go to state 401


state 398

    (129) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT . LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (130) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT . LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    LPARENT         shift and go to state 402


state 399

    (137) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN . LPARENT RPARENT DOTANDCOMMA
    (139) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN . LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    LPARENT         shift and go to state 403


state 400

    (138) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN . LPARENT RPARENT DOTANDCOMMA
    (140) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN . LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    LPARENT         shift and go to state 404


state 401

    (164) other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY . block_if RKEY other_if
    (159) block_if -> . normal_if
    (160) block_if -> . all_block_code
    (161) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (162) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (21) all_block_code -> . block_code
    (22) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . thread_main
    (9) block_code -> . concurrent_method
    (10) block_code -> . block_try_catch
    (11) block_code -> . lists
    (12) block_code -> . functions_list
    (13) block_code -> . statement_lambda
    (14) block_code -> . enums
    (15) block_code -> . normal_if
    (16) block_code -> . block_while
    (17) block_code -> . stack_struct
    (18) block_code -> . functions_stack
    (19) block_code -> . queue_struct
    (20) block_code -> . functions_queue
    (70) def_const_or_var -> . constant_assignation
    (71) def_const_or_var -> . variable_assignation
    (40) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (41) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (112) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (117) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (118) concurrent_method -> . WRITE
    (127) block_try_catch -> . try_catch_simply
    (128) block_try_catch -> . try_catch_finally
    (135) lists -> . list_empty
    (136) lists -> . list_full
    (145) functions_list -> . list_func_clear
    (146) functions_list -> . list_func_count
    (147) functions_list -> . list_func_add
    (148) functions_list -> . list_func_removeat
    (155) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (156) enums -> . ENUM METHOD LKEY list_enums RKEY
    (165) block_while -> . normal_while
    (166) block_while -> . do_while
    (169) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (170) functions_stack -> . stack_push
    (171) functions_stack -> . stack_pop
    (172) functions_stack -> . stack_clear
    (173) functions_stack -> . stack_peek
    (174) functions_stack -> . stack_isEmpty
    (180) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (181) functions_queue -> . queue_enqueue
    (182) functions_queue -> . queue_dequeue
    (183) functions_queue -> . queue_clear
    (184) functions_queue -> . queue_isEmpty
    (185) functions_queue -> . queue_peek
    (72) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (73) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (74) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (75) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (113) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (114) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (129) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (130) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (137) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (138) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (139) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (140) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (149) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (150) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (151) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (152) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (153) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (154) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (167) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (168) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (175) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (176) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (177) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (178) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (179) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (186) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (187) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (188) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (190) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (189) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (76) access_modifiers -> . PUBLIC
    (77) access_modifiers -> . PRIVATE
    (97) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (98) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (99) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (100) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (101) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    IF              shift and go to state 64
    PRINT           shift and go to state 52
    STATIC          shift and go to state 29
    WRITE           shift and go to state 54
    LPARENT         shift and go to state 30
    ENUM            shift and go to state 63
    STACK           shift and go to state 67
    QUEUE           shift and go to state 73
    CONST           shift and go to state 80
    THREAD          shift and go to state 82
    TRY             shift and go to state 83
    LIST            shift and go to state 84
    VARIABLE        shift and go to state 32
    WHILE           shift and go to state 86
    DO              shift and go to state 87
    PUBLIC          shift and go to state 88
    PRIVATE         shift and go to state 89
    INTTYPE         shift and go to state 85
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 90
    BOOLTYPE        shift and go to state 91

    block_if                       shift and go to state 405
    normal_if                      shift and go to state 315
    all_block_code                 shift and go to state 316
    block_code                     shift and go to state 34
    def_const_or_var               shift and go to state 35
    print_data                     shift and go to state 36
    thread_main                    shift and go to state 37
    concurrent_method              shift and go to state 38
    block_try_catch                shift and go to state 39
    lists                          shift and go to state 40
    functions_list                 shift and go to state 41
    statement_lambda               shift and go to state 42
    enums                          shift and go to state 43
    block_while                    shift and go to state 45
    stack_struct                   shift and go to state 46
    functions_stack                shift and go to state 47
    queue_struct                   shift and go to state 48
    functions_queue                shift and go to state 49
    constant_assignation           shift and go to state 50
    variable_assignation           shift and go to state 51
    declaration_thread             shift and go to state 53
    try_catch_simply               shift and go to state 55
    try_catch_finally              shift and go to state 56
    list_empty                     shift and go to state 57
    list_full                      shift and go to state 58
    list_func_clear                shift and go to state 59
    list_func_count                shift and go to state 60
    list_func_add                  shift and go to state 61
    list_func_removeat             shift and go to state 62
    normal_while                   shift and go to state 65
    do_while                       shift and go to state 66
    stack_push                     shift and go to state 68
    stack_pop                      shift and go to state 69
    stack_clear                    shift and go to state 70
    stack_peek                     shift and go to state 71
    stack_isEmpty                  shift and go to state 72
    queue_enqueue                  shift and go to state 74
    queue_dequeue                  shift and go to state 75
    queue_clear                    shift and go to state 76
    queue_isEmpty                  shift and go to state 77
    queue_peek                     shift and go to state 78
    access_modifiers               shift and go to state 79
    assignation_type_value_multiple shift and go to state 81

state 402

    (129) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT . ERROR RPARENT DOTANDCOMMA RKEY
    (130) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT . ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    ERROR           shift and go to state 406


state 403

    (137) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT . RPARENT DOTANDCOMMA
    (139) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT . RPARENT LKEY strings_list RKEY DOTANDCOMMA

    RPARENT         shift and go to state 407


state 404

    (138) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT . RPARENT DOTANDCOMMA
    (140) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT . RPARENT LKEY ints_list RKEY DOTANDCOMMA

    RPARENT         shift and go to state 408


state 405

    (164) other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if . RKEY other_if

    RKEY            shift and go to state 409


state 406

    (129) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR . RPARENT DOTANDCOMMA RKEY
    (130) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR . RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    RPARENT         shift and go to state 410


state 407

    (137) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT . DOTANDCOMMA
    (139) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT . LKEY strings_list RKEY DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 411
    LKEY            shift and go to state 412


state 408

    (138) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT . DOTANDCOMMA
    (140) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT . LKEY ints_list RKEY DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 413
    LKEY            shift and go to state 414


state 409

    (164) other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY . other_if
    (163) other_if -> . ELSE LKEY block_if RKEY
    (164) other_if -> . ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if

    ELSE            shift and go to state 367
    ELSE_IF         shift and go to state 368

    other_if                       shift and go to state 415

state 410

    (129) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT . DOTANDCOMMA RKEY
    (130) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT . DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    DOTANDCOMMA     shift and go to state 416


state 411

    (137) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 137 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 137 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 137 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 137 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 137 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 137 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 137 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 137 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 137 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 137 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 137 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 137 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 137 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 137 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 137 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 137 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 137 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 137 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 137 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 137 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 137 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 137 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 137 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)


state 412

    (139) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY . strings_list RKEY DOTANDCOMMA
    (141) strings_list -> . STRING
    (142) strings_list -> . STRING COMMA strings_list

    STRING          shift and go to state 418

    strings_list                   shift and go to state 417

state 413

    (138) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 138 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 138 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 138 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 138 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 138 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 138 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 138 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 138 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 138 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 138 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 138 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 138 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 138 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 138 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 138 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 138 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 138 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 138 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 138 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 138 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 138 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 138 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 138 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)


state 414

    (140) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY . ints_list RKEY DOTANDCOMMA
    (143) ints_list -> . INTEGER
    (144) ints_list -> . INTEGER COMMA ints_list

    INTEGER         shift and go to state 420

    ints_list                      shift and go to state 419

state 415

    (164) other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .

    PRINT           reduce using rule 164 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    STATIC          reduce using rule 164 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    WRITE           reduce using rule 164 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    LPARENT         reduce using rule 164 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    ENUM            reduce using rule 164 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    IF              reduce using rule 164 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    STACK           reduce using rule 164 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    QUEUE           reduce using rule 164 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    CONST           reduce using rule 164 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    THREAD          reduce using rule 164 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    TRY             reduce using rule 164 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    LIST            reduce using rule 164 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    VARIABLE        reduce using rule 164 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    WHILE           reduce using rule 164 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    DO              reduce using rule 164 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    PUBLIC          reduce using rule 164 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    PRIVATE         reduce using rule 164 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    INTTYPE         reduce using rule 164 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    STRINGTYPE      reduce using rule 164 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    FLOATTYPE       reduce using rule 164 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    BOOLTYPE        reduce using rule 164 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    RKEY            reduce using rule 164 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    $end            reduce using rule 164 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)


state 416

    (129) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA . RKEY
    (130) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA . RKEY FINALLY LKEY all_block_code_try RKEY

    RKEY            shift and go to state 421


state 417

    (139) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list . RKEY DOTANDCOMMA

    RKEY            shift and go to state 422


state 418

    (141) strings_list -> STRING .
    (142) strings_list -> STRING . COMMA strings_list

    RKEY            reduce using rule 141 (strings_list -> STRING .)
    COMMA           shift and go to state 423


state 419

    (140) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list . RKEY DOTANDCOMMA

    RKEY            shift and go to state 424


state 420

    (143) ints_list -> INTEGER .
    (144) ints_list -> INTEGER . COMMA ints_list

    RKEY            reduce using rule 143 (ints_list -> INTEGER .)
    COMMA           shift and go to state 425


state 421

    (129) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .
    (130) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY . FINALLY LKEY all_block_code_try RKEY

    PRINT           reduce using rule 129 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    STATIC          reduce using rule 129 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    WRITE           reduce using rule 129 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    LPARENT         reduce using rule 129 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    ENUM            reduce using rule 129 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    IF              reduce using rule 129 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    STACK           reduce using rule 129 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    QUEUE           reduce using rule 129 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    CONST           reduce using rule 129 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    THREAD          reduce using rule 129 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    TRY             reduce using rule 129 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    LIST            reduce using rule 129 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    VARIABLE        reduce using rule 129 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    WHILE           reduce using rule 129 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    DO              reduce using rule 129 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    PUBLIC          reduce using rule 129 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    PRIVATE         reduce using rule 129 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    INTTYPE         reduce using rule 129 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    STRINGTYPE      reduce using rule 129 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    FLOATTYPE       reduce using rule 129 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    BOOLTYPE        reduce using rule 129 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    RKEY            reduce using rule 129 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    $end            reduce using rule 129 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    FINALLY         shift and go to state 426


state 422

    (139) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 427


state 423

    (142) strings_list -> STRING COMMA . strings_list
    (141) strings_list -> . STRING
    (142) strings_list -> . STRING COMMA strings_list

    STRING          shift and go to state 418

    strings_list                   shift and go to state 428

state 424

    (140) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 429


state 425

    (144) ints_list -> INTEGER COMMA . ints_list
    (143) ints_list -> . INTEGER
    (144) ints_list -> . INTEGER COMMA ints_list

    INTEGER         shift and go to state 420

    ints_list                      shift and go to state 430

state 426

    (130) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY . LKEY all_block_code_try RKEY

    LKEY            shift and go to state 431


state 427

    (139) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .

    PRINT           reduce using rule 139 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    STATIC          reduce using rule 139 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    WRITE           reduce using rule 139 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    LPARENT         reduce using rule 139 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    ENUM            reduce using rule 139 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    IF              reduce using rule 139 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    STACK           reduce using rule 139 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    QUEUE           reduce using rule 139 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    CONST           reduce using rule 139 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    THREAD          reduce using rule 139 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    TRY             reduce using rule 139 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    LIST            reduce using rule 139 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    VARIABLE        reduce using rule 139 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    WHILE           reduce using rule 139 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    DO              reduce using rule 139 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    PUBLIC          reduce using rule 139 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    PRIVATE         reduce using rule 139 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    INTTYPE         reduce using rule 139 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 139 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 139 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 139 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    RKEY            reduce using rule 139 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    $end            reduce using rule 139 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)


state 428

    (142) strings_list -> STRING COMMA strings_list .

    RKEY            reduce using rule 142 (strings_list -> STRING COMMA strings_list .)


state 429

    (140) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .

    PRINT           reduce using rule 140 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    STATIC          reduce using rule 140 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    WRITE           reduce using rule 140 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    LPARENT         reduce using rule 140 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    ENUM            reduce using rule 140 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    IF              reduce using rule 140 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    STACK           reduce using rule 140 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    QUEUE           reduce using rule 140 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    CONST           reduce using rule 140 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    THREAD          reduce using rule 140 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    TRY             reduce using rule 140 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    LIST            reduce using rule 140 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    VARIABLE        reduce using rule 140 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    WHILE           reduce using rule 140 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    DO              reduce using rule 140 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    PUBLIC          reduce using rule 140 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    PRIVATE         reduce using rule 140 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    INTTYPE         reduce using rule 140 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 140 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 140 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 140 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    RKEY            reduce using rule 140 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    $end            reduce using rule 140 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)


state 430

    (144) ints_list -> INTEGER COMMA ints_list .

    RKEY            reduce using rule 144 (ints_list -> INTEGER COMMA ints_list .)


state 431

    (130) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY . all_block_code_try RKEY
    (133) all_block_code_try -> . block_code_try
    (134) all_block_code_try -> . block_code_try all_block_code_try
    (131) block_code_try -> . def_const_or_var
    (132) block_code_try -> . print_data
    (70) def_const_or_var -> . constant_assignation
    (71) def_const_or_var -> . variable_assignation
    (40) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (41) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (72) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (73) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (74) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (75) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (76) access_modifiers -> . PUBLIC
    (77) access_modifiers -> . PRIVATE
    (97) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (98) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (99) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (100) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (101) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 52
    CONST           shift and go to state 80
    PUBLIC          shift and go to state 88
    PRIVATE         shift and go to state 89
    INTTYPE         shift and go to state 85
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 90
    BOOLTYPE        shift and go to state 91

    all_block_code_try             shift and go to state 432
    block_code_try                 shift and go to state 167
    def_const_or_var               shift and go to state 168
    print_data                     shift and go to state 169
    constant_assignation           shift and go to state 50
    variable_assignation           shift and go to state 51
    access_modifiers               shift and go to state 79
    assignation_type_value_multiple shift and go to state 81

state 432

    (130) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try . RKEY

    RKEY            shift and go to state 433


state 433

    (130) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .

    PRINT           reduce using rule 130 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    STATIC          reduce using rule 130 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    WRITE           reduce using rule 130 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    LPARENT         reduce using rule 130 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    ENUM            reduce using rule 130 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    IF              reduce using rule 130 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    STACK           reduce using rule 130 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    QUEUE           reduce using rule 130 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    CONST           reduce using rule 130 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    THREAD          reduce using rule 130 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    TRY             reduce using rule 130 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    LIST            reduce using rule 130 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    VARIABLE        reduce using rule 130 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    WHILE           reduce using rule 130 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    DO              reduce using rule 130 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    PUBLIC          reduce using rule 130 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    PRIVATE         reduce using rule 130 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    INTTYPE         reduce using rule 130 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    STRINGTYPE      reduce using rule 130 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    FLOATTYPE       reduce using rule 130 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    BOOLTYPE        reduce using rule 130 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    RKEY            reduce using rule 130 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    $end            reduce using rule 130 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 154 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (value_numeric -> VARIABLE) in state 154
WARNING: reduce/reduce conflict in state 224 resolved using rule (value_numeric -> VARIABLE)
WARNING: rejected rule (assignation_int -> VARIABLE ASSIGNATION VARIABLE) in state 224
WARNING: reduce/reduce conflict in state 225 resolved using rule (value_numeric -> INTEGER)
WARNING: rejected rule (assignation_int -> VARIABLE ASSIGNATION INTEGER) in state 225
WARNING: reduce/reduce conflict in state 231 resolved using rule (value_numeric -> VARIABLE)
WARNING: rejected rule (assignation_float -> VARIABLE ASSIGNATION VARIABLE) in state 231
WARNING: reduce/reduce conflict in state 232 resolved using rule (value_numeric -> FLOAT_NUMBER)
WARNING: rejected rule (assignation_float -> VARIABLE ASSIGNATION FLOAT_NUMBER) in state 232
WARNING: reduce/reduce conflict in state 238 resolved using rule (assignation_true -> VARIABLE ASSIGNATION VARIABLE)
WARNING: rejected rule (assignation_false -> VARIABLE ASSIGNATION VARIABLE) in state 238
WARNING: reduce/reduce conflict in state 238 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (assignation_true -> VARIABLE ASSIGNATION VARIABLE) in state 238
WARNING: reduce/reduce conflict in state 238 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (value_numeric -> VARIABLE) in state 238
WARNING: reduce/reduce conflict in state 239 resolved using rule (value_boolean -> BOOLTRUE)
WARNING: rejected rule (assignation_true -> VARIABLE ASSIGNATION BOOLTRUE) in state 239
WARNING: reduce/reduce conflict in state 240 resolved using rule (assignation_true -> VARIABLE ASSIGNATION boolean_operation)
WARNING: rejected rule (assignation_false -> VARIABLE ASSIGNATION boolean_operation) in state 240
WARNING: reduce/reduce conflict in state 241 resolved using rule (value_boolean -> BOOLFALSE)
WARNING: rejected rule (assignation_false -> VARIABLE ASSIGNATION BOOLFALSE) in state 241
WARNING: reduce/reduce conflict in state 251 resolved using rule (value_numeric -> VARIABLE)
WARNING: rejected rule (value -> VARIABLE) in state 251
WARNING: reduce/reduce conflict in state 251 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (value_numeric -> VARIABLE) in state 251
WARNING: reduce/reduce conflict in state 253 resolved using rule (value -> value_numeric)
WARNING: rejected rule (comparison_operation -> value_numeric) in state 253
WARNING: reduce/reduce conflict in state 257 resolved using rule (value_string -> STRING)
WARNING: rejected rule (concatenation -> STRING) in state 257
WARNING: reduce/reduce conflict in state 296 resolved using rule (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA)
WARNING: rejected rule (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA) in state 296
WARNING: reduce/reduce conflict in state 296 resolved using rule (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA)
WARNING: rejected rule (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA) in state 296
WARNING: reduce/reduce conflict in state 306 resolved using rule (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA)
WARNING: rejected rule (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA) in state 306
WARNING: reduce/reduce conflict in state 307 resolved using rule (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA)
WARNING: rejected rule (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA) in state 307
WARNING: reduce/reduce conflict in state 315 resolved using rule (block_code -> normal_if)
WARNING: rejected rule (block_if -> normal_if) in state 315
WARNING: reduce/reduce conflict in state 326 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (assignation_true -> VARIABLE ASSIGNATION VARIABLE) in state 326
WARNING: reduce/reduce conflict in state 326 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (value_numeric -> VARIABLE) in state 326
WARNING: reduce/reduce conflict in state 328 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (assignation_false -> VARIABLE ASSIGNATION VARIABLE) in state 328
WARNING: reduce/reduce conflict in state 328 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (value_numeric -> VARIABLE) in state 328
WARNING: Rule (assignation_int -> VARIABLE ASSIGNATION VARIABLE) is never reduced
WARNING: Rule (assignation_int -> VARIABLE ASSIGNATION INTEGER) is never reduced
WARNING: Rule (assignation_float -> VARIABLE ASSIGNATION VARIABLE) is never reduced
WARNING: Rule (assignation_float -> VARIABLE ASSIGNATION FLOAT_NUMBER) is never reduced
WARNING: Rule (assignation_false -> VARIABLE ASSIGNATION VARIABLE) is never reduced
WARNING: Rule (assignation_true -> VARIABLE ASSIGNATION VARIABLE) is never reduced
WARNING: Rule (assignation_true -> VARIABLE ASSIGNATION BOOLTRUE) is never reduced
WARNING: Rule (assignation_false -> VARIABLE ASSIGNATION BOOLFALSE) is never reduced
WARNING: Rule (value -> VARIABLE) is never reduced
WARNING: Rule (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA) is never reduced
WARNING: Rule (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA) is never reduced
WARNING: Rule (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA) is never reduced
WARNING: Rule (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA) is never reduced
WARNING: Rule (block_if -> normal_if) is never reduced
