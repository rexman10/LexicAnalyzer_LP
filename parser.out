Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ACTION
    ADD
    ADDITION_ASSIGNMENT
    ARROW
    ASYNC
    AWAIT
    BACK_SLASH
    BOOL
    BOOLFALSE
    BOOLTRUE
    BOOLTYPE
    BREAK
    CATCH
    CHAR
    CHARTYPE
    CLEAR
    COMMA
    CONCURRENT
    CONST
    COUNT
    DECIMALTYPE
    DECIMAL_NUMBER
    DECREMENT
    DEQUEUE
    DICTIONARY
    DIVIDE
    DIVISION_ASSIGNMENT
    DO
    DOLLARSIGN
    DOT
    DOUBLEPOINT
    DOUBLE_QUOTATION_MARKS
    ELSE
    ELSE_IF
    ENQUEUE
    EQUAL_COMPARATION
    EXCEPTION
    FINALLY
    FLOATTYPE
    FLOAT_NUMBER
    FOR
    FOREACH
    GREATER_THAN
    GREATER_THAN_OR_EQUAL
    ID
    IDENTIFIER
    IF
    IN
    INCREMENT
    INEQUALITY
    ISEMPTY
    JUMP_LINE
    LIST
    LOGICAND
    LOGICNOT
    LOGICOR
    LOGICXOR
    LONG
    METHOD
    MINUS
    MODULE_ASSIGNMENT
    MULTIPLICATION_ASSIGNMENT
    NAMESPACE
    NEW
    PEEK
    PERCENT
    PIPE
    PLUS
    POP
    PRINT
    PUSH
    PUT
    QUEUE
    READ
    REMOVE
    REMOVEAT
    RETURN
    SIPLE_QUOTATION_MARKS
    SMALLER_THAN
    SMALLER_THAN_OR_EQUAL
    STACK
    STRING
    SUBTRACTION_ASSIGNMENT
    SWITCH
    TABULATION
    TASK
    TIMES
    TRY
    WHILE

Grammar

Rule 0     S' -> program
Rule 1     program -> USING SYSTEM DOTANDCOMMA block_publicClass
Rule 2     block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_main_method RKEY
Rule 3     block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
Rule 4     all_block_code -> def_const_or_var
Rule 5     def_const_or_var -> variable_assignation
Rule 6     variable_assignation -> access_modifiers assignation_key_value DOTANDCOMMA
Rule 7     variable_assignation -> assignation_key_value DOTANDCOMMA
Rule 8     access_modifiers -> PUBLIC
Rule 9     access_modifiers -> PRIVATE
Rule 10    assignation_key_value -> INTTYPE VARIABLE ASSIGNATION INTEGER

Terminals, with rules where they appear

ACTION               : 
ADD                  : 
ADDITION_ASSIGNMENT  : 
ARROW                : 
ASSIGNATION          : 10
ASYNC                : 
AWAIT                : 
BACK_SLASH           : 
BOOL                 : 
BOOLFALSE            : 
BOOLTRUE             : 
BOOLTYPE             : 
BREAK                : 
CATCH                : 
CHAR                 : 
CHARTYPE             : 
CLASS                : 2
CLEAR                : 
COMMA                : 
CONCURRENT           : 
CONST                : 
COUNT                : 
DECIMALTYPE          : 
DECIMAL_NUMBER       : 
DECREMENT            : 
DEQUEUE              : 
DICTIONARY           : 
DIVIDE               : 
DIVISION_ASSIGNMENT  : 
DO                   : 
DOLLARSIGN           : 
DOT                  : 
DOTANDCOMMA          : 1 6 7
DOUBLEPOINT          : 
DOUBLE_QUOTATION_MARKS : 
ELSE                 : 
ELSE_IF              : 
ENQUEUE              : 
EQUAL_COMPARATION    : 
EXCEPTION            : 
FINALLY              : 
FLOATTYPE            : 
FLOAT_NUMBER         : 
FOR                  : 
FOREACH              : 
GREATER_THAN         : 
GREATER_THAN_OR_EQUAL : 
ID                   : 
IDENTIFIER           : 
IF                   : 
IN                   : 
INCREMENT            : 
INEQUALITY           : 
INTEGER              : 10
INTTYPE              : 10
ISEMPTY              : 
JUMP_LINE            : 
LBRACKET             : 3
LIST                 : 
LKEY                 : 2 3
LOGICAND             : 
LOGICNOT             : 
LOGICOR              : 
LOGICXOR             : 
LONG                 : 
LPARENT              : 3
MAIN                 : 3
METHOD               : 
MINUS                : 
MODULE_ASSIGNMENT    : 
MULTIPLICATION_ASSIGNMENT : 
NAMESPACE            : 
NEW                  : 
PEEK                 : 
PERCENT              : 
PIPE                 : 
PLUS                 : 
POP                  : 
PRINT                : 
PRIVATE              : 9
PUBLIC               : 2 8
PUSH                 : 
PUT                  : 
QUEUE                : 
RBRACKET             : 3
READ                 : 
REMOVE               : 
REMOVEAT             : 
RETURN               : 
RKEY                 : 2 3
RPARENT              : 3
SIPLE_QUOTATION_MARKS : 
SMALLER_THAN         : 
SMALLER_THAN_OR_EQUAL : 
STACK                : 
STATIC               : 3
STRING               : 
STRINGTYPE           : 3
SUBTRACTION_ASSIGNMENT : 
SWITCH               : 
SYSTEM               : 1
TABULATION           : 
TASK                 : 
TIMES                : 
TRY                  : 
USING                : 1
VARIABLE             : 2 3 10
VOID                 : 3
WHILE                : 
error                : 

Nonterminals, with rules where they appear

access_modifiers     : 6
all_block_code       : 3
assignation_key_value : 6 7
block_main_method    : 2
block_publicClass    : 1
def_const_or_var     : 4
program              : 0
variable_assignation : 5

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . USING SYSTEM DOTANDCOMMA block_publicClass

    USING           shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> USING . SYSTEM DOTANDCOMMA block_publicClass

    SYSTEM          shift and go to state 3


state 3

    (1) program -> USING SYSTEM . DOTANDCOMMA block_publicClass

    DOTANDCOMMA     shift and go to state 4


state 4

    (1) program -> USING SYSTEM DOTANDCOMMA . block_publicClass
    (2) block_publicClass -> . PUBLIC CLASS VARIABLE LKEY block_main_method RKEY

    PUBLIC          shift and go to state 6

    block_publicClass              shift and go to state 5

state 5

    (1) program -> USING SYSTEM DOTANDCOMMA block_publicClass .

    $end            reduce using rule 1 (program -> USING SYSTEM DOTANDCOMMA block_publicClass .)


state 6

    (2) block_publicClass -> PUBLIC . CLASS VARIABLE LKEY block_main_method RKEY

    CLASS           shift and go to state 7


state 7

    (2) block_publicClass -> PUBLIC CLASS . VARIABLE LKEY block_main_method RKEY

    VARIABLE        shift and go to state 8


state 8

    (2) block_publicClass -> PUBLIC CLASS VARIABLE . LKEY block_main_method RKEY

    LKEY            shift and go to state 9


state 9

    (2) block_publicClass -> PUBLIC CLASS VARIABLE LKEY . block_main_method RKEY
    (3) block_main_method -> . STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY

    STATIC          shift and go to state 11

    block_main_method              shift and go to state 10

state 10

    (2) block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_main_method . RKEY

    RKEY            shift and go to state 12


state 11

    (3) block_main_method -> STATIC . VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY

    VOID            shift and go to state 13


state 12

    (2) block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_main_method RKEY .

    $end            reduce using rule 2 (block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_main_method RKEY .)


state 13

    (3) block_main_method -> STATIC VOID . MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY

    MAIN            shift and go to state 14


state 14

    (3) block_main_method -> STATIC VOID MAIN . LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY

    LPARENT         shift and go to state 15


state 15

    (3) block_main_method -> STATIC VOID MAIN LPARENT . STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY

    STRINGTYPE      shift and go to state 16


state 16

    (3) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE . LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY

    LBRACKET        shift and go to state 17


state 17

    (3) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET . RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY

    RBRACKET        shift and go to state 18


state 18

    (3) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET . VARIABLE RPARENT LKEY all_block_code RKEY

    VARIABLE        shift and go to state 19


state 19

    (3) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE . RPARENT LKEY all_block_code RKEY

    RPARENT         shift and go to state 20


state 20

    (3) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT . LKEY all_block_code RKEY

    LKEY            shift and go to state 21


state 21

    (3) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY . all_block_code RKEY
    (4) all_block_code -> . def_const_or_var
    (5) def_const_or_var -> . variable_assignation
    (6) variable_assignation -> . access_modifiers assignation_key_value DOTANDCOMMA
    (7) variable_assignation -> . assignation_key_value DOTANDCOMMA
    (8) access_modifiers -> . PUBLIC
    (9) access_modifiers -> . PRIVATE
    (10) assignation_key_value -> . INTTYPE VARIABLE ASSIGNATION INTEGER

    PUBLIC          shift and go to state 27
    PRIVATE         shift and go to state 28
    INTTYPE         shift and go to state 29

    all_block_code                 shift and go to state 22
    def_const_or_var               shift and go to state 23
    variable_assignation           shift and go to state 24
    access_modifiers               shift and go to state 25
    assignation_key_value          shift and go to state 26

state 22

    (3) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code . RKEY

    RKEY            shift and go to state 30


state 23

    (4) all_block_code -> def_const_or_var .

    RKEY            reduce using rule 4 (all_block_code -> def_const_or_var .)


state 24

    (5) def_const_or_var -> variable_assignation .

    RKEY            reduce using rule 5 (def_const_or_var -> variable_assignation .)


state 25

    (6) variable_assignation -> access_modifiers . assignation_key_value DOTANDCOMMA
    (10) assignation_key_value -> . INTTYPE VARIABLE ASSIGNATION INTEGER

    INTTYPE         shift and go to state 29

    assignation_key_value          shift and go to state 31

state 26

    (7) variable_assignation -> assignation_key_value . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 32


state 27

    (8) access_modifiers -> PUBLIC .

    INTTYPE         reduce using rule 8 (access_modifiers -> PUBLIC .)


state 28

    (9) access_modifiers -> PRIVATE .

    INTTYPE         reduce using rule 9 (access_modifiers -> PRIVATE .)


state 29

    (10) assignation_key_value -> INTTYPE . VARIABLE ASSIGNATION INTEGER

    VARIABLE        shift and go to state 33


state 30

    (3) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY .

    RKEY            reduce using rule 3 (block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY .)


state 31

    (6) variable_assignation -> access_modifiers assignation_key_value . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 34


state 32

    (7) variable_assignation -> assignation_key_value DOTANDCOMMA .

    RKEY            reduce using rule 7 (variable_assignation -> assignation_key_value DOTANDCOMMA .)


state 33

    (10) assignation_key_value -> INTTYPE VARIABLE . ASSIGNATION INTEGER

    ASSIGNATION     shift and go to state 35


state 34

    (6) variable_assignation -> access_modifiers assignation_key_value DOTANDCOMMA .

    RKEY            reduce using rule 6 (variable_assignation -> access_modifiers assignation_key_value DOTANDCOMMA .)


state 35

    (10) assignation_key_value -> INTTYPE VARIABLE ASSIGNATION . INTEGER

    INTEGER         shift and go to state 36


state 36

    (10) assignation_key_value -> INTTYPE VARIABLE ASSIGNATION INTEGER .

    DOTANDCOMMA     reduce using rule 10 (assignation_key_value -> INTTYPE VARIABLE ASSIGNATION INTEGER .)

