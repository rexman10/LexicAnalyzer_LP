Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ACTION
    ADDITION_ASSIGNMENT
    ASYNC
    AWAIT
    BACK_SLASH
    BREAK
    CONCURRENT
    DICTIONARY
    DIVISION_ASSIGNMENT
    DOLLARSIGN
    DOUBLEPOINT
    DOUBLE_QUOTATION_MARKS
    ID
    IDENTIFIER
    JUMP_LINE
    LONG
    MODULE_ASSIGNMENT
    MULTIPLICATION_ASSIGNMENT
    NAMESPACE
    PIPE
    PUT
    REMOVE
    RETURN
    SIPLE_QUOTATION_MARKS
    SUBTRACTION_ASSIGNMENT
    SWITCH
    TABULATION
    TASK

Grammar

Rule 0     S' -> program
Rule 1     program -> USING SYSTEM DOTANDCOMMA block_publicClass
Rule 2     block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_main_method RKEY
Rule 3     block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code
Rule 4     block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
Rule 5     block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code
Rule 6     block_code -> def_const_or_var
Rule 7     block_code -> print_data
Rule 8     block_code -> array_assignation
Rule 9     block_code -> array_value_assign
Rule 10    block_code -> array_indexing
Rule 11    block_code -> thread_main
Rule 12    block_code -> concurrent_method
Rule 13    block_code -> block_try_catch
Rule 14    block_code -> lists
Rule 15    block_code -> functions_list
Rule 16    block_code -> statement_lambda
Rule 17    block_code -> enums
Rule 18    block_code -> normal_if
Rule 19    block_code -> block_for
Rule 20    block_code -> block_while
Rule 21    block_code -> stack_struct
Rule 22    block_code -> functions_stack
Rule 23    block_code -> queue_struct
Rule 24    block_code -> functions_queue
Rule 25    all_block_code -> block_code
Rule 26    all_block_code -> block_code all_block_code
Rule 27    data_type -> CHARTYPE
Rule 28    data_type -> STRINGTYPE
Rule 29    data_type -> FLOATTYPE
Rule 30    data_type -> DECIMALTYPE
Rule 31    data_type -> INTTYPE
Rule 32    data_type -> BOOLTYPE
Rule 33    value_string -> STRING
Rule 34    value_string -> CHAR
Rule 35    value_string -> concatenation
Rule 36    value_boolean -> BOOLTRUE
Rule 37    value_boolean -> BOOLFALSE
Rule 38    value_boolean -> VARIABLE
Rule 39    value_boolean -> comparison_operation
Rule 40    value_numeric -> INTEGER
Rule 41    value_numeric -> FLOAT_NUMBER
Rule 42    value_numeric -> DECIMAL_NUMBER
Rule 43    value_numeric -> VARIABLE
Rule 44    print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA
Rule 45    print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
Rule 46    read_data -> READ LPARENT RPARENT DOTANDCOMMA
Rule 47    concatenation -> STRING
Rule 48    concatenation -> STRING PLUS concatenation
Rule 49    array_type -> CHARTYPE LBRACKET RBRACKET
Rule 50    array_type -> STRINGTYPE LBRACKET RBRACKET
Rule 51    array_type -> FLOATTYPE LBRACKET RBRACKET
Rule 52    array_type -> DECIMALTYPE LBRACKET RBRACKET
Rule 53    array_type -> INTTYPE LBRACKET RBRACKET
Rule 54    array_type -> BOOLTYPE LBRACKET RBRACKET
Rule 55    array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA
Rule 56    array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
Rule 57    array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
Rule 58    array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA
Rule 59    array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
Rule 60    array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
Rule 61    char_array_assignation -> VARIABLE ASSIGNATION LBRACKET char_content_multiple RBRACKET
Rule 62    char_content_multiple -> CHAR
Rule 63    char_content_multiple -> CHAR COMMA char_content_multiple
Rule 64    string_array_assignation -> VARIABLE ASSIGNATION LBRACKET string_content_multiple RBRACKET
Rule 65    string_content_multiple -> STRING
Rule 66    string_content_multiple -> STRING COMMA string_content_multiple
Rule 67    float_array_assignation -> VARIABLE ASSIGNATION LBRACKET float_content_multiple RBRACKET
Rule 68    float_content_multiple -> FLOAT_NUMBER
Rule 69    float_content_multiple -> FLOAT_NUMBER COMMA float_content_multiple
Rule 70    int_array_assignation -> VARIABLE ASSIGNATION LBRACKET int_content_multiple RBRACKET
Rule 71    int_content_multiple -> INTEGER
Rule 72    int_content_multiple -> INTEGER COMMA int_content_multiple
Rule 73    decimal_array_assignation -> VARIABLE ASSIGNATION LBRACKET decimal_content_multiple RBRACKET
Rule 74    decimal_content_multiple -> DECIMAL_NUMBER
Rule 75    decimal_content_multiple -> DECIMAL_NUMBER COMMA decimal_content_multiple
Rule 76    bool_array_assignation -> VARIABLE ASSIGNATION LBRACKET bool_content_multiple RBRACKET
Rule 77    bool_content_multiple -> BOOLTRUE
Rule 78    bool_content_multiple -> BOOLFALSE
Rule 79    bool_content_multiple -> BOOLTRUE COMMA bool_content_multiple
Rule 80    bool_content_multiple -> BOOLFALSE COMMA bool_content_multiple
Rule 81    array -> LBRACKET array_content RBRACKET
Rule 82    array_content -> value
Rule 83    array_content -> value COMMA array_content
Rule 84    array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET
Rule 85    array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET
Rule 86    array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
Rule 87    array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
Rule 88    value -> value_numeric
Rule 89    value -> value_boolean
Rule 90    value -> value_string
Rule 91    value -> VARIABLE
Rule 92    value -> read_data
Rule 93    value -> array
Rule 94    arithmetic_operation -> value_numeric
Rule 95    arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation
Rule 96    arithmetic_operator -> PLUS
Rule 97    arithmetic_operator -> MINUS
Rule 98    arithmetic_operator -> TIMES
Rule 99    arithmetic_operator -> DIVIDE
Rule 100   arithmetic_operator -> PERCENT
Rule 101   comparison_operation -> value_numeric
Rule 102   comparison_operation -> value_numeric comparison_operator comparison_operation
Rule 103   comparison_operator -> GREATER_THAN
Rule 104   comparison_operator -> SMALLER_THAN
Rule 105   comparison_operator -> EQUAL_COMPARATION
Rule 106   comparison_operator -> INEQUALITY
Rule 107   comparison_operator -> GREATER_THAN_OR_EQUAL
Rule 108   comparison_operator -> SMALLER_THAN_OR_EQUAL
Rule 109   boolean_operation -> value_boolean
Rule 110   boolean_operation -> LOGICNOT value_boolean
Rule 111   boolean_operation -> value_boolean boolean_operator boolean_operation
Rule 112   boolean_operator -> LOGICAND
Rule 113   boolean_operator -> LOGICOR
Rule 114   def_const_or_var -> constant_assignation
Rule 115   def_const_or_var -> variable_assignation
Rule 116   constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
Rule 117   constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA
Rule 118   variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA
Rule 119   variable_assignation -> assignation_type_value_multiple DOTANDCOMMA
Rule 120   access_modifiers -> PUBLIC
Rule 121   access_modifiers -> PRIVATE
Rule 122   assignation_type_value -> INTTYPE assignation_int
Rule 123   assignation_type_value -> STRINGTYPE assignation_string
Rule 124   assignation_type_value -> FLOATTYPE assignation_float
Rule 125   assignation_type_value -> BOOLTYPE assignation_true
Rule 126   assignation_type_value -> BOOLTYPE assignation_false
Rule 127   assignation_int -> VARIABLE ASSIGNATION INTEGER
Rule 128   assignation_int -> VARIABLE ASSIGNATION VARIABLE
Rule 129   assignation_int -> VARIABLE ASSIGNATION arithmetic_operation
Rule 130   assignation_string -> VARIABLE ASSIGNATION STRING
Rule 131   assignation_string -> VARIABLE ASSIGNATION VARIABLE
Rule 132   assignation_float -> VARIABLE ASSIGNATION FLOAT_NUMBER
Rule 133   assignation_float -> VARIABLE ASSIGNATION VARIABLE
Rule 134   assignation_float -> VARIABLE ASSIGNATION arithmetic_operation
Rule 135   assignation_true -> VARIABLE ASSIGNATION BOOLTRUE
Rule 136   assignation_true -> VARIABLE ASSIGNATION VARIABLE
Rule 137   assignation_true -> VARIABLE ASSIGNATION boolean_operation
Rule 138   assignation_false -> VARIABLE ASSIGNATION BOOLFALSE
Rule 139   assignation_false -> VARIABLE ASSIGNATION VARIABLE
Rule 140   assignation_false -> VARIABLE ASSIGNATION boolean_operation
Rule 141   assignation_type_value_multiple -> INTTYPE assignation_int_multiple
Rule 142   assignation_type_value_multiple -> STRINGTYPE assignation_string_multiple
Rule 143   assignation_type_value_multiple -> FLOATTYPE assignation_float_multiple
Rule 144   assignation_type_value_multiple -> BOOLTYPE assignation_true_multiple
Rule 145   assignation_type_value_multiple -> BOOLTYPE assignation_false_multiple
Rule 146   assignation_int_multiple -> assignation_int
Rule 147   assignation_int_multiple -> assignation_int COMMA assignation_int_multiple
Rule 148   assignation_string_multiple -> assignation_string
Rule 149   assignation_string_multiple -> assignation_string COMMA assignation_string_multiple
Rule 150   assignation_float_multiple -> assignation_float
Rule 151   assignation_float_multiple -> assignation_float COMMA assignation_float_multiple
Rule 152   assignation_true_multiple -> assignation_true
Rule 153   assignation_true_multiple -> assignation_true COMMA assignation_true_multiple
Rule 154   assignation_false_multiple -> assignation_false
Rule 155   assignation_false_multiple -> assignation_false COMMA assignation_false_multiple
Rule 156   thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
Rule 157   declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
Rule 158   declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
Rule 159   thread_init -> thread_identificator DOT START LPARENT RPARENT DOTANDCOMMA
Rule 160   thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA
Rule 161   concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
Rule 162   concurrent_method -> WRITE
Rule 163   thread_logic -> thread_sentence
Rule 164   thread_logic -> thread_logic thread_sentence
Rule 165   thread_sentence -> thread_expression DOTANDCOMMA
Rule 166   thread_expression -> thread_identificator DOT concurrent_method LPARENT RPARENT
Rule 167   thread_expression -> PRINT LPARENT STRING RPARENT
Rule 168   thread_arguments -> thread_expression
Rule 169   thread_arguments -> thread_arguments COMMA thread_expression
Rule 170   thread_identificator -> VARIABLE
Rule 171   statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
Rule 172   enums -> ENUM METHOD LKEY list_enums RKEY
Rule 173   list_enums -> METHOD
Rule 174   list_enums -> METHOD COMMA list_enums
Rule 175   block_try_catch -> try_catch_simply
Rule 176   block_try_catch -> try_catch_finally
Rule 177   try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
Rule 178   try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
Rule 179   block_code_try -> def_const_or_var
Rule 180   block_code_try -> print_data
Rule 181   all_block_code_try -> block_code_try
Rule 182   all_block_code_try -> block_code_try all_block_code_try
Rule 183   block_if -> normal_if
Rule 184   block_if -> all_block_code
Rule 185   normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
Rule 186   normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
Rule 187   other_if -> ELSE LKEY block_if RKEY
Rule 188   other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
Rule 189   block_while -> normal_while
Rule 190   block_while -> do_while
Rule 191   normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
Rule 192   do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
Rule 193   block_for -> for_simple
Rule 194   block_for -> for_each
Rule 195   for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
Rule 196   for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
Rule 197   for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
Rule 198   lists -> list_empty
Rule 199   lists -> list_full
Rule 200   list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
Rule 201   list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
Rule 202   list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
Rule 203   list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
Rule 204   strings_list -> STRING
Rule 205   strings_list -> STRING COMMA strings_list
Rule 206   ints_list -> INTEGER
Rule 207   ints_list -> INTEGER COMMA ints_list
Rule 208   functions_list -> list_func_clear
Rule 209   functions_list -> list_func_count
Rule 210   functions_list -> list_func_add
Rule 211   functions_list -> list_func_removeat
Rule 212   list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
Rule 213   list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
Rule 214   list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
Rule 215   list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
Rule 216   list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
Rule 217   list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
Rule 218   stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
Rule 219   functions_stack -> stack_push
Rule 220   functions_stack -> stack_pop
Rule 221   functions_stack -> stack_clear
Rule 222   functions_stack -> stack_peek
Rule 223   functions_stack -> stack_isEmpty
Rule 224   stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
Rule 225   stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
Rule 226   stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
Rule 227   stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
Rule 228   stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
Rule 229   queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
Rule 230   functions_queue -> queue_enqueue
Rule 231   functions_queue -> queue_dequeue
Rule 232   functions_queue -> queue_clear
Rule 233   functions_queue -> queue_isEmpty
Rule 234   functions_queue -> queue_peek
Rule 235   queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
Rule 236   queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
Rule 237   queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
Rule 238   queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
Rule 239   queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA

Terminals, with rules where they appear

ACTION               : 
ADD                  : 214 215
ADDITION_ASSIGNMENT  : 
ARROW                : 171
ASSIGNATION          : 61 64 67 70 73 76 86 87 127 128 129 130 131 132 133 134 135 136 137 138 139 140 157 158 200 201 202 203 218 229
ASYNC                : 
AWAIT                : 
BACK_SLASH           : 
BOOLFALSE            : 37 78 80 138
BOOLTRUE             : 36 77 79 135
BOOLTYPE             : 32 54 60 125 126 144 145
BREAK                : 
CATCH                : 177 178
CHAR                 : 34 62 63
CHARTYPE             : 27 49 55
CLASS                : 2
CLEAR                : 212 226 237
COMMA                : 63 66 69 72 75 79 80 83 147 149 151 153 155 169 174 205 207
CONCURRENT           : 
CONST                : 116 117
COUNT                : 213
DECIMALTYPE          : 30 52 58
DECIMAL_NUMBER       : 42 74 75
DECREMENT            : 196
DEQUEUE              : 236
DICTIONARY           : 
DIVIDE               : 99
DIVISION_ASSIGNMENT  : 
DO                   : 192
DOLLARSIGN           : 
DOT                  : 159 160 166 212 213 214 215 216 217 224 225 226 227 228 235 236 237 238 239
DOTANDCOMMA          : 1 44 45 46 55 56 57 58 59 60 86 87 116 117 118 119 157 158 159 160 165 177 178 195 195 196 196 200 201 202 203 212 213 214 215 216 217 218 224 225 226 227 228 229 235 236 237 238 239
DOUBLEPOINT          : 
DOUBLE_QUOTATION_MARKS : 
ELSE                 : 187
ELSE_IF              : 188
ENQUEUE              : 235
ENUM                 : 172
EQUAL_COMPARATION    : 105
ERROR                : 177 177 178 178
EXCEPTION            : 177 178
FINALLY              : 178
FLOATTYPE            : 29 51 57 124 143
FLOAT_NUMBER         : 41 68 69 132
FOR                  : 195 196
FOREACH              : 197
GREATER_THAN         : 103 200 200 201 201 202 202 203 203
GREATER_THAN_OR_EQUAL : 107
ID                   : 
IDENTIFIER           : 
IF                   : 185 186
IN                   : 197
INCREMENT            : 195
INEQUALITY           : 106
INTEGER              : 40 71 72 85 87 127 206 207 214 216
INTTYPE              : 31 53 59 122 141 195 196 201 201 203 203
ISEMPTY              : 228 239
JOIN                 : 160
JUMP_LINE            : 
LBRACKET             : 3 4 5 49 50 51 52 53 54 55 56 57 58 59 60 61 64 67 70 73 76 81 84 85 86 87
LIST                 : 200 200 201 201 202 202 203 203
LKEY                 : 2 3 4 5 161 171 172 177 177 178 178 178 185 186 187 188 191 192 195 196 197 202 203
LOGICAND             : 112
LOGICNOT             : 110
LOGICOR              : 113
LONG                 : 
LPARENT              : 3 4 5 44 45 46 157 158 159 160 161 166 167 171 177 177 178 178 185 186 188 191 192 195 196 197 200 201 202 203 212 213 214 215 216 217 218 224 225 226 227 228 229 235 236 237 238 239
MAIN                 : 3 4 5
METHOD               : 172 173 174
MINUS                : 97
MODULE_ASSIGNMENT    : 
MULTIPLICATION_ASSIGNMENT : 
NAMESPACE            : 
NEW                  : 157 158 200 201 202 203 218 229
PEEK                 : 227 238
PERCENT              : 100
PIPE                 : 
PLUS                 : 48 96
POP                  : 225
PRINT                : 44 45 167 177 178
PRIVATE              : 121
PUBLIC               : 2 120
PUSH                 : 224
PUT                  : 
QUEUE                : 229 229
RBRACKET             : 3 4 5 49 50 51 52 53 54 55 56 57 58 59 60 61 64 67 70 73 76 81 84 85 86 87
READ                 : 46
REMOVE               : 
REMOVEAT             : 216 217
RETURN               : 
RKEY                 : 2 3 4 5 161 171 172 177 177 178 178 178 185 186 187 188 191 192 195 196 197 202 203
RPARENT              : 3 4 5 44 45 46 157 158 159 160 161 166 167 171 177 177 178 178 185 186 188 191 192 195 196 197 200 201 202 203 212 213 214 215 216 217 218 224 225 226 227 228 229 235 236 237 238 239
SIPLE_QUOTATION_MARKS : 
SMALLER_THAN         : 104 200 200 201 201 202 202 203 203
SMALLER_THAN_OR_EQUAL : 108
STACK                : 218 218
START                : 159
STATIC               : 3 4 5 161
STRING               : 33 44 47 48 65 66 130 167 204 205 215 217
STRINGTYPE           : 3 4 5 28 50 56 123 142 200 200 202 202
SUBTRACTION_ASSIGNMENT : 
SWITCH               : 
SYSTEM               : 1
TABULATION           : 
TASK                 : 
THREAD               : 157 157 158 158
TIMES                : 98
TRY                  : 177 178
USING                : 1
VARIABLE             : 2 3 4 5 38 43 45 61 64 67 70 73 76 84 84 85 86 86 87 91 127 128 128 129 130 131 131 132 133 133 134 135 136 136 137 138 139 139 140 170 171 195 196 197 197 200 201 202 203 212 213 214 215 216 217 218 224 225 226 227 228 229 235 236 237 238 239
VOID                 : 3 4 5 161
WHILE                : 191 192
WRITE                : 162
error                : 

Nonterminals, with rules where they appear

access_modifiers     : 116 118
all_block_code       : 3 3 4 5 5 26 171 184 191 192 195 196 197
all_block_code_try   : 177 178 178 182
arithmetic_operation : 95 129 134
arithmetic_operator  : 95
array                : 93
array_assignation    : 8
array_content        : 81 83
array_indexing       : 10
array_type           : 
array_value_assign   : 9
assignation_false    : 126 154 155
assignation_false_multiple : 145 155
assignation_float    : 124 150 151
assignation_float_multiple : 143 151
assignation_int      : 122 146 147 195 196
assignation_int_multiple : 141 147
assignation_string   : 123 148 149
assignation_string_multiple : 142 149
assignation_true     : 125 152 153
assignation_true_multiple : 144 153
assignation_type_value : 
assignation_type_value_multiple : 116 117 118 119
block_code           : 25 26
block_code_try       : 181 182
block_for            : 19
block_if             : 185 186 187 188
block_main_method    : 2
block_publicClass    : 1
block_try_catch      : 13
block_while          : 20
bool_array_assignation : 60
bool_content_multiple : 76 79 80
boolean_operation    : 111 137 140 185 186 188 191 192
boolean_operator     : 111
char_array_assignation : 55
char_content_multiple : 61 63
comparison_operation : 39 102 195 196
comparison_operator  : 102
concatenation        : 35 48
concurrent_method    : 12 158 166
constant_assignation : 114
data_type            : 197
decimal_array_assignation : 58
decimal_content_multiple : 73 75
declaration_thread   : 156 156
def_const_or_var     : 6 179
do_while             : 190
enums                : 17
float_array_assignation : 57
float_content_multiple : 67 69
for_each             : 194
for_simple           : 193
functions_list       : 15
functions_queue      : 24
functions_stack      : 22
int_array_assignation : 59
int_content_multiple : 70 72
ints_list            : 203 207
list_empty           : 198
list_enums           : 172 174
list_full            : 199
list_func_add        : 210
list_func_clear      : 208
list_func_count      : 209
list_func_removeat   : 211
lists                : 14
normal_if            : 18 183
normal_while         : 189
other_if             : 185 188
print_data           : 7 180
program              : 0
queue_clear          : 232
queue_dequeue        : 231
queue_enqueue        : 230
queue_isEmpty        : 233
queue_peek           : 234
queue_struct         : 23
read_data            : 92
stack_clear          : 221
stack_isEmpty        : 223
stack_peek           : 222
stack_pop            : 220
stack_push           : 219
stack_struct         : 21
statement_lambda     : 16
string_array_assignation : 56
string_content_multiple : 64 66
strings_list         : 202 205
thread_arguments     : 169
thread_expression    : 165 168 169
thread_identificator : 157 157 158 159 160 161 166
thread_init          : 156 156
thread_logic         : 161 164
thread_main          : 11
thread_sentence      : 163 164
thread_wait          : 156 156
try_catch_finally    : 176
try_catch_simply     : 175
value                : 82 83 86 87 224 235
value_boolean        : 89 109 110 111
value_numeric        : 88 94 95 101 102
value_string         : 90
variable_assignation : 115

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . USING SYSTEM DOTANDCOMMA block_publicClass

    USING           shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> USING . SYSTEM DOTANDCOMMA block_publicClass

    SYSTEM          shift and go to state 3


state 3

    (1) program -> USING SYSTEM . DOTANDCOMMA block_publicClass

    DOTANDCOMMA     shift and go to state 4


state 4

    (1) program -> USING SYSTEM DOTANDCOMMA . block_publicClass
    (2) block_publicClass -> . PUBLIC CLASS VARIABLE LKEY block_main_method RKEY
    (3) block_publicClass -> . STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    PUBLIC          shift and go to state 6
    STATIC          shift and go to state 7

    block_publicClass              shift and go to state 5

state 5

    (1) program -> USING SYSTEM DOTANDCOMMA block_publicClass .

    $end            reduce using rule 1 (program -> USING SYSTEM DOTANDCOMMA block_publicClass .)


state 6

    (2) block_publicClass -> PUBLIC . CLASS VARIABLE LKEY block_main_method RKEY

    CLASS           shift and go to state 8


state 7

    (3) block_publicClass -> STATIC . VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    VOID            shift and go to state 9


state 8

    (2) block_publicClass -> PUBLIC CLASS . VARIABLE LKEY block_main_method RKEY

    VARIABLE        shift and go to state 10


state 9

    (3) block_publicClass -> STATIC VOID . MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    MAIN            shift and go to state 11


state 10

    (2) block_publicClass -> PUBLIC CLASS VARIABLE . LKEY block_main_method RKEY

    LKEY            shift and go to state 12


state 11

    (3) block_publicClass -> STATIC VOID MAIN . LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    LPARENT         shift and go to state 13


state 12

    (2) block_publicClass -> PUBLIC CLASS VARIABLE LKEY . block_main_method RKEY
    (4) block_main_method -> . STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (5) block_main_method -> . STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    STATIC          shift and go to state 15

    block_main_method              shift and go to state 14

state 13

    (3) block_publicClass -> STATIC VOID MAIN LPARENT . STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    STRINGTYPE      shift and go to state 16


state 14

    (2) block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_main_method . RKEY

    RKEY            shift and go to state 17


state 15

    (4) block_main_method -> STATIC . VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (5) block_main_method -> STATIC . VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    VOID            shift and go to state 18


state 16

    (3) block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE . LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    LBRACKET        shift and go to state 19


state 17

    (2) block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_main_method RKEY .

    $end            reduce using rule 2 (block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_main_method RKEY .)


state 18

    (4) block_main_method -> STATIC VOID . MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (5) block_main_method -> STATIC VOID . MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    MAIN            shift and go to state 20


state 19

    (3) block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET . RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    RBRACKET        shift and go to state 21


state 20

    (4) block_main_method -> STATIC VOID MAIN . LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (5) block_main_method -> STATIC VOID MAIN . LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    LPARENT         shift and go to state 22


state 21

    (3) block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET . VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    VARIABLE        shift and go to state 23


state 22

    (4) block_main_method -> STATIC VOID MAIN LPARENT . STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (5) block_main_method -> STATIC VOID MAIN LPARENT . STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    STRINGTYPE      shift and go to state 24


state 23

    (3) block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE . RPARENT LKEY all_block_code RKEY all_block_code

    RPARENT         shift and go to state 25


state 24

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE . LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (5) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE . LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    LBRACKET        shift and go to state 26


state 25

    (3) block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT . LKEY all_block_code RKEY all_block_code

    LKEY            shift and go to state 27


state 26

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET . RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY
    (5) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET . RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    RBRACKET        shift and go to state 28


state 27

    (3) block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY . all_block_code RKEY all_block_code
    (25) all_block_code -> . block_code
    (26) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . array_assignation
    (9) block_code -> . array_value_assign
    (10) block_code -> . array_indexing
    (11) block_code -> . thread_main
    (12) block_code -> . concurrent_method
    (13) block_code -> . block_try_catch
    (14) block_code -> . lists
    (15) block_code -> . functions_list
    (16) block_code -> . statement_lambda
    (17) block_code -> . enums
    (18) block_code -> . normal_if
    (19) block_code -> . block_for
    (20) block_code -> . block_while
    (21) block_code -> . stack_struct
    (22) block_code -> . functions_stack
    (23) block_code -> . queue_struct
    (24) block_code -> . functions_queue
    (114) def_const_or_var -> . constant_assignation
    (115) def_const_or_var -> . variable_assignation
    (44) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (45) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (55) array_assignation -> . CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA
    (56) array_assignation -> . STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
    (57) array_assignation -> . FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
    (58) array_assignation -> . DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA
    (59) array_assignation -> . INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
    (60) array_assignation -> . BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
    (86) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (87) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (84) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (85) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (156) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (161) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (162) concurrent_method -> . WRITE
    (175) block_try_catch -> . try_catch_simply
    (176) block_try_catch -> . try_catch_finally
    (198) lists -> . list_empty
    (199) lists -> . list_full
    (208) functions_list -> . list_func_clear
    (209) functions_list -> . list_func_count
    (210) functions_list -> . list_func_add
    (211) functions_list -> . list_func_removeat
    (171) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (172) enums -> . ENUM METHOD LKEY list_enums RKEY
    (185) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (186) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (193) block_for -> . for_simple
    (194) block_for -> . for_each
    (189) block_while -> . normal_while
    (190) block_while -> . do_while
    (218) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (219) functions_stack -> . stack_push
    (220) functions_stack -> . stack_pop
    (221) functions_stack -> . stack_clear
    (222) functions_stack -> . stack_peek
    (223) functions_stack -> . stack_isEmpty
    (229) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (230) functions_queue -> . queue_enqueue
    (231) functions_queue -> . queue_dequeue
    (232) functions_queue -> . queue_clear
    (233) functions_queue -> . queue_isEmpty
    (234) functions_queue -> . queue_peek
    (116) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (117) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (118) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (119) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (157) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (158) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (177) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (178) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (200) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (201) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (202) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (203) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (212) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (213) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (214) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (215) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (216) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (217) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (195) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (196) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (197) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (191) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (192) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (224) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (225) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (226) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (227) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (228) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (235) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (236) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (237) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (239) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (238) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (120) access_modifiers -> . PUBLIC
    (121) access_modifiers -> . PRIVATE
    (141) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (142) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (143) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (144) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (145) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 56
    CHARTYPE        shift and go to state 57
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 58
    DECIMALTYPE     shift and go to state 59
    INTTYPE         shift and go to state 60
    BOOLTYPE        shift and go to state 61
    VARIABLE        shift and go to state 32
    STATIC          shift and go to state 29
    WRITE           shift and go to state 63
    LPARENT         shift and go to state 30
    ENUM            shift and go to state 72
    IF              shift and go to state 73
    STACK           shift and go to state 78
    QUEUE           shift and go to state 84
    CONST           shift and go to state 91
    THREAD          shift and go to state 93
    TRY             shift and go to state 94
    LIST            shift and go to state 95
    FOR             shift and go to state 96
    FOREACH         shift and go to state 97
    WHILE           shift and go to state 98
    DO              shift and go to state 99
    PUBLIC          shift and go to state 100
    PRIVATE         shift and go to state 101

    all_block_code                 shift and go to state 33
    block_code                     shift and go to state 34
    def_const_or_var               shift and go to state 35
    print_data                     shift and go to state 36
    array_assignation              shift and go to state 37
    array_value_assign             shift and go to state 38
    array_indexing                 shift and go to state 39
    thread_main                    shift and go to state 40
    concurrent_method              shift and go to state 41
    block_try_catch                shift and go to state 42
    lists                          shift and go to state 43
    functions_list                 shift and go to state 44
    statement_lambda               shift and go to state 45
    enums                          shift and go to state 46
    normal_if                      shift and go to state 47
    block_for                      shift and go to state 48
    block_while                    shift and go to state 49
    stack_struct                   shift and go to state 50
    functions_stack                shift and go to state 51
    queue_struct                   shift and go to state 52
    functions_queue                shift and go to state 53
    constant_assignation           shift and go to state 54
    variable_assignation           shift and go to state 55
    declaration_thread             shift and go to state 62
    try_catch_simply               shift and go to state 64
    try_catch_finally              shift and go to state 65
    list_empty                     shift and go to state 66
    list_full                      shift and go to state 67
    list_func_clear                shift and go to state 68
    list_func_count                shift and go to state 69
    list_func_add                  shift and go to state 70
    list_func_removeat             shift and go to state 71
    for_simple                     shift and go to state 74
    for_each                       shift and go to state 75
    normal_while                   shift and go to state 76
    do_while                       shift and go to state 77
    stack_push                     shift and go to state 79
    stack_pop                      shift and go to state 80
    stack_clear                    shift and go to state 81
    stack_peek                     shift and go to state 82
    stack_isEmpty                  shift and go to state 83
    queue_enqueue                  shift and go to state 85
    queue_dequeue                  shift and go to state 86
    queue_clear                    shift and go to state 87
    queue_isEmpty                  shift and go to state 88
    queue_peek                     shift and go to state 89
    access_modifiers               shift and go to state 90
    assignation_type_value_multiple shift and go to state 92

state 28

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET . VARIABLE RPARENT LKEY all_block_code RKEY
    (5) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET . VARIABLE RPARENT LKEY all_block_code RKEY all_block_code

    VARIABLE        shift and go to state 102


state 29

    (161) concurrent_method -> STATIC . VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY

    VOID            shift and go to state 103


state 30

    (171) statement_lambda -> LPARENT . VARIABLE ARROW LKEY all_block_code RKEY RPARENT

    VARIABLE        shift and go to state 104


state 31

    (56) array_assignation -> STRINGTYPE . LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
    (142) assignation_type_value_multiple -> STRINGTYPE . assignation_string_multiple
    (148) assignation_string_multiple -> . assignation_string
    (149) assignation_string_multiple -> . assignation_string COMMA assignation_string_multiple
    (130) assignation_string -> . VARIABLE ASSIGNATION STRING
    (131) assignation_string -> . VARIABLE ASSIGNATION VARIABLE

    LBRACKET        shift and go to state 105
    VARIABLE        shift and go to state 108

    assignation_string_multiple    shift and go to state 106
    assignation_string             shift and go to state 107

state 32

    (86) array_value_assign -> VARIABLE . LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (87) array_value_assign -> VARIABLE . LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (84) array_indexing -> VARIABLE . LBRACKET VARIABLE RBRACKET
    (85) array_indexing -> VARIABLE . LBRACKET INTEGER RBRACKET
    (212) list_func_clear -> VARIABLE . DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (213) list_func_count -> VARIABLE . DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (214) list_func_add -> VARIABLE . DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (215) list_func_add -> VARIABLE . DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (216) list_func_removeat -> VARIABLE . DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (217) list_func_removeat -> VARIABLE . DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (224) stack_push -> VARIABLE . DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (225) stack_pop -> VARIABLE . DOT POP LPARENT RPARENT DOTANDCOMMA
    (226) stack_clear -> VARIABLE . DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (227) stack_peek -> VARIABLE . DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (228) stack_isEmpty -> VARIABLE . DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (235) queue_enqueue -> VARIABLE . DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (236) queue_dequeue -> VARIABLE . DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (237) queue_clear -> VARIABLE . DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (239) queue_isEmpty -> VARIABLE . DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (238) queue_peek -> VARIABLE . DOT PEEK LPARENT RPARENT DOTANDCOMMA

    LBRACKET        shift and go to state 109
    DOT             shift and go to state 110


state 33

    (3) block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code . RKEY all_block_code

    RKEY            shift and go to state 111


state 34

    (25) all_block_code -> block_code .
    (26) all_block_code -> block_code . all_block_code
    (25) all_block_code -> . block_code
    (26) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . array_assignation
    (9) block_code -> . array_value_assign
    (10) block_code -> . array_indexing
    (11) block_code -> . thread_main
    (12) block_code -> . concurrent_method
    (13) block_code -> . block_try_catch
    (14) block_code -> . lists
    (15) block_code -> . functions_list
    (16) block_code -> . statement_lambda
    (17) block_code -> . enums
    (18) block_code -> . normal_if
    (19) block_code -> . block_for
    (20) block_code -> . block_while
    (21) block_code -> . stack_struct
    (22) block_code -> . functions_stack
    (23) block_code -> . queue_struct
    (24) block_code -> . functions_queue
    (114) def_const_or_var -> . constant_assignation
    (115) def_const_or_var -> . variable_assignation
    (44) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (45) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (55) array_assignation -> . CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA
    (56) array_assignation -> . STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
    (57) array_assignation -> . FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
    (58) array_assignation -> . DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA
    (59) array_assignation -> . INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
    (60) array_assignation -> . BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
    (86) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (87) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (84) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (85) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (156) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (161) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (162) concurrent_method -> . WRITE
    (175) block_try_catch -> . try_catch_simply
    (176) block_try_catch -> . try_catch_finally
    (198) lists -> . list_empty
    (199) lists -> . list_full
    (208) functions_list -> . list_func_clear
    (209) functions_list -> . list_func_count
    (210) functions_list -> . list_func_add
    (211) functions_list -> . list_func_removeat
    (171) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (172) enums -> . ENUM METHOD LKEY list_enums RKEY
    (185) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (186) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (193) block_for -> . for_simple
    (194) block_for -> . for_each
    (189) block_while -> . normal_while
    (190) block_while -> . do_while
    (218) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (219) functions_stack -> . stack_push
    (220) functions_stack -> . stack_pop
    (221) functions_stack -> . stack_clear
    (222) functions_stack -> . stack_peek
    (223) functions_stack -> . stack_isEmpty
    (229) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (230) functions_queue -> . queue_enqueue
    (231) functions_queue -> . queue_dequeue
    (232) functions_queue -> . queue_clear
    (233) functions_queue -> . queue_isEmpty
    (234) functions_queue -> . queue_peek
    (116) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (117) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (118) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (119) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (157) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (158) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (177) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (178) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (200) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (201) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (202) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (203) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (212) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (213) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (214) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (215) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (216) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (217) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (195) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (196) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (197) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (191) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (192) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (224) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (225) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (226) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (227) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (228) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (235) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (236) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (237) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (239) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (238) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (120) access_modifiers -> . PUBLIC
    (121) access_modifiers -> . PRIVATE
    (141) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (142) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (143) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (144) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (145) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    RKEY            reduce using rule 25 (all_block_code -> block_code .)
    $end            reduce using rule 25 (all_block_code -> block_code .)
    PRINT           shift and go to state 56
    CHARTYPE        shift and go to state 57
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 58
    DECIMALTYPE     shift and go to state 59
    INTTYPE         shift and go to state 60
    BOOLTYPE        shift and go to state 61
    VARIABLE        shift and go to state 32
    STATIC          shift and go to state 29
    WRITE           shift and go to state 63
    LPARENT         shift and go to state 30
    ENUM            shift and go to state 72
    IF              shift and go to state 73
    STACK           shift and go to state 78
    QUEUE           shift and go to state 84
    CONST           shift and go to state 91
    THREAD          shift and go to state 93
    TRY             shift and go to state 94
    LIST            shift and go to state 95
    FOR             shift and go to state 96
    FOREACH         shift and go to state 97
    WHILE           shift and go to state 98
    DO              shift and go to state 99
    PUBLIC          shift and go to state 100
    PRIVATE         shift and go to state 101

    block_code                     shift and go to state 34
    all_block_code                 shift and go to state 112
    def_const_or_var               shift and go to state 35
    print_data                     shift and go to state 36
    array_assignation              shift and go to state 37
    array_value_assign             shift and go to state 38
    array_indexing                 shift and go to state 39
    thread_main                    shift and go to state 40
    concurrent_method              shift and go to state 41
    block_try_catch                shift and go to state 42
    lists                          shift and go to state 43
    functions_list                 shift and go to state 44
    statement_lambda               shift and go to state 45
    enums                          shift and go to state 46
    normal_if                      shift and go to state 47
    block_for                      shift and go to state 48
    block_while                    shift and go to state 49
    stack_struct                   shift and go to state 50
    functions_stack                shift and go to state 51
    queue_struct                   shift and go to state 52
    functions_queue                shift and go to state 53
    constant_assignation           shift and go to state 54
    variable_assignation           shift and go to state 55
    declaration_thread             shift and go to state 62
    try_catch_simply               shift and go to state 64
    try_catch_finally              shift and go to state 65
    list_empty                     shift and go to state 66
    list_full                      shift and go to state 67
    list_func_clear                shift and go to state 68
    list_func_count                shift and go to state 69
    list_func_add                  shift and go to state 70
    list_func_removeat             shift and go to state 71
    for_simple                     shift and go to state 74
    for_each                       shift and go to state 75
    normal_while                   shift and go to state 76
    do_while                       shift and go to state 77
    stack_push                     shift and go to state 79
    stack_pop                      shift and go to state 80
    stack_clear                    shift and go to state 81
    stack_peek                     shift and go to state 82
    stack_isEmpty                  shift and go to state 83
    queue_enqueue                  shift and go to state 85
    queue_dequeue                  shift and go to state 86
    queue_clear                    shift and go to state 87
    queue_isEmpty                  shift and go to state 88
    queue_peek                     shift and go to state 89
    access_modifiers               shift and go to state 90
    assignation_type_value_multiple shift and go to state 92

state 35

    (6) block_code -> def_const_or_var .

    PRINT           reduce using rule 6 (block_code -> def_const_or_var .)
    CHARTYPE        reduce using rule 6 (block_code -> def_const_or_var .)
    STRINGTYPE      reduce using rule 6 (block_code -> def_const_or_var .)
    FLOATTYPE       reduce using rule 6 (block_code -> def_const_or_var .)
    DECIMALTYPE     reduce using rule 6 (block_code -> def_const_or_var .)
    INTTYPE         reduce using rule 6 (block_code -> def_const_or_var .)
    BOOLTYPE        reduce using rule 6 (block_code -> def_const_or_var .)
    VARIABLE        reduce using rule 6 (block_code -> def_const_or_var .)
    STATIC          reduce using rule 6 (block_code -> def_const_or_var .)
    WRITE           reduce using rule 6 (block_code -> def_const_or_var .)
    LPARENT         reduce using rule 6 (block_code -> def_const_or_var .)
    ENUM            reduce using rule 6 (block_code -> def_const_or_var .)
    IF              reduce using rule 6 (block_code -> def_const_or_var .)
    STACK           reduce using rule 6 (block_code -> def_const_or_var .)
    QUEUE           reduce using rule 6 (block_code -> def_const_or_var .)
    CONST           reduce using rule 6 (block_code -> def_const_or_var .)
    THREAD          reduce using rule 6 (block_code -> def_const_or_var .)
    TRY             reduce using rule 6 (block_code -> def_const_or_var .)
    LIST            reduce using rule 6 (block_code -> def_const_or_var .)
    FOR             reduce using rule 6 (block_code -> def_const_or_var .)
    FOREACH         reduce using rule 6 (block_code -> def_const_or_var .)
    WHILE           reduce using rule 6 (block_code -> def_const_or_var .)
    DO              reduce using rule 6 (block_code -> def_const_or_var .)
    PUBLIC          reduce using rule 6 (block_code -> def_const_or_var .)
    PRIVATE         reduce using rule 6 (block_code -> def_const_or_var .)
    RKEY            reduce using rule 6 (block_code -> def_const_or_var .)
    $end            reduce using rule 6 (block_code -> def_const_or_var .)


state 36

    (7) block_code -> print_data .

    PRINT           reduce using rule 7 (block_code -> print_data .)
    CHARTYPE        reduce using rule 7 (block_code -> print_data .)
    STRINGTYPE      reduce using rule 7 (block_code -> print_data .)
    FLOATTYPE       reduce using rule 7 (block_code -> print_data .)
    DECIMALTYPE     reduce using rule 7 (block_code -> print_data .)
    INTTYPE         reduce using rule 7 (block_code -> print_data .)
    BOOLTYPE        reduce using rule 7 (block_code -> print_data .)
    VARIABLE        reduce using rule 7 (block_code -> print_data .)
    STATIC          reduce using rule 7 (block_code -> print_data .)
    WRITE           reduce using rule 7 (block_code -> print_data .)
    LPARENT         reduce using rule 7 (block_code -> print_data .)
    ENUM            reduce using rule 7 (block_code -> print_data .)
    IF              reduce using rule 7 (block_code -> print_data .)
    STACK           reduce using rule 7 (block_code -> print_data .)
    QUEUE           reduce using rule 7 (block_code -> print_data .)
    CONST           reduce using rule 7 (block_code -> print_data .)
    THREAD          reduce using rule 7 (block_code -> print_data .)
    TRY             reduce using rule 7 (block_code -> print_data .)
    LIST            reduce using rule 7 (block_code -> print_data .)
    FOR             reduce using rule 7 (block_code -> print_data .)
    FOREACH         reduce using rule 7 (block_code -> print_data .)
    WHILE           reduce using rule 7 (block_code -> print_data .)
    DO              reduce using rule 7 (block_code -> print_data .)
    PUBLIC          reduce using rule 7 (block_code -> print_data .)
    PRIVATE         reduce using rule 7 (block_code -> print_data .)
    RKEY            reduce using rule 7 (block_code -> print_data .)
    $end            reduce using rule 7 (block_code -> print_data .)


state 37

    (8) block_code -> array_assignation .

    PRINT           reduce using rule 8 (block_code -> array_assignation .)
    CHARTYPE        reduce using rule 8 (block_code -> array_assignation .)
    STRINGTYPE      reduce using rule 8 (block_code -> array_assignation .)
    FLOATTYPE       reduce using rule 8 (block_code -> array_assignation .)
    DECIMALTYPE     reduce using rule 8 (block_code -> array_assignation .)
    INTTYPE         reduce using rule 8 (block_code -> array_assignation .)
    BOOLTYPE        reduce using rule 8 (block_code -> array_assignation .)
    VARIABLE        reduce using rule 8 (block_code -> array_assignation .)
    STATIC          reduce using rule 8 (block_code -> array_assignation .)
    WRITE           reduce using rule 8 (block_code -> array_assignation .)
    LPARENT         reduce using rule 8 (block_code -> array_assignation .)
    ENUM            reduce using rule 8 (block_code -> array_assignation .)
    IF              reduce using rule 8 (block_code -> array_assignation .)
    STACK           reduce using rule 8 (block_code -> array_assignation .)
    QUEUE           reduce using rule 8 (block_code -> array_assignation .)
    CONST           reduce using rule 8 (block_code -> array_assignation .)
    THREAD          reduce using rule 8 (block_code -> array_assignation .)
    TRY             reduce using rule 8 (block_code -> array_assignation .)
    LIST            reduce using rule 8 (block_code -> array_assignation .)
    FOR             reduce using rule 8 (block_code -> array_assignation .)
    FOREACH         reduce using rule 8 (block_code -> array_assignation .)
    WHILE           reduce using rule 8 (block_code -> array_assignation .)
    DO              reduce using rule 8 (block_code -> array_assignation .)
    PUBLIC          reduce using rule 8 (block_code -> array_assignation .)
    PRIVATE         reduce using rule 8 (block_code -> array_assignation .)
    RKEY            reduce using rule 8 (block_code -> array_assignation .)
    $end            reduce using rule 8 (block_code -> array_assignation .)


state 38

    (9) block_code -> array_value_assign .

    PRINT           reduce using rule 9 (block_code -> array_value_assign .)
    CHARTYPE        reduce using rule 9 (block_code -> array_value_assign .)
    STRINGTYPE      reduce using rule 9 (block_code -> array_value_assign .)
    FLOATTYPE       reduce using rule 9 (block_code -> array_value_assign .)
    DECIMALTYPE     reduce using rule 9 (block_code -> array_value_assign .)
    INTTYPE         reduce using rule 9 (block_code -> array_value_assign .)
    BOOLTYPE        reduce using rule 9 (block_code -> array_value_assign .)
    VARIABLE        reduce using rule 9 (block_code -> array_value_assign .)
    STATIC          reduce using rule 9 (block_code -> array_value_assign .)
    WRITE           reduce using rule 9 (block_code -> array_value_assign .)
    LPARENT         reduce using rule 9 (block_code -> array_value_assign .)
    ENUM            reduce using rule 9 (block_code -> array_value_assign .)
    IF              reduce using rule 9 (block_code -> array_value_assign .)
    STACK           reduce using rule 9 (block_code -> array_value_assign .)
    QUEUE           reduce using rule 9 (block_code -> array_value_assign .)
    CONST           reduce using rule 9 (block_code -> array_value_assign .)
    THREAD          reduce using rule 9 (block_code -> array_value_assign .)
    TRY             reduce using rule 9 (block_code -> array_value_assign .)
    LIST            reduce using rule 9 (block_code -> array_value_assign .)
    FOR             reduce using rule 9 (block_code -> array_value_assign .)
    FOREACH         reduce using rule 9 (block_code -> array_value_assign .)
    WHILE           reduce using rule 9 (block_code -> array_value_assign .)
    DO              reduce using rule 9 (block_code -> array_value_assign .)
    PUBLIC          reduce using rule 9 (block_code -> array_value_assign .)
    PRIVATE         reduce using rule 9 (block_code -> array_value_assign .)
    RKEY            reduce using rule 9 (block_code -> array_value_assign .)
    $end            reduce using rule 9 (block_code -> array_value_assign .)


state 39

    (10) block_code -> array_indexing .

    PRINT           reduce using rule 10 (block_code -> array_indexing .)
    CHARTYPE        reduce using rule 10 (block_code -> array_indexing .)
    STRINGTYPE      reduce using rule 10 (block_code -> array_indexing .)
    FLOATTYPE       reduce using rule 10 (block_code -> array_indexing .)
    DECIMALTYPE     reduce using rule 10 (block_code -> array_indexing .)
    INTTYPE         reduce using rule 10 (block_code -> array_indexing .)
    BOOLTYPE        reduce using rule 10 (block_code -> array_indexing .)
    VARIABLE        reduce using rule 10 (block_code -> array_indexing .)
    STATIC          reduce using rule 10 (block_code -> array_indexing .)
    WRITE           reduce using rule 10 (block_code -> array_indexing .)
    LPARENT         reduce using rule 10 (block_code -> array_indexing .)
    ENUM            reduce using rule 10 (block_code -> array_indexing .)
    IF              reduce using rule 10 (block_code -> array_indexing .)
    STACK           reduce using rule 10 (block_code -> array_indexing .)
    QUEUE           reduce using rule 10 (block_code -> array_indexing .)
    CONST           reduce using rule 10 (block_code -> array_indexing .)
    THREAD          reduce using rule 10 (block_code -> array_indexing .)
    TRY             reduce using rule 10 (block_code -> array_indexing .)
    LIST            reduce using rule 10 (block_code -> array_indexing .)
    FOR             reduce using rule 10 (block_code -> array_indexing .)
    FOREACH         reduce using rule 10 (block_code -> array_indexing .)
    WHILE           reduce using rule 10 (block_code -> array_indexing .)
    DO              reduce using rule 10 (block_code -> array_indexing .)
    PUBLIC          reduce using rule 10 (block_code -> array_indexing .)
    PRIVATE         reduce using rule 10 (block_code -> array_indexing .)
    RKEY            reduce using rule 10 (block_code -> array_indexing .)
    $end            reduce using rule 10 (block_code -> array_indexing .)


state 40

    (11) block_code -> thread_main .

    PRINT           reduce using rule 11 (block_code -> thread_main .)
    CHARTYPE        reduce using rule 11 (block_code -> thread_main .)
    STRINGTYPE      reduce using rule 11 (block_code -> thread_main .)
    FLOATTYPE       reduce using rule 11 (block_code -> thread_main .)
    DECIMALTYPE     reduce using rule 11 (block_code -> thread_main .)
    INTTYPE         reduce using rule 11 (block_code -> thread_main .)
    BOOLTYPE        reduce using rule 11 (block_code -> thread_main .)
    VARIABLE        reduce using rule 11 (block_code -> thread_main .)
    STATIC          reduce using rule 11 (block_code -> thread_main .)
    WRITE           reduce using rule 11 (block_code -> thread_main .)
    LPARENT         reduce using rule 11 (block_code -> thread_main .)
    ENUM            reduce using rule 11 (block_code -> thread_main .)
    IF              reduce using rule 11 (block_code -> thread_main .)
    STACK           reduce using rule 11 (block_code -> thread_main .)
    QUEUE           reduce using rule 11 (block_code -> thread_main .)
    CONST           reduce using rule 11 (block_code -> thread_main .)
    THREAD          reduce using rule 11 (block_code -> thread_main .)
    TRY             reduce using rule 11 (block_code -> thread_main .)
    LIST            reduce using rule 11 (block_code -> thread_main .)
    FOR             reduce using rule 11 (block_code -> thread_main .)
    FOREACH         reduce using rule 11 (block_code -> thread_main .)
    WHILE           reduce using rule 11 (block_code -> thread_main .)
    DO              reduce using rule 11 (block_code -> thread_main .)
    PUBLIC          reduce using rule 11 (block_code -> thread_main .)
    PRIVATE         reduce using rule 11 (block_code -> thread_main .)
    RKEY            reduce using rule 11 (block_code -> thread_main .)
    $end            reduce using rule 11 (block_code -> thread_main .)


state 41

    (12) block_code -> concurrent_method .

    PRINT           reduce using rule 12 (block_code -> concurrent_method .)
    CHARTYPE        reduce using rule 12 (block_code -> concurrent_method .)
    STRINGTYPE      reduce using rule 12 (block_code -> concurrent_method .)
    FLOATTYPE       reduce using rule 12 (block_code -> concurrent_method .)
    DECIMALTYPE     reduce using rule 12 (block_code -> concurrent_method .)
    INTTYPE         reduce using rule 12 (block_code -> concurrent_method .)
    BOOLTYPE        reduce using rule 12 (block_code -> concurrent_method .)
    VARIABLE        reduce using rule 12 (block_code -> concurrent_method .)
    STATIC          reduce using rule 12 (block_code -> concurrent_method .)
    WRITE           reduce using rule 12 (block_code -> concurrent_method .)
    LPARENT         reduce using rule 12 (block_code -> concurrent_method .)
    ENUM            reduce using rule 12 (block_code -> concurrent_method .)
    IF              reduce using rule 12 (block_code -> concurrent_method .)
    STACK           reduce using rule 12 (block_code -> concurrent_method .)
    QUEUE           reduce using rule 12 (block_code -> concurrent_method .)
    CONST           reduce using rule 12 (block_code -> concurrent_method .)
    THREAD          reduce using rule 12 (block_code -> concurrent_method .)
    TRY             reduce using rule 12 (block_code -> concurrent_method .)
    LIST            reduce using rule 12 (block_code -> concurrent_method .)
    FOR             reduce using rule 12 (block_code -> concurrent_method .)
    FOREACH         reduce using rule 12 (block_code -> concurrent_method .)
    WHILE           reduce using rule 12 (block_code -> concurrent_method .)
    DO              reduce using rule 12 (block_code -> concurrent_method .)
    PUBLIC          reduce using rule 12 (block_code -> concurrent_method .)
    PRIVATE         reduce using rule 12 (block_code -> concurrent_method .)
    RKEY            reduce using rule 12 (block_code -> concurrent_method .)
    $end            reduce using rule 12 (block_code -> concurrent_method .)


state 42

    (13) block_code -> block_try_catch .

    PRINT           reduce using rule 13 (block_code -> block_try_catch .)
    CHARTYPE        reduce using rule 13 (block_code -> block_try_catch .)
    STRINGTYPE      reduce using rule 13 (block_code -> block_try_catch .)
    FLOATTYPE       reduce using rule 13 (block_code -> block_try_catch .)
    DECIMALTYPE     reduce using rule 13 (block_code -> block_try_catch .)
    INTTYPE         reduce using rule 13 (block_code -> block_try_catch .)
    BOOLTYPE        reduce using rule 13 (block_code -> block_try_catch .)
    VARIABLE        reduce using rule 13 (block_code -> block_try_catch .)
    STATIC          reduce using rule 13 (block_code -> block_try_catch .)
    WRITE           reduce using rule 13 (block_code -> block_try_catch .)
    LPARENT         reduce using rule 13 (block_code -> block_try_catch .)
    ENUM            reduce using rule 13 (block_code -> block_try_catch .)
    IF              reduce using rule 13 (block_code -> block_try_catch .)
    STACK           reduce using rule 13 (block_code -> block_try_catch .)
    QUEUE           reduce using rule 13 (block_code -> block_try_catch .)
    CONST           reduce using rule 13 (block_code -> block_try_catch .)
    THREAD          reduce using rule 13 (block_code -> block_try_catch .)
    TRY             reduce using rule 13 (block_code -> block_try_catch .)
    LIST            reduce using rule 13 (block_code -> block_try_catch .)
    FOR             reduce using rule 13 (block_code -> block_try_catch .)
    FOREACH         reduce using rule 13 (block_code -> block_try_catch .)
    WHILE           reduce using rule 13 (block_code -> block_try_catch .)
    DO              reduce using rule 13 (block_code -> block_try_catch .)
    PUBLIC          reduce using rule 13 (block_code -> block_try_catch .)
    PRIVATE         reduce using rule 13 (block_code -> block_try_catch .)
    RKEY            reduce using rule 13 (block_code -> block_try_catch .)
    $end            reduce using rule 13 (block_code -> block_try_catch .)


state 43

    (14) block_code -> lists .

    PRINT           reduce using rule 14 (block_code -> lists .)
    CHARTYPE        reduce using rule 14 (block_code -> lists .)
    STRINGTYPE      reduce using rule 14 (block_code -> lists .)
    FLOATTYPE       reduce using rule 14 (block_code -> lists .)
    DECIMALTYPE     reduce using rule 14 (block_code -> lists .)
    INTTYPE         reduce using rule 14 (block_code -> lists .)
    BOOLTYPE        reduce using rule 14 (block_code -> lists .)
    VARIABLE        reduce using rule 14 (block_code -> lists .)
    STATIC          reduce using rule 14 (block_code -> lists .)
    WRITE           reduce using rule 14 (block_code -> lists .)
    LPARENT         reduce using rule 14 (block_code -> lists .)
    ENUM            reduce using rule 14 (block_code -> lists .)
    IF              reduce using rule 14 (block_code -> lists .)
    STACK           reduce using rule 14 (block_code -> lists .)
    QUEUE           reduce using rule 14 (block_code -> lists .)
    CONST           reduce using rule 14 (block_code -> lists .)
    THREAD          reduce using rule 14 (block_code -> lists .)
    TRY             reduce using rule 14 (block_code -> lists .)
    LIST            reduce using rule 14 (block_code -> lists .)
    FOR             reduce using rule 14 (block_code -> lists .)
    FOREACH         reduce using rule 14 (block_code -> lists .)
    WHILE           reduce using rule 14 (block_code -> lists .)
    DO              reduce using rule 14 (block_code -> lists .)
    PUBLIC          reduce using rule 14 (block_code -> lists .)
    PRIVATE         reduce using rule 14 (block_code -> lists .)
    RKEY            reduce using rule 14 (block_code -> lists .)
    $end            reduce using rule 14 (block_code -> lists .)


state 44

    (15) block_code -> functions_list .

    PRINT           reduce using rule 15 (block_code -> functions_list .)
    CHARTYPE        reduce using rule 15 (block_code -> functions_list .)
    STRINGTYPE      reduce using rule 15 (block_code -> functions_list .)
    FLOATTYPE       reduce using rule 15 (block_code -> functions_list .)
    DECIMALTYPE     reduce using rule 15 (block_code -> functions_list .)
    INTTYPE         reduce using rule 15 (block_code -> functions_list .)
    BOOLTYPE        reduce using rule 15 (block_code -> functions_list .)
    VARIABLE        reduce using rule 15 (block_code -> functions_list .)
    STATIC          reduce using rule 15 (block_code -> functions_list .)
    WRITE           reduce using rule 15 (block_code -> functions_list .)
    LPARENT         reduce using rule 15 (block_code -> functions_list .)
    ENUM            reduce using rule 15 (block_code -> functions_list .)
    IF              reduce using rule 15 (block_code -> functions_list .)
    STACK           reduce using rule 15 (block_code -> functions_list .)
    QUEUE           reduce using rule 15 (block_code -> functions_list .)
    CONST           reduce using rule 15 (block_code -> functions_list .)
    THREAD          reduce using rule 15 (block_code -> functions_list .)
    TRY             reduce using rule 15 (block_code -> functions_list .)
    LIST            reduce using rule 15 (block_code -> functions_list .)
    FOR             reduce using rule 15 (block_code -> functions_list .)
    FOREACH         reduce using rule 15 (block_code -> functions_list .)
    WHILE           reduce using rule 15 (block_code -> functions_list .)
    DO              reduce using rule 15 (block_code -> functions_list .)
    PUBLIC          reduce using rule 15 (block_code -> functions_list .)
    PRIVATE         reduce using rule 15 (block_code -> functions_list .)
    RKEY            reduce using rule 15 (block_code -> functions_list .)
    $end            reduce using rule 15 (block_code -> functions_list .)


state 45

    (16) block_code -> statement_lambda .

    PRINT           reduce using rule 16 (block_code -> statement_lambda .)
    CHARTYPE        reduce using rule 16 (block_code -> statement_lambda .)
    STRINGTYPE      reduce using rule 16 (block_code -> statement_lambda .)
    FLOATTYPE       reduce using rule 16 (block_code -> statement_lambda .)
    DECIMALTYPE     reduce using rule 16 (block_code -> statement_lambda .)
    INTTYPE         reduce using rule 16 (block_code -> statement_lambda .)
    BOOLTYPE        reduce using rule 16 (block_code -> statement_lambda .)
    VARIABLE        reduce using rule 16 (block_code -> statement_lambda .)
    STATIC          reduce using rule 16 (block_code -> statement_lambda .)
    WRITE           reduce using rule 16 (block_code -> statement_lambda .)
    LPARENT         reduce using rule 16 (block_code -> statement_lambda .)
    ENUM            reduce using rule 16 (block_code -> statement_lambda .)
    IF              reduce using rule 16 (block_code -> statement_lambda .)
    STACK           reduce using rule 16 (block_code -> statement_lambda .)
    QUEUE           reduce using rule 16 (block_code -> statement_lambda .)
    CONST           reduce using rule 16 (block_code -> statement_lambda .)
    THREAD          reduce using rule 16 (block_code -> statement_lambda .)
    TRY             reduce using rule 16 (block_code -> statement_lambda .)
    LIST            reduce using rule 16 (block_code -> statement_lambda .)
    FOR             reduce using rule 16 (block_code -> statement_lambda .)
    FOREACH         reduce using rule 16 (block_code -> statement_lambda .)
    WHILE           reduce using rule 16 (block_code -> statement_lambda .)
    DO              reduce using rule 16 (block_code -> statement_lambda .)
    PUBLIC          reduce using rule 16 (block_code -> statement_lambda .)
    PRIVATE         reduce using rule 16 (block_code -> statement_lambda .)
    RKEY            reduce using rule 16 (block_code -> statement_lambda .)
    $end            reduce using rule 16 (block_code -> statement_lambda .)


state 46

    (17) block_code -> enums .

    PRINT           reduce using rule 17 (block_code -> enums .)
    CHARTYPE        reduce using rule 17 (block_code -> enums .)
    STRINGTYPE      reduce using rule 17 (block_code -> enums .)
    FLOATTYPE       reduce using rule 17 (block_code -> enums .)
    DECIMALTYPE     reduce using rule 17 (block_code -> enums .)
    INTTYPE         reduce using rule 17 (block_code -> enums .)
    BOOLTYPE        reduce using rule 17 (block_code -> enums .)
    VARIABLE        reduce using rule 17 (block_code -> enums .)
    STATIC          reduce using rule 17 (block_code -> enums .)
    WRITE           reduce using rule 17 (block_code -> enums .)
    LPARENT         reduce using rule 17 (block_code -> enums .)
    ENUM            reduce using rule 17 (block_code -> enums .)
    IF              reduce using rule 17 (block_code -> enums .)
    STACK           reduce using rule 17 (block_code -> enums .)
    QUEUE           reduce using rule 17 (block_code -> enums .)
    CONST           reduce using rule 17 (block_code -> enums .)
    THREAD          reduce using rule 17 (block_code -> enums .)
    TRY             reduce using rule 17 (block_code -> enums .)
    LIST            reduce using rule 17 (block_code -> enums .)
    FOR             reduce using rule 17 (block_code -> enums .)
    FOREACH         reduce using rule 17 (block_code -> enums .)
    WHILE           reduce using rule 17 (block_code -> enums .)
    DO              reduce using rule 17 (block_code -> enums .)
    PUBLIC          reduce using rule 17 (block_code -> enums .)
    PRIVATE         reduce using rule 17 (block_code -> enums .)
    RKEY            reduce using rule 17 (block_code -> enums .)
    $end            reduce using rule 17 (block_code -> enums .)


state 47

    (18) block_code -> normal_if .

    PRINT           reduce using rule 18 (block_code -> normal_if .)
    CHARTYPE        reduce using rule 18 (block_code -> normal_if .)
    STRINGTYPE      reduce using rule 18 (block_code -> normal_if .)
    FLOATTYPE       reduce using rule 18 (block_code -> normal_if .)
    DECIMALTYPE     reduce using rule 18 (block_code -> normal_if .)
    INTTYPE         reduce using rule 18 (block_code -> normal_if .)
    BOOLTYPE        reduce using rule 18 (block_code -> normal_if .)
    VARIABLE        reduce using rule 18 (block_code -> normal_if .)
    STATIC          reduce using rule 18 (block_code -> normal_if .)
    WRITE           reduce using rule 18 (block_code -> normal_if .)
    LPARENT         reduce using rule 18 (block_code -> normal_if .)
    ENUM            reduce using rule 18 (block_code -> normal_if .)
    IF              reduce using rule 18 (block_code -> normal_if .)
    STACK           reduce using rule 18 (block_code -> normal_if .)
    QUEUE           reduce using rule 18 (block_code -> normal_if .)
    CONST           reduce using rule 18 (block_code -> normal_if .)
    THREAD          reduce using rule 18 (block_code -> normal_if .)
    TRY             reduce using rule 18 (block_code -> normal_if .)
    LIST            reduce using rule 18 (block_code -> normal_if .)
    FOR             reduce using rule 18 (block_code -> normal_if .)
    FOREACH         reduce using rule 18 (block_code -> normal_if .)
    WHILE           reduce using rule 18 (block_code -> normal_if .)
    DO              reduce using rule 18 (block_code -> normal_if .)
    PUBLIC          reduce using rule 18 (block_code -> normal_if .)
    PRIVATE         reduce using rule 18 (block_code -> normal_if .)
    RKEY            reduce using rule 18 (block_code -> normal_if .)
    $end            reduce using rule 18 (block_code -> normal_if .)


state 48

    (19) block_code -> block_for .

    PRINT           reduce using rule 19 (block_code -> block_for .)
    CHARTYPE        reduce using rule 19 (block_code -> block_for .)
    STRINGTYPE      reduce using rule 19 (block_code -> block_for .)
    FLOATTYPE       reduce using rule 19 (block_code -> block_for .)
    DECIMALTYPE     reduce using rule 19 (block_code -> block_for .)
    INTTYPE         reduce using rule 19 (block_code -> block_for .)
    BOOLTYPE        reduce using rule 19 (block_code -> block_for .)
    VARIABLE        reduce using rule 19 (block_code -> block_for .)
    STATIC          reduce using rule 19 (block_code -> block_for .)
    WRITE           reduce using rule 19 (block_code -> block_for .)
    LPARENT         reduce using rule 19 (block_code -> block_for .)
    ENUM            reduce using rule 19 (block_code -> block_for .)
    IF              reduce using rule 19 (block_code -> block_for .)
    STACK           reduce using rule 19 (block_code -> block_for .)
    QUEUE           reduce using rule 19 (block_code -> block_for .)
    CONST           reduce using rule 19 (block_code -> block_for .)
    THREAD          reduce using rule 19 (block_code -> block_for .)
    TRY             reduce using rule 19 (block_code -> block_for .)
    LIST            reduce using rule 19 (block_code -> block_for .)
    FOR             reduce using rule 19 (block_code -> block_for .)
    FOREACH         reduce using rule 19 (block_code -> block_for .)
    WHILE           reduce using rule 19 (block_code -> block_for .)
    DO              reduce using rule 19 (block_code -> block_for .)
    PUBLIC          reduce using rule 19 (block_code -> block_for .)
    PRIVATE         reduce using rule 19 (block_code -> block_for .)
    RKEY            reduce using rule 19 (block_code -> block_for .)
    $end            reduce using rule 19 (block_code -> block_for .)


state 49

    (20) block_code -> block_while .

    PRINT           reduce using rule 20 (block_code -> block_while .)
    CHARTYPE        reduce using rule 20 (block_code -> block_while .)
    STRINGTYPE      reduce using rule 20 (block_code -> block_while .)
    FLOATTYPE       reduce using rule 20 (block_code -> block_while .)
    DECIMALTYPE     reduce using rule 20 (block_code -> block_while .)
    INTTYPE         reduce using rule 20 (block_code -> block_while .)
    BOOLTYPE        reduce using rule 20 (block_code -> block_while .)
    VARIABLE        reduce using rule 20 (block_code -> block_while .)
    STATIC          reduce using rule 20 (block_code -> block_while .)
    WRITE           reduce using rule 20 (block_code -> block_while .)
    LPARENT         reduce using rule 20 (block_code -> block_while .)
    ENUM            reduce using rule 20 (block_code -> block_while .)
    IF              reduce using rule 20 (block_code -> block_while .)
    STACK           reduce using rule 20 (block_code -> block_while .)
    QUEUE           reduce using rule 20 (block_code -> block_while .)
    CONST           reduce using rule 20 (block_code -> block_while .)
    THREAD          reduce using rule 20 (block_code -> block_while .)
    TRY             reduce using rule 20 (block_code -> block_while .)
    LIST            reduce using rule 20 (block_code -> block_while .)
    FOR             reduce using rule 20 (block_code -> block_while .)
    FOREACH         reduce using rule 20 (block_code -> block_while .)
    WHILE           reduce using rule 20 (block_code -> block_while .)
    DO              reduce using rule 20 (block_code -> block_while .)
    PUBLIC          reduce using rule 20 (block_code -> block_while .)
    PRIVATE         reduce using rule 20 (block_code -> block_while .)
    RKEY            reduce using rule 20 (block_code -> block_while .)
    $end            reduce using rule 20 (block_code -> block_while .)


state 50

    (21) block_code -> stack_struct .

    PRINT           reduce using rule 21 (block_code -> stack_struct .)
    CHARTYPE        reduce using rule 21 (block_code -> stack_struct .)
    STRINGTYPE      reduce using rule 21 (block_code -> stack_struct .)
    FLOATTYPE       reduce using rule 21 (block_code -> stack_struct .)
    DECIMALTYPE     reduce using rule 21 (block_code -> stack_struct .)
    INTTYPE         reduce using rule 21 (block_code -> stack_struct .)
    BOOLTYPE        reduce using rule 21 (block_code -> stack_struct .)
    VARIABLE        reduce using rule 21 (block_code -> stack_struct .)
    STATIC          reduce using rule 21 (block_code -> stack_struct .)
    WRITE           reduce using rule 21 (block_code -> stack_struct .)
    LPARENT         reduce using rule 21 (block_code -> stack_struct .)
    ENUM            reduce using rule 21 (block_code -> stack_struct .)
    IF              reduce using rule 21 (block_code -> stack_struct .)
    STACK           reduce using rule 21 (block_code -> stack_struct .)
    QUEUE           reduce using rule 21 (block_code -> stack_struct .)
    CONST           reduce using rule 21 (block_code -> stack_struct .)
    THREAD          reduce using rule 21 (block_code -> stack_struct .)
    TRY             reduce using rule 21 (block_code -> stack_struct .)
    LIST            reduce using rule 21 (block_code -> stack_struct .)
    FOR             reduce using rule 21 (block_code -> stack_struct .)
    FOREACH         reduce using rule 21 (block_code -> stack_struct .)
    WHILE           reduce using rule 21 (block_code -> stack_struct .)
    DO              reduce using rule 21 (block_code -> stack_struct .)
    PUBLIC          reduce using rule 21 (block_code -> stack_struct .)
    PRIVATE         reduce using rule 21 (block_code -> stack_struct .)
    RKEY            reduce using rule 21 (block_code -> stack_struct .)
    $end            reduce using rule 21 (block_code -> stack_struct .)


state 51

    (22) block_code -> functions_stack .

    PRINT           reduce using rule 22 (block_code -> functions_stack .)
    CHARTYPE        reduce using rule 22 (block_code -> functions_stack .)
    STRINGTYPE      reduce using rule 22 (block_code -> functions_stack .)
    FLOATTYPE       reduce using rule 22 (block_code -> functions_stack .)
    DECIMALTYPE     reduce using rule 22 (block_code -> functions_stack .)
    INTTYPE         reduce using rule 22 (block_code -> functions_stack .)
    BOOLTYPE        reduce using rule 22 (block_code -> functions_stack .)
    VARIABLE        reduce using rule 22 (block_code -> functions_stack .)
    STATIC          reduce using rule 22 (block_code -> functions_stack .)
    WRITE           reduce using rule 22 (block_code -> functions_stack .)
    LPARENT         reduce using rule 22 (block_code -> functions_stack .)
    ENUM            reduce using rule 22 (block_code -> functions_stack .)
    IF              reduce using rule 22 (block_code -> functions_stack .)
    STACK           reduce using rule 22 (block_code -> functions_stack .)
    QUEUE           reduce using rule 22 (block_code -> functions_stack .)
    CONST           reduce using rule 22 (block_code -> functions_stack .)
    THREAD          reduce using rule 22 (block_code -> functions_stack .)
    TRY             reduce using rule 22 (block_code -> functions_stack .)
    LIST            reduce using rule 22 (block_code -> functions_stack .)
    FOR             reduce using rule 22 (block_code -> functions_stack .)
    FOREACH         reduce using rule 22 (block_code -> functions_stack .)
    WHILE           reduce using rule 22 (block_code -> functions_stack .)
    DO              reduce using rule 22 (block_code -> functions_stack .)
    PUBLIC          reduce using rule 22 (block_code -> functions_stack .)
    PRIVATE         reduce using rule 22 (block_code -> functions_stack .)
    RKEY            reduce using rule 22 (block_code -> functions_stack .)
    $end            reduce using rule 22 (block_code -> functions_stack .)


state 52

    (23) block_code -> queue_struct .

    PRINT           reduce using rule 23 (block_code -> queue_struct .)
    CHARTYPE        reduce using rule 23 (block_code -> queue_struct .)
    STRINGTYPE      reduce using rule 23 (block_code -> queue_struct .)
    FLOATTYPE       reduce using rule 23 (block_code -> queue_struct .)
    DECIMALTYPE     reduce using rule 23 (block_code -> queue_struct .)
    INTTYPE         reduce using rule 23 (block_code -> queue_struct .)
    BOOLTYPE        reduce using rule 23 (block_code -> queue_struct .)
    VARIABLE        reduce using rule 23 (block_code -> queue_struct .)
    STATIC          reduce using rule 23 (block_code -> queue_struct .)
    WRITE           reduce using rule 23 (block_code -> queue_struct .)
    LPARENT         reduce using rule 23 (block_code -> queue_struct .)
    ENUM            reduce using rule 23 (block_code -> queue_struct .)
    IF              reduce using rule 23 (block_code -> queue_struct .)
    STACK           reduce using rule 23 (block_code -> queue_struct .)
    QUEUE           reduce using rule 23 (block_code -> queue_struct .)
    CONST           reduce using rule 23 (block_code -> queue_struct .)
    THREAD          reduce using rule 23 (block_code -> queue_struct .)
    TRY             reduce using rule 23 (block_code -> queue_struct .)
    LIST            reduce using rule 23 (block_code -> queue_struct .)
    FOR             reduce using rule 23 (block_code -> queue_struct .)
    FOREACH         reduce using rule 23 (block_code -> queue_struct .)
    WHILE           reduce using rule 23 (block_code -> queue_struct .)
    DO              reduce using rule 23 (block_code -> queue_struct .)
    PUBLIC          reduce using rule 23 (block_code -> queue_struct .)
    PRIVATE         reduce using rule 23 (block_code -> queue_struct .)
    RKEY            reduce using rule 23 (block_code -> queue_struct .)
    $end            reduce using rule 23 (block_code -> queue_struct .)


state 53

    (24) block_code -> functions_queue .

    PRINT           reduce using rule 24 (block_code -> functions_queue .)
    CHARTYPE        reduce using rule 24 (block_code -> functions_queue .)
    STRINGTYPE      reduce using rule 24 (block_code -> functions_queue .)
    FLOATTYPE       reduce using rule 24 (block_code -> functions_queue .)
    DECIMALTYPE     reduce using rule 24 (block_code -> functions_queue .)
    INTTYPE         reduce using rule 24 (block_code -> functions_queue .)
    BOOLTYPE        reduce using rule 24 (block_code -> functions_queue .)
    VARIABLE        reduce using rule 24 (block_code -> functions_queue .)
    STATIC          reduce using rule 24 (block_code -> functions_queue .)
    WRITE           reduce using rule 24 (block_code -> functions_queue .)
    LPARENT         reduce using rule 24 (block_code -> functions_queue .)
    ENUM            reduce using rule 24 (block_code -> functions_queue .)
    IF              reduce using rule 24 (block_code -> functions_queue .)
    STACK           reduce using rule 24 (block_code -> functions_queue .)
    QUEUE           reduce using rule 24 (block_code -> functions_queue .)
    CONST           reduce using rule 24 (block_code -> functions_queue .)
    THREAD          reduce using rule 24 (block_code -> functions_queue .)
    TRY             reduce using rule 24 (block_code -> functions_queue .)
    LIST            reduce using rule 24 (block_code -> functions_queue .)
    FOR             reduce using rule 24 (block_code -> functions_queue .)
    FOREACH         reduce using rule 24 (block_code -> functions_queue .)
    WHILE           reduce using rule 24 (block_code -> functions_queue .)
    DO              reduce using rule 24 (block_code -> functions_queue .)
    PUBLIC          reduce using rule 24 (block_code -> functions_queue .)
    PRIVATE         reduce using rule 24 (block_code -> functions_queue .)
    RKEY            reduce using rule 24 (block_code -> functions_queue .)
    $end            reduce using rule 24 (block_code -> functions_queue .)


state 54

    (114) def_const_or_var -> constant_assignation .

    PRINT           reduce using rule 114 (def_const_or_var -> constant_assignation .)
    CHARTYPE        reduce using rule 114 (def_const_or_var -> constant_assignation .)
    STRINGTYPE      reduce using rule 114 (def_const_or_var -> constant_assignation .)
    FLOATTYPE       reduce using rule 114 (def_const_or_var -> constant_assignation .)
    DECIMALTYPE     reduce using rule 114 (def_const_or_var -> constant_assignation .)
    INTTYPE         reduce using rule 114 (def_const_or_var -> constant_assignation .)
    BOOLTYPE        reduce using rule 114 (def_const_or_var -> constant_assignation .)
    VARIABLE        reduce using rule 114 (def_const_or_var -> constant_assignation .)
    STATIC          reduce using rule 114 (def_const_or_var -> constant_assignation .)
    WRITE           reduce using rule 114 (def_const_or_var -> constant_assignation .)
    LPARENT         reduce using rule 114 (def_const_or_var -> constant_assignation .)
    ENUM            reduce using rule 114 (def_const_or_var -> constant_assignation .)
    IF              reduce using rule 114 (def_const_or_var -> constant_assignation .)
    STACK           reduce using rule 114 (def_const_or_var -> constant_assignation .)
    QUEUE           reduce using rule 114 (def_const_or_var -> constant_assignation .)
    CONST           reduce using rule 114 (def_const_or_var -> constant_assignation .)
    THREAD          reduce using rule 114 (def_const_or_var -> constant_assignation .)
    TRY             reduce using rule 114 (def_const_or_var -> constant_assignation .)
    LIST            reduce using rule 114 (def_const_or_var -> constant_assignation .)
    FOR             reduce using rule 114 (def_const_or_var -> constant_assignation .)
    FOREACH         reduce using rule 114 (def_const_or_var -> constant_assignation .)
    WHILE           reduce using rule 114 (def_const_or_var -> constant_assignation .)
    DO              reduce using rule 114 (def_const_or_var -> constant_assignation .)
    PUBLIC          reduce using rule 114 (def_const_or_var -> constant_assignation .)
    PRIVATE         reduce using rule 114 (def_const_or_var -> constant_assignation .)
    RKEY            reduce using rule 114 (def_const_or_var -> constant_assignation .)
    $end            reduce using rule 114 (def_const_or_var -> constant_assignation .)


state 55

    (115) def_const_or_var -> variable_assignation .

    PRINT           reduce using rule 115 (def_const_or_var -> variable_assignation .)
    CHARTYPE        reduce using rule 115 (def_const_or_var -> variable_assignation .)
    STRINGTYPE      reduce using rule 115 (def_const_or_var -> variable_assignation .)
    FLOATTYPE       reduce using rule 115 (def_const_or_var -> variable_assignation .)
    DECIMALTYPE     reduce using rule 115 (def_const_or_var -> variable_assignation .)
    INTTYPE         reduce using rule 115 (def_const_or_var -> variable_assignation .)
    BOOLTYPE        reduce using rule 115 (def_const_or_var -> variable_assignation .)
    VARIABLE        reduce using rule 115 (def_const_or_var -> variable_assignation .)
    STATIC          reduce using rule 115 (def_const_or_var -> variable_assignation .)
    WRITE           reduce using rule 115 (def_const_or_var -> variable_assignation .)
    LPARENT         reduce using rule 115 (def_const_or_var -> variable_assignation .)
    ENUM            reduce using rule 115 (def_const_or_var -> variable_assignation .)
    IF              reduce using rule 115 (def_const_or_var -> variable_assignation .)
    STACK           reduce using rule 115 (def_const_or_var -> variable_assignation .)
    QUEUE           reduce using rule 115 (def_const_or_var -> variable_assignation .)
    CONST           reduce using rule 115 (def_const_or_var -> variable_assignation .)
    THREAD          reduce using rule 115 (def_const_or_var -> variable_assignation .)
    TRY             reduce using rule 115 (def_const_or_var -> variable_assignation .)
    LIST            reduce using rule 115 (def_const_or_var -> variable_assignation .)
    FOR             reduce using rule 115 (def_const_or_var -> variable_assignation .)
    FOREACH         reduce using rule 115 (def_const_or_var -> variable_assignation .)
    WHILE           reduce using rule 115 (def_const_or_var -> variable_assignation .)
    DO              reduce using rule 115 (def_const_or_var -> variable_assignation .)
    PUBLIC          reduce using rule 115 (def_const_or_var -> variable_assignation .)
    PRIVATE         reduce using rule 115 (def_const_or_var -> variable_assignation .)
    RKEY            reduce using rule 115 (def_const_or_var -> variable_assignation .)
    $end            reduce using rule 115 (def_const_or_var -> variable_assignation .)


state 56

    (44) print_data -> PRINT . LPARENT STRING RPARENT DOTANDCOMMA
    (45) print_data -> PRINT . LPARENT VARIABLE RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 113


state 57

    (55) array_assignation -> CHARTYPE . LBRACKET RBRACKET char_array_assignation DOTANDCOMMA

    LBRACKET        shift and go to state 114


state 58

    (57) array_assignation -> FLOATTYPE . LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
    (143) assignation_type_value_multiple -> FLOATTYPE . assignation_float_multiple
    (150) assignation_float_multiple -> . assignation_float
    (151) assignation_float_multiple -> . assignation_float COMMA assignation_float_multiple
    (132) assignation_float -> . VARIABLE ASSIGNATION FLOAT_NUMBER
    (133) assignation_float -> . VARIABLE ASSIGNATION VARIABLE
    (134) assignation_float -> . VARIABLE ASSIGNATION arithmetic_operation

    LBRACKET        shift and go to state 115
    VARIABLE        shift and go to state 118

    assignation_float_multiple     shift and go to state 116
    assignation_float              shift and go to state 117

state 59

    (58) array_assignation -> DECIMALTYPE . LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA

    LBRACKET        shift and go to state 119


state 60

    (59) array_assignation -> INTTYPE . LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
    (141) assignation_type_value_multiple -> INTTYPE . assignation_int_multiple
    (146) assignation_int_multiple -> . assignation_int
    (147) assignation_int_multiple -> . assignation_int COMMA assignation_int_multiple
    (127) assignation_int -> . VARIABLE ASSIGNATION INTEGER
    (128) assignation_int -> . VARIABLE ASSIGNATION VARIABLE
    (129) assignation_int -> . VARIABLE ASSIGNATION arithmetic_operation

    LBRACKET        shift and go to state 120
    VARIABLE        shift and go to state 123

    assignation_int_multiple       shift and go to state 121
    assignation_int                shift and go to state 122

state 61

    (60) array_assignation -> BOOLTYPE . LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
    (144) assignation_type_value_multiple -> BOOLTYPE . assignation_true_multiple
    (145) assignation_type_value_multiple -> BOOLTYPE . assignation_false_multiple
    (152) assignation_true_multiple -> . assignation_true
    (153) assignation_true_multiple -> . assignation_true COMMA assignation_true_multiple
    (154) assignation_false_multiple -> . assignation_false
    (155) assignation_false_multiple -> . assignation_false COMMA assignation_false_multiple
    (135) assignation_true -> . VARIABLE ASSIGNATION BOOLTRUE
    (136) assignation_true -> . VARIABLE ASSIGNATION VARIABLE
    (137) assignation_true -> . VARIABLE ASSIGNATION boolean_operation
    (138) assignation_false -> . VARIABLE ASSIGNATION BOOLFALSE
    (139) assignation_false -> . VARIABLE ASSIGNATION VARIABLE
    (140) assignation_false -> . VARIABLE ASSIGNATION boolean_operation

    LBRACKET        shift and go to state 124
    VARIABLE        shift and go to state 129

    assignation_true_multiple      shift and go to state 125
    assignation_false_multiple     shift and go to state 126
    assignation_true               shift and go to state 127
    assignation_false              shift and go to state 128

state 62

    (156) thread_main -> declaration_thread . declaration_thread thread_init thread_init thread_wait thread_wait
    (157) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (158) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA

    THREAD          shift and go to state 93

    declaration_thread             shift and go to state 130

state 63

    (162) concurrent_method -> WRITE .

    PRINT           reduce using rule 162 (concurrent_method -> WRITE .)
    CHARTYPE        reduce using rule 162 (concurrent_method -> WRITE .)
    STRINGTYPE      reduce using rule 162 (concurrent_method -> WRITE .)
    FLOATTYPE       reduce using rule 162 (concurrent_method -> WRITE .)
    DECIMALTYPE     reduce using rule 162 (concurrent_method -> WRITE .)
    INTTYPE         reduce using rule 162 (concurrent_method -> WRITE .)
    BOOLTYPE        reduce using rule 162 (concurrent_method -> WRITE .)
    VARIABLE        reduce using rule 162 (concurrent_method -> WRITE .)
    STATIC          reduce using rule 162 (concurrent_method -> WRITE .)
    WRITE           reduce using rule 162 (concurrent_method -> WRITE .)
    LPARENT         reduce using rule 162 (concurrent_method -> WRITE .)
    ENUM            reduce using rule 162 (concurrent_method -> WRITE .)
    IF              reduce using rule 162 (concurrent_method -> WRITE .)
    STACK           reduce using rule 162 (concurrent_method -> WRITE .)
    QUEUE           reduce using rule 162 (concurrent_method -> WRITE .)
    CONST           reduce using rule 162 (concurrent_method -> WRITE .)
    THREAD          reduce using rule 162 (concurrent_method -> WRITE .)
    TRY             reduce using rule 162 (concurrent_method -> WRITE .)
    LIST            reduce using rule 162 (concurrent_method -> WRITE .)
    FOR             reduce using rule 162 (concurrent_method -> WRITE .)
    FOREACH         reduce using rule 162 (concurrent_method -> WRITE .)
    WHILE           reduce using rule 162 (concurrent_method -> WRITE .)
    DO              reduce using rule 162 (concurrent_method -> WRITE .)
    PUBLIC          reduce using rule 162 (concurrent_method -> WRITE .)
    PRIVATE         reduce using rule 162 (concurrent_method -> WRITE .)
    RKEY            reduce using rule 162 (concurrent_method -> WRITE .)
    $end            reduce using rule 162 (concurrent_method -> WRITE .)
    RPARENT         reduce using rule 162 (concurrent_method -> WRITE .)


state 64

    (175) block_try_catch -> try_catch_simply .

    PRINT           reduce using rule 175 (block_try_catch -> try_catch_simply .)
    CHARTYPE        reduce using rule 175 (block_try_catch -> try_catch_simply .)
    STRINGTYPE      reduce using rule 175 (block_try_catch -> try_catch_simply .)
    FLOATTYPE       reduce using rule 175 (block_try_catch -> try_catch_simply .)
    DECIMALTYPE     reduce using rule 175 (block_try_catch -> try_catch_simply .)
    INTTYPE         reduce using rule 175 (block_try_catch -> try_catch_simply .)
    BOOLTYPE        reduce using rule 175 (block_try_catch -> try_catch_simply .)
    VARIABLE        reduce using rule 175 (block_try_catch -> try_catch_simply .)
    STATIC          reduce using rule 175 (block_try_catch -> try_catch_simply .)
    WRITE           reduce using rule 175 (block_try_catch -> try_catch_simply .)
    LPARENT         reduce using rule 175 (block_try_catch -> try_catch_simply .)
    ENUM            reduce using rule 175 (block_try_catch -> try_catch_simply .)
    IF              reduce using rule 175 (block_try_catch -> try_catch_simply .)
    STACK           reduce using rule 175 (block_try_catch -> try_catch_simply .)
    QUEUE           reduce using rule 175 (block_try_catch -> try_catch_simply .)
    CONST           reduce using rule 175 (block_try_catch -> try_catch_simply .)
    THREAD          reduce using rule 175 (block_try_catch -> try_catch_simply .)
    TRY             reduce using rule 175 (block_try_catch -> try_catch_simply .)
    LIST            reduce using rule 175 (block_try_catch -> try_catch_simply .)
    FOR             reduce using rule 175 (block_try_catch -> try_catch_simply .)
    FOREACH         reduce using rule 175 (block_try_catch -> try_catch_simply .)
    WHILE           reduce using rule 175 (block_try_catch -> try_catch_simply .)
    DO              reduce using rule 175 (block_try_catch -> try_catch_simply .)
    PUBLIC          reduce using rule 175 (block_try_catch -> try_catch_simply .)
    PRIVATE         reduce using rule 175 (block_try_catch -> try_catch_simply .)
    RKEY            reduce using rule 175 (block_try_catch -> try_catch_simply .)
    $end            reduce using rule 175 (block_try_catch -> try_catch_simply .)


state 65

    (176) block_try_catch -> try_catch_finally .

    PRINT           reduce using rule 176 (block_try_catch -> try_catch_finally .)
    CHARTYPE        reduce using rule 176 (block_try_catch -> try_catch_finally .)
    STRINGTYPE      reduce using rule 176 (block_try_catch -> try_catch_finally .)
    FLOATTYPE       reduce using rule 176 (block_try_catch -> try_catch_finally .)
    DECIMALTYPE     reduce using rule 176 (block_try_catch -> try_catch_finally .)
    INTTYPE         reduce using rule 176 (block_try_catch -> try_catch_finally .)
    BOOLTYPE        reduce using rule 176 (block_try_catch -> try_catch_finally .)
    VARIABLE        reduce using rule 176 (block_try_catch -> try_catch_finally .)
    STATIC          reduce using rule 176 (block_try_catch -> try_catch_finally .)
    WRITE           reduce using rule 176 (block_try_catch -> try_catch_finally .)
    LPARENT         reduce using rule 176 (block_try_catch -> try_catch_finally .)
    ENUM            reduce using rule 176 (block_try_catch -> try_catch_finally .)
    IF              reduce using rule 176 (block_try_catch -> try_catch_finally .)
    STACK           reduce using rule 176 (block_try_catch -> try_catch_finally .)
    QUEUE           reduce using rule 176 (block_try_catch -> try_catch_finally .)
    CONST           reduce using rule 176 (block_try_catch -> try_catch_finally .)
    THREAD          reduce using rule 176 (block_try_catch -> try_catch_finally .)
    TRY             reduce using rule 176 (block_try_catch -> try_catch_finally .)
    LIST            reduce using rule 176 (block_try_catch -> try_catch_finally .)
    FOR             reduce using rule 176 (block_try_catch -> try_catch_finally .)
    FOREACH         reduce using rule 176 (block_try_catch -> try_catch_finally .)
    WHILE           reduce using rule 176 (block_try_catch -> try_catch_finally .)
    DO              reduce using rule 176 (block_try_catch -> try_catch_finally .)
    PUBLIC          reduce using rule 176 (block_try_catch -> try_catch_finally .)
    PRIVATE         reduce using rule 176 (block_try_catch -> try_catch_finally .)
    RKEY            reduce using rule 176 (block_try_catch -> try_catch_finally .)
    $end            reduce using rule 176 (block_try_catch -> try_catch_finally .)


state 66

    (198) lists -> list_empty .

    PRINT           reduce using rule 198 (lists -> list_empty .)
    CHARTYPE        reduce using rule 198 (lists -> list_empty .)
    STRINGTYPE      reduce using rule 198 (lists -> list_empty .)
    FLOATTYPE       reduce using rule 198 (lists -> list_empty .)
    DECIMALTYPE     reduce using rule 198 (lists -> list_empty .)
    INTTYPE         reduce using rule 198 (lists -> list_empty .)
    BOOLTYPE        reduce using rule 198 (lists -> list_empty .)
    VARIABLE        reduce using rule 198 (lists -> list_empty .)
    STATIC          reduce using rule 198 (lists -> list_empty .)
    WRITE           reduce using rule 198 (lists -> list_empty .)
    LPARENT         reduce using rule 198 (lists -> list_empty .)
    ENUM            reduce using rule 198 (lists -> list_empty .)
    IF              reduce using rule 198 (lists -> list_empty .)
    STACK           reduce using rule 198 (lists -> list_empty .)
    QUEUE           reduce using rule 198 (lists -> list_empty .)
    CONST           reduce using rule 198 (lists -> list_empty .)
    THREAD          reduce using rule 198 (lists -> list_empty .)
    TRY             reduce using rule 198 (lists -> list_empty .)
    LIST            reduce using rule 198 (lists -> list_empty .)
    FOR             reduce using rule 198 (lists -> list_empty .)
    FOREACH         reduce using rule 198 (lists -> list_empty .)
    WHILE           reduce using rule 198 (lists -> list_empty .)
    DO              reduce using rule 198 (lists -> list_empty .)
    PUBLIC          reduce using rule 198 (lists -> list_empty .)
    PRIVATE         reduce using rule 198 (lists -> list_empty .)
    RKEY            reduce using rule 198 (lists -> list_empty .)
    $end            reduce using rule 198 (lists -> list_empty .)


state 67

    (199) lists -> list_full .

    PRINT           reduce using rule 199 (lists -> list_full .)
    CHARTYPE        reduce using rule 199 (lists -> list_full .)
    STRINGTYPE      reduce using rule 199 (lists -> list_full .)
    FLOATTYPE       reduce using rule 199 (lists -> list_full .)
    DECIMALTYPE     reduce using rule 199 (lists -> list_full .)
    INTTYPE         reduce using rule 199 (lists -> list_full .)
    BOOLTYPE        reduce using rule 199 (lists -> list_full .)
    VARIABLE        reduce using rule 199 (lists -> list_full .)
    STATIC          reduce using rule 199 (lists -> list_full .)
    WRITE           reduce using rule 199 (lists -> list_full .)
    LPARENT         reduce using rule 199 (lists -> list_full .)
    ENUM            reduce using rule 199 (lists -> list_full .)
    IF              reduce using rule 199 (lists -> list_full .)
    STACK           reduce using rule 199 (lists -> list_full .)
    QUEUE           reduce using rule 199 (lists -> list_full .)
    CONST           reduce using rule 199 (lists -> list_full .)
    THREAD          reduce using rule 199 (lists -> list_full .)
    TRY             reduce using rule 199 (lists -> list_full .)
    LIST            reduce using rule 199 (lists -> list_full .)
    FOR             reduce using rule 199 (lists -> list_full .)
    FOREACH         reduce using rule 199 (lists -> list_full .)
    WHILE           reduce using rule 199 (lists -> list_full .)
    DO              reduce using rule 199 (lists -> list_full .)
    PUBLIC          reduce using rule 199 (lists -> list_full .)
    PRIVATE         reduce using rule 199 (lists -> list_full .)
    RKEY            reduce using rule 199 (lists -> list_full .)
    $end            reduce using rule 199 (lists -> list_full .)


state 68

    (208) functions_list -> list_func_clear .

    PRINT           reduce using rule 208 (functions_list -> list_func_clear .)
    CHARTYPE        reduce using rule 208 (functions_list -> list_func_clear .)
    STRINGTYPE      reduce using rule 208 (functions_list -> list_func_clear .)
    FLOATTYPE       reduce using rule 208 (functions_list -> list_func_clear .)
    DECIMALTYPE     reduce using rule 208 (functions_list -> list_func_clear .)
    INTTYPE         reduce using rule 208 (functions_list -> list_func_clear .)
    BOOLTYPE        reduce using rule 208 (functions_list -> list_func_clear .)
    VARIABLE        reduce using rule 208 (functions_list -> list_func_clear .)
    STATIC          reduce using rule 208 (functions_list -> list_func_clear .)
    WRITE           reduce using rule 208 (functions_list -> list_func_clear .)
    LPARENT         reduce using rule 208 (functions_list -> list_func_clear .)
    ENUM            reduce using rule 208 (functions_list -> list_func_clear .)
    IF              reduce using rule 208 (functions_list -> list_func_clear .)
    STACK           reduce using rule 208 (functions_list -> list_func_clear .)
    QUEUE           reduce using rule 208 (functions_list -> list_func_clear .)
    CONST           reduce using rule 208 (functions_list -> list_func_clear .)
    THREAD          reduce using rule 208 (functions_list -> list_func_clear .)
    TRY             reduce using rule 208 (functions_list -> list_func_clear .)
    LIST            reduce using rule 208 (functions_list -> list_func_clear .)
    FOR             reduce using rule 208 (functions_list -> list_func_clear .)
    FOREACH         reduce using rule 208 (functions_list -> list_func_clear .)
    WHILE           reduce using rule 208 (functions_list -> list_func_clear .)
    DO              reduce using rule 208 (functions_list -> list_func_clear .)
    PUBLIC          reduce using rule 208 (functions_list -> list_func_clear .)
    PRIVATE         reduce using rule 208 (functions_list -> list_func_clear .)
    RKEY            reduce using rule 208 (functions_list -> list_func_clear .)
    $end            reduce using rule 208 (functions_list -> list_func_clear .)


state 69

    (209) functions_list -> list_func_count .

    PRINT           reduce using rule 209 (functions_list -> list_func_count .)
    CHARTYPE        reduce using rule 209 (functions_list -> list_func_count .)
    STRINGTYPE      reduce using rule 209 (functions_list -> list_func_count .)
    FLOATTYPE       reduce using rule 209 (functions_list -> list_func_count .)
    DECIMALTYPE     reduce using rule 209 (functions_list -> list_func_count .)
    INTTYPE         reduce using rule 209 (functions_list -> list_func_count .)
    BOOLTYPE        reduce using rule 209 (functions_list -> list_func_count .)
    VARIABLE        reduce using rule 209 (functions_list -> list_func_count .)
    STATIC          reduce using rule 209 (functions_list -> list_func_count .)
    WRITE           reduce using rule 209 (functions_list -> list_func_count .)
    LPARENT         reduce using rule 209 (functions_list -> list_func_count .)
    ENUM            reduce using rule 209 (functions_list -> list_func_count .)
    IF              reduce using rule 209 (functions_list -> list_func_count .)
    STACK           reduce using rule 209 (functions_list -> list_func_count .)
    QUEUE           reduce using rule 209 (functions_list -> list_func_count .)
    CONST           reduce using rule 209 (functions_list -> list_func_count .)
    THREAD          reduce using rule 209 (functions_list -> list_func_count .)
    TRY             reduce using rule 209 (functions_list -> list_func_count .)
    LIST            reduce using rule 209 (functions_list -> list_func_count .)
    FOR             reduce using rule 209 (functions_list -> list_func_count .)
    FOREACH         reduce using rule 209 (functions_list -> list_func_count .)
    WHILE           reduce using rule 209 (functions_list -> list_func_count .)
    DO              reduce using rule 209 (functions_list -> list_func_count .)
    PUBLIC          reduce using rule 209 (functions_list -> list_func_count .)
    PRIVATE         reduce using rule 209 (functions_list -> list_func_count .)
    RKEY            reduce using rule 209 (functions_list -> list_func_count .)
    $end            reduce using rule 209 (functions_list -> list_func_count .)


state 70

    (210) functions_list -> list_func_add .

    PRINT           reduce using rule 210 (functions_list -> list_func_add .)
    CHARTYPE        reduce using rule 210 (functions_list -> list_func_add .)
    STRINGTYPE      reduce using rule 210 (functions_list -> list_func_add .)
    FLOATTYPE       reduce using rule 210 (functions_list -> list_func_add .)
    DECIMALTYPE     reduce using rule 210 (functions_list -> list_func_add .)
    INTTYPE         reduce using rule 210 (functions_list -> list_func_add .)
    BOOLTYPE        reduce using rule 210 (functions_list -> list_func_add .)
    VARIABLE        reduce using rule 210 (functions_list -> list_func_add .)
    STATIC          reduce using rule 210 (functions_list -> list_func_add .)
    WRITE           reduce using rule 210 (functions_list -> list_func_add .)
    LPARENT         reduce using rule 210 (functions_list -> list_func_add .)
    ENUM            reduce using rule 210 (functions_list -> list_func_add .)
    IF              reduce using rule 210 (functions_list -> list_func_add .)
    STACK           reduce using rule 210 (functions_list -> list_func_add .)
    QUEUE           reduce using rule 210 (functions_list -> list_func_add .)
    CONST           reduce using rule 210 (functions_list -> list_func_add .)
    THREAD          reduce using rule 210 (functions_list -> list_func_add .)
    TRY             reduce using rule 210 (functions_list -> list_func_add .)
    LIST            reduce using rule 210 (functions_list -> list_func_add .)
    FOR             reduce using rule 210 (functions_list -> list_func_add .)
    FOREACH         reduce using rule 210 (functions_list -> list_func_add .)
    WHILE           reduce using rule 210 (functions_list -> list_func_add .)
    DO              reduce using rule 210 (functions_list -> list_func_add .)
    PUBLIC          reduce using rule 210 (functions_list -> list_func_add .)
    PRIVATE         reduce using rule 210 (functions_list -> list_func_add .)
    RKEY            reduce using rule 210 (functions_list -> list_func_add .)
    $end            reduce using rule 210 (functions_list -> list_func_add .)


state 71

    (211) functions_list -> list_func_removeat .

    PRINT           reduce using rule 211 (functions_list -> list_func_removeat .)
    CHARTYPE        reduce using rule 211 (functions_list -> list_func_removeat .)
    STRINGTYPE      reduce using rule 211 (functions_list -> list_func_removeat .)
    FLOATTYPE       reduce using rule 211 (functions_list -> list_func_removeat .)
    DECIMALTYPE     reduce using rule 211 (functions_list -> list_func_removeat .)
    INTTYPE         reduce using rule 211 (functions_list -> list_func_removeat .)
    BOOLTYPE        reduce using rule 211 (functions_list -> list_func_removeat .)
    VARIABLE        reduce using rule 211 (functions_list -> list_func_removeat .)
    STATIC          reduce using rule 211 (functions_list -> list_func_removeat .)
    WRITE           reduce using rule 211 (functions_list -> list_func_removeat .)
    LPARENT         reduce using rule 211 (functions_list -> list_func_removeat .)
    ENUM            reduce using rule 211 (functions_list -> list_func_removeat .)
    IF              reduce using rule 211 (functions_list -> list_func_removeat .)
    STACK           reduce using rule 211 (functions_list -> list_func_removeat .)
    QUEUE           reduce using rule 211 (functions_list -> list_func_removeat .)
    CONST           reduce using rule 211 (functions_list -> list_func_removeat .)
    THREAD          reduce using rule 211 (functions_list -> list_func_removeat .)
    TRY             reduce using rule 211 (functions_list -> list_func_removeat .)
    LIST            reduce using rule 211 (functions_list -> list_func_removeat .)
    FOR             reduce using rule 211 (functions_list -> list_func_removeat .)
    FOREACH         reduce using rule 211 (functions_list -> list_func_removeat .)
    WHILE           reduce using rule 211 (functions_list -> list_func_removeat .)
    DO              reduce using rule 211 (functions_list -> list_func_removeat .)
    PUBLIC          reduce using rule 211 (functions_list -> list_func_removeat .)
    PRIVATE         reduce using rule 211 (functions_list -> list_func_removeat .)
    RKEY            reduce using rule 211 (functions_list -> list_func_removeat .)
    $end            reduce using rule 211 (functions_list -> list_func_removeat .)


state 72

    (172) enums -> ENUM . METHOD LKEY list_enums RKEY

    METHOD          shift and go to state 131


state 73

    (185) normal_if -> IF . LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (186) normal_if -> IF . LPARENT boolean_operation RPARENT LKEY block_if RKEY

    LPARENT         shift and go to state 132


state 74

    (193) block_for -> for_simple .

    PRINT           reduce using rule 193 (block_for -> for_simple .)
    CHARTYPE        reduce using rule 193 (block_for -> for_simple .)
    STRINGTYPE      reduce using rule 193 (block_for -> for_simple .)
    FLOATTYPE       reduce using rule 193 (block_for -> for_simple .)
    DECIMALTYPE     reduce using rule 193 (block_for -> for_simple .)
    INTTYPE         reduce using rule 193 (block_for -> for_simple .)
    BOOLTYPE        reduce using rule 193 (block_for -> for_simple .)
    VARIABLE        reduce using rule 193 (block_for -> for_simple .)
    STATIC          reduce using rule 193 (block_for -> for_simple .)
    WRITE           reduce using rule 193 (block_for -> for_simple .)
    LPARENT         reduce using rule 193 (block_for -> for_simple .)
    ENUM            reduce using rule 193 (block_for -> for_simple .)
    IF              reduce using rule 193 (block_for -> for_simple .)
    STACK           reduce using rule 193 (block_for -> for_simple .)
    QUEUE           reduce using rule 193 (block_for -> for_simple .)
    CONST           reduce using rule 193 (block_for -> for_simple .)
    THREAD          reduce using rule 193 (block_for -> for_simple .)
    TRY             reduce using rule 193 (block_for -> for_simple .)
    LIST            reduce using rule 193 (block_for -> for_simple .)
    FOR             reduce using rule 193 (block_for -> for_simple .)
    FOREACH         reduce using rule 193 (block_for -> for_simple .)
    WHILE           reduce using rule 193 (block_for -> for_simple .)
    DO              reduce using rule 193 (block_for -> for_simple .)
    PUBLIC          reduce using rule 193 (block_for -> for_simple .)
    PRIVATE         reduce using rule 193 (block_for -> for_simple .)
    RKEY            reduce using rule 193 (block_for -> for_simple .)
    $end            reduce using rule 193 (block_for -> for_simple .)


state 75

    (194) block_for -> for_each .

    PRINT           reduce using rule 194 (block_for -> for_each .)
    CHARTYPE        reduce using rule 194 (block_for -> for_each .)
    STRINGTYPE      reduce using rule 194 (block_for -> for_each .)
    FLOATTYPE       reduce using rule 194 (block_for -> for_each .)
    DECIMALTYPE     reduce using rule 194 (block_for -> for_each .)
    INTTYPE         reduce using rule 194 (block_for -> for_each .)
    BOOLTYPE        reduce using rule 194 (block_for -> for_each .)
    VARIABLE        reduce using rule 194 (block_for -> for_each .)
    STATIC          reduce using rule 194 (block_for -> for_each .)
    WRITE           reduce using rule 194 (block_for -> for_each .)
    LPARENT         reduce using rule 194 (block_for -> for_each .)
    ENUM            reduce using rule 194 (block_for -> for_each .)
    IF              reduce using rule 194 (block_for -> for_each .)
    STACK           reduce using rule 194 (block_for -> for_each .)
    QUEUE           reduce using rule 194 (block_for -> for_each .)
    CONST           reduce using rule 194 (block_for -> for_each .)
    THREAD          reduce using rule 194 (block_for -> for_each .)
    TRY             reduce using rule 194 (block_for -> for_each .)
    LIST            reduce using rule 194 (block_for -> for_each .)
    FOR             reduce using rule 194 (block_for -> for_each .)
    FOREACH         reduce using rule 194 (block_for -> for_each .)
    WHILE           reduce using rule 194 (block_for -> for_each .)
    DO              reduce using rule 194 (block_for -> for_each .)
    PUBLIC          reduce using rule 194 (block_for -> for_each .)
    PRIVATE         reduce using rule 194 (block_for -> for_each .)
    RKEY            reduce using rule 194 (block_for -> for_each .)
    $end            reduce using rule 194 (block_for -> for_each .)


state 76

    (189) block_while -> normal_while .

    PRINT           reduce using rule 189 (block_while -> normal_while .)
    CHARTYPE        reduce using rule 189 (block_while -> normal_while .)
    STRINGTYPE      reduce using rule 189 (block_while -> normal_while .)
    FLOATTYPE       reduce using rule 189 (block_while -> normal_while .)
    DECIMALTYPE     reduce using rule 189 (block_while -> normal_while .)
    INTTYPE         reduce using rule 189 (block_while -> normal_while .)
    BOOLTYPE        reduce using rule 189 (block_while -> normal_while .)
    VARIABLE        reduce using rule 189 (block_while -> normal_while .)
    STATIC          reduce using rule 189 (block_while -> normal_while .)
    WRITE           reduce using rule 189 (block_while -> normal_while .)
    LPARENT         reduce using rule 189 (block_while -> normal_while .)
    ENUM            reduce using rule 189 (block_while -> normal_while .)
    IF              reduce using rule 189 (block_while -> normal_while .)
    STACK           reduce using rule 189 (block_while -> normal_while .)
    QUEUE           reduce using rule 189 (block_while -> normal_while .)
    CONST           reduce using rule 189 (block_while -> normal_while .)
    THREAD          reduce using rule 189 (block_while -> normal_while .)
    TRY             reduce using rule 189 (block_while -> normal_while .)
    LIST            reduce using rule 189 (block_while -> normal_while .)
    FOR             reduce using rule 189 (block_while -> normal_while .)
    FOREACH         reduce using rule 189 (block_while -> normal_while .)
    WHILE           reduce using rule 189 (block_while -> normal_while .)
    DO              reduce using rule 189 (block_while -> normal_while .)
    PUBLIC          reduce using rule 189 (block_while -> normal_while .)
    PRIVATE         reduce using rule 189 (block_while -> normal_while .)
    RKEY            reduce using rule 189 (block_while -> normal_while .)
    $end            reduce using rule 189 (block_while -> normal_while .)


state 77

    (190) block_while -> do_while .

    PRINT           reduce using rule 190 (block_while -> do_while .)
    CHARTYPE        reduce using rule 190 (block_while -> do_while .)
    STRINGTYPE      reduce using rule 190 (block_while -> do_while .)
    FLOATTYPE       reduce using rule 190 (block_while -> do_while .)
    DECIMALTYPE     reduce using rule 190 (block_while -> do_while .)
    INTTYPE         reduce using rule 190 (block_while -> do_while .)
    BOOLTYPE        reduce using rule 190 (block_while -> do_while .)
    VARIABLE        reduce using rule 190 (block_while -> do_while .)
    STATIC          reduce using rule 190 (block_while -> do_while .)
    WRITE           reduce using rule 190 (block_while -> do_while .)
    LPARENT         reduce using rule 190 (block_while -> do_while .)
    ENUM            reduce using rule 190 (block_while -> do_while .)
    IF              reduce using rule 190 (block_while -> do_while .)
    STACK           reduce using rule 190 (block_while -> do_while .)
    QUEUE           reduce using rule 190 (block_while -> do_while .)
    CONST           reduce using rule 190 (block_while -> do_while .)
    THREAD          reduce using rule 190 (block_while -> do_while .)
    TRY             reduce using rule 190 (block_while -> do_while .)
    LIST            reduce using rule 190 (block_while -> do_while .)
    FOR             reduce using rule 190 (block_while -> do_while .)
    FOREACH         reduce using rule 190 (block_while -> do_while .)
    WHILE           reduce using rule 190 (block_while -> do_while .)
    DO              reduce using rule 190 (block_while -> do_while .)
    PUBLIC          reduce using rule 190 (block_while -> do_while .)
    PRIVATE         reduce using rule 190 (block_while -> do_while .)
    RKEY            reduce using rule 190 (block_while -> do_while .)
    $end            reduce using rule 190 (block_while -> do_while .)


state 78

    (218) stack_struct -> STACK . VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA

    VARIABLE        shift and go to state 133


state 79

    (219) functions_stack -> stack_push .

    PRINT           reduce using rule 219 (functions_stack -> stack_push .)
    CHARTYPE        reduce using rule 219 (functions_stack -> stack_push .)
    STRINGTYPE      reduce using rule 219 (functions_stack -> stack_push .)
    FLOATTYPE       reduce using rule 219 (functions_stack -> stack_push .)
    DECIMALTYPE     reduce using rule 219 (functions_stack -> stack_push .)
    INTTYPE         reduce using rule 219 (functions_stack -> stack_push .)
    BOOLTYPE        reduce using rule 219 (functions_stack -> stack_push .)
    VARIABLE        reduce using rule 219 (functions_stack -> stack_push .)
    STATIC          reduce using rule 219 (functions_stack -> stack_push .)
    WRITE           reduce using rule 219 (functions_stack -> stack_push .)
    LPARENT         reduce using rule 219 (functions_stack -> stack_push .)
    ENUM            reduce using rule 219 (functions_stack -> stack_push .)
    IF              reduce using rule 219 (functions_stack -> stack_push .)
    STACK           reduce using rule 219 (functions_stack -> stack_push .)
    QUEUE           reduce using rule 219 (functions_stack -> stack_push .)
    CONST           reduce using rule 219 (functions_stack -> stack_push .)
    THREAD          reduce using rule 219 (functions_stack -> stack_push .)
    TRY             reduce using rule 219 (functions_stack -> stack_push .)
    LIST            reduce using rule 219 (functions_stack -> stack_push .)
    FOR             reduce using rule 219 (functions_stack -> stack_push .)
    FOREACH         reduce using rule 219 (functions_stack -> stack_push .)
    WHILE           reduce using rule 219 (functions_stack -> stack_push .)
    DO              reduce using rule 219 (functions_stack -> stack_push .)
    PUBLIC          reduce using rule 219 (functions_stack -> stack_push .)
    PRIVATE         reduce using rule 219 (functions_stack -> stack_push .)
    RKEY            reduce using rule 219 (functions_stack -> stack_push .)
    $end            reduce using rule 219 (functions_stack -> stack_push .)


state 80

    (220) functions_stack -> stack_pop .

    PRINT           reduce using rule 220 (functions_stack -> stack_pop .)
    CHARTYPE        reduce using rule 220 (functions_stack -> stack_pop .)
    STRINGTYPE      reduce using rule 220 (functions_stack -> stack_pop .)
    FLOATTYPE       reduce using rule 220 (functions_stack -> stack_pop .)
    DECIMALTYPE     reduce using rule 220 (functions_stack -> stack_pop .)
    INTTYPE         reduce using rule 220 (functions_stack -> stack_pop .)
    BOOLTYPE        reduce using rule 220 (functions_stack -> stack_pop .)
    VARIABLE        reduce using rule 220 (functions_stack -> stack_pop .)
    STATIC          reduce using rule 220 (functions_stack -> stack_pop .)
    WRITE           reduce using rule 220 (functions_stack -> stack_pop .)
    LPARENT         reduce using rule 220 (functions_stack -> stack_pop .)
    ENUM            reduce using rule 220 (functions_stack -> stack_pop .)
    IF              reduce using rule 220 (functions_stack -> stack_pop .)
    STACK           reduce using rule 220 (functions_stack -> stack_pop .)
    QUEUE           reduce using rule 220 (functions_stack -> stack_pop .)
    CONST           reduce using rule 220 (functions_stack -> stack_pop .)
    THREAD          reduce using rule 220 (functions_stack -> stack_pop .)
    TRY             reduce using rule 220 (functions_stack -> stack_pop .)
    LIST            reduce using rule 220 (functions_stack -> stack_pop .)
    FOR             reduce using rule 220 (functions_stack -> stack_pop .)
    FOREACH         reduce using rule 220 (functions_stack -> stack_pop .)
    WHILE           reduce using rule 220 (functions_stack -> stack_pop .)
    DO              reduce using rule 220 (functions_stack -> stack_pop .)
    PUBLIC          reduce using rule 220 (functions_stack -> stack_pop .)
    PRIVATE         reduce using rule 220 (functions_stack -> stack_pop .)
    RKEY            reduce using rule 220 (functions_stack -> stack_pop .)
    $end            reduce using rule 220 (functions_stack -> stack_pop .)


state 81

    (221) functions_stack -> stack_clear .

    PRINT           reduce using rule 221 (functions_stack -> stack_clear .)
    CHARTYPE        reduce using rule 221 (functions_stack -> stack_clear .)
    STRINGTYPE      reduce using rule 221 (functions_stack -> stack_clear .)
    FLOATTYPE       reduce using rule 221 (functions_stack -> stack_clear .)
    DECIMALTYPE     reduce using rule 221 (functions_stack -> stack_clear .)
    INTTYPE         reduce using rule 221 (functions_stack -> stack_clear .)
    BOOLTYPE        reduce using rule 221 (functions_stack -> stack_clear .)
    VARIABLE        reduce using rule 221 (functions_stack -> stack_clear .)
    STATIC          reduce using rule 221 (functions_stack -> stack_clear .)
    WRITE           reduce using rule 221 (functions_stack -> stack_clear .)
    LPARENT         reduce using rule 221 (functions_stack -> stack_clear .)
    ENUM            reduce using rule 221 (functions_stack -> stack_clear .)
    IF              reduce using rule 221 (functions_stack -> stack_clear .)
    STACK           reduce using rule 221 (functions_stack -> stack_clear .)
    QUEUE           reduce using rule 221 (functions_stack -> stack_clear .)
    CONST           reduce using rule 221 (functions_stack -> stack_clear .)
    THREAD          reduce using rule 221 (functions_stack -> stack_clear .)
    TRY             reduce using rule 221 (functions_stack -> stack_clear .)
    LIST            reduce using rule 221 (functions_stack -> stack_clear .)
    FOR             reduce using rule 221 (functions_stack -> stack_clear .)
    FOREACH         reduce using rule 221 (functions_stack -> stack_clear .)
    WHILE           reduce using rule 221 (functions_stack -> stack_clear .)
    DO              reduce using rule 221 (functions_stack -> stack_clear .)
    PUBLIC          reduce using rule 221 (functions_stack -> stack_clear .)
    PRIVATE         reduce using rule 221 (functions_stack -> stack_clear .)
    RKEY            reduce using rule 221 (functions_stack -> stack_clear .)
    $end            reduce using rule 221 (functions_stack -> stack_clear .)


state 82

    (222) functions_stack -> stack_peek .

    PRINT           reduce using rule 222 (functions_stack -> stack_peek .)
    CHARTYPE        reduce using rule 222 (functions_stack -> stack_peek .)
    STRINGTYPE      reduce using rule 222 (functions_stack -> stack_peek .)
    FLOATTYPE       reduce using rule 222 (functions_stack -> stack_peek .)
    DECIMALTYPE     reduce using rule 222 (functions_stack -> stack_peek .)
    INTTYPE         reduce using rule 222 (functions_stack -> stack_peek .)
    BOOLTYPE        reduce using rule 222 (functions_stack -> stack_peek .)
    VARIABLE        reduce using rule 222 (functions_stack -> stack_peek .)
    STATIC          reduce using rule 222 (functions_stack -> stack_peek .)
    WRITE           reduce using rule 222 (functions_stack -> stack_peek .)
    LPARENT         reduce using rule 222 (functions_stack -> stack_peek .)
    ENUM            reduce using rule 222 (functions_stack -> stack_peek .)
    IF              reduce using rule 222 (functions_stack -> stack_peek .)
    STACK           reduce using rule 222 (functions_stack -> stack_peek .)
    QUEUE           reduce using rule 222 (functions_stack -> stack_peek .)
    CONST           reduce using rule 222 (functions_stack -> stack_peek .)
    THREAD          reduce using rule 222 (functions_stack -> stack_peek .)
    TRY             reduce using rule 222 (functions_stack -> stack_peek .)
    LIST            reduce using rule 222 (functions_stack -> stack_peek .)
    FOR             reduce using rule 222 (functions_stack -> stack_peek .)
    FOREACH         reduce using rule 222 (functions_stack -> stack_peek .)
    WHILE           reduce using rule 222 (functions_stack -> stack_peek .)
    DO              reduce using rule 222 (functions_stack -> stack_peek .)
    PUBLIC          reduce using rule 222 (functions_stack -> stack_peek .)
    PRIVATE         reduce using rule 222 (functions_stack -> stack_peek .)
    RKEY            reduce using rule 222 (functions_stack -> stack_peek .)
    $end            reduce using rule 222 (functions_stack -> stack_peek .)


state 83

    (223) functions_stack -> stack_isEmpty .

    PRINT           reduce using rule 223 (functions_stack -> stack_isEmpty .)
    CHARTYPE        reduce using rule 223 (functions_stack -> stack_isEmpty .)
    STRINGTYPE      reduce using rule 223 (functions_stack -> stack_isEmpty .)
    FLOATTYPE       reduce using rule 223 (functions_stack -> stack_isEmpty .)
    DECIMALTYPE     reduce using rule 223 (functions_stack -> stack_isEmpty .)
    INTTYPE         reduce using rule 223 (functions_stack -> stack_isEmpty .)
    BOOLTYPE        reduce using rule 223 (functions_stack -> stack_isEmpty .)
    VARIABLE        reduce using rule 223 (functions_stack -> stack_isEmpty .)
    STATIC          reduce using rule 223 (functions_stack -> stack_isEmpty .)
    WRITE           reduce using rule 223 (functions_stack -> stack_isEmpty .)
    LPARENT         reduce using rule 223 (functions_stack -> stack_isEmpty .)
    ENUM            reduce using rule 223 (functions_stack -> stack_isEmpty .)
    IF              reduce using rule 223 (functions_stack -> stack_isEmpty .)
    STACK           reduce using rule 223 (functions_stack -> stack_isEmpty .)
    QUEUE           reduce using rule 223 (functions_stack -> stack_isEmpty .)
    CONST           reduce using rule 223 (functions_stack -> stack_isEmpty .)
    THREAD          reduce using rule 223 (functions_stack -> stack_isEmpty .)
    TRY             reduce using rule 223 (functions_stack -> stack_isEmpty .)
    LIST            reduce using rule 223 (functions_stack -> stack_isEmpty .)
    FOR             reduce using rule 223 (functions_stack -> stack_isEmpty .)
    FOREACH         reduce using rule 223 (functions_stack -> stack_isEmpty .)
    WHILE           reduce using rule 223 (functions_stack -> stack_isEmpty .)
    DO              reduce using rule 223 (functions_stack -> stack_isEmpty .)
    PUBLIC          reduce using rule 223 (functions_stack -> stack_isEmpty .)
    PRIVATE         reduce using rule 223 (functions_stack -> stack_isEmpty .)
    RKEY            reduce using rule 223 (functions_stack -> stack_isEmpty .)
    $end            reduce using rule 223 (functions_stack -> stack_isEmpty .)


state 84

    (229) queue_struct -> QUEUE . VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA

    VARIABLE        shift and go to state 134


state 85

    (230) functions_queue -> queue_enqueue .

    PRINT           reduce using rule 230 (functions_queue -> queue_enqueue .)
    CHARTYPE        reduce using rule 230 (functions_queue -> queue_enqueue .)
    STRINGTYPE      reduce using rule 230 (functions_queue -> queue_enqueue .)
    FLOATTYPE       reduce using rule 230 (functions_queue -> queue_enqueue .)
    DECIMALTYPE     reduce using rule 230 (functions_queue -> queue_enqueue .)
    INTTYPE         reduce using rule 230 (functions_queue -> queue_enqueue .)
    BOOLTYPE        reduce using rule 230 (functions_queue -> queue_enqueue .)
    VARIABLE        reduce using rule 230 (functions_queue -> queue_enqueue .)
    STATIC          reduce using rule 230 (functions_queue -> queue_enqueue .)
    WRITE           reduce using rule 230 (functions_queue -> queue_enqueue .)
    LPARENT         reduce using rule 230 (functions_queue -> queue_enqueue .)
    ENUM            reduce using rule 230 (functions_queue -> queue_enqueue .)
    IF              reduce using rule 230 (functions_queue -> queue_enqueue .)
    STACK           reduce using rule 230 (functions_queue -> queue_enqueue .)
    QUEUE           reduce using rule 230 (functions_queue -> queue_enqueue .)
    CONST           reduce using rule 230 (functions_queue -> queue_enqueue .)
    THREAD          reduce using rule 230 (functions_queue -> queue_enqueue .)
    TRY             reduce using rule 230 (functions_queue -> queue_enqueue .)
    LIST            reduce using rule 230 (functions_queue -> queue_enqueue .)
    FOR             reduce using rule 230 (functions_queue -> queue_enqueue .)
    FOREACH         reduce using rule 230 (functions_queue -> queue_enqueue .)
    WHILE           reduce using rule 230 (functions_queue -> queue_enqueue .)
    DO              reduce using rule 230 (functions_queue -> queue_enqueue .)
    PUBLIC          reduce using rule 230 (functions_queue -> queue_enqueue .)
    PRIVATE         reduce using rule 230 (functions_queue -> queue_enqueue .)
    RKEY            reduce using rule 230 (functions_queue -> queue_enqueue .)
    $end            reduce using rule 230 (functions_queue -> queue_enqueue .)


state 86

    (231) functions_queue -> queue_dequeue .

    PRINT           reduce using rule 231 (functions_queue -> queue_dequeue .)
    CHARTYPE        reduce using rule 231 (functions_queue -> queue_dequeue .)
    STRINGTYPE      reduce using rule 231 (functions_queue -> queue_dequeue .)
    FLOATTYPE       reduce using rule 231 (functions_queue -> queue_dequeue .)
    DECIMALTYPE     reduce using rule 231 (functions_queue -> queue_dequeue .)
    INTTYPE         reduce using rule 231 (functions_queue -> queue_dequeue .)
    BOOLTYPE        reduce using rule 231 (functions_queue -> queue_dequeue .)
    VARIABLE        reduce using rule 231 (functions_queue -> queue_dequeue .)
    STATIC          reduce using rule 231 (functions_queue -> queue_dequeue .)
    WRITE           reduce using rule 231 (functions_queue -> queue_dequeue .)
    LPARENT         reduce using rule 231 (functions_queue -> queue_dequeue .)
    ENUM            reduce using rule 231 (functions_queue -> queue_dequeue .)
    IF              reduce using rule 231 (functions_queue -> queue_dequeue .)
    STACK           reduce using rule 231 (functions_queue -> queue_dequeue .)
    QUEUE           reduce using rule 231 (functions_queue -> queue_dequeue .)
    CONST           reduce using rule 231 (functions_queue -> queue_dequeue .)
    THREAD          reduce using rule 231 (functions_queue -> queue_dequeue .)
    TRY             reduce using rule 231 (functions_queue -> queue_dequeue .)
    LIST            reduce using rule 231 (functions_queue -> queue_dequeue .)
    FOR             reduce using rule 231 (functions_queue -> queue_dequeue .)
    FOREACH         reduce using rule 231 (functions_queue -> queue_dequeue .)
    WHILE           reduce using rule 231 (functions_queue -> queue_dequeue .)
    DO              reduce using rule 231 (functions_queue -> queue_dequeue .)
    PUBLIC          reduce using rule 231 (functions_queue -> queue_dequeue .)
    PRIVATE         reduce using rule 231 (functions_queue -> queue_dequeue .)
    RKEY            reduce using rule 231 (functions_queue -> queue_dequeue .)
    $end            reduce using rule 231 (functions_queue -> queue_dequeue .)


state 87

    (232) functions_queue -> queue_clear .

    PRINT           reduce using rule 232 (functions_queue -> queue_clear .)
    CHARTYPE        reduce using rule 232 (functions_queue -> queue_clear .)
    STRINGTYPE      reduce using rule 232 (functions_queue -> queue_clear .)
    FLOATTYPE       reduce using rule 232 (functions_queue -> queue_clear .)
    DECIMALTYPE     reduce using rule 232 (functions_queue -> queue_clear .)
    INTTYPE         reduce using rule 232 (functions_queue -> queue_clear .)
    BOOLTYPE        reduce using rule 232 (functions_queue -> queue_clear .)
    VARIABLE        reduce using rule 232 (functions_queue -> queue_clear .)
    STATIC          reduce using rule 232 (functions_queue -> queue_clear .)
    WRITE           reduce using rule 232 (functions_queue -> queue_clear .)
    LPARENT         reduce using rule 232 (functions_queue -> queue_clear .)
    ENUM            reduce using rule 232 (functions_queue -> queue_clear .)
    IF              reduce using rule 232 (functions_queue -> queue_clear .)
    STACK           reduce using rule 232 (functions_queue -> queue_clear .)
    QUEUE           reduce using rule 232 (functions_queue -> queue_clear .)
    CONST           reduce using rule 232 (functions_queue -> queue_clear .)
    THREAD          reduce using rule 232 (functions_queue -> queue_clear .)
    TRY             reduce using rule 232 (functions_queue -> queue_clear .)
    LIST            reduce using rule 232 (functions_queue -> queue_clear .)
    FOR             reduce using rule 232 (functions_queue -> queue_clear .)
    FOREACH         reduce using rule 232 (functions_queue -> queue_clear .)
    WHILE           reduce using rule 232 (functions_queue -> queue_clear .)
    DO              reduce using rule 232 (functions_queue -> queue_clear .)
    PUBLIC          reduce using rule 232 (functions_queue -> queue_clear .)
    PRIVATE         reduce using rule 232 (functions_queue -> queue_clear .)
    RKEY            reduce using rule 232 (functions_queue -> queue_clear .)
    $end            reduce using rule 232 (functions_queue -> queue_clear .)


state 88

    (233) functions_queue -> queue_isEmpty .

    PRINT           reduce using rule 233 (functions_queue -> queue_isEmpty .)
    CHARTYPE        reduce using rule 233 (functions_queue -> queue_isEmpty .)
    STRINGTYPE      reduce using rule 233 (functions_queue -> queue_isEmpty .)
    FLOATTYPE       reduce using rule 233 (functions_queue -> queue_isEmpty .)
    DECIMALTYPE     reduce using rule 233 (functions_queue -> queue_isEmpty .)
    INTTYPE         reduce using rule 233 (functions_queue -> queue_isEmpty .)
    BOOLTYPE        reduce using rule 233 (functions_queue -> queue_isEmpty .)
    VARIABLE        reduce using rule 233 (functions_queue -> queue_isEmpty .)
    STATIC          reduce using rule 233 (functions_queue -> queue_isEmpty .)
    WRITE           reduce using rule 233 (functions_queue -> queue_isEmpty .)
    LPARENT         reduce using rule 233 (functions_queue -> queue_isEmpty .)
    ENUM            reduce using rule 233 (functions_queue -> queue_isEmpty .)
    IF              reduce using rule 233 (functions_queue -> queue_isEmpty .)
    STACK           reduce using rule 233 (functions_queue -> queue_isEmpty .)
    QUEUE           reduce using rule 233 (functions_queue -> queue_isEmpty .)
    CONST           reduce using rule 233 (functions_queue -> queue_isEmpty .)
    THREAD          reduce using rule 233 (functions_queue -> queue_isEmpty .)
    TRY             reduce using rule 233 (functions_queue -> queue_isEmpty .)
    LIST            reduce using rule 233 (functions_queue -> queue_isEmpty .)
    FOR             reduce using rule 233 (functions_queue -> queue_isEmpty .)
    FOREACH         reduce using rule 233 (functions_queue -> queue_isEmpty .)
    WHILE           reduce using rule 233 (functions_queue -> queue_isEmpty .)
    DO              reduce using rule 233 (functions_queue -> queue_isEmpty .)
    PUBLIC          reduce using rule 233 (functions_queue -> queue_isEmpty .)
    PRIVATE         reduce using rule 233 (functions_queue -> queue_isEmpty .)
    RKEY            reduce using rule 233 (functions_queue -> queue_isEmpty .)
    $end            reduce using rule 233 (functions_queue -> queue_isEmpty .)


state 89

    (234) functions_queue -> queue_peek .

    PRINT           reduce using rule 234 (functions_queue -> queue_peek .)
    CHARTYPE        reduce using rule 234 (functions_queue -> queue_peek .)
    STRINGTYPE      reduce using rule 234 (functions_queue -> queue_peek .)
    FLOATTYPE       reduce using rule 234 (functions_queue -> queue_peek .)
    DECIMALTYPE     reduce using rule 234 (functions_queue -> queue_peek .)
    INTTYPE         reduce using rule 234 (functions_queue -> queue_peek .)
    BOOLTYPE        reduce using rule 234 (functions_queue -> queue_peek .)
    VARIABLE        reduce using rule 234 (functions_queue -> queue_peek .)
    STATIC          reduce using rule 234 (functions_queue -> queue_peek .)
    WRITE           reduce using rule 234 (functions_queue -> queue_peek .)
    LPARENT         reduce using rule 234 (functions_queue -> queue_peek .)
    ENUM            reduce using rule 234 (functions_queue -> queue_peek .)
    IF              reduce using rule 234 (functions_queue -> queue_peek .)
    STACK           reduce using rule 234 (functions_queue -> queue_peek .)
    QUEUE           reduce using rule 234 (functions_queue -> queue_peek .)
    CONST           reduce using rule 234 (functions_queue -> queue_peek .)
    THREAD          reduce using rule 234 (functions_queue -> queue_peek .)
    TRY             reduce using rule 234 (functions_queue -> queue_peek .)
    LIST            reduce using rule 234 (functions_queue -> queue_peek .)
    FOR             reduce using rule 234 (functions_queue -> queue_peek .)
    FOREACH         reduce using rule 234 (functions_queue -> queue_peek .)
    WHILE           reduce using rule 234 (functions_queue -> queue_peek .)
    DO              reduce using rule 234 (functions_queue -> queue_peek .)
    PUBLIC          reduce using rule 234 (functions_queue -> queue_peek .)
    PRIVATE         reduce using rule 234 (functions_queue -> queue_peek .)
    RKEY            reduce using rule 234 (functions_queue -> queue_peek .)
    $end            reduce using rule 234 (functions_queue -> queue_peek .)


state 90

    (116) constant_assignation -> access_modifiers . CONST assignation_type_value_multiple DOTANDCOMMA
    (118) variable_assignation -> access_modifiers . assignation_type_value_multiple DOTANDCOMMA
    (141) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (142) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (143) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (144) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (145) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    CONST           shift and go to state 135
    INTTYPE         shift and go to state 137
    STRINGTYPE      shift and go to state 138
    FLOATTYPE       shift and go to state 139
    BOOLTYPE        shift and go to state 140

    assignation_type_value_multiple shift and go to state 136

state 91

    (117) constant_assignation -> CONST . assignation_type_value_multiple DOTANDCOMMA
    (141) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (142) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (143) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (144) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (145) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    INTTYPE         shift and go to state 137
    STRINGTYPE      shift and go to state 138
    FLOATTYPE       shift and go to state 139
    BOOLTYPE        shift and go to state 140

    assignation_type_value_multiple shift and go to state 141

state 92

    (119) variable_assignation -> assignation_type_value_multiple . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 142


state 93

    (157) declaration_thread -> THREAD . thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (158) declaration_thread -> THREAD . thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (170) thread_identificator -> . VARIABLE

    VARIABLE        shift and go to state 144

    thread_identificator           shift and go to state 143

state 94

    (177) try_catch_simply -> TRY . LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (178) try_catch_finally -> TRY . LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    LKEY            shift and go to state 145


state 95

    (200) list_empty -> LIST . SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (201) list_empty -> LIST . SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (202) list_full -> LIST . SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (203) list_full -> LIST . SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    SMALLER_THAN    shift and go to state 146


state 96

    (195) for_simple -> FOR . LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (196) for_simple -> FOR . LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    LPARENT         shift and go to state 147


state 97

    (197) for_each -> FOREACH . LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY

    LPARENT         shift and go to state 148


state 98

    (191) normal_while -> WHILE . LPARENT boolean_operation RPARENT LKEY all_block_code RKEY

    LPARENT         shift and go to state 149


state 99

    (192) do_while -> DO . LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT

    LKEY            shift and go to state 150


state 100

    (120) access_modifiers -> PUBLIC .

    CONST           reduce using rule 120 (access_modifiers -> PUBLIC .)
    INTTYPE         reduce using rule 120 (access_modifiers -> PUBLIC .)
    STRINGTYPE      reduce using rule 120 (access_modifiers -> PUBLIC .)
    FLOATTYPE       reduce using rule 120 (access_modifiers -> PUBLIC .)
    BOOLTYPE        reduce using rule 120 (access_modifiers -> PUBLIC .)


state 101

    (121) access_modifiers -> PRIVATE .

    CONST           reduce using rule 121 (access_modifiers -> PRIVATE .)
    INTTYPE         reduce using rule 121 (access_modifiers -> PRIVATE .)
    STRINGTYPE      reduce using rule 121 (access_modifiers -> PRIVATE .)
    FLOATTYPE       reduce using rule 121 (access_modifiers -> PRIVATE .)
    BOOLTYPE        reduce using rule 121 (access_modifiers -> PRIVATE .)


state 102

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE . RPARENT LKEY all_block_code RKEY
    (5) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE . RPARENT LKEY all_block_code RKEY all_block_code

    RPARENT         shift and go to state 151


state 103

    (161) concurrent_method -> STATIC VOID . thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (170) thread_identificator -> . VARIABLE

    VARIABLE        shift and go to state 144

    thread_identificator           shift and go to state 152

state 104

    (171) statement_lambda -> LPARENT VARIABLE . ARROW LKEY all_block_code RKEY RPARENT

    ARROW           shift and go to state 153


state 105

    (56) array_assignation -> STRINGTYPE LBRACKET . RBRACKET string_array_assignation DOTANDCOMMA

    RBRACKET        shift and go to state 154


state 106

    (142) assignation_type_value_multiple -> STRINGTYPE assignation_string_multiple .

    DOTANDCOMMA     reduce using rule 142 (assignation_type_value_multiple -> STRINGTYPE assignation_string_multiple .)


state 107

    (148) assignation_string_multiple -> assignation_string .
    (149) assignation_string_multiple -> assignation_string . COMMA assignation_string_multiple

    DOTANDCOMMA     reduce using rule 148 (assignation_string_multiple -> assignation_string .)
    COMMA           shift and go to state 155


state 108

    (130) assignation_string -> VARIABLE . ASSIGNATION STRING
    (131) assignation_string -> VARIABLE . ASSIGNATION VARIABLE

    ASSIGNATION     shift and go to state 156


state 109

    (86) array_value_assign -> VARIABLE LBRACKET . VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (87) array_value_assign -> VARIABLE LBRACKET . INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (84) array_indexing -> VARIABLE LBRACKET . VARIABLE RBRACKET
    (85) array_indexing -> VARIABLE LBRACKET . INTEGER RBRACKET

    VARIABLE        shift and go to state 157
    INTEGER         shift and go to state 158


state 110

    (212) list_func_clear -> VARIABLE DOT . CLEAR LPARENT RPARENT DOTANDCOMMA
    (213) list_func_count -> VARIABLE DOT . COUNT LPARENT RPARENT DOTANDCOMMA
    (214) list_func_add -> VARIABLE DOT . ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (215) list_func_add -> VARIABLE DOT . ADD LPARENT STRING RPARENT DOTANDCOMMA
    (216) list_func_removeat -> VARIABLE DOT . REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (217) list_func_removeat -> VARIABLE DOT . REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (224) stack_push -> VARIABLE DOT . PUSH LPARENT value RPARENT DOTANDCOMMA
    (225) stack_pop -> VARIABLE DOT . POP LPARENT RPARENT DOTANDCOMMA
    (226) stack_clear -> VARIABLE DOT . CLEAR LPARENT RPARENT DOTANDCOMMA
    (227) stack_peek -> VARIABLE DOT . PEEK LPARENT RPARENT DOTANDCOMMA
    (228) stack_isEmpty -> VARIABLE DOT . ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (235) queue_enqueue -> VARIABLE DOT . ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (236) queue_dequeue -> VARIABLE DOT . DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (237) queue_clear -> VARIABLE DOT . CLEAR LPARENT RPARENT DOTANDCOMMA
    (239) queue_isEmpty -> VARIABLE DOT . ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (238) queue_peek -> VARIABLE DOT . PEEK LPARENT RPARENT DOTANDCOMMA

    CLEAR           shift and go to state 159
    COUNT           shift and go to state 160
    ADD             shift and go to state 161
    REMOVEAT        shift and go to state 162
    PUSH            shift and go to state 163
    POP             shift and go to state 164
    PEEK            shift and go to state 165
    ISEMPTY         shift and go to state 166
    ENQUEUE         shift and go to state 167
    DEQUEUE         shift and go to state 168


state 111

    (3) block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY . all_block_code
    (25) all_block_code -> . block_code
    (26) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . array_assignation
    (9) block_code -> . array_value_assign
    (10) block_code -> . array_indexing
    (11) block_code -> . thread_main
    (12) block_code -> . concurrent_method
    (13) block_code -> . block_try_catch
    (14) block_code -> . lists
    (15) block_code -> . functions_list
    (16) block_code -> . statement_lambda
    (17) block_code -> . enums
    (18) block_code -> . normal_if
    (19) block_code -> . block_for
    (20) block_code -> . block_while
    (21) block_code -> . stack_struct
    (22) block_code -> . functions_stack
    (23) block_code -> . queue_struct
    (24) block_code -> . functions_queue
    (114) def_const_or_var -> . constant_assignation
    (115) def_const_or_var -> . variable_assignation
    (44) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (45) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (55) array_assignation -> . CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA
    (56) array_assignation -> . STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
    (57) array_assignation -> . FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
    (58) array_assignation -> . DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA
    (59) array_assignation -> . INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
    (60) array_assignation -> . BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
    (86) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (87) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (84) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (85) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (156) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (161) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (162) concurrent_method -> . WRITE
    (175) block_try_catch -> . try_catch_simply
    (176) block_try_catch -> . try_catch_finally
    (198) lists -> . list_empty
    (199) lists -> . list_full
    (208) functions_list -> . list_func_clear
    (209) functions_list -> . list_func_count
    (210) functions_list -> . list_func_add
    (211) functions_list -> . list_func_removeat
    (171) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (172) enums -> . ENUM METHOD LKEY list_enums RKEY
    (185) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (186) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (193) block_for -> . for_simple
    (194) block_for -> . for_each
    (189) block_while -> . normal_while
    (190) block_while -> . do_while
    (218) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (219) functions_stack -> . stack_push
    (220) functions_stack -> . stack_pop
    (221) functions_stack -> . stack_clear
    (222) functions_stack -> . stack_peek
    (223) functions_stack -> . stack_isEmpty
    (229) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (230) functions_queue -> . queue_enqueue
    (231) functions_queue -> . queue_dequeue
    (232) functions_queue -> . queue_clear
    (233) functions_queue -> . queue_isEmpty
    (234) functions_queue -> . queue_peek
    (116) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (117) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (118) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (119) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (157) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (158) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (177) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (178) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (200) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (201) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (202) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (203) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (212) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (213) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (214) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (215) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (216) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (217) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (195) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (196) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (197) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (191) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (192) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (224) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (225) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (226) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (227) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (228) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (235) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (236) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (237) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (239) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (238) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (120) access_modifiers -> . PUBLIC
    (121) access_modifiers -> . PRIVATE
    (141) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (142) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (143) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (144) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (145) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 56
    CHARTYPE        shift and go to state 57
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 58
    DECIMALTYPE     shift and go to state 59
    INTTYPE         shift and go to state 60
    BOOLTYPE        shift and go to state 61
    VARIABLE        shift and go to state 32
    STATIC          shift and go to state 29
    WRITE           shift and go to state 63
    LPARENT         shift and go to state 30
    ENUM            shift and go to state 72
    IF              shift and go to state 73
    STACK           shift and go to state 78
    QUEUE           shift and go to state 84
    CONST           shift and go to state 91
    THREAD          shift and go to state 93
    TRY             shift and go to state 94
    LIST            shift and go to state 95
    FOR             shift and go to state 96
    FOREACH         shift and go to state 97
    WHILE           shift and go to state 98
    DO              shift and go to state 99
    PUBLIC          shift and go to state 100
    PRIVATE         shift and go to state 101

    all_block_code                 shift and go to state 169
    block_code                     shift and go to state 34
    def_const_or_var               shift and go to state 35
    print_data                     shift and go to state 36
    array_assignation              shift and go to state 37
    array_value_assign             shift and go to state 38
    array_indexing                 shift and go to state 39
    thread_main                    shift and go to state 40
    concurrent_method              shift and go to state 41
    block_try_catch                shift and go to state 42
    lists                          shift and go to state 43
    functions_list                 shift and go to state 44
    statement_lambda               shift and go to state 45
    enums                          shift and go to state 46
    normal_if                      shift and go to state 47
    block_for                      shift and go to state 48
    block_while                    shift and go to state 49
    stack_struct                   shift and go to state 50
    functions_stack                shift and go to state 51
    queue_struct                   shift and go to state 52
    functions_queue                shift and go to state 53
    constant_assignation           shift and go to state 54
    variable_assignation           shift and go to state 55
    declaration_thread             shift and go to state 62
    try_catch_simply               shift and go to state 64
    try_catch_finally              shift and go to state 65
    list_empty                     shift and go to state 66
    list_full                      shift and go to state 67
    list_func_clear                shift and go to state 68
    list_func_count                shift and go to state 69
    list_func_add                  shift and go to state 70
    list_func_removeat             shift and go to state 71
    for_simple                     shift and go to state 74
    for_each                       shift and go to state 75
    normal_while                   shift and go to state 76
    do_while                       shift and go to state 77
    stack_push                     shift and go to state 79
    stack_pop                      shift and go to state 80
    stack_clear                    shift and go to state 81
    stack_peek                     shift and go to state 82
    stack_isEmpty                  shift and go to state 83
    queue_enqueue                  shift and go to state 85
    queue_dequeue                  shift and go to state 86
    queue_clear                    shift and go to state 87
    queue_isEmpty                  shift and go to state 88
    queue_peek                     shift and go to state 89
    access_modifiers               shift and go to state 90
    assignation_type_value_multiple shift and go to state 92

state 112

    (26) all_block_code -> block_code all_block_code .

    RKEY            reduce using rule 26 (all_block_code -> block_code all_block_code .)
    $end            reduce using rule 26 (all_block_code -> block_code all_block_code .)


state 113

    (44) print_data -> PRINT LPARENT . STRING RPARENT DOTANDCOMMA
    (45) print_data -> PRINT LPARENT . VARIABLE RPARENT DOTANDCOMMA

    STRING          shift and go to state 170
    VARIABLE        shift and go to state 171


state 114

    (55) array_assignation -> CHARTYPE LBRACKET . RBRACKET char_array_assignation DOTANDCOMMA

    RBRACKET        shift and go to state 172


state 115

    (57) array_assignation -> FLOATTYPE LBRACKET . RBRACKET float_array_assignation DOTANDCOMMA

    RBRACKET        shift and go to state 173


state 116

    (143) assignation_type_value_multiple -> FLOATTYPE assignation_float_multiple .

    DOTANDCOMMA     reduce using rule 143 (assignation_type_value_multiple -> FLOATTYPE assignation_float_multiple .)


state 117

    (150) assignation_float_multiple -> assignation_float .
    (151) assignation_float_multiple -> assignation_float . COMMA assignation_float_multiple

    DOTANDCOMMA     reduce using rule 150 (assignation_float_multiple -> assignation_float .)
    COMMA           shift and go to state 174


state 118

    (132) assignation_float -> VARIABLE . ASSIGNATION FLOAT_NUMBER
    (133) assignation_float -> VARIABLE . ASSIGNATION VARIABLE
    (134) assignation_float -> VARIABLE . ASSIGNATION arithmetic_operation

    ASSIGNATION     shift and go to state 175


state 119

    (58) array_assignation -> DECIMALTYPE LBRACKET . RBRACKET decimal_array_assignation DOTANDCOMMA

    RBRACKET        shift and go to state 176


state 120

    (59) array_assignation -> INTTYPE LBRACKET . RBRACKET int_array_assignation DOTANDCOMMA

    RBRACKET        shift and go to state 177


state 121

    (141) assignation_type_value_multiple -> INTTYPE assignation_int_multiple .

    DOTANDCOMMA     reduce using rule 141 (assignation_type_value_multiple -> INTTYPE assignation_int_multiple .)


state 122

    (146) assignation_int_multiple -> assignation_int .
    (147) assignation_int_multiple -> assignation_int . COMMA assignation_int_multiple

    DOTANDCOMMA     reduce using rule 146 (assignation_int_multiple -> assignation_int .)
    COMMA           shift and go to state 178


state 123

    (127) assignation_int -> VARIABLE . ASSIGNATION INTEGER
    (128) assignation_int -> VARIABLE . ASSIGNATION VARIABLE
    (129) assignation_int -> VARIABLE . ASSIGNATION arithmetic_operation

    ASSIGNATION     shift and go to state 179


state 124

    (60) array_assignation -> BOOLTYPE LBRACKET . RBRACKET bool_array_assignation DOTANDCOMMA

    RBRACKET        shift and go to state 180


state 125

    (144) assignation_type_value_multiple -> BOOLTYPE assignation_true_multiple .

    DOTANDCOMMA     reduce using rule 144 (assignation_type_value_multiple -> BOOLTYPE assignation_true_multiple .)


state 126

    (145) assignation_type_value_multiple -> BOOLTYPE assignation_false_multiple .

    DOTANDCOMMA     reduce using rule 145 (assignation_type_value_multiple -> BOOLTYPE assignation_false_multiple .)


state 127

    (152) assignation_true_multiple -> assignation_true .
    (153) assignation_true_multiple -> assignation_true . COMMA assignation_true_multiple

    DOTANDCOMMA     reduce using rule 152 (assignation_true_multiple -> assignation_true .)
    COMMA           shift and go to state 181


state 128

    (154) assignation_false_multiple -> assignation_false .
    (155) assignation_false_multiple -> assignation_false . COMMA assignation_false_multiple

    DOTANDCOMMA     reduce using rule 154 (assignation_false_multiple -> assignation_false .)
    COMMA           shift and go to state 182


state 129

    (135) assignation_true -> VARIABLE . ASSIGNATION BOOLTRUE
    (136) assignation_true -> VARIABLE . ASSIGNATION VARIABLE
    (137) assignation_true -> VARIABLE . ASSIGNATION boolean_operation
    (138) assignation_false -> VARIABLE . ASSIGNATION BOOLFALSE
    (139) assignation_false -> VARIABLE . ASSIGNATION VARIABLE
    (140) assignation_false -> VARIABLE . ASSIGNATION boolean_operation

    ASSIGNATION     shift and go to state 183


state 130

    (156) thread_main -> declaration_thread declaration_thread . thread_init thread_init thread_wait thread_wait
    (159) thread_init -> . thread_identificator DOT START LPARENT RPARENT DOTANDCOMMA
    (170) thread_identificator -> . VARIABLE

    VARIABLE        shift and go to state 144

    thread_init                    shift and go to state 184
    thread_identificator           shift and go to state 185

state 131

    (172) enums -> ENUM METHOD . LKEY list_enums RKEY

    LKEY            shift and go to state 186


state 132

    (185) normal_if -> IF LPARENT . boolean_operation RPARENT LKEY block_if RKEY other_if
    (186) normal_if -> IF LPARENT . boolean_operation RPARENT LKEY block_if RKEY
    (109) boolean_operation -> . value_boolean
    (110) boolean_operation -> . LOGICNOT value_boolean
    (111) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (36) value_boolean -> . BOOLTRUE
    (37) value_boolean -> . BOOLFALSE
    (38) value_boolean -> . VARIABLE
    (39) value_boolean -> . comparison_operation
    (101) comparison_operation -> . value_numeric
    (102) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (40) value_numeric -> . INTEGER
    (41) value_numeric -> . FLOAT_NUMBER
    (42) value_numeric -> . DECIMAL_NUMBER
    (43) value_numeric -> . VARIABLE

    LOGICNOT        shift and go to state 189
    BOOLTRUE        shift and go to state 190
    BOOLFALSE       shift and go to state 191
    VARIABLE        shift and go to state 192
    INTEGER         shift and go to state 195
    FLOAT_NUMBER    shift and go to state 196
    DECIMAL_NUMBER  shift and go to state 197

    boolean_operation              shift and go to state 187
    value_boolean                  shift and go to state 188
    comparison_operation           shift and go to state 193
    value_numeric                  shift and go to state 194

state 133

    (218) stack_struct -> STACK VARIABLE . ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA

    ASSIGNATION     shift and go to state 198


state 134

    (229) queue_struct -> QUEUE VARIABLE . ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA

    ASSIGNATION     shift and go to state 199


state 135

    (116) constant_assignation -> access_modifiers CONST . assignation_type_value_multiple DOTANDCOMMA
    (141) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (142) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (143) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (144) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (145) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    INTTYPE         shift and go to state 137
    STRINGTYPE      shift and go to state 138
    FLOATTYPE       shift and go to state 139
    BOOLTYPE        shift and go to state 140

    assignation_type_value_multiple shift and go to state 200

state 136

    (118) variable_assignation -> access_modifiers assignation_type_value_multiple . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 201


state 137

    (141) assignation_type_value_multiple -> INTTYPE . assignation_int_multiple
    (146) assignation_int_multiple -> . assignation_int
    (147) assignation_int_multiple -> . assignation_int COMMA assignation_int_multiple
    (127) assignation_int -> . VARIABLE ASSIGNATION INTEGER
    (128) assignation_int -> . VARIABLE ASSIGNATION VARIABLE
    (129) assignation_int -> . VARIABLE ASSIGNATION arithmetic_operation

    VARIABLE        shift and go to state 123

    assignation_int_multiple       shift and go to state 121
    assignation_int                shift and go to state 122

state 138

    (142) assignation_type_value_multiple -> STRINGTYPE . assignation_string_multiple
    (148) assignation_string_multiple -> . assignation_string
    (149) assignation_string_multiple -> . assignation_string COMMA assignation_string_multiple
    (130) assignation_string -> . VARIABLE ASSIGNATION STRING
    (131) assignation_string -> . VARIABLE ASSIGNATION VARIABLE

    VARIABLE        shift and go to state 108

    assignation_string_multiple    shift and go to state 106
    assignation_string             shift and go to state 107

state 139

    (143) assignation_type_value_multiple -> FLOATTYPE . assignation_float_multiple
    (150) assignation_float_multiple -> . assignation_float
    (151) assignation_float_multiple -> . assignation_float COMMA assignation_float_multiple
    (132) assignation_float -> . VARIABLE ASSIGNATION FLOAT_NUMBER
    (133) assignation_float -> . VARIABLE ASSIGNATION VARIABLE
    (134) assignation_float -> . VARIABLE ASSIGNATION arithmetic_operation

    VARIABLE        shift and go to state 118

    assignation_float_multiple     shift and go to state 116
    assignation_float              shift and go to state 117

state 140

    (144) assignation_type_value_multiple -> BOOLTYPE . assignation_true_multiple
    (145) assignation_type_value_multiple -> BOOLTYPE . assignation_false_multiple
    (152) assignation_true_multiple -> . assignation_true
    (153) assignation_true_multiple -> . assignation_true COMMA assignation_true_multiple
    (154) assignation_false_multiple -> . assignation_false
    (155) assignation_false_multiple -> . assignation_false COMMA assignation_false_multiple
    (135) assignation_true -> . VARIABLE ASSIGNATION BOOLTRUE
    (136) assignation_true -> . VARIABLE ASSIGNATION VARIABLE
    (137) assignation_true -> . VARIABLE ASSIGNATION boolean_operation
    (138) assignation_false -> . VARIABLE ASSIGNATION BOOLFALSE
    (139) assignation_false -> . VARIABLE ASSIGNATION VARIABLE
    (140) assignation_false -> . VARIABLE ASSIGNATION boolean_operation

    VARIABLE        shift and go to state 129

    assignation_true_multiple      shift and go to state 125
    assignation_false_multiple     shift and go to state 126
    assignation_true               shift and go to state 127
    assignation_false              shift and go to state 128

state 141

    (117) constant_assignation -> CONST assignation_type_value_multiple . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 202


state 142

    (119) variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .

    PRINT           reduce using rule 119 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    CHARTYPE        reduce using rule 119 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 119 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 119 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 119 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    INTTYPE         reduce using rule 119 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 119 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    VARIABLE        reduce using rule 119 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    STATIC          reduce using rule 119 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    WRITE           reduce using rule 119 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    LPARENT         reduce using rule 119 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    ENUM            reduce using rule 119 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    IF              reduce using rule 119 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    STACK           reduce using rule 119 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    QUEUE           reduce using rule 119 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    CONST           reduce using rule 119 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    THREAD          reduce using rule 119 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    TRY             reduce using rule 119 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    LIST            reduce using rule 119 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    FOR             reduce using rule 119 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    FOREACH         reduce using rule 119 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    WHILE           reduce using rule 119 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    DO              reduce using rule 119 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    PUBLIC          reduce using rule 119 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    PRIVATE         reduce using rule 119 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    RKEY            reduce using rule 119 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)
    $end            reduce using rule 119 (variable_assignation -> assignation_type_value_multiple DOTANDCOMMA .)


state 143

    (157) declaration_thread -> THREAD thread_identificator . ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (158) declaration_thread -> THREAD thread_identificator . ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA

    ASSIGNATION     shift and go to state 203


state 144

    (170) thread_identificator -> VARIABLE .

    ASSIGNATION     reduce using rule 170 (thread_identificator -> VARIABLE .)
    LPARENT         reduce using rule 170 (thread_identificator -> VARIABLE .)
    DOT             reduce using rule 170 (thread_identificator -> VARIABLE .)
    RPARENT         reduce using rule 170 (thread_identificator -> VARIABLE .)


state 145

    (177) try_catch_simply -> TRY LKEY . all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (178) try_catch_finally -> TRY LKEY . all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (181) all_block_code_try -> . block_code_try
    (182) all_block_code_try -> . block_code_try all_block_code_try
    (179) block_code_try -> . def_const_or_var
    (180) block_code_try -> . print_data
    (114) def_const_or_var -> . constant_assignation
    (115) def_const_or_var -> . variable_assignation
    (44) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (45) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (116) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (117) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (118) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (119) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (120) access_modifiers -> . PUBLIC
    (121) access_modifiers -> . PRIVATE
    (141) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (142) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (143) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (144) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (145) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 56
    CONST           shift and go to state 91
    PUBLIC          shift and go to state 100
    PRIVATE         shift and go to state 101
    INTTYPE         shift and go to state 137
    STRINGTYPE      shift and go to state 138
    FLOATTYPE       shift and go to state 139
    BOOLTYPE        shift and go to state 140

    all_block_code_try             shift and go to state 204
    block_code_try                 shift and go to state 205
    def_const_or_var               shift and go to state 206
    print_data                     shift and go to state 207
    constant_assignation           shift and go to state 54
    variable_assignation           shift and go to state 55
    access_modifiers               shift and go to state 90
    assignation_type_value_multiple shift and go to state 92

state 146

    (200) list_empty -> LIST SMALLER_THAN . STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (201) list_empty -> LIST SMALLER_THAN . INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (202) list_full -> LIST SMALLER_THAN . STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (203) list_full -> LIST SMALLER_THAN . INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    STRINGTYPE      shift and go to state 208
    INTTYPE         shift and go to state 209


state 147

    (195) for_simple -> FOR LPARENT . INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (196) for_simple -> FOR LPARENT . INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    INTTYPE         shift and go to state 210


state 148

    (197) for_each -> FOREACH LPARENT . data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (27) data_type -> . CHARTYPE
    (28) data_type -> . STRINGTYPE
    (29) data_type -> . FLOATTYPE
    (30) data_type -> . DECIMALTYPE
    (31) data_type -> . INTTYPE
    (32) data_type -> . BOOLTYPE

    CHARTYPE        shift and go to state 212
    STRINGTYPE      shift and go to state 213
    FLOATTYPE       shift and go to state 214
    DECIMALTYPE     shift and go to state 215
    INTTYPE         shift and go to state 216
    BOOLTYPE        shift and go to state 217

    data_type                      shift and go to state 211

state 149

    (191) normal_while -> WHILE LPARENT . boolean_operation RPARENT LKEY all_block_code RKEY
    (109) boolean_operation -> . value_boolean
    (110) boolean_operation -> . LOGICNOT value_boolean
    (111) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (36) value_boolean -> . BOOLTRUE
    (37) value_boolean -> . BOOLFALSE
    (38) value_boolean -> . VARIABLE
    (39) value_boolean -> . comparison_operation
    (101) comparison_operation -> . value_numeric
    (102) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (40) value_numeric -> . INTEGER
    (41) value_numeric -> . FLOAT_NUMBER
    (42) value_numeric -> . DECIMAL_NUMBER
    (43) value_numeric -> . VARIABLE

    LOGICNOT        shift and go to state 189
    BOOLTRUE        shift and go to state 190
    BOOLFALSE       shift and go to state 191
    VARIABLE        shift and go to state 192
    INTEGER         shift and go to state 195
    FLOAT_NUMBER    shift and go to state 196
    DECIMAL_NUMBER  shift and go to state 197

    boolean_operation              shift and go to state 218
    value_boolean                  shift and go to state 188
    comparison_operation           shift and go to state 193
    value_numeric                  shift and go to state 194

state 150

    (192) do_while -> DO LKEY . all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (25) all_block_code -> . block_code
    (26) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . array_assignation
    (9) block_code -> . array_value_assign
    (10) block_code -> . array_indexing
    (11) block_code -> . thread_main
    (12) block_code -> . concurrent_method
    (13) block_code -> . block_try_catch
    (14) block_code -> . lists
    (15) block_code -> . functions_list
    (16) block_code -> . statement_lambda
    (17) block_code -> . enums
    (18) block_code -> . normal_if
    (19) block_code -> . block_for
    (20) block_code -> . block_while
    (21) block_code -> . stack_struct
    (22) block_code -> . functions_stack
    (23) block_code -> . queue_struct
    (24) block_code -> . functions_queue
    (114) def_const_or_var -> . constant_assignation
    (115) def_const_or_var -> . variable_assignation
    (44) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (45) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (55) array_assignation -> . CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA
    (56) array_assignation -> . STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
    (57) array_assignation -> . FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
    (58) array_assignation -> . DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA
    (59) array_assignation -> . INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
    (60) array_assignation -> . BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
    (86) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (87) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (84) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (85) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (156) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (161) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (162) concurrent_method -> . WRITE
    (175) block_try_catch -> . try_catch_simply
    (176) block_try_catch -> . try_catch_finally
    (198) lists -> . list_empty
    (199) lists -> . list_full
    (208) functions_list -> . list_func_clear
    (209) functions_list -> . list_func_count
    (210) functions_list -> . list_func_add
    (211) functions_list -> . list_func_removeat
    (171) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (172) enums -> . ENUM METHOD LKEY list_enums RKEY
    (185) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (186) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (193) block_for -> . for_simple
    (194) block_for -> . for_each
    (189) block_while -> . normal_while
    (190) block_while -> . do_while
    (218) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (219) functions_stack -> . stack_push
    (220) functions_stack -> . stack_pop
    (221) functions_stack -> . stack_clear
    (222) functions_stack -> . stack_peek
    (223) functions_stack -> . stack_isEmpty
    (229) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (230) functions_queue -> . queue_enqueue
    (231) functions_queue -> . queue_dequeue
    (232) functions_queue -> . queue_clear
    (233) functions_queue -> . queue_isEmpty
    (234) functions_queue -> . queue_peek
    (116) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (117) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (118) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (119) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (157) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (158) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (177) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (178) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (200) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (201) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (202) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (203) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (212) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (213) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (214) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (215) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (216) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (217) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (195) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (196) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (197) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (191) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (192) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (224) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (225) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (226) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (227) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (228) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (235) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (236) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (237) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (239) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (238) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (120) access_modifiers -> . PUBLIC
    (121) access_modifiers -> . PRIVATE
    (141) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (142) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (143) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (144) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (145) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 56
    CHARTYPE        shift and go to state 57
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 58
    DECIMALTYPE     shift and go to state 59
    INTTYPE         shift and go to state 60
    BOOLTYPE        shift and go to state 61
    VARIABLE        shift and go to state 32
    STATIC          shift and go to state 29
    WRITE           shift and go to state 63
    LPARENT         shift and go to state 30
    ENUM            shift and go to state 72
    IF              shift and go to state 73
    STACK           shift and go to state 78
    QUEUE           shift and go to state 84
    CONST           shift and go to state 91
    THREAD          shift and go to state 93
    TRY             shift and go to state 94
    LIST            shift and go to state 95
    FOR             shift and go to state 96
    FOREACH         shift and go to state 97
    WHILE           shift and go to state 98
    DO              shift and go to state 99
    PUBLIC          shift and go to state 100
    PRIVATE         shift and go to state 101

    all_block_code                 shift and go to state 219
    block_code                     shift and go to state 34
    def_const_or_var               shift and go to state 35
    print_data                     shift and go to state 36
    array_assignation              shift and go to state 37
    array_value_assign             shift and go to state 38
    array_indexing                 shift and go to state 39
    thread_main                    shift and go to state 40
    concurrent_method              shift and go to state 41
    block_try_catch                shift and go to state 42
    lists                          shift and go to state 43
    functions_list                 shift and go to state 44
    statement_lambda               shift and go to state 45
    enums                          shift and go to state 46
    normal_if                      shift and go to state 47
    block_for                      shift and go to state 48
    block_while                    shift and go to state 49
    stack_struct                   shift and go to state 50
    functions_stack                shift and go to state 51
    queue_struct                   shift and go to state 52
    functions_queue                shift and go to state 53
    constant_assignation           shift and go to state 54
    variable_assignation           shift and go to state 55
    declaration_thread             shift and go to state 62
    try_catch_simply               shift and go to state 64
    try_catch_finally              shift and go to state 65
    list_empty                     shift and go to state 66
    list_full                      shift and go to state 67
    list_func_clear                shift and go to state 68
    list_func_count                shift and go to state 69
    list_func_add                  shift and go to state 70
    list_func_removeat             shift and go to state 71
    for_simple                     shift and go to state 74
    for_each                       shift and go to state 75
    normal_while                   shift and go to state 76
    do_while                       shift and go to state 77
    stack_push                     shift and go to state 79
    stack_pop                      shift and go to state 80
    stack_clear                    shift and go to state 81
    stack_peek                     shift and go to state 82
    stack_isEmpty                  shift and go to state 83
    queue_enqueue                  shift and go to state 85
    queue_dequeue                  shift and go to state 86
    queue_clear                    shift and go to state 87
    queue_isEmpty                  shift and go to state 88
    queue_peek                     shift and go to state 89
    access_modifiers               shift and go to state 90
    assignation_type_value_multiple shift and go to state 92

state 151

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT . LKEY all_block_code RKEY
    (5) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT . LKEY all_block_code RKEY all_block_code

    LKEY            shift and go to state 220


state 152

    (161) concurrent_method -> STATIC VOID thread_identificator . LPARENT RPARENT LKEY thread_logic RKEY

    LPARENT         shift and go to state 221


state 153

    (171) statement_lambda -> LPARENT VARIABLE ARROW . LKEY all_block_code RKEY RPARENT

    LKEY            shift and go to state 222


state 154

    (56) array_assignation -> STRINGTYPE LBRACKET RBRACKET . string_array_assignation DOTANDCOMMA
    (64) string_array_assignation -> . VARIABLE ASSIGNATION LBRACKET string_content_multiple RBRACKET

    VARIABLE        shift and go to state 224

    string_array_assignation       shift and go to state 223

state 155

    (149) assignation_string_multiple -> assignation_string COMMA . assignation_string_multiple
    (148) assignation_string_multiple -> . assignation_string
    (149) assignation_string_multiple -> . assignation_string COMMA assignation_string_multiple
    (130) assignation_string -> . VARIABLE ASSIGNATION STRING
    (131) assignation_string -> . VARIABLE ASSIGNATION VARIABLE

    VARIABLE        shift and go to state 108

    assignation_string             shift and go to state 107
    assignation_string_multiple    shift and go to state 225

state 156

    (130) assignation_string -> VARIABLE ASSIGNATION . STRING
    (131) assignation_string -> VARIABLE ASSIGNATION . VARIABLE

    STRING          shift and go to state 227
    VARIABLE        shift and go to state 226


state 157

    (86) array_value_assign -> VARIABLE LBRACKET VARIABLE . RBRACKET ASSIGNATION value DOTANDCOMMA
    (84) array_indexing -> VARIABLE LBRACKET VARIABLE . RBRACKET

    RBRACKET        shift and go to state 228


state 158

    (87) array_value_assign -> VARIABLE LBRACKET INTEGER . RBRACKET ASSIGNATION value DOTANDCOMMA
    (85) array_indexing -> VARIABLE LBRACKET INTEGER . RBRACKET

    RBRACKET        shift and go to state 229


state 159

    (212) list_func_clear -> VARIABLE DOT CLEAR . LPARENT RPARENT DOTANDCOMMA
    (226) stack_clear -> VARIABLE DOT CLEAR . LPARENT RPARENT DOTANDCOMMA
    (237) queue_clear -> VARIABLE DOT CLEAR . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 230


state 160

    (213) list_func_count -> VARIABLE DOT COUNT . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 231


state 161

    (214) list_func_add -> VARIABLE DOT ADD . LPARENT INTEGER RPARENT DOTANDCOMMA
    (215) list_func_add -> VARIABLE DOT ADD . LPARENT STRING RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 232


state 162

    (216) list_func_removeat -> VARIABLE DOT REMOVEAT . LPARENT INTEGER RPARENT DOTANDCOMMA
    (217) list_func_removeat -> VARIABLE DOT REMOVEAT . LPARENT STRING RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 233


state 163

    (224) stack_push -> VARIABLE DOT PUSH . LPARENT value RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 234


state 164

    (225) stack_pop -> VARIABLE DOT POP . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 235


state 165

    (227) stack_peek -> VARIABLE DOT PEEK . LPARENT RPARENT DOTANDCOMMA
    (238) queue_peek -> VARIABLE DOT PEEK . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 236


state 166

    (228) stack_isEmpty -> VARIABLE DOT ISEMPTY . LPARENT RPARENT DOTANDCOMMA
    (239) queue_isEmpty -> VARIABLE DOT ISEMPTY . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 237


state 167

    (235) queue_enqueue -> VARIABLE DOT ENQUEUE . LPARENT value RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 238


state 168

    (236) queue_dequeue -> VARIABLE DOT DEQUEUE . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 239


state 169

    (3) block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code .

    $end            reduce using rule 3 (block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code .)


state 170

    (44) print_data -> PRINT LPARENT STRING . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 240


state 171

    (45) print_data -> PRINT LPARENT VARIABLE . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 241


state 172

    (55) array_assignation -> CHARTYPE LBRACKET RBRACKET . char_array_assignation DOTANDCOMMA
    (61) char_array_assignation -> . VARIABLE ASSIGNATION LBRACKET char_content_multiple RBRACKET

    VARIABLE        shift and go to state 243

    char_array_assignation         shift and go to state 242

state 173

    (57) array_assignation -> FLOATTYPE LBRACKET RBRACKET . float_array_assignation DOTANDCOMMA
    (67) float_array_assignation -> . VARIABLE ASSIGNATION LBRACKET float_content_multiple RBRACKET

    VARIABLE        shift and go to state 245

    float_array_assignation        shift and go to state 244

state 174

    (151) assignation_float_multiple -> assignation_float COMMA . assignation_float_multiple
    (150) assignation_float_multiple -> . assignation_float
    (151) assignation_float_multiple -> . assignation_float COMMA assignation_float_multiple
    (132) assignation_float -> . VARIABLE ASSIGNATION FLOAT_NUMBER
    (133) assignation_float -> . VARIABLE ASSIGNATION VARIABLE
    (134) assignation_float -> . VARIABLE ASSIGNATION arithmetic_operation

    VARIABLE        shift and go to state 118

    assignation_float              shift and go to state 117
    assignation_float_multiple     shift and go to state 246

state 175

    (132) assignation_float -> VARIABLE ASSIGNATION . FLOAT_NUMBER
    (133) assignation_float -> VARIABLE ASSIGNATION . VARIABLE
    (134) assignation_float -> VARIABLE ASSIGNATION . arithmetic_operation
    (94) arithmetic_operation -> . value_numeric
    (95) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (40) value_numeric -> . INTEGER
    (41) value_numeric -> . FLOAT_NUMBER
    (42) value_numeric -> . DECIMAL_NUMBER
    (43) value_numeric -> . VARIABLE

    FLOAT_NUMBER    shift and go to state 248
    VARIABLE        shift and go to state 247
    INTEGER         shift and go to state 195
    DECIMAL_NUMBER  shift and go to state 197

    arithmetic_operation           shift and go to state 249
    value_numeric                  shift and go to state 250

state 176

    (58) array_assignation -> DECIMALTYPE LBRACKET RBRACKET . decimal_array_assignation DOTANDCOMMA
    (73) decimal_array_assignation -> . VARIABLE ASSIGNATION LBRACKET decimal_content_multiple RBRACKET

    VARIABLE        shift and go to state 252

    decimal_array_assignation      shift and go to state 251

state 177

    (59) array_assignation -> INTTYPE LBRACKET RBRACKET . int_array_assignation DOTANDCOMMA
    (70) int_array_assignation -> . VARIABLE ASSIGNATION LBRACKET int_content_multiple RBRACKET

    VARIABLE        shift and go to state 254

    int_array_assignation          shift and go to state 253

state 178

    (147) assignation_int_multiple -> assignation_int COMMA . assignation_int_multiple
    (146) assignation_int_multiple -> . assignation_int
    (147) assignation_int_multiple -> . assignation_int COMMA assignation_int_multiple
    (127) assignation_int -> . VARIABLE ASSIGNATION INTEGER
    (128) assignation_int -> . VARIABLE ASSIGNATION VARIABLE
    (129) assignation_int -> . VARIABLE ASSIGNATION arithmetic_operation

    VARIABLE        shift and go to state 123

    assignation_int                shift and go to state 122
    assignation_int_multiple       shift and go to state 255

state 179

    (127) assignation_int -> VARIABLE ASSIGNATION . INTEGER
    (128) assignation_int -> VARIABLE ASSIGNATION . VARIABLE
    (129) assignation_int -> VARIABLE ASSIGNATION . arithmetic_operation
    (94) arithmetic_operation -> . value_numeric
    (95) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (40) value_numeric -> . INTEGER
    (41) value_numeric -> . FLOAT_NUMBER
    (42) value_numeric -> . DECIMAL_NUMBER
    (43) value_numeric -> . VARIABLE

    INTEGER         shift and go to state 257
    VARIABLE        shift and go to state 256
    FLOAT_NUMBER    shift and go to state 196
    DECIMAL_NUMBER  shift and go to state 197

    arithmetic_operation           shift and go to state 258
    value_numeric                  shift and go to state 250

state 180

    (60) array_assignation -> BOOLTYPE LBRACKET RBRACKET . bool_array_assignation DOTANDCOMMA
    (76) bool_array_assignation -> . VARIABLE ASSIGNATION LBRACKET bool_content_multiple RBRACKET

    VARIABLE        shift and go to state 260

    bool_array_assignation         shift and go to state 259

state 181

    (153) assignation_true_multiple -> assignation_true COMMA . assignation_true_multiple
    (152) assignation_true_multiple -> . assignation_true
    (153) assignation_true_multiple -> . assignation_true COMMA assignation_true_multiple
    (135) assignation_true -> . VARIABLE ASSIGNATION BOOLTRUE
    (136) assignation_true -> . VARIABLE ASSIGNATION VARIABLE
    (137) assignation_true -> . VARIABLE ASSIGNATION boolean_operation

    VARIABLE        shift and go to state 262

    assignation_true               shift and go to state 127
    assignation_true_multiple      shift and go to state 261

state 182

    (155) assignation_false_multiple -> assignation_false COMMA . assignation_false_multiple
    (154) assignation_false_multiple -> . assignation_false
    (155) assignation_false_multiple -> . assignation_false COMMA assignation_false_multiple
    (138) assignation_false -> . VARIABLE ASSIGNATION BOOLFALSE
    (139) assignation_false -> . VARIABLE ASSIGNATION VARIABLE
    (140) assignation_false -> . VARIABLE ASSIGNATION boolean_operation

    VARIABLE        shift and go to state 264

    assignation_false              shift and go to state 128
    assignation_false_multiple     shift and go to state 263

state 183

    (135) assignation_true -> VARIABLE ASSIGNATION . BOOLTRUE
    (136) assignation_true -> VARIABLE ASSIGNATION . VARIABLE
    (137) assignation_true -> VARIABLE ASSIGNATION . boolean_operation
    (138) assignation_false -> VARIABLE ASSIGNATION . BOOLFALSE
    (139) assignation_false -> VARIABLE ASSIGNATION . VARIABLE
    (140) assignation_false -> VARIABLE ASSIGNATION . boolean_operation
    (109) boolean_operation -> . value_boolean
    (110) boolean_operation -> . LOGICNOT value_boolean
    (111) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (36) value_boolean -> . BOOLTRUE
    (37) value_boolean -> . BOOLFALSE
    (38) value_boolean -> . VARIABLE
    (39) value_boolean -> . comparison_operation
    (101) comparison_operation -> . value_numeric
    (102) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (40) value_numeric -> . INTEGER
    (41) value_numeric -> . FLOAT_NUMBER
    (42) value_numeric -> . DECIMAL_NUMBER
    (43) value_numeric -> . VARIABLE

    BOOLTRUE        shift and go to state 266
    VARIABLE        shift and go to state 265
    BOOLFALSE       shift and go to state 268
    LOGICNOT        shift and go to state 189
    INTEGER         shift and go to state 195
    FLOAT_NUMBER    shift and go to state 196
    DECIMAL_NUMBER  shift and go to state 197

    boolean_operation              shift and go to state 267
    value_boolean                  shift and go to state 188
    comparison_operation           shift and go to state 193
    value_numeric                  shift and go to state 194

state 184

    (156) thread_main -> declaration_thread declaration_thread thread_init . thread_init thread_wait thread_wait
    (159) thread_init -> . thread_identificator DOT START LPARENT RPARENT DOTANDCOMMA
    (170) thread_identificator -> . VARIABLE

    VARIABLE        shift and go to state 144

    thread_init                    shift and go to state 269
    thread_identificator           shift and go to state 185

state 185

    (159) thread_init -> thread_identificator . DOT START LPARENT RPARENT DOTANDCOMMA

    DOT             shift and go to state 270


state 186

    (172) enums -> ENUM METHOD LKEY . list_enums RKEY
    (173) list_enums -> . METHOD
    (174) list_enums -> . METHOD COMMA list_enums

    METHOD          shift and go to state 271

    list_enums                     shift and go to state 272

state 187

    (185) normal_if -> IF LPARENT boolean_operation . RPARENT LKEY block_if RKEY other_if
    (186) normal_if -> IF LPARENT boolean_operation . RPARENT LKEY block_if RKEY

    RPARENT         shift and go to state 273


state 188

    (109) boolean_operation -> value_boolean .
    (111) boolean_operation -> value_boolean . boolean_operator boolean_operation
    (112) boolean_operator -> . LOGICAND
    (113) boolean_operator -> . LOGICOR

    RPARENT         reduce using rule 109 (boolean_operation -> value_boolean .)
    COMMA           reduce using rule 109 (boolean_operation -> value_boolean .)
    DOTANDCOMMA     reduce using rule 109 (boolean_operation -> value_boolean .)
    LOGICAND        shift and go to state 275
    LOGICOR         shift and go to state 276

    boolean_operator               shift and go to state 274

state 189

    (110) boolean_operation -> LOGICNOT . value_boolean
    (36) value_boolean -> . BOOLTRUE
    (37) value_boolean -> . BOOLFALSE
    (38) value_boolean -> . VARIABLE
    (39) value_boolean -> . comparison_operation
    (101) comparison_operation -> . value_numeric
    (102) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (40) value_numeric -> . INTEGER
    (41) value_numeric -> . FLOAT_NUMBER
    (42) value_numeric -> . DECIMAL_NUMBER
    (43) value_numeric -> . VARIABLE

    BOOLTRUE        shift and go to state 190
    BOOLFALSE       shift and go to state 191
    VARIABLE        shift and go to state 192
    INTEGER         shift and go to state 195
    FLOAT_NUMBER    shift and go to state 196
    DECIMAL_NUMBER  shift and go to state 197

    value_boolean                  shift and go to state 277
    comparison_operation           shift and go to state 193
    value_numeric                  shift and go to state 194

state 190

    (36) value_boolean -> BOOLTRUE .

    LOGICAND        reduce using rule 36 (value_boolean -> BOOLTRUE .)
    LOGICOR         reduce using rule 36 (value_boolean -> BOOLTRUE .)
    RPARENT         reduce using rule 36 (value_boolean -> BOOLTRUE .)
    COMMA           reduce using rule 36 (value_boolean -> BOOLTRUE .)
    DOTANDCOMMA     reduce using rule 36 (value_boolean -> BOOLTRUE .)
    RBRACKET        reduce using rule 36 (value_boolean -> BOOLTRUE .)


state 191

    (37) value_boolean -> BOOLFALSE .

    LOGICAND        reduce using rule 37 (value_boolean -> BOOLFALSE .)
    LOGICOR         reduce using rule 37 (value_boolean -> BOOLFALSE .)
    RPARENT         reduce using rule 37 (value_boolean -> BOOLFALSE .)
    COMMA           reduce using rule 37 (value_boolean -> BOOLFALSE .)
    DOTANDCOMMA     reduce using rule 37 (value_boolean -> BOOLFALSE .)
    RBRACKET        reduce using rule 37 (value_boolean -> BOOLFALSE .)


state 192

    (38) value_boolean -> VARIABLE .
    (43) value_numeric -> VARIABLE .

  ! reduce/reduce conflict for LOGICAND resolved using rule 38 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for LOGICOR resolved using rule 38 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for RPARENT resolved using rule 38 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 38 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 38 (value_boolean -> VARIABLE .)
    LOGICAND        reduce using rule 38 (value_boolean -> VARIABLE .)
    LOGICOR         reduce using rule 38 (value_boolean -> VARIABLE .)
    RPARENT         reduce using rule 38 (value_boolean -> VARIABLE .)
    COMMA           reduce using rule 38 (value_boolean -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 38 (value_boolean -> VARIABLE .)
    GREATER_THAN    reduce using rule 43 (value_numeric -> VARIABLE .)
    SMALLER_THAN    reduce using rule 43 (value_numeric -> VARIABLE .)
    EQUAL_COMPARATION reduce using rule 43 (value_numeric -> VARIABLE .)
    INEQUALITY      reduce using rule 43 (value_numeric -> VARIABLE .)
    GREATER_THAN_OR_EQUAL reduce using rule 43 (value_numeric -> VARIABLE .)
    SMALLER_THAN_OR_EQUAL reduce using rule 43 (value_numeric -> VARIABLE .)

  ! LOGICAND        [ reduce using rule 43 (value_numeric -> VARIABLE .) ]
  ! LOGICOR         [ reduce using rule 43 (value_numeric -> VARIABLE .) ]
  ! RPARENT         [ reduce using rule 43 (value_numeric -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 43 (value_numeric -> VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 43 (value_numeric -> VARIABLE .) ]


state 193

    (39) value_boolean -> comparison_operation .

    LOGICAND        reduce using rule 39 (value_boolean -> comparison_operation .)
    LOGICOR         reduce using rule 39 (value_boolean -> comparison_operation .)
    RPARENT         reduce using rule 39 (value_boolean -> comparison_operation .)
    COMMA           reduce using rule 39 (value_boolean -> comparison_operation .)
    DOTANDCOMMA     reduce using rule 39 (value_boolean -> comparison_operation .)
    RBRACKET        reduce using rule 39 (value_boolean -> comparison_operation .)


state 194

    (101) comparison_operation -> value_numeric .
    (102) comparison_operation -> value_numeric . comparison_operator comparison_operation
    (103) comparison_operator -> . GREATER_THAN
    (104) comparison_operator -> . SMALLER_THAN
    (105) comparison_operator -> . EQUAL_COMPARATION
    (106) comparison_operator -> . INEQUALITY
    (107) comparison_operator -> . GREATER_THAN_OR_EQUAL
    (108) comparison_operator -> . SMALLER_THAN_OR_EQUAL

    LOGICAND        reduce using rule 101 (comparison_operation -> value_numeric .)
    LOGICOR         reduce using rule 101 (comparison_operation -> value_numeric .)
    RPARENT         reduce using rule 101 (comparison_operation -> value_numeric .)
    COMMA           reduce using rule 101 (comparison_operation -> value_numeric .)
    DOTANDCOMMA     reduce using rule 101 (comparison_operation -> value_numeric .)
    RBRACKET        reduce using rule 101 (comparison_operation -> value_numeric .)
    GREATER_THAN    shift and go to state 279
    SMALLER_THAN    shift and go to state 280
    EQUAL_COMPARATION shift and go to state 281
    INEQUALITY      shift and go to state 282
    GREATER_THAN_OR_EQUAL shift and go to state 283
    SMALLER_THAN_OR_EQUAL shift and go to state 284

    comparison_operator            shift and go to state 278

state 195

    (40) value_numeric -> INTEGER .

    GREATER_THAN    reduce using rule 40 (value_numeric -> INTEGER .)
    SMALLER_THAN    reduce using rule 40 (value_numeric -> INTEGER .)
    EQUAL_COMPARATION reduce using rule 40 (value_numeric -> INTEGER .)
    INEQUALITY      reduce using rule 40 (value_numeric -> INTEGER .)
    GREATER_THAN_OR_EQUAL reduce using rule 40 (value_numeric -> INTEGER .)
    SMALLER_THAN_OR_EQUAL reduce using rule 40 (value_numeric -> INTEGER .)
    LOGICAND        reduce using rule 40 (value_numeric -> INTEGER .)
    LOGICOR         reduce using rule 40 (value_numeric -> INTEGER .)
    RPARENT         reduce using rule 40 (value_numeric -> INTEGER .)
    PLUS            reduce using rule 40 (value_numeric -> INTEGER .)
    MINUS           reduce using rule 40 (value_numeric -> INTEGER .)
    TIMES           reduce using rule 40 (value_numeric -> INTEGER .)
    DIVIDE          reduce using rule 40 (value_numeric -> INTEGER .)
    PERCENT         reduce using rule 40 (value_numeric -> INTEGER .)
    COMMA           reduce using rule 40 (value_numeric -> INTEGER .)
    DOTANDCOMMA     reduce using rule 40 (value_numeric -> INTEGER .)
    RBRACKET        reduce using rule 40 (value_numeric -> INTEGER .)


state 196

    (41) value_numeric -> FLOAT_NUMBER .

    GREATER_THAN    reduce using rule 41 (value_numeric -> FLOAT_NUMBER .)
    SMALLER_THAN    reduce using rule 41 (value_numeric -> FLOAT_NUMBER .)
    EQUAL_COMPARATION reduce using rule 41 (value_numeric -> FLOAT_NUMBER .)
    INEQUALITY      reduce using rule 41 (value_numeric -> FLOAT_NUMBER .)
    GREATER_THAN_OR_EQUAL reduce using rule 41 (value_numeric -> FLOAT_NUMBER .)
    SMALLER_THAN_OR_EQUAL reduce using rule 41 (value_numeric -> FLOAT_NUMBER .)
    LOGICAND        reduce using rule 41 (value_numeric -> FLOAT_NUMBER .)
    LOGICOR         reduce using rule 41 (value_numeric -> FLOAT_NUMBER .)
    RPARENT         reduce using rule 41 (value_numeric -> FLOAT_NUMBER .)
    PLUS            reduce using rule 41 (value_numeric -> FLOAT_NUMBER .)
    MINUS           reduce using rule 41 (value_numeric -> FLOAT_NUMBER .)
    TIMES           reduce using rule 41 (value_numeric -> FLOAT_NUMBER .)
    DIVIDE          reduce using rule 41 (value_numeric -> FLOAT_NUMBER .)
    PERCENT         reduce using rule 41 (value_numeric -> FLOAT_NUMBER .)
    COMMA           reduce using rule 41 (value_numeric -> FLOAT_NUMBER .)
    DOTANDCOMMA     reduce using rule 41 (value_numeric -> FLOAT_NUMBER .)
    RBRACKET        reduce using rule 41 (value_numeric -> FLOAT_NUMBER .)


state 197

    (42) value_numeric -> DECIMAL_NUMBER .

    GREATER_THAN    reduce using rule 42 (value_numeric -> DECIMAL_NUMBER .)
    SMALLER_THAN    reduce using rule 42 (value_numeric -> DECIMAL_NUMBER .)
    EQUAL_COMPARATION reduce using rule 42 (value_numeric -> DECIMAL_NUMBER .)
    INEQUALITY      reduce using rule 42 (value_numeric -> DECIMAL_NUMBER .)
    GREATER_THAN_OR_EQUAL reduce using rule 42 (value_numeric -> DECIMAL_NUMBER .)
    SMALLER_THAN_OR_EQUAL reduce using rule 42 (value_numeric -> DECIMAL_NUMBER .)
    LOGICAND        reduce using rule 42 (value_numeric -> DECIMAL_NUMBER .)
    LOGICOR         reduce using rule 42 (value_numeric -> DECIMAL_NUMBER .)
    RPARENT         reduce using rule 42 (value_numeric -> DECIMAL_NUMBER .)
    PLUS            reduce using rule 42 (value_numeric -> DECIMAL_NUMBER .)
    MINUS           reduce using rule 42 (value_numeric -> DECIMAL_NUMBER .)
    TIMES           reduce using rule 42 (value_numeric -> DECIMAL_NUMBER .)
    DIVIDE          reduce using rule 42 (value_numeric -> DECIMAL_NUMBER .)
    PERCENT         reduce using rule 42 (value_numeric -> DECIMAL_NUMBER .)
    COMMA           reduce using rule 42 (value_numeric -> DECIMAL_NUMBER .)
    DOTANDCOMMA     reduce using rule 42 (value_numeric -> DECIMAL_NUMBER .)
    RBRACKET        reduce using rule 42 (value_numeric -> DECIMAL_NUMBER .)


state 198

    (218) stack_struct -> STACK VARIABLE ASSIGNATION . NEW STACK LPARENT RPARENT DOTANDCOMMA

    NEW             shift and go to state 285


state 199

    (229) queue_struct -> QUEUE VARIABLE ASSIGNATION . NEW QUEUE LPARENT RPARENT DOTANDCOMMA

    NEW             shift and go to state 286


state 200

    (116) constant_assignation -> access_modifiers CONST assignation_type_value_multiple . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 287


state 201

    (118) variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .

    PRINT           reduce using rule 118 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    CHARTYPE        reduce using rule 118 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 118 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 118 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 118 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    INTTYPE         reduce using rule 118 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 118 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    VARIABLE        reduce using rule 118 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    STATIC          reduce using rule 118 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    WRITE           reduce using rule 118 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    LPARENT         reduce using rule 118 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    ENUM            reduce using rule 118 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    IF              reduce using rule 118 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    STACK           reduce using rule 118 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    QUEUE           reduce using rule 118 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    CONST           reduce using rule 118 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    THREAD          reduce using rule 118 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    TRY             reduce using rule 118 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    LIST            reduce using rule 118 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    FOR             reduce using rule 118 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    FOREACH         reduce using rule 118 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    WHILE           reduce using rule 118 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    DO              reduce using rule 118 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    PUBLIC          reduce using rule 118 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    PRIVATE         reduce using rule 118 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    RKEY            reduce using rule 118 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)
    $end            reduce using rule 118 (variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA .)


state 202

    (117) constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .

    PRINT           reduce using rule 117 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    CHARTYPE        reduce using rule 117 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 117 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 117 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 117 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    INTTYPE         reduce using rule 117 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 117 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    VARIABLE        reduce using rule 117 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    STATIC          reduce using rule 117 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    WRITE           reduce using rule 117 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    LPARENT         reduce using rule 117 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    ENUM            reduce using rule 117 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    IF              reduce using rule 117 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    STACK           reduce using rule 117 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    QUEUE           reduce using rule 117 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    CONST           reduce using rule 117 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    THREAD          reduce using rule 117 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    TRY             reduce using rule 117 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    LIST            reduce using rule 117 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    FOR             reduce using rule 117 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    FOREACH         reduce using rule 117 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    WHILE           reduce using rule 117 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    DO              reduce using rule 117 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    PUBLIC          reduce using rule 117 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    PRIVATE         reduce using rule 117 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    RKEY            reduce using rule 117 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)
    $end            reduce using rule 117 (constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA .)


state 203

    (157) declaration_thread -> THREAD thread_identificator ASSIGNATION . NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (158) declaration_thread -> THREAD thread_identificator ASSIGNATION . NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA

    NEW             shift and go to state 288


state 204

    (177) try_catch_simply -> TRY LKEY all_block_code_try . RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (178) try_catch_finally -> TRY LKEY all_block_code_try . RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    RKEY            shift and go to state 289


state 205

    (181) all_block_code_try -> block_code_try .
    (182) all_block_code_try -> block_code_try . all_block_code_try
    (181) all_block_code_try -> . block_code_try
    (182) all_block_code_try -> . block_code_try all_block_code_try
    (179) block_code_try -> . def_const_or_var
    (180) block_code_try -> . print_data
    (114) def_const_or_var -> . constant_assignation
    (115) def_const_or_var -> . variable_assignation
    (44) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (45) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (116) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (117) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (118) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (119) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (120) access_modifiers -> . PUBLIC
    (121) access_modifiers -> . PRIVATE
    (141) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (142) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (143) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (144) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (145) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    RKEY            reduce using rule 181 (all_block_code_try -> block_code_try .)
    PRINT           shift and go to state 56
    CONST           shift and go to state 91
    PUBLIC          shift and go to state 100
    PRIVATE         shift and go to state 101
    INTTYPE         shift and go to state 137
    STRINGTYPE      shift and go to state 138
    FLOATTYPE       shift and go to state 139
    BOOLTYPE        shift and go to state 140

    block_code_try                 shift and go to state 205
    all_block_code_try             shift and go to state 290
    def_const_or_var               shift and go to state 206
    print_data                     shift and go to state 207
    constant_assignation           shift and go to state 54
    variable_assignation           shift and go to state 55
    access_modifiers               shift and go to state 90
    assignation_type_value_multiple shift and go to state 92

state 206

    (179) block_code_try -> def_const_or_var .

    PRINT           reduce using rule 179 (block_code_try -> def_const_or_var .)
    CONST           reduce using rule 179 (block_code_try -> def_const_or_var .)
    PUBLIC          reduce using rule 179 (block_code_try -> def_const_or_var .)
    PRIVATE         reduce using rule 179 (block_code_try -> def_const_or_var .)
    INTTYPE         reduce using rule 179 (block_code_try -> def_const_or_var .)
    STRINGTYPE      reduce using rule 179 (block_code_try -> def_const_or_var .)
    FLOATTYPE       reduce using rule 179 (block_code_try -> def_const_or_var .)
    BOOLTYPE        reduce using rule 179 (block_code_try -> def_const_or_var .)
    RKEY            reduce using rule 179 (block_code_try -> def_const_or_var .)


state 207

    (180) block_code_try -> print_data .

    PRINT           reduce using rule 180 (block_code_try -> print_data .)
    CONST           reduce using rule 180 (block_code_try -> print_data .)
    PUBLIC          reduce using rule 180 (block_code_try -> print_data .)
    PRIVATE         reduce using rule 180 (block_code_try -> print_data .)
    INTTYPE         reduce using rule 180 (block_code_try -> print_data .)
    STRINGTYPE      reduce using rule 180 (block_code_try -> print_data .)
    FLOATTYPE       reduce using rule 180 (block_code_try -> print_data .)
    BOOLTYPE        reduce using rule 180 (block_code_try -> print_data .)
    RKEY            reduce using rule 180 (block_code_try -> print_data .)


state 208

    (200) list_empty -> LIST SMALLER_THAN STRINGTYPE . GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (202) list_full -> LIST SMALLER_THAN STRINGTYPE . GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    GREATER_THAN    shift and go to state 291


state 209

    (201) list_empty -> LIST SMALLER_THAN INTTYPE . GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (203) list_full -> LIST SMALLER_THAN INTTYPE . GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    GREATER_THAN    shift and go to state 292


state 210

    (195) for_simple -> FOR LPARENT INTTYPE . assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (196) for_simple -> FOR LPARENT INTTYPE . assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (127) assignation_int -> . VARIABLE ASSIGNATION INTEGER
    (128) assignation_int -> . VARIABLE ASSIGNATION VARIABLE
    (129) assignation_int -> . VARIABLE ASSIGNATION arithmetic_operation

    VARIABLE        shift and go to state 123

    assignation_int                shift and go to state 293

state 211

    (197) for_each -> FOREACH LPARENT data_type . VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY

    VARIABLE        shift and go to state 294


state 212

    (27) data_type -> CHARTYPE .

    VARIABLE        reduce using rule 27 (data_type -> CHARTYPE .)


state 213

    (28) data_type -> STRINGTYPE .

    VARIABLE        reduce using rule 28 (data_type -> STRINGTYPE .)


state 214

    (29) data_type -> FLOATTYPE .

    VARIABLE        reduce using rule 29 (data_type -> FLOATTYPE .)


state 215

    (30) data_type -> DECIMALTYPE .

    VARIABLE        reduce using rule 30 (data_type -> DECIMALTYPE .)


state 216

    (31) data_type -> INTTYPE .

    VARIABLE        reduce using rule 31 (data_type -> INTTYPE .)


state 217

    (32) data_type -> BOOLTYPE .

    VARIABLE        reduce using rule 32 (data_type -> BOOLTYPE .)


state 218

    (191) normal_while -> WHILE LPARENT boolean_operation . RPARENT LKEY all_block_code RKEY

    RPARENT         shift and go to state 295


state 219

    (192) do_while -> DO LKEY all_block_code . RKEY WHILE LPARENT boolean_operation RPARENT

    RKEY            shift and go to state 296


state 220

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY . all_block_code RKEY
    (5) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY . all_block_code RKEY all_block_code
    (25) all_block_code -> . block_code
    (26) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . array_assignation
    (9) block_code -> . array_value_assign
    (10) block_code -> . array_indexing
    (11) block_code -> . thread_main
    (12) block_code -> . concurrent_method
    (13) block_code -> . block_try_catch
    (14) block_code -> . lists
    (15) block_code -> . functions_list
    (16) block_code -> . statement_lambda
    (17) block_code -> . enums
    (18) block_code -> . normal_if
    (19) block_code -> . block_for
    (20) block_code -> . block_while
    (21) block_code -> . stack_struct
    (22) block_code -> . functions_stack
    (23) block_code -> . queue_struct
    (24) block_code -> . functions_queue
    (114) def_const_or_var -> . constant_assignation
    (115) def_const_or_var -> . variable_assignation
    (44) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (45) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (55) array_assignation -> . CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA
    (56) array_assignation -> . STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
    (57) array_assignation -> . FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
    (58) array_assignation -> . DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA
    (59) array_assignation -> . INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
    (60) array_assignation -> . BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
    (86) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (87) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (84) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (85) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (156) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (161) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (162) concurrent_method -> . WRITE
    (175) block_try_catch -> . try_catch_simply
    (176) block_try_catch -> . try_catch_finally
    (198) lists -> . list_empty
    (199) lists -> . list_full
    (208) functions_list -> . list_func_clear
    (209) functions_list -> . list_func_count
    (210) functions_list -> . list_func_add
    (211) functions_list -> . list_func_removeat
    (171) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (172) enums -> . ENUM METHOD LKEY list_enums RKEY
    (185) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (186) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (193) block_for -> . for_simple
    (194) block_for -> . for_each
    (189) block_while -> . normal_while
    (190) block_while -> . do_while
    (218) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (219) functions_stack -> . stack_push
    (220) functions_stack -> . stack_pop
    (221) functions_stack -> . stack_clear
    (222) functions_stack -> . stack_peek
    (223) functions_stack -> . stack_isEmpty
    (229) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (230) functions_queue -> . queue_enqueue
    (231) functions_queue -> . queue_dequeue
    (232) functions_queue -> . queue_clear
    (233) functions_queue -> . queue_isEmpty
    (234) functions_queue -> . queue_peek
    (116) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (117) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (118) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (119) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (157) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (158) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (177) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (178) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (200) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (201) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (202) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (203) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (212) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (213) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (214) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (215) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (216) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (217) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (195) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (196) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (197) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (191) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (192) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (224) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (225) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (226) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (227) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (228) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (235) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (236) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (237) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (239) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (238) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (120) access_modifiers -> . PUBLIC
    (121) access_modifiers -> . PRIVATE
    (141) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (142) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (143) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (144) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (145) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 56
    CHARTYPE        shift and go to state 57
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 58
    DECIMALTYPE     shift and go to state 59
    INTTYPE         shift and go to state 60
    BOOLTYPE        shift and go to state 61
    VARIABLE        shift and go to state 32
    STATIC          shift and go to state 29
    WRITE           shift and go to state 63
    LPARENT         shift and go to state 30
    ENUM            shift and go to state 72
    IF              shift and go to state 73
    STACK           shift and go to state 78
    QUEUE           shift and go to state 84
    CONST           shift and go to state 91
    THREAD          shift and go to state 93
    TRY             shift and go to state 94
    LIST            shift and go to state 95
    FOR             shift and go to state 96
    FOREACH         shift and go to state 97
    WHILE           shift and go to state 98
    DO              shift and go to state 99
    PUBLIC          shift and go to state 100
    PRIVATE         shift and go to state 101

    all_block_code                 shift and go to state 297
    block_code                     shift and go to state 34
    def_const_or_var               shift and go to state 35
    print_data                     shift and go to state 36
    array_assignation              shift and go to state 37
    array_value_assign             shift and go to state 38
    array_indexing                 shift and go to state 39
    thread_main                    shift and go to state 40
    concurrent_method              shift and go to state 41
    block_try_catch                shift and go to state 42
    lists                          shift and go to state 43
    functions_list                 shift and go to state 44
    statement_lambda               shift and go to state 45
    enums                          shift and go to state 46
    normal_if                      shift and go to state 47
    block_for                      shift and go to state 48
    block_while                    shift and go to state 49
    stack_struct                   shift and go to state 50
    functions_stack                shift and go to state 51
    queue_struct                   shift and go to state 52
    functions_queue                shift and go to state 53
    constant_assignation           shift and go to state 54
    variable_assignation           shift and go to state 55
    declaration_thread             shift and go to state 62
    try_catch_simply               shift and go to state 64
    try_catch_finally              shift and go to state 65
    list_empty                     shift and go to state 66
    list_full                      shift and go to state 67
    list_func_clear                shift and go to state 68
    list_func_count                shift and go to state 69
    list_func_add                  shift and go to state 70
    list_func_removeat             shift and go to state 71
    for_simple                     shift and go to state 74
    for_each                       shift and go to state 75
    normal_while                   shift and go to state 76
    do_while                       shift and go to state 77
    stack_push                     shift and go to state 79
    stack_pop                      shift and go to state 80
    stack_clear                    shift and go to state 81
    stack_peek                     shift and go to state 82
    stack_isEmpty                  shift and go to state 83
    queue_enqueue                  shift and go to state 85
    queue_dequeue                  shift and go to state 86
    queue_clear                    shift and go to state 87
    queue_isEmpty                  shift and go to state 88
    queue_peek                     shift and go to state 89
    access_modifiers               shift and go to state 90
    assignation_type_value_multiple shift and go to state 92

state 221

    (161) concurrent_method -> STATIC VOID thread_identificator LPARENT . RPARENT LKEY thread_logic RKEY

    RPARENT         shift and go to state 298


state 222

    (171) statement_lambda -> LPARENT VARIABLE ARROW LKEY . all_block_code RKEY RPARENT
    (25) all_block_code -> . block_code
    (26) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . array_assignation
    (9) block_code -> . array_value_assign
    (10) block_code -> . array_indexing
    (11) block_code -> . thread_main
    (12) block_code -> . concurrent_method
    (13) block_code -> . block_try_catch
    (14) block_code -> . lists
    (15) block_code -> . functions_list
    (16) block_code -> . statement_lambda
    (17) block_code -> . enums
    (18) block_code -> . normal_if
    (19) block_code -> . block_for
    (20) block_code -> . block_while
    (21) block_code -> . stack_struct
    (22) block_code -> . functions_stack
    (23) block_code -> . queue_struct
    (24) block_code -> . functions_queue
    (114) def_const_or_var -> . constant_assignation
    (115) def_const_or_var -> . variable_assignation
    (44) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (45) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (55) array_assignation -> . CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA
    (56) array_assignation -> . STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
    (57) array_assignation -> . FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
    (58) array_assignation -> . DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA
    (59) array_assignation -> . INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
    (60) array_assignation -> . BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
    (86) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (87) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (84) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (85) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (156) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (161) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (162) concurrent_method -> . WRITE
    (175) block_try_catch -> . try_catch_simply
    (176) block_try_catch -> . try_catch_finally
    (198) lists -> . list_empty
    (199) lists -> . list_full
    (208) functions_list -> . list_func_clear
    (209) functions_list -> . list_func_count
    (210) functions_list -> . list_func_add
    (211) functions_list -> . list_func_removeat
    (171) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (172) enums -> . ENUM METHOD LKEY list_enums RKEY
    (185) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (186) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (193) block_for -> . for_simple
    (194) block_for -> . for_each
    (189) block_while -> . normal_while
    (190) block_while -> . do_while
    (218) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (219) functions_stack -> . stack_push
    (220) functions_stack -> . stack_pop
    (221) functions_stack -> . stack_clear
    (222) functions_stack -> . stack_peek
    (223) functions_stack -> . stack_isEmpty
    (229) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (230) functions_queue -> . queue_enqueue
    (231) functions_queue -> . queue_dequeue
    (232) functions_queue -> . queue_clear
    (233) functions_queue -> . queue_isEmpty
    (234) functions_queue -> . queue_peek
    (116) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (117) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (118) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (119) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (157) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (158) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (177) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (178) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (200) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (201) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (202) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (203) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (212) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (213) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (214) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (215) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (216) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (217) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (195) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (196) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (197) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (191) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (192) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (224) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (225) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (226) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (227) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (228) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (235) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (236) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (237) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (239) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (238) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (120) access_modifiers -> . PUBLIC
    (121) access_modifiers -> . PRIVATE
    (141) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (142) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (143) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (144) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (145) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 56
    CHARTYPE        shift and go to state 57
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 58
    DECIMALTYPE     shift and go to state 59
    INTTYPE         shift and go to state 60
    BOOLTYPE        shift and go to state 61
    VARIABLE        shift and go to state 32
    STATIC          shift and go to state 29
    WRITE           shift and go to state 63
    LPARENT         shift and go to state 30
    ENUM            shift and go to state 72
    IF              shift and go to state 73
    STACK           shift and go to state 78
    QUEUE           shift and go to state 84
    CONST           shift and go to state 91
    THREAD          shift and go to state 93
    TRY             shift and go to state 94
    LIST            shift and go to state 95
    FOR             shift and go to state 96
    FOREACH         shift and go to state 97
    WHILE           shift and go to state 98
    DO              shift and go to state 99
    PUBLIC          shift and go to state 100
    PRIVATE         shift and go to state 101

    all_block_code                 shift and go to state 299
    block_code                     shift and go to state 34
    def_const_or_var               shift and go to state 35
    print_data                     shift and go to state 36
    array_assignation              shift and go to state 37
    array_value_assign             shift and go to state 38
    array_indexing                 shift and go to state 39
    thread_main                    shift and go to state 40
    concurrent_method              shift and go to state 41
    block_try_catch                shift and go to state 42
    lists                          shift and go to state 43
    functions_list                 shift and go to state 44
    statement_lambda               shift and go to state 45
    enums                          shift and go to state 46
    normal_if                      shift and go to state 47
    block_for                      shift and go to state 48
    block_while                    shift and go to state 49
    stack_struct                   shift and go to state 50
    functions_stack                shift and go to state 51
    queue_struct                   shift and go to state 52
    functions_queue                shift and go to state 53
    constant_assignation           shift and go to state 54
    variable_assignation           shift and go to state 55
    declaration_thread             shift and go to state 62
    try_catch_simply               shift and go to state 64
    try_catch_finally              shift and go to state 65
    list_empty                     shift and go to state 66
    list_full                      shift and go to state 67
    list_func_clear                shift and go to state 68
    list_func_count                shift and go to state 69
    list_func_add                  shift and go to state 70
    list_func_removeat             shift and go to state 71
    for_simple                     shift and go to state 74
    for_each                       shift and go to state 75
    normal_while                   shift and go to state 76
    do_while                       shift and go to state 77
    stack_push                     shift and go to state 79
    stack_pop                      shift and go to state 80
    stack_clear                    shift and go to state 81
    stack_peek                     shift and go to state 82
    stack_isEmpty                  shift and go to state 83
    queue_enqueue                  shift and go to state 85
    queue_dequeue                  shift and go to state 86
    queue_clear                    shift and go to state 87
    queue_isEmpty                  shift and go to state 88
    queue_peek                     shift and go to state 89
    access_modifiers               shift and go to state 90
    assignation_type_value_multiple shift and go to state 92

state 223

    (56) array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 300


state 224

    (64) string_array_assignation -> VARIABLE . ASSIGNATION LBRACKET string_content_multiple RBRACKET

    ASSIGNATION     shift and go to state 301


state 225

    (149) assignation_string_multiple -> assignation_string COMMA assignation_string_multiple .

    DOTANDCOMMA     reduce using rule 149 (assignation_string_multiple -> assignation_string COMMA assignation_string_multiple .)


state 226

    (131) assignation_string -> VARIABLE ASSIGNATION VARIABLE .

    COMMA           reduce using rule 131 (assignation_string -> VARIABLE ASSIGNATION VARIABLE .)
    DOTANDCOMMA     reduce using rule 131 (assignation_string -> VARIABLE ASSIGNATION VARIABLE .)


state 227

    (130) assignation_string -> VARIABLE ASSIGNATION STRING .

    COMMA           reduce using rule 130 (assignation_string -> VARIABLE ASSIGNATION STRING .)
    DOTANDCOMMA     reduce using rule 130 (assignation_string -> VARIABLE ASSIGNATION STRING .)


state 228

    (86) array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET . ASSIGNATION value DOTANDCOMMA
    (84) array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .

    ASSIGNATION     shift and go to state 302
    PRINT           reduce using rule 84 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    CHARTYPE        reduce using rule 84 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    STRINGTYPE      reduce using rule 84 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    FLOATTYPE       reduce using rule 84 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    DECIMALTYPE     reduce using rule 84 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    INTTYPE         reduce using rule 84 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    BOOLTYPE        reduce using rule 84 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    VARIABLE        reduce using rule 84 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    STATIC          reduce using rule 84 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    WRITE           reduce using rule 84 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    LPARENT         reduce using rule 84 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    ENUM            reduce using rule 84 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    IF              reduce using rule 84 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    STACK           reduce using rule 84 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    QUEUE           reduce using rule 84 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    CONST           reduce using rule 84 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    THREAD          reduce using rule 84 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    TRY             reduce using rule 84 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    LIST            reduce using rule 84 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    FOR             reduce using rule 84 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    FOREACH         reduce using rule 84 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    WHILE           reduce using rule 84 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    DO              reduce using rule 84 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    PUBLIC          reduce using rule 84 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    PRIVATE         reduce using rule 84 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    RKEY            reduce using rule 84 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)
    $end            reduce using rule 84 (array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET .)


state 229

    (87) array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET . ASSIGNATION value DOTANDCOMMA
    (85) array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .

    ASSIGNATION     shift and go to state 303
    PRINT           reduce using rule 85 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    CHARTYPE        reduce using rule 85 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    STRINGTYPE      reduce using rule 85 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    FLOATTYPE       reduce using rule 85 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    DECIMALTYPE     reduce using rule 85 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    INTTYPE         reduce using rule 85 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    BOOLTYPE        reduce using rule 85 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    VARIABLE        reduce using rule 85 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    STATIC          reduce using rule 85 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    WRITE           reduce using rule 85 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    LPARENT         reduce using rule 85 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    ENUM            reduce using rule 85 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    IF              reduce using rule 85 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    STACK           reduce using rule 85 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    QUEUE           reduce using rule 85 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    CONST           reduce using rule 85 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    THREAD          reduce using rule 85 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    TRY             reduce using rule 85 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    LIST            reduce using rule 85 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    FOR             reduce using rule 85 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    FOREACH         reduce using rule 85 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    WHILE           reduce using rule 85 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    DO              reduce using rule 85 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    PUBLIC          reduce using rule 85 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    PRIVATE         reduce using rule 85 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    RKEY            reduce using rule 85 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)
    $end            reduce using rule 85 (array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET .)


state 230

    (212) list_func_clear -> VARIABLE DOT CLEAR LPARENT . RPARENT DOTANDCOMMA
    (226) stack_clear -> VARIABLE DOT CLEAR LPARENT . RPARENT DOTANDCOMMA
    (237) queue_clear -> VARIABLE DOT CLEAR LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 304


state 231

    (213) list_func_count -> VARIABLE DOT COUNT LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 305


state 232

    (214) list_func_add -> VARIABLE DOT ADD LPARENT . INTEGER RPARENT DOTANDCOMMA
    (215) list_func_add -> VARIABLE DOT ADD LPARENT . STRING RPARENT DOTANDCOMMA

    INTEGER         shift and go to state 306
    STRING          shift and go to state 307


state 233

    (216) list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT . INTEGER RPARENT DOTANDCOMMA
    (217) list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT . STRING RPARENT DOTANDCOMMA

    INTEGER         shift and go to state 308
    STRING          shift and go to state 309


state 234

    (224) stack_push -> VARIABLE DOT PUSH LPARENT . value RPARENT DOTANDCOMMA
    (88) value -> . value_numeric
    (89) value -> . value_boolean
    (90) value -> . value_string
    (91) value -> . VARIABLE
    (92) value -> . read_data
    (93) value -> . array
    (40) value_numeric -> . INTEGER
    (41) value_numeric -> . FLOAT_NUMBER
    (42) value_numeric -> . DECIMAL_NUMBER
    (43) value_numeric -> . VARIABLE
    (36) value_boolean -> . BOOLTRUE
    (37) value_boolean -> . BOOLFALSE
    (38) value_boolean -> . VARIABLE
    (39) value_boolean -> . comparison_operation
    (33) value_string -> . STRING
    (34) value_string -> . CHAR
    (35) value_string -> . concatenation
    (46) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (81) array -> . LBRACKET array_content RBRACKET
    (101) comparison_operation -> . value_numeric
    (102) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (47) concatenation -> . STRING
    (48) concatenation -> . STRING PLUS concatenation

    VARIABLE        shift and go to state 310
    INTEGER         shift and go to state 195
    FLOAT_NUMBER    shift and go to state 196
    DECIMAL_NUMBER  shift and go to state 197
    BOOLTRUE        shift and go to state 190
    BOOLFALSE       shift and go to state 191
    STRING          shift and go to state 317
    CHAR            shift and go to state 318
    READ            shift and go to state 320
    LBRACKET        shift and go to state 321

    value                          shift and go to state 311
    value_numeric                  shift and go to state 312
    value_boolean                  shift and go to state 313
    value_string                   shift and go to state 314
    read_data                      shift and go to state 315
    array                          shift and go to state 316
    comparison_operation           shift and go to state 193
    concatenation                  shift and go to state 319

state 235

    (225) stack_pop -> VARIABLE DOT POP LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 322


state 236

    (227) stack_peek -> VARIABLE DOT PEEK LPARENT . RPARENT DOTANDCOMMA
    (238) queue_peek -> VARIABLE DOT PEEK LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 323


state 237

    (228) stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT . RPARENT DOTANDCOMMA
    (239) queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 324


state 238

    (235) queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT . value RPARENT DOTANDCOMMA
    (88) value -> . value_numeric
    (89) value -> . value_boolean
    (90) value -> . value_string
    (91) value -> . VARIABLE
    (92) value -> . read_data
    (93) value -> . array
    (40) value_numeric -> . INTEGER
    (41) value_numeric -> . FLOAT_NUMBER
    (42) value_numeric -> . DECIMAL_NUMBER
    (43) value_numeric -> . VARIABLE
    (36) value_boolean -> . BOOLTRUE
    (37) value_boolean -> . BOOLFALSE
    (38) value_boolean -> . VARIABLE
    (39) value_boolean -> . comparison_operation
    (33) value_string -> . STRING
    (34) value_string -> . CHAR
    (35) value_string -> . concatenation
    (46) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (81) array -> . LBRACKET array_content RBRACKET
    (101) comparison_operation -> . value_numeric
    (102) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (47) concatenation -> . STRING
    (48) concatenation -> . STRING PLUS concatenation

    VARIABLE        shift and go to state 310
    INTEGER         shift and go to state 195
    FLOAT_NUMBER    shift and go to state 196
    DECIMAL_NUMBER  shift and go to state 197
    BOOLTRUE        shift and go to state 190
    BOOLFALSE       shift and go to state 191
    STRING          shift and go to state 317
    CHAR            shift and go to state 318
    READ            shift and go to state 320
    LBRACKET        shift and go to state 321

    value                          shift and go to state 325
    value_numeric                  shift and go to state 312
    value_boolean                  shift and go to state 313
    value_string                   shift and go to state 314
    read_data                      shift and go to state 315
    array                          shift and go to state 316
    comparison_operation           shift and go to state 193
    concatenation                  shift and go to state 319

state 239

    (236) queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 326


state 240

    (44) print_data -> PRINT LPARENT STRING RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 327


state 241

    (45) print_data -> PRINT LPARENT VARIABLE RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 328


state 242

    (55) array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 329


state 243

    (61) char_array_assignation -> VARIABLE . ASSIGNATION LBRACKET char_content_multiple RBRACKET

    ASSIGNATION     shift and go to state 330


state 244

    (57) array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 331


state 245

    (67) float_array_assignation -> VARIABLE . ASSIGNATION LBRACKET float_content_multiple RBRACKET

    ASSIGNATION     shift and go to state 332


state 246

    (151) assignation_float_multiple -> assignation_float COMMA assignation_float_multiple .

    DOTANDCOMMA     reduce using rule 151 (assignation_float_multiple -> assignation_float COMMA assignation_float_multiple .)


state 247

    (133) assignation_float -> VARIABLE ASSIGNATION VARIABLE .
    (43) value_numeric -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 43 (value_numeric -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 43 (value_numeric -> VARIABLE .)
    PLUS            reduce using rule 43 (value_numeric -> VARIABLE .)
    MINUS           reduce using rule 43 (value_numeric -> VARIABLE .)
    TIMES           reduce using rule 43 (value_numeric -> VARIABLE .)
    DIVIDE          reduce using rule 43 (value_numeric -> VARIABLE .)
    PERCENT         reduce using rule 43 (value_numeric -> VARIABLE .)
    COMMA           reduce using rule 43 (value_numeric -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 43 (value_numeric -> VARIABLE .)

  ! COMMA           [ reduce using rule 133 (assignation_float -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 133 (assignation_float -> VARIABLE ASSIGNATION VARIABLE .) ]


state 248

    (132) assignation_float -> VARIABLE ASSIGNATION FLOAT_NUMBER .
    (41) value_numeric -> FLOAT_NUMBER .

  ! reduce/reduce conflict for COMMA resolved using rule 41 (value_numeric -> FLOAT_NUMBER .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 41 (value_numeric -> FLOAT_NUMBER .)
    PLUS            reduce using rule 41 (value_numeric -> FLOAT_NUMBER .)
    MINUS           reduce using rule 41 (value_numeric -> FLOAT_NUMBER .)
    TIMES           reduce using rule 41 (value_numeric -> FLOAT_NUMBER .)
    DIVIDE          reduce using rule 41 (value_numeric -> FLOAT_NUMBER .)
    PERCENT         reduce using rule 41 (value_numeric -> FLOAT_NUMBER .)
    COMMA           reduce using rule 41 (value_numeric -> FLOAT_NUMBER .)
    DOTANDCOMMA     reduce using rule 41 (value_numeric -> FLOAT_NUMBER .)

  ! COMMA           [ reduce using rule 132 (assignation_float -> VARIABLE ASSIGNATION FLOAT_NUMBER .) ]
  ! DOTANDCOMMA     [ reduce using rule 132 (assignation_float -> VARIABLE ASSIGNATION FLOAT_NUMBER .) ]


state 249

    (134) assignation_float -> VARIABLE ASSIGNATION arithmetic_operation .

    COMMA           reduce using rule 134 (assignation_float -> VARIABLE ASSIGNATION arithmetic_operation .)
    DOTANDCOMMA     reduce using rule 134 (assignation_float -> VARIABLE ASSIGNATION arithmetic_operation .)


state 250

    (94) arithmetic_operation -> value_numeric .
    (95) arithmetic_operation -> value_numeric . arithmetic_operator arithmetic_operation
    (96) arithmetic_operator -> . PLUS
    (97) arithmetic_operator -> . MINUS
    (98) arithmetic_operator -> . TIMES
    (99) arithmetic_operator -> . DIVIDE
    (100) arithmetic_operator -> . PERCENT

    COMMA           reduce using rule 94 (arithmetic_operation -> value_numeric .)
    DOTANDCOMMA     reduce using rule 94 (arithmetic_operation -> value_numeric .)
    PLUS            shift and go to state 334
    MINUS           shift and go to state 335
    TIMES           shift and go to state 336
    DIVIDE          shift and go to state 337
    PERCENT         shift and go to state 338

    arithmetic_operator            shift and go to state 333

state 251

    (58) array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 339


state 252

    (73) decimal_array_assignation -> VARIABLE . ASSIGNATION LBRACKET decimal_content_multiple RBRACKET

    ASSIGNATION     shift and go to state 340


state 253

    (59) array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 341


state 254

    (70) int_array_assignation -> VARIABLE . ASSIGNATION LBRACKET int_content_multiple RBRACKET

    ASSIGNATION     shift and go to state 342


state 255

    (147) assignation_int_multiple -> assignation_int COMMA assignation_int_multiple .

    DOTANDCOMMA     reduce using rule 147 (assignation_int_multiple -> assignation_int COMMA assignation_int_multiple .)


state 256

    (128) assignation_int -> VARIABLE ASSIGNATION VARIABLE .
    (43) value_numeric -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 43 (value_numeric -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 43 (value_numeric -> VARIABLE .)
    PLUS            reduce using rule 43 (value_numeric -> VARIABLE .)
    MINUS           reduce using rule 43 (value_numeric -> VARIABLE .)
    TIMES           reduce using rule 43 (value_numeric -> VARIABLE .)
    DIVIDE          reduce using rule 43 (value_numeric -> VARIABLE .)
    PERCENT         reduce using rule 43 (value_numeric -> VARIABLE .)
    COMMA           reduce using rule 43 (value_numeric -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 43 (value_numeric -> VARIABLE .)

  ! COMMA           [ reduce using rule 128 (assignation_int -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 128 (assignation_int -> VARIABLE ASSIGNATION VARIABLE .) ]


state 257

    (127) assignation_int -> VARIABLE ASSIGNATION INTEGER .
    (40) value_numeric -> INTEGER .

  ! reduce/reduce conflict for COMMA resolved using rule 40 (value_numeric -> INTEGER .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 40 (value_numeric -> INTEGER .)
    PLUS            reduce using rule 40 (value_numeric -> INTEGER .)
    MINUS           reduce using rule 40 (value_numeric -> INTEGER .)
    TIMES           reduce using rule 40 (value_numeric -> INTEGER .)
    DIVIDE          reduce using rule 40 (value_numeric -> INTEGER .)
    PERCENT         reduce using rule 40 (value_numeric -> INTEGER .)
    COMMA           reduce using rule 40 (value_numeric -> INTEGER .)
    DOTANDCOMMA     reduce using rule 40 (value_numeric -> INTEGER .)

  ! COMMA           [ reduce using rule 127 (assignation_int -> VARIABLE ASSIGNATION INTEGER .) ]
  ! DOTANDCOMMA     [ reduce using rule 127 (assignation_int -> VARIABLE ASSIGNATION INTEGER .) ]


state 258

    (129) assignation_int -> VARIABLE ASSIGNATION arithmetic_operation .

    COMMA           reduce using rule 129 (assignation_int -> VARIABLE ASSIGNATION arithmetic_operation .)
    DOTANDCOMMA     reduce using rule 129 (assignation_int -> VARIABLE ASSIGNATION arithmetic_operation .)


state 259

    (60) array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 343


state 260

    (76) bool_array_assignation -> VARIABLE . ASSIGNATION LBRACKET bool_content_multiple RBRACKET

    ASSIGNATION     shift and go to state 344


state 261

    (153) assignation_true_multiple -> assignation_true COMMA assignation_true_multiple .

    DOTANDCOMMA     reduce using rule 153 (assignation_true_multiple -> assignation_true COMMA assignation_true_multiple .)


state 262

    (135) assignation_true -> VARIABLE . ASSIGNATION BOOLTRUE
    (136) assignation_true -> VARIABLE . ASSIGNATION VARIABLE
    (137) assignation_true -> VARIABLE . ASSIGNATION boolean_operation

    ASSIGNATION     shift and go to state 345


state 263

    (155) assignation_false_multiple -> assignation_false COMMA assignation_false_multiple .

    DOTANDCOMMA     reduce using rule 155 (assignation_false_multiple -> assignation_false COMMA assignation_false_multiple .)


state 264

    (138) assignation_false -> VARIABLE . ASSIGNATION BOOLFALSE
    (139) assignation_false -> VARIABLE . ASSIGNATION VARIABLE
    (140) assignation_false -> VARIABLE . ASSIGNATION boolean_operation

    ASSIGNATION     shift and go to state 346


state 265

    (136) assignation_true -> VARIABLE ASSIGNATION VARIABLE .
    (139) assignation_false -> VARIABLE ASSIGNATION VARIABLE .
    (38) value_boolean -> VARIABLE .
    (43) value_numeric -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 136 (assignation_true -> VARIABLE ASSIGNATION VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 136 (assignation_true -> VARIABLE ASSIGNATION VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 38 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 38 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for LOGICAND resolved using rule 38 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for LOGICOR resolved using rule 38 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 38 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 38 (value_boolean -> VARIABLE .)
    LOGICAND        reduce using rule 38 (value_boolean -> VARIABLE .)
    LOGICOR         reduce using rule 38 (value_boolean -> VARIABLE .)
    COMMA           reduce using rule 38 (value_boolean -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 38 (value_boolean -> VARIABLE .)
    GREATER_THAN    reduce using rule 43 (value_numeric -> VARIABLE .)
    SMALLER_THAN    reduce using rule 43 (value_numeric -> VARIABLE .)
    EQUAL_COMPARATION reduce using rule 43 (value_numeric -> VARIABLE .)
    INEQUALITY      reduce using rule 43 (value_numeric -> VARIABLE .)
    GREATER_THAN_OR_EQUAL reduce using rule 43 (value_numeric -> VARIABLE .)
    SMALLER_THAN_OR_EQUAL reduce using rule 43 (value_numeric -> VARIABLE .)

  ! COMMA           [ reduce using rule 136 (assignation_true -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 136 (assignation_true -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! COMMA           [ reduce using rule 139 (assignation_false -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 139 (assignation_false -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! LOGICAND        [ reduce using rule 43 (value_numeric -> VARIABLE .) ]
  ! LOGICOR         [ reduce using rule 43 (value_numeric -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 43 (value_numeric -> VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 43 (value_numeric -> VARIABLE .) ]


state 266

    (135) assignation_true -> VARIABLE ASSIGNATION BOOLTRUE .
    (36) value_boolean -> BOOLTRUE .

  ! reduce/reduce conflict for COMMA resolved using rule 36 (value_boolean -> BOOLTRUE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 36 (value_boolean -> BOOLTRUE .)
    LOGICAND        reduce using rule 36 (value_boolean -> BOOLTRUE .)
    LOGICOR         reduce using rule 36 (value_boolean -> BOOLTRUE .)
    COMMA           reduce using rule 36 (value_boolean -> BOOLTRUE .)
    DOTANDCOMMA     reduce using rule 36 (value_boolean -> BOOLTRUE .)

  ! COMMA           [ reduce using rule 135 (assignation_true -> VARIABLE ASSIGNATION BOOLTRUE .) ]
  ! DOTANDCOMMA     [ reduce using rule 135 (assignation_true -> VARIABLE ASSIGNATION BOOLTRUE .) ]


state 267

    (137) assignation_true -> VARIABLE ASSIGNATION boolean_operation .
    (140) assignation_false -> VARIABLE ASSIGNATION boolean_operation .

  ! reduce/reduce conflict for COMMA resolved using rule 137 (assignation_true -> VARIABLE ASSIGNATION boolean_operation .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 137 (assignation_true -> VARIABLE ASSIGNATION boolean_operation .)
    COMMA           reduce using rule 137 (assignation_true -> VARIABLE ASSIGNATION boolean_operation .)
    DOTANDCOMMA     reduce using rule 137 (assignation_true -> VARIABLE ASSIGNATION boolean_operation .)

  ! COMMA           [ reduce using rule 140 (assignation_false -> VARIABLE ASSIGNATION boolean_operation .) ]
  ! DOTANDCOMMA     [ reduce using rule 140 (assignation_false -> VARIABLE ASSIGNATION boolean_operation .) ]


state 268

    (138) assignation_false -> VARIABLE ASSIGNATION BOOLFALSE .
    (37) value_boolean -> BOOLFALSE .

  ! reduce/reduce conflict for COMMA resolved using rule 37 (value_boolean -> BOOLFALSE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 37 (value_boolean -> BOOLFALSE .)
    LOGICAND        reduce using rule 37 (value_boolean -> BOOLFALSE .)
    LOGICOR         reduce using rule 37 (value_boolean -> BOOLFALSE .)
    COMMA           reduce using rule 37 (value_boolean -> BOOLFALSE .)
    DOTANDCOMMA     reduce using rule 37 (value_boolean -> BOOLFALSE .)

  ! COMMA           [ reduce using rule 138 (assignation_false -> VARIABLE ASSIGNATION BOOLFALSE .) ]
  ! DOTANDCOMMA     [ reduce using rule 138 (assignation_false -> VARIABLE ASSIGNATION BOOLFALSE .) ]


state 269

    (156) thread_main -> declaration_thread declaration_thread thread_init thread_init . thread_wait thread_wait
    (160) thread_wait -> . thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA
    (170) thread_identificator -> . VARIABLE

    VARIABLE        shift and go to state 144

    thread_wait                    shift and go to state 347
    thread_identificator           shift and go to state 348

state 270

    (159) thread_init -> thread_identificator DOT . START LPARENT RPARENT DOTANDCOMMA

    START           shift and go to state 349


state 271

    (173) list_enums -> METHOD .
    (174) list_enums -> METHOD . COMMA list_enums

    RKEY            reduce using rule 173 (list_enums -> METHOD .)
    COMMA           shift and go to state 350


state 272

    (172) enums -> ENUM METHOD LKEY list_enums . RKEY

    RKEY            shift and go to state 351


state 273

    (185) normal_if -> IF LPARENT boolean_operation RPARENT . LKEY block_if RKEY other_if
    (186) normal_if -> IF LPARENT boolean_operation RPARENT . LKEY block_if RKEY

    LKEY            shift and go to state 352


state 274

    (111) boolean_operation -> value_boolean boolean_operator . boolean_operation
    (109) boolean_operation -> . value_boolean
    (110) boolean_operation -> . LOGICNOT value_boolean
    (111) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (36) value_boolean -> . BOOLTRUE
    (37) value_boolean -> . BOOLFALSE
    (38) value_boolean -> . VARIABLE
    (39) value_boolean -> . comparison_operation
    (101) comparison_operation -> . value_numeric
    (102) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (40) value_numeric -> . INTEGER
    (41) value_numeric -> . FLOAT_NUMBER
    (42) value_numeric -> . DECIMAL_NUMBER
    (43) value_numeric -> . VARIABLE

    LOGICNOT        shift and go to state 189
    BOOLTRUE        shift and go to state 190
    BOOLFALSE       shift and go to state 191
    VARIABLE        shift and go to state 192
    INTEGER         shift and go to state 195
    FLOAT_NUMBER    shift and go to state 196
    DECIMAL_NUMBER  shift and go to state 197

    value_boolean                  shift and go to state 188
    boolean_operation              shift and go to state 353
    comparison_operation           shift and go to state 193
    value_numeric                  shift and go to state 194

state 275

    (112) boolean_operator -> LOGICAND .

    LOGICNOT        reduce using rule 112 (boolean_operator -> LOGICAND .)
    BOOLTRUE        reduce using rule 112 (boolean_operator -> LOGICAND .)
    BOOLFALSE       reduce using rule 112 (boolean_operator -> LOGICAND .)
    VARIABLE        reduce using rule 112 (boolean_operator -> LOGICAND .)
    INTEGER         reduce using rule 112 (boolean_operator -> LOGICAND .)
    FLOAT_NUMBER    reduce using rule 112 (boolean_operator -> LOGICAND .)
    DECIMAL_NUMBER  reduce using rule 112 (boolean_operator -> LOGICAND .)


state 276

    (113) boolean_operator -> LOGICOR .

    LOGICNOT        reduce using rule 113 (boolean_operator -> LOGICOR .)
    BOOLTRUE        reduce using rule 113 (boolean_operator -> LOGICOR .)
    BOOLFALSE       reduce using rule 113 (boolean_operator -> LOGICOR .)
    VARIABLE        reduce using rule 113 (boolean_operator -> LOGICOR .)
    INTEGER         reduce using rule 113 (boolean_operator -> LOGICOR .)
    FLOAT_NUMBER    reduce using rule 113 (boolean_operator -> LOGICOR .)
    DECIMAL_NUMBER  reduce using rule 113 (boolean_operator -> LOGICOR .)


state 277

    (110) boolean_operation -> LOGICNOT value_boolean .

    RPARENT         reduce using rule 110 (boolean_operation -> LOGICNOT value_boolean .)
    COMMA           reduce using rule 110 (boolean_operation -> LOGICNOT value_boolean .)
    DOTANDCOMMA     reduce using rule 110 (boolean_operation -> LOGICNOT value_boolean .)


state 278

    (102) comparison_operation -> value_numeric comparison_operator . comparison_operation
    (101) comparison_operation -> . value_numeric
    (102) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (40) value_numeric -> . INTEGER
    (41) value_numeric -> . FLOAT_NUMBER
    (42) value_numeric -> . DECIMAL_NUMBER
    (43) value_numeric -> . VARIABLE

    INTEGER         shift and go to state 195
    FLOAT_NUMBER    shift and go to state 196
    DECIMAL_NUMBER  shift and go to state 197
    VARIABLE        shift and go to state 355

    value_numeric                  shift and go to state 194
    comparison_operation           shift and go to state 354

state 279

    (103) comparison_operator -> GREATER_THAN .

    INTEGER         reduce using rule 103 (comparison_operator -> GREATER_THAN .)
    FLOAT_NUMBER    reduce using rule 103 (comparison_operator -> GREATER_THAN .)
    DECIMAL_NUMBER  reduce using rule 103 (comparison_operator -> GREATER_THAN .)
    VARIABLE        reduce using rule 103 (comparison_operator -> GREATER_THAN .)


state 280

    (104) comparison_operator -> SMALLER_THAN .

    INTEGER         reduce using rule 104 (comparison_operator -> SMALLER_THAN .)
    FLOAT_NUMBER    reduce using rule 104 (comparison_operator -> SMALLER_THAN .)
    DECIMAL_NUMBER  reduce using rule 104 (comparison_operator -> SMALLER_THAN .)
    VARIABLE        reduce using rule 104 (comparison_operator -> SMALLER_THAN .)


state 281

    (105) comparison_operator -> EQUAL_COMPARATION .

    INTEGER         reduce using rule 105 (comparison_operator -> EQUAL_COMPARATION .)
    FLOAT_NUMBER    reduce using rule 105 (comparison_operator -> EQUAL_COMPARATION .)
    DECIMAL_NUMBER  reduce using rule 105 (comparison_operator -> EQUAL_COMPARATION .)
    VARIABLE        reduce using rule 105 (comparison_operator -> EQUAL_COMPARATION .)


state 282

    (106) comparison_operator -> INEQUALITY .

    INTEGER         reduce using rule 106 (comparison_operator -> INEQUALITY .)
    FLOAT_NUMBER    reduce using rule 106 (comparison_operator -> INEQUALITY .)
    DECIMAL_NUMBER  reduce using rule 106 (comparison_operator -> INEQUALITY .)
    VARIABLE        reduce using rule 106 (comparison_operator -> INEQUALITY .)


state 283

    (107) comparison_operator -> GREATER_THAN_OR_EQUAL .

    INTEGER         reduce using rule 107 (comparison_operator -> GREATER_THAN_OR_EQUAL .)
    FLOAT_NUMBER    reduce using rule 107 (comparison_operator -> GREATER_THAN_OR_EQUAL .)
    DECIMAL_NUMBER  reduce using rule 107 (comparison_operator -> GREATER_THAN_OR_EQUAL .)
    VARIABLE        reduce using rule 107 (comparison_operator -> GREATER_THAN_OR_EQUAL .)


state 284

    (108) comparison_operator -> SMALLER_THAN_OR_EQUAL .

    INTEGER         reduce using rule 108 (comparison_operator -> SMALLER_THAN_OR_EQUAL .)
    FLOAT_NUMBER    reduce using rule 108 (comparison_operator -> SMALLER_THAN_OR_EQUAL .)
    DECIMAL_NUMBER  reduce using rule 108 (comparison_operator -> SMALLER_THAN_OR_EQUAL .)
    VARIABLE        reduce using rule 108 (comparison_operator -> SMALLER_THAN_OR_EQUAL .)


state 285

    (218) stack_struct -> STACK VARIABLE ASSIGNATION NEW . STACK LPARENT RPARENT DOTANDCOMMA

    STACK           shift and go to state 356


state 286

    (229) queue_struct -> QUEUE VARIABLE ASSIGNATION NEW . QUEUE LPARENT RPARENT DOTANDCOMMA

    QUEUE           shift and go to state 357


state 287

    (116) constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .

    PRINT           reduce using rule 116 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    CHARTYPE        reduce using rule 116 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 116 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 116 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 116 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    INTTYPE         reduce using rule 116 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 116 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    VARIABLE        reduce using rule 116 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    STATIC          reduce using rule 116 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    WRITE           reduce using rule 116 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    LPARENT         reduce using rule 116 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    ENUM            reduce using rule 116 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    IF              reduce using rule 116 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    STACK           reduce using rule 116 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    QUEUE           reduce using rule 116 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    CONST           reduce using rule 116 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    THREAD          reduce using rule 116 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    TRY             reduce using rule 116 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    LIST            reduce using rule 116 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    FOR             reduce using rule 116 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    FOREACH         reduce using rule 116 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    WHILE           reduce using rule 116 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    DO              reduce using rule 116 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    PUBLIC          reduce using rule 116 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    PRIVATE         reduce using rule 116 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    RKEY            reduce using rule 116 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)
    $end            reduce using rule 116 (constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA .)


state 288

    (157) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW . THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (158) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW . THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA

    THREAD          shift and go to state 358


state 289

    (177) try_catch_simply -> TRY LKEY all_block_code_try RKEY . CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (178) try_catch_finally -> TRY LKEY all_block_code_try RKEY . CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    CATCH           shift and go to state 359


state 290

    (182) all_block_code_try -> block_code_try all_block_code_try .

    RKEY            reduce using rule 182 (all_block_code_try -> block_code_try all_block_code_try .)


state 291

    (200) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN . VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (202) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN . VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    VARIABLE        shift and go to state 360


state 292

    (201) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN . VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (203) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN . VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    VARIABLE        shift and go to state 361


state 293

    (195) for_simple -> FOR LPARENT INTTYPE assignation_int . DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (196) for_simple -> FOR LPARENT INTTYPE assignation_int . DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    DOTANDCOMMA     shift and go to state 362


state 294

    (197) for_each -> FOREACH LPARENT data_type VARIABLE . IN VARIABLE RPARENT LKEY all_block_code RKEY

    IN              shift and go to state 363


state 295

    (191) normal_while -> WHILE LPARENT boolean_operation RPARENT . LKEY all_block_code RKEY

    LKEY            shift and go to state 364


state 296

    (192) do_while -> DO LKEY all_block_code RKEY . WHILE LPARENT boolean_operation RPARENT

    WHILE           shift and go to state 365


state 297

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code . RKEY
    (5) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code . RKEY all_block_code

    RKEY            shift and go to state 366


state 298

    (161) concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT . LKEY thread_logic RKEY

    LKEY            shift and go to state 367


state 299

    (171) statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code . RKEY RPARENT

    RKEY            shift and go to state 368


state 300

    (56) array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .

    PRINT           reduce using rule 56 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    CHARTYPE        reduce using rule 56 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 56 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 56 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 56 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    INTTYPE         reduce using rule 56 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 56 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    VARIABLE        reduce using rule 56 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    STATIC          reduce using rule 56 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    WRITE           reduce using rule 56 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    LPARENT         reduce using rule 56 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    ENUM            reduce using rule 56 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    IF              reduce using rule 56 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    STACK           reduce using rule 56 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    QUEUE           reduce using rule 56 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    CONST           reduce using rule 56 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    THREAD          reduce using rule 56 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    TRY             reduce using rule 56 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    LIST            reduce using rule 56 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    FOR             reduce using rule 56 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    FOREACH         reduce using rule 56 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    WHILE           reduce using rule 56 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    DO              reduce using rule 56 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    PUBLIC          reduce using rule 56 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    PRIVATE         reduce using rule 56 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    RKEY            reduce using rule 56 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)
    $end            reduce using rule 56 (array_assignation -> STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA .)


state 301

    (64) string_array_assignation -> VARIABLE ASSIGNATION . LBRACKET string_content_multiple RBRACKET

    LBRACKET        shift and go to state 369


state 302

    (86) array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION . value DOTANDCOMMA
    (88) value -> . value_numeric
    (89) value -> . value_boolean
    (90) value -> . value_string
    (91) value -> . VARIABLE
    (92) value -> . read_data
    (93) value -> . array
    (40) value_numeric -> . INTEGER
    (41) value_numeric -> . FLOAT_NUMBER
    (42) value_numeric -> . DECIMAL_NUMBER
    (43) value_numeric -> . VARIABLE
    (36) value_boolean -> . BOOLTRUE
    (37) value_boolean -> . BOOLFALSE
    (38) value_boolean -> . VARIABLE
    (39) value_boolean -> . comparison_operation
    (33) value_string -> . STRING
    (34) value_string -> . CHAR
    (35) value_string -> . concatenation
    (46) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (81) array -> . LBRACKET array_content RBRACKET
    (101) comparison_operation -> . value_numeric
    (102) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (47) concatenation -> . STRING
    (48) concatenation -> . STRING PLUS concatenation

    VARIABLE        shift and go to state 310
    INTEGER         shift and go to state 195
    FLOAT_NUMBER    shift and go to state 196
    DECIMAL_NUMBER  shift and go to state 197
    BOOLTRUE        shift and go to state 190
    BOOLFALSE       shift and go to state 191
    STRING          shift and go to state 317
    CHAR            shift and go to state 318
    READ            shift and go to state 320
    LBRACKET        shift and go to state 321

    value                          shift and go to state 370
    value_numeric                  shift and go to state 312
    value_boolean                  shift and go to state 313
    value_string                   shift and go to state 314
    read_data                      shift and go to state 315
    array                          shift and go to state 316
    comparison_operation           shift and go to state 193
    concatenation                  shift and go to state 319

state 303

    (87) array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION . value DOTANDCOMMA
    (88) value -> . value_numeric
    (89) value -> . value_boolean
    (90) value -> . value_string
    (91) value -> . VARIABLE
    (92) value -> . read_data
    (93) value -> . array
    (40) value_numeric -> . INTEGER
    (41) value_numeric -> . FLOAT_NUMBER
    (42) value_numeric -> . DECIMAL_NUMBER
    (43) value_numeric -> . VARIABLE
    (36) value_boolean -> . BOOLTRUE
    (37) value_boolean -> . BOOLFALSE
    (38) value_boolean -> . VARIABLE
    (39) value_boolean -> . comparison_operation
    (33) value_string -> . STRING
    (34) value_string -> . CHAR
    (35) value_string -> . concatenation
    (46) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (81) array -> . LBRACKET array_content RBRACKET
    (101) comparison_operation -> . value_numeric
    (102) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (47) concatenation -> . STRING
    (48) concatenation -> . STRING PLUS concatenation

    VARIABLE        shift and go to state 310
    INTEGER         shift and go to state 195
    FLOAT_NUMBER    shift and go to state 196
    DECIMAL_NUMBER  shift and go to state 197
    BOOLTRUE        shift and go to state 190
    BOOLFALSE       shift and go to state 191
    STRING          shift and go to state 317
    CHAR            shift and go to state 318
    READ            shift and go to state 320
    LBRACKET        shift and go to state 321

    value                          shift and go to state 371
    value_numeric                  shift and go to state 312
    value_boolean                  shift and go to state 313
    value_string                   shift and go to state 314
    read_data                      shift and go to state 315
    array                          shift and go to state 316
    comparison_operation           shift and go to state 193
    concatenation                  shift and go to state 319

state 304

    (212) list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT . DOTANDCOMMA
    (226) stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT . DOTANDCOMMA
    (237) queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 372


state 305

    (213) list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 373


state 306

    (214) list_func_add -> VARIABLE DOT ADD LPARENT INTEGER . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 374


state 307

    (215) list_func_add -> VARIABLE DOT ADD LPARENT STRING . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 375


state 308

    (216) list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 376


state 309

    (217) list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 377


state 310

    (91) value -> VARIABLE .
    (43) value_numeric -> VARIABLE .
    (38) value_boolean -> VARIABLE .

  ! reduce/reduce conflict for RPARENT resolved using rule 43 (value_numeric -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 43 (value_numeric -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 43 (value_numeric -> VARIABLE .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 43 (value_numeric -> VARIABLE .)
  ! reduce/reduce conflict for RPARENT resolved using rule 38 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 38 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 38 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 38 (value_boolean -> VARIABLE .)
    GREATER_THAN    reduce using rule 43 (value_numeric -> VARIABLE .)
    SMALLER_THAN    reduce using rule 43 (value_numeric -> VARIABLE .)
    EQUAL_COMPARATION reduce using rule 43 (value_numeric -> VARIABLE .)
    INEQUALITY      reduce using rule 43 (value_numeric -> VARIABLE .)
    GREATER_THAN_OR_EQUAL reduce using rule 43 (value_numeric -> VARIABLE .)
    SMALLER_THAN_OR_EQUAL reduce using rule 43 (value_numeric -> VARIABLE .)
    RPARENT         reduce using rule 38 (value_boolean -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 38 (value_boolean -> VARIABLE .)
    COMMA           reduce using rule 38 (value_boolean -> VARIABLE .)
    RBRACKET        reduce using rule 38 (value_boolean -> VARIABLE .)

  ! RPARENT         [ reduce using rule 91 (value -> VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 91 (value -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 91 (value -> VARIABLE .) ]
  ! RBRACKET        [ reduce using rule 91 (value -> VARIABLE .) ]
  ! RPARENT         [ reduce using rule 43 (value_numeric -> VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 43 (value_numeric -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 43 (value_numeric -> VARIABLE .) ]
  ! RBRACKET        [ reduce using rule 43 (value_numeric -> VARIABLE .) ]


state 311

    (224) stack_push -> VARIABLE DOT PUSH LPARENT value . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 378


state 312

    (88) value -> value_numeric .
    (101) comparison_operation -> value_numeric .
    (102) comparison_operation -> value_numeric . comparison_operator comparison_operation
    (103) comparison_operator -> . GREATER_THAN
    (104) comparison_operator -> . SMALLER_THAN
    (105) comparison_operator -> . EQUAL_COMPARATION
    (106) comparison_operator -> . INEQUALITY
    (107) comparison_operator -> . GREATER_THAN_OR_EQUAL
    (108) comparison_operator -> . SMALLER_THAN_OR_EQUAL

  ! reduce/reduce conflict for RPARENT resolved using rule 88 (value -> value_numeric .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 88 (value -> value_numeric .)
  ! reduce/reduce conflict for COMMA resolved using rule 88 (value -> value_numeric .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 88 (value -> value_numeric .)
    RPARENT         reduce using rule 88 (value -> value_numeric .)
    DOTANDCOMMA     reduce using rule 88 (value -> value_numeric .)
    COMMA           reduce using rule 88 (value -> value_numeric .)
    RBRACKET        reduce using rule 88 (value -> value_numeric .)
    GREATER_THAN    shift and go to state 279
    SMALLER_THAN    shift and go to state 280
    EQUAL_COMPARATION shift and go to state 281
    INEQUALITY      shift and go to state 282
    GREATER_THAN_OR_EQUAL shift and go to state 283
    SMALLER_THAN_OR_EQUAL shift and go to state 284

  ! RPARENT         [ reduce using rule 101 (comparison_operation -> value_numeric .) ]
  ! DOTANDCOMMA     [ reduce using rule 101 (comparison_operation -> value_numeric .) ]
  ! COMMA           [ reduce using rule 101 (comparison_operation -> value_numeric .) ]
  ! RBRACKET        [ reduce using rule 101 (comparison_operation -> value_numeric .) ]

    comparison_operator            shift and go to state 278

state 313

    (89) value -> value_boolean .

    RPARENT         reduce using rule 89 (value -> value_boolean .)
    DOTANDCOMMA     reduce using rule 89 (value -> value_boolean .)
    COMMA           reduce using rule 89 (value -> value_boolean .)
    RBRACKET        reduce using rule 89 (value -> value_boolean .)


state 314

    (90) value -> value_string .

    RPARENT         reduce using rule 90 (value -> value_string .)
    DOTANDCOMMA     reduce using rule 90 (value -> value_string .)
    COMMA           reduce using rule 90 (value -> value_string .)
    RBRACKET        reduce using rule 90 (value -> value_string .)


state 315

    (92) value -> read_data .

    RPARENT         reduce using rule 92 (value -> read_data .)
    DOTANDCOMMA     reduce using rule 92 (value -> read_data .)
    COMMA           reduce using rule 92 (value -> read_data .)
    RBRACKET        reduce using rule 92 (value -> read_data .)


state 316

    (93) value -> array .

    RPARENT         reduce using rule 93 (value -> array .)
    DOTANDCOMMA     reduce using rule 93 (value -> array .)
    COMMA           reduce using rule 93 (value -> array .)
    RBRACKET        reduce using rule 93 (value -> array .)


state 317

    (33) value_string -> STRING .
    (47) concatenation -> STRING .
    (48) concatenation -> STRING . PLUS concatenation

  ! reduce/reduce conflict for RPARENT resolved using rule 33 (value_string -> STRING .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 33 (value_string -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 33 (value_string -> STRING .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 33 (value_string -> STRING .)
    RPARENT         reduce using rule 33 (value_string -> STRING .)
    DOTANDCOMMA     reduce using rule 33 (value_string -> STRING .)
    COMMA           reduce using rule 33 (value_string -> STRING .)
    RBRACKET        reduce using rule 33 (value_string -> STRING .)
    PLUS            shift and go to state 379

  ! RPARENT         [ reduce using rule 47 (concatenation -> STRING .) ]
  ! DOTANDCOMMA     [ reduce using rule 47 (concatenation -> STRING .) ]
  ! COMMA           [ reduce using rule 47 (concatenation -> STRING .) ]
  ! RBRACKET        [ reduce using rule 47 (concatenation -> STRING .) ]


state 318

    (34) value_string -> CHAR .

    RPARENT         reduce using rule 34 (value_string -> CHAR .)
    DOTANDCOMMA     reduce using rule 34 (value_string -> CHAR .)
    COMMA           reduce using rule 34 (value_string -> CHAR .)
    RBRACKET        reduce using rule 34 (value_string -> CHAR .)


state 319

    (35) value_string -> concatenation .

    RPARENT         reduce using rule 35 (value_string -> concatenation .)
    DOTANDCOMMA     reduce using rule 35 (value_string -> concatenation .)
    COMMA           reduce using rule 35 (value_string -> concatenation .)
    RBRACKET        reduce using rule 35 (value_string -> concatenation .)


state 320

    (46) read_data -> READ . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 380


state 321

    (81) array -> LBRACKET . array_content RBRACKET
    (82) array_content -> . value
    (83) array_content -> . value COMMA array_content
    (88) value -> . value_numeric
    (89) value -> . value_boolean
    (90) value -> . value_string
    (91) value -> . VARIABLE
    (92) value -> . read_data
    (93) value -> . array
    (40) value_numeric -> . INTEGER
    (41) value_numeric -> . FLOAT_NUMBER
    (42) value_numeric -> . DECIMAL_NUMBER
    (43) value_numeric -> . VARIABLE
    (36) value_boolean -> . BOOLTRUE
    (37) value_boolean -> . BOOLFALSE
    (38) value_boolean -> . VARIABLE
    (39) value_boolean -> . comparison_operation
    (33) value_string -> . STRING
    (34) value_string -> . CHAR
    (35) value_string -> . concatenation
    (46) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (81) array -> . LBRACKET array_content RBRACKET
    (101) comparison_operation -> . value_numeric
    (102) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (47) concatenation -> . STRING
    (48) concatenation -> . STRING PLUS concatenation

    VARIABLE        shift and go to state 310
    INTEGER         shift and go to state 195
    FLOAT_NUMBER    shift and go to state 196
    DECIMAL_NUMBER  shift and go to state 197
    BOOLTRUE        shift and go to state 190
    BOOLFALSE       shift and go to state 191
    STRING          shift and go to state 317
    CHAR            shift and go to state 318
    READ            shift and go to state 320
    LBRACKET        shift and go to state 321

    array_content                  shift and go to state 381
    value                          shift and go to state 382
    value_numeric                  shift and go to state 312
    value_boolean                  shift and go to state 313
    value_string                   shift and go to state 314
    read_data                      shift and go to state 315
    array                          shift and go to state 316
    comparison_operation           shift and go to state 193
    concatenation                  shift and go to state 319

state 322

    (225) stack_pop -> VARIABLE DOT POP LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 383


state 323

    (227) stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT . DOTANDCOMMA
    (238) queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 384


state 324

    (228) stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT . DOTANDCOMMA
    (239) queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 385


state 325

    (235) queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 386


state 326

    (236) queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 387


state 327

    (44) print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 44 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 44 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 44 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 44 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 44 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 44 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 44 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 44 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 44 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 44 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 44 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 44 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    IF              reduce using rule 44 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 44 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 44 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 44 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 44 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 44 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 44 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 44 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 44 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 44 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    DO              reduce using rule 44 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 44 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 44 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 44 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)
    $end            reduce using rule 44 (print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA .)


state 328

    (45) print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 45 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 45 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 45 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 45 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 45 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 45 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 45 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 45 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 45 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 45 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 45 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 45 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    IF              reduce using rule 45 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 45 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 45 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 45 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 45 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 45 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 45 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 45 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 45 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 45 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    DO              reduce using rule 45 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 45 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 45 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 45 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)
    $end            reduce using rule 45 (print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA .)


state 329

    (55) array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .

    PRINT           reduce using rule 55 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    CHARTYPE        reduce using rule 55 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 55 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 55 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 55 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    INTTYPE         reduce using rule 55 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 55 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    VARIABLE        reduce using rule 55 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    STATIC          reduce using rule 55 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    WRITE           reduce using rule 55 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    LPARENT         reduce using rule 55 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    ENUM            reduce using rule 55 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    IF              reduce using rule 55 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    STACK           reduce using rule 55 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    QUEUE           reduce using rule 55 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    CONST           reduce using rule 55 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    THREAD          reduce using rule 55 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    TRY             reduce using rule 55 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    LIST            reduce using rule 55 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    FOR             reduce using rule 55 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    FOREACH         reduce using rule 55 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    WHILE           reduce using rule 55 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    DO              reduce using rule 55 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    PUBLIC          reduce using rule 55 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    PRIVATE         reduce using rule 55 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    RKEY            reduce using rule 55 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)
    $end            reduce using rule 55 (array_assignation -> CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA .)


state 330

    (61) char_array_assignation -> VARIABLE ASSIGNATION . LBRACKET char_content_multiple RBRACKET

    LBRACKET        shift and go to state 388


state 331

    (57) array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .

    PRINT           reduce using rule 57 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    CHARTYPE        reduce using rule 57 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 57 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 57 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 57 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    INTTYPE         reduce using rule 57 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 57 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    VARIABLE        reduce using rule 57 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    STATIC          reduce using rule 57 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    WRITE           reduce using rule 57 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    LPARENT         reduce using rule 57 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    ENUM            reduce using rule 57 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    IF              reduce using rule 57 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    STACK           reduce using rule 57 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    QUEUE           reduce using rule 57 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    CONST           reduce using rule 57 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    THREAD          reduce using rule 57 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    TRY             reduce using rule 57 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    LIST            reduce using rule 57 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    FOR             reduce using rule 57 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    FOREACH         reduce using rule 57 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    WHILE           reduce using rule 57 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    DO              reduce using rule 57 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    PUBLIC          reduce using rule 57 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    PRIVATE         reduce using rule 57 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    RKEY            reduce using rule 57 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)
    $end            reduce using rule 57 (array_assignation -> FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA .)


state 332

    (67) float_array_assignation -> VARIABLE ASSIGNATION . LBRACKET float_content_multiple RBRACKET

    LBRACKET        shift and go to state 389


state 333

    (95) arithmetic_operation -> value_numeric arithmetic_operator . arithmetic_operation
    (94) arithmetic_operation -> . value_numeric
    (95) arithmetic_operation -> . value_numeric arithmetic_operator arithmetic_operation
    (40) value_numeric -> . INTEGER
    (41) value_numeric -> . FLOAT_NUMBER
    (42) value_numeric -> . DECIMAL_NUMBER
    (43) value_numeric -> . VARIABLE

    INTEGER         shift and go to state 195
    FLOAT_NUMBER    shift and go to state 196
    DECIMAL_NUMBER  shift and go to state 197
    VARIABLE        shift and go to state 355

    value_numeric                  shift and go to state 250
    arithmetic_operation           shift and go to state 390

state 334

    (96) arithmetic_operator -> PLUS .

    INTEGER         reduce using rule 96 (arithmetic_operator -> PLUS .)
    FLOAT_NUMBER    reduce using rule 96 (arithmetic_operator -> PLUS .)
    DECIMAL_NUMBER  reduce using rule 96 (arithmetic_operator -> PLUS .)
    VARIABLE        reduce using rule 96 (arithmetic_operator -> PLUS .)


state 335

    (97) arithmetic_operator -> MINUS .

    INTEGER         reduce using rule 97 (arithmetic_operator -> MINUS .)
    FLOAT_NUMBER    reduce using rule 97 (arithmetic_operator -> MINUS .)
    DECIMAL_NUMBER  reduce using rule 97 (arithmetic_operator -> MINUS .)
    VARIABLE        reduce using rule 97 (arithmetic_operator -> MINUS .)


state 336

    (98) arithmetic_operator -> TIMES .

    INTEGER         reduce using rule 98 (arithmetic_operator -> TIMES .)
    FLOAT_NUMBER    reduce using rule 98 (arithmetic_operator -> TIMES .)
    DECIMAL_NUMBER  reduce using rule 98 (arithmetic_operator -> TIMES .)
    VARIABLE        reduce using rule 98 (arithmetic_operator -> TIMES .)


state 337

    (99) arithmetic_operator -> DIVIDE .

    INTEGER         reduce using rule 99 (arithmetic_operator -> DIVIDE .)
    FLOAT_NUMBER    reduce using rule 99 (arithmetic_operator -> DIVIDE .)
    DECIMAL_NUMBER  reduce using rule 99 (arithmetic_operator -> DIVIDE .)
    VARIABLE        reduce using rule 99 (arithmetic_operator -> DIVIDE .)


state 338

    (100) arithmetic_operator -> PERCENT .

    INTEGER         reduce using rule 100 (arithmetic_operator -> PERCENT .)
    FLOAT_NUMBER    reduce using rule 100 (arithmetic_operator -> PERCENT .)
    DECIMAL_NUMBER  reduce using rule 100 (arithmetic_operator -> PERCENT .)
    VARIABLE        reduce using rule 100 (arithmetic_operator -> PERCENT .)


state 339

    (58) array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .

    PRINT           reduce using rule 58 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    CHARTYPE        reduce using rule 58 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 58 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 58 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 58 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    INTTYPE         reduce using rule 58 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 58 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    VARIABLE        reduce using rule 58 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    STATIC          reduce using rule 58 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    WRITE           reduce using rule 58 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    LPARENT         reduce using rule 58 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    ENUM            reduce using rule 58 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    IF              reduce using rule 58 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    STACK           reduce using rule 58 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    QUEUE           reduce using rule 58 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    CONST           reduce using rule 58 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    THREAD          reduce using rule 58 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    TRY             reduce using rule 58 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    LIST            reduce using rule 58 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    FOR             reduce using rule 58 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    FOREACH         reduce using rule 58 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    WHILE           reduce using rule 58 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    DO              reduce using rule 58 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    PUBLIC          reduce using rule 58 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    PRIVATE         reduce using rule 58 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    RKEY            reduce using rule 58 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)
    $end            reduce using rule 58 (array_assignation -> DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA .)


state 340

    (73) decimal_array_assignation -> VARIABLE ASSIGNATION . LBRACKET decimal_content_multiple RBRACKET

    LBRACKET        shift and go to state 391


state 341

    (59) array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .

    PRINT           reduce using rule 59 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    CHARTYPE        reduce using rule 59 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 59 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 59 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 59 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    INTTYPE         reduce using rule 59 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 59 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    VARIABLE        reduce using rule 59 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    STATIC          reduce using rule 59 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    WRITE           reduce using rule 59 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    LPARENT         reduce using rule 59 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    ENUM            reduce using rule 59 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    IF              reduce using rule 59 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    STACK           reduce using rule 59 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    QUEUE           reduce using rule 59 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    CONST           reduce using rule 59 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    THREAD          reduce using rule 59 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    TRY             reduce using rule 59 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    LIST            reduce using rule 59 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    FOR             reduce using rule 59 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    FOREACH         reduce using rule 59 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    WHILE           reduce using rule 59 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    DO              reduce using rule 59 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    PUBLIC          reduce using rule 59 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    PRIVATE         reduce using rule 59 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    RKEY            reduce using rule 59 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)
    $end            reduce using rule 59 (array_assignation -> INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA .)


state 342

    (70) int_array_assignation -> VARIABLE ASSIGNATION . LBRACKET int_content_multiple RBRACKET

    LBRACKET        shift and go to state 392


state 343

    (60) array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .

    PRINT           reduce using rule 60 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    CHARTYPE        reduce using rule 60 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 60 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 60 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 60 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    INTTYPE         reduce using rule 60 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 60 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    VARIABLE        reduce using rule 60 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    STATIC          reduce using rule 60 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    WRITE           reduce using rule 60 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    LPARENT         reduce using rule 60 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    ENUM            reduce using rule 60 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    IF              reduce using rule 60 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    STACK           reduce using rule 60 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    QUEUE           reduce using rule 60 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    CONST           reduce using rule 60 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    THREAD          reduce using rule 60 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    TRY             reduce using rule 60 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    LIST            reduce using rule 60 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    FOR             reduce using rule 60 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    FOREACH         reduce using rule 60 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    WHILE           reduce using rule 60 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    DO              reduce using rule 60 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    PUBLIC          reduce using rule 60 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    PRIVATE         reduce using rule 60 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    RKEY            reduce using rule 60 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)
    $end            reduce using rule 60 (array_assignation -> BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA .)


state 344

    (76) bool_array_assignation -> VARIABLE ASSIGNATION . LBRACKET bool_content_multiple RBRACKET

    LBRACKET        shift and go to state 393


state 345

    (135) assignation_true -> VARIABLE ASSIGNATION . BOOLTRUE
    (136) assignation_true -> VARIABLE ASSIGNATION . VARIABLE
    (137) assignation_true -> VARIABLE ASSIGNATION . boolean_operation
    (109) boolean_operation -> . value_boolean
    (110) boolean_operation -> . LOGICNOT value_boolean
    (111) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (36) value_boolean -> . BOOLTRUE
    (37) value_boolean -> . BOOLFALSE
    (38) value_boolean -> . VARIABLE
    (39) value_boolean -> . comparison_operation
    (101) comparison_operation -> . value_numeric
    (102) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (40) value_numeric -> . INTEGER
    (41) value_numeric -> . FLOAT_NUMBER
    (42) value_numeric -> . DECIMAL_NUMBER
    (43) value_numeric -> . VARIABLE

    BOOLTRUE        shift and go to state 266
    VARIABLE        shift and go to state 394
    LOGICNOT        shift and go to state 189
    BOOLFALSE       shift and go to state 191
    INTEGER         shift and go to state 195
    FLOAT_NUMBER    shift and go to state 196
    DECIMAL_NUMBER  shift and go to state 197

    boolean_operation              shift and go to state 395
    value_boolean                  shift and go to state 188
    comparison_operation           shift and go to state 193
    value_numeric                  shift and go to state 194

state 346

    (138) assignation_false -> VARIABLE ASSIGNATION . BOOLFALSE
    (139) assignation_false -> VARIABLE ASSIGNATION . VARIABLE
    (140) assignation_false -> VARIABLE ASSIGNATION . boolean_operation
    (109) boolean_operation -> . value_boolean
    (110) boolean_operation -> . LOGICNOT value_boolean
    (111) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (36) value_boolean -> . BOOLTRUE
    (37) value_boolean -> . BOOLFALSE
    (38) value_boolean -> . VARIABLE
    (39) value_boolean -> . comparison_operation
    (101) comparison_operation -> . value_numeric
    (102) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (40) value_numeric -> . INTEGER
    (41) value_numeric -> . FLOAT_NUMBER
    (42) value_numeric -> . DECIMAL_NUMBER
    (43) value_numeric -> . VARIABLE

    BOOLFALSE       shift and go to state 268
    VARIABLE        shift and go to state 396
    LOGICNOT        shift and go to state 189
    BOOLTRUE        shift and go to state 190
    INTEGER         shift and go to state 195
    FLOAT_NUMBER    shift and go to state 196
    DECIMAL_NUMBER  shift and go to state 197

    boolean_operation              shift and go to state 397
    value_boolean                  shift and go to state 188
    comparison_operation           shift and go to state 193
    value_numeric                  shift and go to state 194

state 347

    (156) thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait . thread_wait
    (160) thread_wait -> . thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA
    (170) thread_identificator -> . VARIABLE

    VARIABLE        shift and go to state 144

    thread_wait                    shift and go to state 398
    thread_identificator           shift and go to state 348

state 348

    (160) thread_wait -> thread_identificator . DOT JOIN LPARENT RPARENT DOTANDCOMMA

    DOT             shift and go to state 399


state 349

    (159) thread_init -> thread_identificator DOT START . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 400


state 350

    (174) list_enums -> METHOD COMMA . list_enums
    (173) list_enums -> . METHOD
    (174) list_enums -> . METHOD COMMA list_enums

    METHOD          shift and go to state 271

    list_enums                     shift and go to state 401

state 351

    (172) enums -> ENUM METHOD LKEY list_enums RKEY .

    PRINT           reduce using rule 172 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    CHARTYPE        reduce using rule 172 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    STRINGTYPE      reduce using rule 172 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    FLOATTYPE       reduce using rule 172 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    DECIMALTYPE     reduce using rule 172 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    INTTYPE         reduce using rule 172 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    BOOLTYPE        reduce using rule 172 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    VARIABLE        reduce using rule 172 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    STATIC          reduce using rule 172 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    WRITE           reduce using rule 172 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    LPARENT         reduce using rule 172 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    ENUM            reduce using rule 172 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    IF              reduce using rule 172 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    STACK           reduce using rule 172 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    QUEUE           reduce using rule 172 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    CONST           reduce using rule 172 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    THREAD          reduce using rule 172 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    TRY             reduce using rule 172 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    LIST            reduce using rule 172 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    FOR             reduce using rule 172 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    FOREACH         reduce using rule 172 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    WHILE           reduce using rule 172 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    DO              reduce using rule 172 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    PUBLIC          reduce using rule 172 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    PRIVATE         reduce using rule 172 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    RKEY            reduce using rule 172 (enums -> ENUM METHOD LKEY list_enums RKEY .)
    $end            reduce using rule 172 (enums -> ENUM METHOD LKEY list_enums RKEY .)


state 352

    (185) normal_if -> IF LPARENT boolean_operation RPARENT LKEY . block_if RKEY other_if
    (186) normal_if -> IF LPARENT boolean_operation RPARENT LKEY . block_if RKEY
    (183) block_if -> . normal_if
    (184) block_if -> . all_block_code
    (185) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (186) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (25) all_block_code -> . block_code
    (26) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . array_assignation
    (9) block_code -> . array_value_assign
    (10) block_code -> . array_indexing
    (11) block_code -> . thread_main
    (12) block_code -> . concurrent_method
    (13) block_code -> . block_try_catch
    (14) block_code -> . lists
    (15) block_code -> . functions_list
    (16) block_code -> . statement_lambda
    (17) block_code -> . enums
    (18) block_code -> . normal_if
    (19) block_code -> . block_for
    (20) block_code -> . block_while
    (21) block_code -> . stack_struct
    (22) block_code -> . functions_stack
    (23) block_code -> . queue_struct
    (24) block_code -> . functions_queue
    (114) def_const_or_var -> . constant_assignation
    (115) def_const_or_var -> . variable_assignation
    (44) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (45) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (55) array_assignation -> . CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA
    (56) array_assignation -> . STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
    (57) array_assignation -> . FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
    (58) array_assignation -> . DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA
    (59) array_assignation -> . INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
    (60) array_assignation -> . BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
    (86) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (87) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (84) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (85) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (156) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (161) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (162) concurrent_method -> . WRITE
    (175) block_try_catch -> . try_catch_simply
    (176) block_try_catch -> . try_catch_finally
    (198) lists -> . list_empty
    (199) lists -> . list_full
    (208) functions_list -> . list_func_clear
    (209) functions_list -> . list_func_count
    (210) functions_list -> . list_func_add
    (211) functions_list -> . list_func_removeat
    (171) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (172) enums -> . ENUM METHOD LKEY list_enums RKEY
    (193) block_for -> . for_simple
    (194) block_for -> . for_each
    (189) block_while -> . normal_while
    (190) block_while -> . do_while
    (218) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (219) functions_stack -> . stack_push
    (220) functions_stack -> . stack_pop
    (221) functions_stack -> . stack_clear
    (222) functions_stack -> . stack_peek
    (223) functions_stack -> . stack_isEmpty
    (229) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (230) functions_queue -> . queue_enqueue
    (231) functions_queue -> . queue_dequeue
    (232) functions_queue -> . queue_clear
    (233) functions_queue -> . queue_isEmpty
    (234) functions_queue -> . queue_peek
    (116) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (117) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (118) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (119) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (157) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (158) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (177) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (178) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (200) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (201) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (202) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (203) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (212) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (213) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (214) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (215) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (216) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (217) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (195) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (196) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (197) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (191) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (192) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (224) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (225) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (226) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (227) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (228) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (235) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (236) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (237) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (239) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (238) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (120) access_modifiers -> . PUBLIC
    (121) access_modifiers -> . PRIVATE
    (141) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (142) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (143) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (144) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (145) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    IF              shift and go to state 73
    PRINT           shift and go to state 56
    CHARTYPE        shift and go to state 57
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 58
    DECIMALTYPE     shift and go to state 59
    INTTYPE         shift and go to state 60
    BOOLTYPE        shift and go to state 61
    VARIABLE        shift and go to state 32
    STATIC          shift and go to state 29
    WRITE           shift and go to state 63
    LPARENT         shift and go to state 30
    ENUM            shift and go to state 72
    STACK           shift and go to state 78
    QUEUE           shift and go to state 84
    CONST           shift and go to state 91
    THREAD          shift and go to state 93
    TRY             shift and go to state 94
    LIST            shift and go to state 95
    FOR             shift and go to state 96
    FOREACH         shift and go to state 97
    WHILE           shift and go to state 98
    DO              shift and go to state 99
    PUBLIC          shift and go to state 100
    PRIVATE         shift and go to state 101

    block_if                       shift and go to state 402
    normal_if                      shift and go to state 403
    all_block_code                 shift and go to state 404
    block_code                     shift and go to state 34
    def_const_or_var               shift and go to state 35
    print_data                     shift and go to state 36
    array_assignation              shift and go to state 37
    array_value_assign             shift and go to state 38
    array_indexing                 shift and go to state 39
    thread_main                    shift and go to state 40
    concurrent_method              shift and go to state 41
    block_try_catch                shift and go to state 42
    lists                          shift and go to state 43
    functions_list                 shift and go to state 44
    statement_lambda               shift and go to state 45
    enums                          shift and go to state 46
    block_for                      shift and go to state 48
    block_while                    shift and go to state 49
    stack_struct                   shift and go to state 50
    functions_stack                shift and go to state 51
    queue_struct                   shift and go to state 52
    functions_queue                shift and go to state 53
    constant_assignation           shift and go to state 54
    variable_assignation           shift and go to state 55
    declaration_thread             shift and go to state 62
    try_catch_simply               shift and go to state 64
    try_catch_finally              shift and go to state 65
    list_empty                     shift and go to state 66
    list_full                      shift and go to state 67
    list_func_clear                shift and go to state 68
    list_func_count                shift and go to state 69
    list_func_add                  shift and go to state 70
    list_func_removeat             shift and go to state 71
    for_simple                     shift and go to state 74
    for_each                       shift and go to state 75
    normal_while                   shift and go to state 76
    do_while                       shift and go to state 77
    stack_push                     shift and go to state 79
    stack_pop                      shift and go to state 80
    stack_clear                    shift and go to state 81
    stack_peek                     shift and go to state 82
    stack_isEmpty                  shift and go to state 83
    queue_enqueue                  shift and go to state 85
    queue_dequeue                  shift and go to state 86
    queue_clear                    shift and go to state 87
    queue_isEmpty                  shift and go to state 88
    queue_peek                     shift and go to state 89
    access_modifiers               shift and go to state 90
    assignation_type_value_multiple shift and go to state 92

state 353

    (111) boolean_operation -> value_boolean boolean_operator boolean_operation .

    RPARENT         reduce using rule 111 (boolean_operation -> value_boolean boolean_operator boolean_operation .)
    COMMA           reduce using rule 111 (boolean_operation -> value_boolean boolean_operator boolean_operation .)
    DOTANDCOMMA     reduce using rule 111 (boolean_operation -> value_boolean boolean_operator boolean_operation .)


state 354

    (102) comparison_operation -> value_numeric comparison_operator comparison_operation .

    LOGICAND        reduce using rule 102 (comparison_operation -> value_numeric comparison_operator comparison_operation .)
    LOGICOR         reduce using rule 102 (comparison_operation -> value_numeric comparison_operator comparison_operation .)
    RPARENT         reduce using rule 102 (comparison_operation -> value_numeric comparison_operator comparison_operation .)
    COMMA           reduce using rule 102 (comparison_operation -> value_numeric comparison_operator comparison_operation .)
    DOTANDCOMMA     reduce using rule 102 (comparison_operation -> value_numeric comparison_operator comparison_operation .)
    RBRACKET        reduce using rule 102 (comparison_operation -> value_numeric comparison_operator comparison_operation .)


state 355

    (43) value_numeric -> VARIABLE .

    GREATER_THAN    reduce using rule 43 (value_numeric -> VARIABLE .)
    SMALLER_THAN    reduce using rule 43 (value_numeric -> VARIABLE .)
    EQUAL_COMPARATION reduce using rule 43 (value_numeric -> VARIABLE .)
    INEQUALITY      reduce using rule 43 (value_numeric -> VARIABLE .)
    GREATER_THAN_OR_EQUAL reduce using rule 43 (value_numeric -> VARIABLE .)
    SMALLER_THAN_OR_EQUAL reduce using rule 43 (value_numeric -> VARIABLE .)
    LOGICAND        reduce using rule 43 (value_numeric -> VARIABLE .)
    LOGICOR         reduce using rule 43 (value_numeric -> VARIABLE .)
    RPARENT         reduce using rule 43 (value_numeric -> VARIABLE .)
    COMMA           reduce using rule 43 (value_numeric -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 43 (value_numeric -> VARIABLE .)
    RBRACKET        reduce using rule 43 (value_numeric -> VARIABLE .)
    PLUS            reduce using rule 43 (value_numeric -> VARIABLE .)
    MINUS           reduce using rule 43 (value_numeric -> VARIABLE .)
    TIMES           reduce using rule 43 (value_numeric -> VARIABLE .)
    DIVIDE          reduce using rule 43 (value_numeric -> VARIABLE .)
    PERCENT         reduce using rule 43 (value_numeric -> VARIABLE .)


state 356

    (218) stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 405


state 357

    (229) queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 406


state 358

    (157) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD . LPARENT thread_identificator RPARENT DOTANDCOMMA
    (158) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD . LPARENT concurrent_method RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 407


state 359

    (177) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH . LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (178) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH . LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    LPARENT         shift and go to state 408


state 360

    (200) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE . ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (202) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE . ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    ASSIGNATION     shift and go to state 409


state 361

    (201) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE . ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (203) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE . ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    ASSIGNATION     shift and go to state 410


state 362

    (195) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA . comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (196) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA . comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (101) comparison_operation -> . value_numeric
    (102) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (40) value_numeric -> . INTEGER
    (41) value_numeric -> . FLOAT_NUMBER
    (42) value_numeric -> . DECIMAL_NUMBER
    (43) value_numeric -> . VARIABLE

    INTEGER         shift and go to state 195
    FLOAT_NUMBER    shift and go to state 196
    DECIMAL_NUMBER  shift and go to state 197
    VARIABLE        shift and go to state 355

    comparison_operation           shift and go to state 411
    value_numeric                  shift and go to state 194

state 363

    (197) for_each -> FOREACH LPARENT data_type VARIABLE IN . VARIABLE RPARENT LKEY all_block_code RKEY

    VARIABLE        shift and go to state 412


state 364

    (191) normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY . all_block_code RKEY
    (25) all_block_code -> . block_code
    (26) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . array_assignation
    (9) block_code -> . array_value_assign
    (10) block_code -> . array_indexing
    (11) block_code -> . thread_main
    (12) block_code -> . concurrent_method
    (13) block_code -> . block_try_catch
    (14) block_code -> . lists
    (15) block_code -> . functions_list
    (16) block_code -> . statement_lambda
    (17) block_code -> . enums
    (18) block_code -> . normal_if
    (19) block_code -> . block_for
    (20) block_code -> . block_while
    (21) block_code -> . stack_struct
    (22) block_code -> . functions_stack
    (23) block_code -> . queue_struct
    (24) block_code -> . functions_queue
    (114) def_const_or_var -> . constant_assignation
    (115) def_const_or_var -> . variable_assignation
    (44) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (45) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (55) array_assignation -> . CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA
    (56) array_assignation -> . STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
    (57) array_assignation -> . FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
    (58) array_assignation -> . DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA
    (59) array_assignation -> . INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
    (60) array_assignation -> . BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
    (86) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (87) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (84) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (85) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (156) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (161) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (162) concurrent_method -> . WRITE
    (175) block_try_catch -> . try_catch_simply
    (176) block_try_catch -> . try_catch_finally
    (198) lists -> . list_empty
    (199) lists -> . list_full
    (208) functions_list -> . list_func_clear
    (209) functions_list -> . list_func_count
    (210) functions_list -> . list_func_add
    (211) functions_list -> . list_func_removeat
    (171) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (172) enums -> . ENUM METHOD LKEY list_enums RKEY
    (185) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (186) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (193) block_for -> . for_simple
    (194) block_for -> . for_each
    (189) block_while -> . normal_while
    (190) block_while -> . do_while
    (218) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (219) functions_stack -> . stack_push
    (220) functions_stack -> . stack_pop
    (221) functions_stack -> . stack_clear
    (222) functions_stack -> . stack_peek
    (223) functions_stack -> . stack_isEmpty
    (229) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (230) functions_queue -> . queue_enqueue
    (231) functions_queue -> . queue_dequeue
    (232) functions_queue -> . queue_clear
    (233) functions_queue -> . queue_isEmpty
    (234) functions_queue -> . queue_peek
    (116) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (117) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (118) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (119) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (157) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (158) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (177) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (178) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (200) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (201) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (202) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (203) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (212) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (213) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (214) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (215) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (216) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (217) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (195) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (196) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (197) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (191) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (192) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (224) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (225) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (226) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (227) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (228) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (235) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (236) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (237) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (239) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (238) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (120) access_modifiers -> . PUBLIC
    (121) access_modifiers -> . PRIVATE
    (141) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (142) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (143) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (144) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (145) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 56
    CHARTYPE        shift and go to state 57
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 58
    DECIMALTYPE     shift and go to state 59
    INTTYPE         shift and go to state 60
    BOOLTYPE        shift and go to state 61
    VARIABLE        shift and go to state 32
    STATIC          shift and go to state 29
    WRITE           shift and go to state 63
    LPARENT         shift and go to state 30
    ENUM            shift and go to state 72
    IF              shift and go to state 73
    STACK           shift and go to state 78
    QUEUE           shift and go to state 84
    CONST           shift and go to state 91
    THREAD          shift and go to state 93
    TRY             shift and go to state 94
    LIST            shift and go to state 95
    FOR             shift and go to state 96
    FOREACH         shift and go to state 97
    WHILE           shift and go to state 98
    DO              shift and go to state 99
    PUBLIC          shift and go to state 100
    PRIVATE         shift and go to state 101

    all_block_code                 shift and go to state 413
    block_code                     shift and go to state 34
    def_const_or_var               shift and go to state 35
    print_data                     shift and go to state 36
    array_assignation              shift and go to state 37
    array_value_assign             shift and go to state 38
    array_indexing                 shift and go to state 39
    thread_main                    shift and go to state 40
    concurrent_method              shift and go to state 41
    block_try_catch                shift and go to state 42
    lists                          shift and go to state 43
    functions_list                 shift and go to state 44
    statement_lambda               shift and go to state 45
    enums                          shift and go to state 46
    normal_if                      shift and go to state 47
    block_for                      shift and go to state 48
    block_while                    shift and go to state 49
    stack_struct                   shift and go to state 50
    functions_stack                shift and go to state 51
    queue_struct                   shift and go to state 52
    functions_queue                shift and go to state 53
    constant_assignation           shift and go to state 54
    variable_assignation           shift and go to state 55
    declaration_thread             shift and go to state 62
    try_catch_simply               shift and go to state 64
    try_catch_finally              shift and go to state 65
    list_empty                     shift and go to state 66
    list_full                      shift and go to state 67
    list_func_clear                shift and go to state 68
    list_func_count                shift and go to state 69
    list_func_add                  shift and go to state 70
    list_func_removeat             shift and go to state 71
    for_simple                     shift and go to state 74
    for_each                       shift and go to state 75
    normal_while                   shift and go to state 76
    do_while                       shift and go to state 77
    stack_push                     shift and go to state 79
    stack_pop                      shift and go to state 80
    stack_clear                    shift and go to state 81
    stack_peek                     shift and go to state 82
    stack_isEmpty                  shift and go to state 83
    queue_enqueue                  shift and go to state 85
    queue_dequeue                  shift and go to state 86
    queue_clear                    shift and go to state 87
    queue_isEmpty                  shift and go to state 88
    queue_peek                     shift and go to state 89
    access_modifiers               shift and go to state 90
    assignation_type_value_multiple shift and go to state 92

state 365

    (192) do_while -> DO LKEY all_block_code RKEY WHILE . LPARENT boolean_operation RPARENT

    LPARENT         shift and go to state 414


state 366

    (4) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY .
    (5) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY . all_block_code
    (25) all_block_code -> . block_code
    (26) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . array_assignation
    (9) block_code -> . array_value_assign
    (10) block_code -> . array_indexing
    (11) block_code -> . thread_main
    (12) block_code -> . concurrent_method
    (13) block_code -> . block_try_catch
    (14) block_code -> . lists
    (15) block_code -> . functions_list
    (16) block_code -> . statement_lambda
    (17) block_code -> . enums
    (18) block_code -> . normal_if
    (19) block_code -> . block_for
    (20) block_code -> . block_while
    (21) block_code -> . stack_struct
    (22) block_code -> . functions_stack
    (23) block_code -> . queue_struct
    (24) block_code -> . functions_queue
    (114) def_const_or_var -> . constant_assignation
    (115) def_const_or_var -> . variable_assignation
    (44) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (45) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (55) array_assignation -> . CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA
    (56) array_assignation -> . STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
    (57) array_assignation -> . FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
    (58) array_assignation -> . DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA
    (59) array_assignation -> . INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
    (60) array_assignation -> . BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
    (86) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (87) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (84) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (85) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (156) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (161) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (162) concurrent_method -> . WRITE
    (175) block_try_catch -> . try_catch_simply
    (176) block_try_catch -> . try_catch_finally
    (198) lists -> . list_empty
    (199) lists -> . list_full
    (208) functions_list -> . list_func_clear
    (209) functions_list -> . list_func_count
    (210) functions_list -> . list_func_add
    (211) functions_list -> . list_func_removeat
    (171) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (172) enums -> . ENUM METHOD LKEY list_enums RKEY
    (185) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (186) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (193) block_for -> . for_simple
    (194) block_for -> . for_each
    (189) block_while -> . normal_while
    (190) block_while -> . do_while
    (218) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (219) functions_stack -> . stack_push
    (220) functions_stack -> . stack_pop
    (221) functions_stack -> . stack_clear
    (222) functions_stack -> . stack_peek
    (223) functions_stack -> . stack_isEmpty
    (229) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (230) functions_queue -> . queue_enqueue
    (231) functions_queue -> . queue_dequeue
    (232) functions_queue -> . queue_clear
    (233) functions_queue -> . queue_isEmpty
    (234) functions_queue -> . queue_peek
    (116) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (117) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (118) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (119) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (157) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (158) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (177) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (178) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (200) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (201) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (202) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (203) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (212) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (213) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (214) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (215) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (216) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (217) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (195) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (196) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (197) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (191) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (192) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (224) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (225) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (226) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (227) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (228) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (235) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (236) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (237) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (239) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (238) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (120) access_modifiers -> . PUBLIC
    (121) access_modifiers -> . PRIVATE
    (141) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (142) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (143) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (144) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (145) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    RKEY            reduce using rule 4 (block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY .)
    PRINT           shift and go to state 56
    CHARTYPE        shift and go to state 57
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 58
    DECIMALTYPE     shift and go to state 59
    INTTYPE         shift and go to state 60
    BOOLTYPE        shift and go to state 61
    VARIABLE        shift and go to state 32
    STATIC          shift and go to state 29
    WRITE           shift and go to state 63
    LPARENT         shift and go to state 30
    ENUM            shift and go to state 72
    IF              shift and go to state 73
    STACK           shift and go to state 78
    QUEUE           shift and go to state 84
    CONST           shift and go to state 91
    THREAD          shift and go to state 93
    TRY             shift and go to state 94
    LIST            shift and go to state 95
    FOR             shift and go to state 96
    FOREACH         shift and go to state 97
    WHILE           shift and go to state 98
    DO              shift and go to state 99
    PUBLIC          shift and go to state 100
    PRIVATE         shift and go to state 101

    all_block_code                 shift and go to state 415
    block_code                     shift and go to state 34
    def_const_or_var               shift and go to state 35
    print_data                     shift and go to state 36
    array_assignation              shift and go to state 37
    array_value_assign             shift and go to state 38
    array_indexing                 shift and go to state 39
    thread_main                    shift and go to state 40
    concurrent_method              shift and go to state 41
    block_try_catch                shift and go to state 42
    lists                          shift and go to state 43
    functions_list                 shift and go to state 44
    statement_lambda               shift and go to state 45
    enums                          shift and go to state 46
    normal_if                      shift and go to state 47
    block_for                      shift and go to state 48
    block_while                    shift and go to state 49
    stack_struct                   shift and go to state 50
    functions_stack                shift and go to state 51
    queue_struct                   shift and go to state 52
    functions_queue                shift and go to state 53
    constant_assignation           shift and go to state 54
    variable_assignation           shift and go to state 55
    declaration_thread             shift and go to state 62
    try_catch_simply               shift and go to state 64
    try_catch_finally              shift and go to state 65
    list_empty                     shift and go to state 66
    list_full                      shift and go to state 67
    list_func_clear                shift and go to state 68
    list_func_count                shift and go to state 69
    list_func_add                  shift and go to state 70
    list_func_removeat             shift and go to state 71
    for_simple                     shift and go to state 74
    for_each                       shift and go to state 75
    normal_while                   shift and go to state 76
    do_while                       shift and go to state 77
    stack_push                     shift and go to state 79
    stack_pop                      shift and go to state 80
    stack_clear                    shift and go to state 81
    stack_peek                     shift and go to state 82
    stack_isEmpty                  shift and go to state 83
    queue_enqueue                  shift and go to state 85
    queue_dequeue                  shift and go to state 86
    queue_clear                    shift and go to state 87
    queue_isEmpty                  shift and go to state 88
    queue_peek                     shift and go to state 89
    access_modifiers               shift and go to state 90
    assignation_type_value_multiple shift and go to state 92

state 367

    (161) concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY . thread_logic RKEY
    (163) thread_logic -> . thread_sentence
    (164) thread_logic -> . thread_logic thread_sentence
    (165) thread_sentence -> . thread_expression DOTANDCOMMA
    (166) thread_expression -> . thread_identificator DOT concurrent_method LPARENT RPARENT
    (167) thread_expression -> . PRINT LPARENT STRING RPARENT
    (170) thread_identificator -> . VARIABLE

    PRINT           shift and go to state 420
    VARIABLE        shift and go to state 144

    thread_identificator           shift and go to state 416
    thread_logic                   shift and go to state 417
    thread_sentence                shift and go to state 418
    thread_expression              shift and go to state 419

state 368

    (171) statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY . RPARENT

    RPARENT         shift and go to state 421


state 369

    (64) string_array_assignation -> VARIABLE ASSIGNATION LBRACKET . string_content_multiple RBRACKET
    (65) string_content_multiple -> . STRING
    (66) string_content_multiple -> . STRING COMMA string_content_multiple

    STRING          shift and go to state 423

    string_content_multiple        shift and go to state 422

state 370

    (86) array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 424


state 371

    (87) array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 425


state 372

    (212) list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .
    (226) stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .
    (237) queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .

  ! reduce/reduce conflict for PRINT resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for CHARTYPE resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STRINGTYPE resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FLOATTYPE resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DECIMALTYPE resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for INTTYPE resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for BOOLTYPE resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STATIC resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WRITE resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for LPARENT resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for ENUM resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for IF resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STACK resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for QUEUE resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for CONST resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for THREAD resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for TRY resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for LIST resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FOR resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FOREACH resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WHILE resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DO resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for RKEY resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for $end resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PRINT resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for CHARTYPE resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STRINGTYPE resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FLOATTYPE resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DECIMALTYPE resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for INTTYPE resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for BOOLTYPE resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STATIC resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WRITE resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for LPARENT resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for ENUM resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for IF resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STACK resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for QUEUE resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for CONST resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for THREAD resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for TRY resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for LIST resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FOR resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FOREACH resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WHILE resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DO resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for RKEY resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for $end resolved using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    PRINT           reduce using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 212 (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .)

  ! PRINT           [ reduce using rule 226 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! CHARTYPE        [ reduce using rule 226 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! STRINGTYPE      [ reduce using rule 226 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! FLOATTYPE       [ reduce using rule 226 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! DECIMALTYPE     [ reduce using rule 226 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! INTTYPE         [ reduce using rule 226 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! BOOLTYPE        [ reduce using rule 226 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! VARIABLE        [ reduce using rule 226 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! STATIC          [ reduce using rule 226 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! WRITE           [ reduce using rule 226 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! LPARENT         [ reduce using rule 226 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! ENUM            [ reduce using rule 226 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! IF              [ reduce using rule 226 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! STACK           [ reduce using rule 226 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! QUEUE           [ reduce using rule 226 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! CONST           [ reduce using rule 226 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! THREAD          [ reduce using rule 226 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! TRY             [ reduce using rule 226 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! LIST            [ reduce using rule 226 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! FOR             [ reduce using rule 226 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! FOREACH         [ reduce using rule 226 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! WHILE           [ reduce using rule 226 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! DO              [ reduce using rule 226 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! PUBLIC          [ reduce using rule 226 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! PRIVATE         [ reduce using rule 226 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! RKEY            [ reduce using rule 226 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! $end            [ reduce using rule 226 (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! PRINT           [ reduce using rule 237 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! CHARTYPE        [ reduce using rule 237 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! STRINGTYPE      [ reduce using rule 237 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! FLOATTYPE       [ reduce using rule 237 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! DECIMALTYPE     [ reduce using rule 237 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! INTTYPE         [ reduce using rule 237 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! BOOLTYPE        [ reduce using rule 237 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! VARIABLE        [ reduce using rule 237 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! STATIC          [ reduce using rule 237 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! WRITE           [ reduce using rule 237 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! LPARENT         [ reduce using rule 237 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! ENUM            [ reduce using rule 237 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! IF              [ reduce using rule 237 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! STACK           [ reduce using rule 237 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! QUEUE           [ reduce using rule 237 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! CONST           [ reduce using rule 237 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! THREAD          [ reduce using rule 237 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! TRY             [ reduce using rule 237 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! LIST            [ reduce using rule 237 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! FOR             [ reduce using rule 237 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! FOREACH         [ reduce using rule 237 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! WHILE           [ reduce using rule 237 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! DO              [ reduce using rule 237 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! PUBLIC          [ reduce using rule 237 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! PRIVATE         [ reduce using rule 237 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! RKEY            [ reduce using rule 237 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]
  ! $end            [ reduce using rule 237 (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA .) ]


state 373

    (213) list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 213 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 213 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 213 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 213 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 213 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 213 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 213 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 213 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 213 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 213 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 213 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 213 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 213 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 213 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 213 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 213 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 213 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 213 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 213 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 213 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 213 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 213 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 213 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 213 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 213 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 213 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 213 (list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA .)


state 374

    (214) list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 426


state 375

    (215) list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 427


state 376

    (216) list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 428


state 377

    (217) list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 429


state 378

    (224) stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 430


state 379

    (48) concatenation -> STRING PLUS . concatenation
    (47) concatenation -> . STRING
    (48) concatenation -> . STRING PLUS concatenation

    STRING          shift and go to state 431

    concatenation                  shift and go to state 432

state 380

    (46) read_data -> READ LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 433


state 381

    (81) array -> LBRACKET array_content . RBRACKET

    RBRACKET        shift and go to state 434


state 382

    (82) array_content -> value .
    (83) array_content -> value . COMMA array_content

    RBRACKET        reduce using rule 82 (array_content -> value .)
    COMMA           shift and go to state 435


state 383

    (225) stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 225 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 225 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 225 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 225 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 225 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 225 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 225 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 225 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 225 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 225 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 225 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 225 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 225 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 225 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 225 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 225 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 225 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 225 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 225 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 225 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 225 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 225 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 225 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 225 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 225 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 225 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 225 (stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA .)


state 384

    (227) stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .
    (238) queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .

  ! reduce/reduce conflict for PRINT resolved using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for CHARTYPE resolved using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STRINGTYPE resolved using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FLOATTYPE resolved using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DECIMALTYPE resolved using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for INTTYPE resolved using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for BOOLTYPE resolved using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STATIC resolved using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WRITE resolved using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for LPARENT resolved using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for ENUM resolved using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for IF resolved using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STACK resolved using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for QUEUE resolved using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for CONST resolved using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for THREAD resolved using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for TRY resolved using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for LIST resolved using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FOR resolved using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FOREACH resolved using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WHILE resolved using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DO resolved using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for RKEY resolved using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for $end resolved using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    PRINT           reduce using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 227 (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .)

  ! PRINT           [ reduce using rule 238 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! CHARTYPE        [ reduce using rule 238 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! STRINGTYPE      [ reduce using rule 238 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! FLOATTYPE       [ reduce using rule 238 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! DECIMALTYPE     [ reduce using rule 238 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! INTTYPE         [ reduce using rule 238 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! BOOLTYPE        [ reduce using rule 238 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! VARIABLE        [ reduce using rule 238 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! STATIC          [ reduce using rule 238 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! WRITE           [ reduce using rule 238 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! LPARENT         [ reduce using rule 238 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! ENUM            [ reduce using rule 238 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! IF              [ reduce using rule 238 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! STACK           [ reduce using rule 238 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! QUEUE           [ reduce using rule 238 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! CONST           [ reduce using rule 238 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! THREAD          [ reduce using rule 238 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! TRY             [ reduce using rule 238 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! LIST            [ reduce using rule 238 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! FOR             [ reduce using rule 238 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! FOREACH         [ reduce using rule 238 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! WHILE           [ reduce using rule 238 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! DO              [ reduce using rule 238 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! PUBLIC          [ reduce using rule 238 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! PRIVATE         [ reduce using rule 238 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! RKEY            [ reduce using rule 238 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]
  ! $end            [ reduce using rule 238 (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA .) ]


state 385

    (228) stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .
    (239) queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .

  ! reduce/reduce conflict for PRINT resolved using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for CHARTYPE resolved using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STRINGTYPE resolved using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FLOATTYPE resolved using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DECIMALTYPE resolved using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for INTTYPE resolved using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for BOOLTYPE resolved using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STATIC resolved using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WRITE resolved using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for LPARENT resolved using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for ENUM resolved using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for IF resolved using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for STACK resolved using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for QUEUE resolved using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for CONST resolved using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for THREAD resolved using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for TRY resolved using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for LIST resolved using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FOR resolved using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for FOREACH resolved using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for WHILE resolved using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for DO resolved using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for RKEY resolved using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
  ! reduce/reduce conflict for $end resolved using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    PRINT           reduce using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 228 (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .)

  ! PRINT           [ reduce using rule 239 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! CHARTYPE        [ reduce using rule 239 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! STRINGTYPE      [ reduce using rule 239 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! FLOATTYPE       [ reduce using rule 239 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! DECIMALTYPE     [ reduce using rule 239 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! INTTYPE         [ reduce using rule 239 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! BOOLTYPE        [ reduce using rule 239 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! VARIABLE        [ reduce using rule 239 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! STATIC          [ reduce using rule 239 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! WRITE           [ reduce using rule 239 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! LPARENT         [ reduce using rule 239 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! ENUM            [ reduce using rule 239 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! IF              [ reduce using rule 239 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! STACK           [ reduce using rule 239 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! QUEUE           [ reduce using rule 239 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! CONST           [ reduce using rule 239 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! THREAD          [ reduce using rule 239 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! TRY             [ reduce using rule 239 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! LIST            [ reduce using rule 239 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! FOR             [ reduce using rule 239 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! FOREACH         [ reduce using rule 239 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! WHILE           [ reduce using rule 239 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! DO              [ reduce using rule 239 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! PUBLIC          [ reduce using rule 239 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! PRIVATE         [ reduce using rule 239 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! RKEY            [ reduce using rule 239 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]
  ! $end            [ reduce using rule 239 (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA .) ]


state 386

    (235) queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 436


state 387

    (236) queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 236 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 236 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 236 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 236 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 236 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 236 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 236 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 236 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 236 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 236 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 236 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 236 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 236 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 236 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 236 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 236 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 236 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 236 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 236 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 236 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 236 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 236 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 236 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 236 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 236 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 236 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 236 (queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA .)


state 388

    (61) char_array_assignation -> VARIABLE ASSIGNATION LBRACKET . char_content_multiple RBRACKET
    (62) char_content_multiple -> . CHAR
    (63) char_content_multiple -> . CHAR COMMA char_content_multiple

    CHAR            shift and go to state 438

    char_content_multiple          shift and go to state 437

state 389

    (67) float_array_assignation -> VARIABLE ASSIGNATION LBRACKET . float_content_multiple RBRACKET
    (68) float_content_multiple -> . FLOAT_NUMBER
    (69) float_content_multiple -> . FLOAT_NUMBER COMMA float_content_multiple

    FLOAT_NUMBER    shift and go to state 440

    float_content_multiple         shift and go to state 439

state 390

    (95) arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .

    COMMA           reduce using rule 95 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .)
    DOTANDCOMMA     reduce using rule 95 (arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation .)


state 391

    (73) decimal_array_assignation -> VARIABLE ASSIGNATION LBRACKET . decimal_content_multiple RBRACKET
    (74) decimal_content_multiple -> . DECIMAL_NUMBER
    (75) decimal_content_multiple -> . DECIMAL_NUMBER COMMA decimal_content_multiple

    DECIMAL_NUMBER  shift and go to state 442

    decimal_content_multiple       shift and go to state 441

state 392

    (70) int_array_assignation -> VARIABLE ASSIGNATION LBRACKET . int_content_multiple RBRACKET
    (71) int_content_multiple -> . INTEGER
    (72) int_content_multiple -> . INTEGER COMMA int_content_multiple

    INTEGER         shift and go to state 444

    int_content_multiple           shift and go to state 443

state 393

    (76) bool_array_assignation -> VARIABLE ASSIGNATION LBRACKET . bool_content_multiple RBRACKET
    (77) bool_content_multiple -> . BOOLTRUE
    (78) bool_content_multiple -> . BOOLFALSE
    (79) bool_content_multiple -> . BOOLTRUE COMMA bool_content_multiple
    (80) bool_content_multiple -> . BOOLFALSE COMMA bool_content_multiple

    BOOLTRUE        shift and go to state 446
    BOOLFALSE       shift and go to state 447

    bool_content_multiple          shift and go to state 445

state 394

    (136) assignation_true -> VARIABLE ASSIGNATION VARIABLE .
    (38) value_boolean -> VARIABLE .
    (43) value_numeric -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 38 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 38 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for LOGICAND resolved using rule 38 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for LOGICOR resolved using rule 38 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 38 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 38 (value_boolean -> VARIABLE .)
    LOGICAND        reduce using rule 38 (value_boolean -> VARIABLE .)
    LOGICOR         reduce using rule 38 (value_boolean -> VARIABLE .)
    COMMA           reduce using rule 38 (value_boolean -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 38 (value_boolean -> VARIABLE .)
    GREATER_THAN    reduce using rule 43 (value_numeric -> VARIABLE .)
    SMALLER_THAN    reduce using rule 43 (value_numeric -> VARIABLE .)
    EQUAL_COMPARATION reduce using rule 43 (value_numeric -> VARIABLE .)
    INEQUALITY      reduce using rule 43 (value_numeric -> VARIABLE .)
    GREATER_THAN_OR_EQUAL reduce using rule 43 (value_numeric -> VARIABLE .)
    SMALLER_THAN_OR_EQUAL reduce using rule 43 (value_numeric -> VARIABLE .)

  ! COMMA           [ reduce using rule 136 (assignation_true -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 136 (assignation_true -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! LOGICAND        [ reduce using rule 43 (value_numeric -> VARIABLE .) ]
  ! LOGICOR         [ reduce using rule 43 (value_numeric -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 43 (value_numeric -> VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 43 (value_numeric -> VARIABLE .) ]


state 395

    (137) assignation_true -> VARIABLE ASSIGNATION boolean_operation .

    COMMA           reduce using rule 137 (assignation_true -> VARIABLE ASSIGNATION boolean_operation .)
    DOTANDCOMMA     reduce using rule 137 (assignation_true -> VARIABLE ASSIGNATION boolean_operation .)


state 396

    (139) assignation_false -> VARIABLE ASSIGNATION VARIABLE .
    (38) value_boolean -> VARIABLE .
    (43) value_numeric -> VARIABLE .

  ! reduce/reduce conflict for COMMA resolved using rule 38 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 38 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for LOGICAND resolved using rule 38 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for LOGICOR resolved using rule 38 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 38 (value_boolean -> VARIABLE .)
  ! reduce/reduce conflict for DOTANDCOMMA resolved using rule 38 (value_boolean -> VARIABLE .)
    LOGICAND        reduce using rule 38 (value_boolean -> VARIABLE .)
    LOGICOR         reduce using rule 38 (value_boolean -> VARIABLE .)
    COMMA           reduce using rule 38 (value_boolean -> VARIABLE .)
    DOTANDCOMMA     reduce using rule 38 (value_boolean -> VARIABLE .)
    GREATER_THAN    reduce using rule 43 (value_numeric -> VARIABLE .)
    SMALLER_THAN    reduce using rule 43 (value_numeric -> VARIABLE .)
    EQUAL_COMPARATION reduce using rule 43 (value_numeric -> VARIABLE .)
    INEQUALITY      reduce using rule 43 (value_numeric -> VARIABLE .)
    GREATER_THAN_OR_EQUAL reduce using rule 43 (value_numeric -> VARIABLE .)
    SMALLER_THAN_OR_EQUAL reduce using rule 43 (value_numeric -> VARIABLE .)

  ! COMMA           [ reduce using rule 139 (assignation_false -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 139 (assignation_false -> VARIABLE ASSIGNATION VARIABLE .) ]
  ! LOGICAND        [ reduce using rule 43 (value_numeric -> VARIABLE .) ]
  ! LOGICOR         [ reduce using rule 43 (value_numeric -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 43 (value_numeric -> VARIABLE .) ]
  ! DOTANDCOMMA     [ reduce using rule 43 (value_numeric -> VARIABLE .) ]


state 397

    (140) assignation_false -> VARIABLE ASSIGNATION boolean_operation .

    COMMA           reduce using rule 140 (assignation_false -> VARIABLE ASSIGNATION boolean_operation .)
    DOTANDCOMMA     reduce using rule 140 (assignation_false -> VARIABLE ASSIGNATION boolean_operation .)


state 398

    (156) thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .

    PRINT           reduce using rule 156 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    CHARTYPE        reduce using rule 156 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    STRINGTYPE      reduce using rule 156 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    FLOATTYPE       reduce using rule 156 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    DECIMALTYPE     reduce using rule 156 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    INTTYPE         reduce using rule 156 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    BOOLTYPE        reduce using rule 156 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    VARIABLE        reduce using rule 156 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    STATIC          reduce using rule 156 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    WRITE           reduce using rule 156 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    LPARENT         reduce using rule 156 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    ENUM            reduce using rule 156 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    IF              reduce using rule 156 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    STACK           reduce using rule 156 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    QUEUE           reduce using rule 156 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    CONST           reduce using rule 156 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    THREAD          reduce using rule 156 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    TRY             reduce using rule 156 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    LIST            reduce using rule 156 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    FOR             reduce using rule 156 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    FOREACH         reduce using rule 156 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    WHILE           reduce using rule 156 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    DO              reduce using rule 156 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    PUBLIC          reduce using rule 156 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    PRIVATE         reduce using rule 156 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    RKEY            reduce using rule 156 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)
    $end            reduce using rule 156 (thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait .)


state 399

    (160) thread_wait -> thread_identificator DOT . JOIN LPARENT RPARENT DOTANDCOMMA

    JOIN            shift and go to state 448


state 400

    (159) thread_init -> thread_identificator DOT START LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 449


state 401

    (174) list_enums -> METHOD COMMA list_enums .

    RKEY            reduce using rule 174 (list_enums -> METHOD COMMA list_enums .)


state 402

    (185) normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if . RKEY other_if
    (186) normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if . RKEY

    RKEY            shift and go to state 450


state 403

    (183) block_if -> normal_if .
    (18) block_code -> normal_if .

  ! reduce/reduce conflict for RKEY resolved using rule 18 (block_code -> normal_if .)
    PRINT           reduce using rule 18 (block_code -> normal_if .)
    CHARTYPE        reduce using rule 18 (block_code -> normal_if .)
    STRINGTYPE      reduce using rule 18 (block_code -> normal_if .)
    FLOATTYPE       reduce using rule 18 (block_code -> normal_if .)
    DECIMALTYPE     reduce using rule 18 (block_code -> normal_if .)
    INTTYPE         reduce using rule 18 (block_code -> normal_if .)
    BOOLTYPE        reduce using rule 18 (block_code -> normal_if .)
    VARIABLE        reduce using rule 18 (block_code -> normal_if .)
    STATIC          reduce using rule 18 (block_code -> normal_if .)
    WRITE           reduce using rule 18 (block_code -> normal_if .)
    LPARENT         reduce using rule 18 (block_code -> normal_if .)
    ENUM            reduce using rule 18 (block_code -> normal_if .)
    IF              reduce using rule 18 (block_code -> normal_if .)
    STACK           reduce using rule 18 (block_code -> normal_if .)
    QUEUE           reduce using rule 18 (block_code -> normal_if .)
    CONST           reduce using rule 18 (block_code -> normal_if .)
    THREAD          reduce using rule 18 (block_code -> normal_if .)
    TRY             reduce using rule 18 (block_code -> normal_if .)
    LIST            reduce using rule 18 (block_code -> normal_if .)
    FOR             reduce using rule 18 (block_code -> normal_if .)
    FOREACH         reduce using rule 18 (block_code -> normal_if .)
    WHILE           reduce using rule 18 (block_code -> normal_if .)
    DO              reduce using rule 18 (block_code -> normal_if .)
    PUBLIC          reduce using rule 18 (block_code -> normal_if .)
    PRIVATE         reduce using rule 18 (block_code -> normal_if .)
    RKEY            reduce using rule 18 (block_code -> normal_if .)

  ! RKEY            [ reduce using rule 183 (block_if -> normal_if .) ]


state 404

    (184) block_if -> all_block_code .

    RKEY            reduce using rule 184 (block_if -> all_block_code .)


state 405

    (218) stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 451


state 406

    (229) queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 452


state 407

    (157) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT . thread_identificator RPARENT DOTANDCOMMA
    (158) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT . concurrent_method RPARENT DOTANDCOMMA
    (170) thread_identificator -> . VARIABLE
    (161) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (162) concurrent_method -> . WRITE

    VARIABLE        shift and go to state 144
    STATIC          shift and go to state 29
    WRITE           shift and go to state 63

    thread_identificator           shift and go to state 453
    concurrent_method              shift and go to state 454

state 408

    (177) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT . EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (178) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT . EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    EXCEPTION       shift and go to state 455


state 409

    (200) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION . NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (202) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION . NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    NEW             shift and go to state 456


state 410

    (201) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION . NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (203) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION . NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    NEW             shift and go to state 457


state 411

    (195) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation . DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (196) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation . DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    DOTANDCOMMA     shift and go to state 458


state 412

    (197) for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE . RPARENT LKEY all_block_code RKEY

    RPARENT         shift and go to state 459


state 413

    (191) normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code . RKEY

    RKEY            shift and go to state 460


state 414

    (192) do_while -> DO LKEY all_block_code RKEY WHILE LPARENT . boolean_operation RPARENT
    (109) boolean_operation -> . value_boolean
    (110) boolean_operation -> . LOGICNOT value_boolean
    (111) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (36) value_boolean -> . BOOLTRUE
    (37) value_boolean -> . BOOLFALSE
    (38) value_boolean -> . VARIABLE
    (39) value_boolean -> . comparison_operation
    (101) comparison_operation -> . value_numeric
    (102) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (40) value_numeric -> . INTEGER
    (41) value_numeric -> . FLOAT_NUMBER
    (42) value_numeric -> . DECIMAL_NUMBER
    (43) value_numeric -> . VARIABLE

    LOGICNOT        shift and go to state 189
    BOOLTRUE        shift and go to state 190
    BOOLFALSE       shift and go to state 191
    VARIABLE        shift and go to state 192
    INTEGER         shift and go to state 195
    FLOAT_NUMBER    shift and go to state 196
    DECIMAL_NUMBER  shift and go to state 197

    boolean_operation              shift and go to state 461
    value_boolean                  shift and go to state 188
    comparison_operation           shift and go to state 193
    value_numeric                  shift and go to state 194

state 415

    (5) block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code .

    RKEY            reduce using rule 5 (block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code .)


state 416

    (166) thread_expression -> thread_identificator . DOT concurrent_method LPARENT RPARENT

    DOT             shift and go to state 462


state 417

    (161) concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic . RKEY
    (164) thread_logic -> thread_logic . thread_sentence
    (165) thread_sentence -> . thread_expression DOTANDCOMMA
    (166) thread_expression -> . thread_identificator DOT concurrent_method LPARENT RPARENT
    (167) thread_expression -> . PRINT LPARENT STRING RPARENT
    (170) thread_identificator -> . VARIABLE

    RKEY            shift and go to state 463
    PRINT           shift and go to state 420
    VARIABLE        shift and go to state 144

    thread_identificator           shift and go to state 416
    thread_sentence                shift and go to state 464
    thread_expression              shift and go to state 419

state 418

    (163) thread_logic -> thread_sentence .

    RKEY            reduce using rule 163 (thread_logic -> thread_sentence .)
    PRINT           reduce using rule 163 (thread_logic -> thread_sentence .)
    VARIABLE        reduce using rule 163 (thread_logic -> thread_sentence .)


state 419

    (165) thread_sentence -> thread_expression . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 465


state 420

    (167) thread_expression -> PRINT . LPARENT STRING RPARENT

    LPARENT         shift and go to state 466


state 421

    (171) statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .

    PRINT           reduce using rule 171 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    CHARTYPE        reduce using rule 171 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    STRINGTYPE      reduce using rule 171 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    FLOATTYPE       reduce using rule 171 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    DECIMALTYPE     reduce using rule 171 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    INTTYPE         reduce using rule 171 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    BOOLTYPE        reduce using rule 171 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    VARIABLE        reduce using rule 171 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    STATIC          reduce using rule 171 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    WRITE           reduce using rule 171 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    LPARENT         reduce using rule 171 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    ENUM            reduce using rule 171 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    IF              reduce using rule 171 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    STACK           reduce using rule 171 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    QUEUE           reduce using rule 171 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    CONST           reduce using rule 171 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    THREAD          reduce using rule 171 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    TRY             reduce using rule 171 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    LIST            reduce using rule 171 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    FOR             reduce using rule 171 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    FOREACH         reduce using rule 171 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    WHILE           reduce using rule 171 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    DO              reduce using rule 171 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    PUBLIC          reduce using rule 171 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    PRIVATE         reduce using rule 171 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    RKEY            reduce using rule 171 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)
    $end            reduce using rule 171 (statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT .)


state 422

    (64) string_array_assignation -> VARIABLE ASSIGNATION LBRACKET string_content_multiple . RBRACKET

    RBRACKET        shift and go to state 467


state 423

    (65) string_content_multiple -> STRING .
    (66) string_content_multiple -> STRING . COMMA string_content_multiple

    RBRACKET        reduce using rule 65 (string_content_multiple -> STRING .)
    COMMA           shift and go to state 468


state 424

    (86) array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .

    PRINT           reduce using rule 86 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    CHARTYPE        reduce using rule 86 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 86 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 86 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 86 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    INTTYPE         reduce using rule 86 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 86 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    VARIABLE        reduce using rule 86 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    STATIC          reduce using rule 86 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    WRITE           reduce using rule 86 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    LPARENT         reduce using rule 86 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    ENUM            reduce using rule 86 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    IF              reduce using rule 86 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    STACK           reduce using rule 86 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    QUEUE           reduce using rule 86 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    CONST           reduce using rule 86 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    THREAD          reduce using rule 86 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    TRY             reduce using rule 86 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    LIST            reduce using rule 86 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    FOR             reduce using rule 86 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    FOREACH         reduce using rule 86 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    WHILE           reduce using rule 86 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    DO              reduce using rule 86 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    PUBLIC          reduce using rule 86 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    PRIVATE         reduce using rule 86 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    RKEY            reduce using rule 86 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)
    $end            reduce using rule 86 (array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA .)


state 425

    (87) array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .

    PRINT           reduce using rule 87 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    CHARTYPE        reduce using rule 87 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 87 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 87 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 87 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    INTTYPE         reduce using rule 87 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 87 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    VARIABLE        reduce using rule 87 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    STATIC          reduce using rule 87 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    WRITE           reduce using rule 87 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    LPARENT         reduce using rule 87 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    ENUM            reduce using rule 87 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    IF              reduce using rule 87 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    STACK           reduce using rule 87 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    QUEUE           reduce using rule 87 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    CONST           reduce using rule 87 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    THREAD          reduce using rule 87 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    TRY             reduce using rule 87 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    LIST            reduce using rule 87 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    FOR             reduce using rule 87 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    FOREACH         reduce using rule 87 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    WHILE           reduce using rule 87 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    DO              reduce using rule 87 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    PUBLIC          reduce using rule 87 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    PRIVATE         reduce using rule 87 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    RKEY            reduce using rule 87 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)
    $end            reduce using rule 87 (array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA .)


state 426

    (214) list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 214 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 214 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 214 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 214 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 214 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 214 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 214 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 214 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 214 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 214 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 214 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 214 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    IF              reduce using rule 214 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 214 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 214 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 214 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 214 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 214 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 214 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 214 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 214 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 214 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    DO              reduce using rule 214 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 214 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 214 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 214 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)
    $end            reduce using rule 214 (list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA .)


state 427

    (215) list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 215 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 215 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 215 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 215 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 215 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 215 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 215 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 215 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 215 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 215 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 215 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 215 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    IF              reduce using rule 215 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 215 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 215 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 215 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 215 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 215 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 215 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 215 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 215 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 215 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    DO              reduce using rule 215 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 215 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 215 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 215 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)
    $end            reduce using rule 215 (list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA .)


state 428

    (216) list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 216 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 216 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 216 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 216 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 216 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 216 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 216 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 216 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 216 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 216 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 216 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 216 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    IF              reduce using rule 216 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 216 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 216 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 216 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 216 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 216 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 216 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 216 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 216 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 216 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    DO              reduce using rule 216 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 216 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 216 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 216 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)
    $end            reduce using rule 216 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA .)


state 429

    (217) list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 217 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 217 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 217 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 217 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 217 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 217 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 217 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 217 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 217 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 217 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 217 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 217 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    IF              reduce using rule 217 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 217 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 217 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 217 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 217 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 217 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 217 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 217 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 217 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 217 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    DO              reduce using rule 217 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 217 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 217 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 217 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)
    $end            reduce using rule 217 (list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA .)


state 430

    (224) stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 224 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 224 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 224 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 224 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 224 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 224 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 224 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 224 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 224 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 224 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 224 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 224 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    IF              reduce using rule 224 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 224 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 224 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 224 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 224 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 224 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 224 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 224 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 224 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 224 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    DO              reduce using rule 224 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 224 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 224 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 224 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)
    $end            reduce using rule 224 (stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA .)


state 431

    (47) concatenation -> STRING .
    (48) concatenation -> STRING . PLUS concatenation

    RPARENT         reduce using rule 47 (concatenation -> STRING .)
    DOTANDCOMMA     reduce using rule 47 (concatenation -> STRING .)
    COMMA           reduce using rule 47 (concatenation -> STRING .)
    RBRACKET        reduce using rule 47 (concatenation -> STRING .)
    PLUS            shift and go to state 379


state 432

    (48) concatenation -> STRING PLUS concatenation .

    RPARENT         reduce using rule 48 (concatenation -> STRING PLUS concatenation .)
    DOTANDCOMMA     reduce using rule 48 (concatenation -> STRING PLUS concatenation .)
    COMMA           reduce using rule 48 (concatenation -> STRING PLUS concatenation .)
    RBRACKET        reduce using rule 48 (concatenation -> STRING PLUS concatenation .)


state 433

    (46) read_data -> READ LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 469


state 434

    (81) array -> LBRACKET array_content RBRACKET .

    RPARENT         reduce using rule 81 (array -> LBRACKET array_content RBRACKET .)
    DOTANDCOMMA     reduce using rule 81 (array -> LBRACKET array_content RBRACKET .)
    COMMA           reduce using rule 81 (array -> LBRACKET array_content RBRACKET .)
    RBRACKET        reduce using rule 81 (array -> LBRACKET array_content RBRACKET .)


state 435

    (83) array_content -> value COMMA . array_content
    (82) array_content -> . value
    (83) array_content -> . value COMMA array_content
    (88) value -> . value_numeric
    (89) value -> . value_boolean
    (90) value -> . value_string
    (91) value -> . VARIABLE
    (92) value -> . read_data
    (93) value -> . array
    (40) value_numeric -> . INTEGER
    (41) value_numeric -> . FLOAT_NUMBER
    (42) value_numeric -> . DECIMAL_NUMBER
    (43) value_numeric -> . VARIABLE
    (36) value_boolean -> . BOOLTRUE
    (37) value_boolean -> . BOOLFALSE
    (38) value_boolean -> . VARIABLE
    (39) value_boolean -> . comparison_operation
    (33) value_string -> . STRING
    (34) value_string -> . CHAR
    (35) value_string -> . concatenation
    (46) read_data -> . READ LPARENT RPARENT DOTANDCOMMA
    (81) array -> . LBRACKET array_content RBRACKET
    (101) comparison_operation -> . value_numeric
    (102) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (47) concatenation -> . STRING
    (48) concatenation -> . STRING PLUS concatenation

    VARIABLE        shift and go to state 310
    INTEGER         shift and go to state 195
    FLOAT_NUMBER    shift and go to state 196
    DECIMAL_NUMBER  shift and go to state 197
    BOOLTRUE        shift and go to state 190
    BOOLFALSE       shift and go to state 191
    STRING          shift and go to state 317
    CHAR            shift and go to state 318
    READ            shift and go to state 320
    LBRACKET        shift and go to state 321

    value                          shift and go to state 382
    array_content                  shift and go to state 470
    value_numeric                  shift and go to state 312
    value_boolean                  shift and go to state 313
    value_string                   shift and go to state 314
    read_data                      shift and go to state 315
    array                          shift and go to state 316
    comparison_operation           shift and go to state 193
    concatenation                  shift and go to state 319

state 436

    (235) queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 235 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 235 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 235 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 235 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 235 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 235 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 235 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 235 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 235 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 235 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 235 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 235 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    IF              reduce using rule 235 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 235 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 235 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 235 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 235 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 235 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 235 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 235 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 235 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 235 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    DO              reduce using rule 235 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 235 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 235 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 235 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)
    $end            reduce using rule 235 (queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA .)


state 437

    (61) char_array_assignation -> VARIABLE ASSIGNATION LBRACKET char_content_multiple . RBRACKET

    RBRACKET        shift and go to state 471


state 438

    (62) char_content_multiple -> CHAR .
    (63) char_content_multiple -> CHAR . COMMA char_content_multiple

    RBRACKET        reduce using rule 62 (char_content_multiple -> CHAR .)
    COMMA           shift and go to state 472


state 439

    (67) float_array_assignation -> VARIABLE ASSIGNATION LBRACKET float_content_multiple . RBRACKET

    RBRACKET        shift and go to state 473


state 440

    (68) float_content_multiple -> FLOAT_NUMBER .
    (69) float_content_multiple -> FLOAT_NUMBER . COMMA float_content_multiple

    RBRACKET        reduce using rule 68 (float_content_multiple -> FLOAT_NUMBER .)
    COMMA           shift and go to state 474


state 441

    (73) decimal_array_assignation -> VARIABLE ASSIGNATION LBRACKET decimal_content_multiple . RBRACKET

    RBRACKET        shift and go to state 475


state 442

    (74) decimal_content_multiple -> DECIMAL_NUMBER .
    (75) decimal_content_multiple -> DECIMAL_NUMBER . COMMA decimal_content_multiple

    RBRACKET        reduce using rule 74 (decimal_content_multiple -> DECIMAL_NUMBER .)
    COMMA           shift and go to state 476


state 443

    (70) int_array_assignation -> VARIABLE ASSIGNATION LBRACKET int_content_multiple . RBRACKET

    RBRACKET        shift and go to state 477


state 444

    (71) int_content_multiple -> INTEGER .
    (72) int_content_multiple -> INTEGER . COMMA int_content_multiple

    RBRACKET        reduce using rule 71 (int_content_multiple -> INTEGER .)
    COMMA           shift and go to state 478


state 445

    (76) bool_array_assignation -> VARIABLE ASSIGNATION LBRACKET bool_content_multiple . RBRACKET

    RBRACKET        shift and go to state 479


state 446

    (77) bool_content_multiple -> BOOLTRUE .
    (79) bool_content_multiple -> BOOLTRUE . COMMA bool_content_multiple

    RBRACKET        reduce using rule 77 (bool_content_multiple -> BOOLTRUE .)
    COMMA           shift and go to state 480


state 447

    (78) bool_content_multiple -> BOOLFALSE .
    (80) bool_content_multiple -> BOOLFALSE . COMMA bool_content_multiple

    RBRACKET        reduce using rule 78 (bool_content_multiple -> BOOLFALSE .)
    COMMA           shift and go to state 481


state 448

    (160) thread_wait -> thread_identificator DOT JOIN . LPARENT RPARENT DOTANDCOMMA

    LPARENT         shift and go to state 482


state 449

    (159) thread_init -> thread_identificator DOT START LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 483


state 450

    (185) normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY . other_if
    (186) normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .
    (187) other_if -> . ELSE LKEY block_if RKEY
    (188) other_if -> . ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if

    PRINT           reduce using rule 186 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    CHARTYPE        reduce using rule 186 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    STRINGTYPE      reduce using rule 186 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    FLOATTYPE       reduce using rule 186 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    DECIMALTYPE     reduce using rule 186 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    INTTYPE         reduce using rule 186 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    BOOLTYPE        reduce using rule 186 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    VARIABLE        reduce using rule 186 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    STATIC          reduce using rule 186 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    WRITE           reduce using rule 186 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    LPARENT         reduce using rule 186 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    ENUM            reduce using rule 186 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    IF              reduce using rule 186 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    STACK           reduce using rule 186 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    QUEUE           reduce using rule 186 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    CONST           reduce using rule 186 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    THREAD          reduce using rule 186 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    TRY             reduce using rule 186 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    LIST            reduce using rule 186 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    FOR             reduce using rule 186 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    FOREACH         reduce using rule 186 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    WHILE           reduce using rule 186 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    DO              reduce using rule 186 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    PUBLIC          reduce using rule 186 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    PRIVATE         reduce using rule 186 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    RKEY            reduce using rule 186 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    $end            reduce using rule 186 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY .)
    ELSE            shift and go to state 485
    ELSE_IF         shift and go to state 486

    other_if                       shift and go to state 484

state 451

    (218) stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 487


state 452

    (229) queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 488


state 453

    (157) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 489


state 454

    (158) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 490


state 455

    (177) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION . ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (178) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION . ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    ERROR           shift and go to state 491


state 456

    (200) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW . LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (202) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW . LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    LIST            shift and go to state 492


state 457

    (201) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW . LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (203) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW . LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    LIST            shift and go to state 493


state 458

    (195) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA . VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (196) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA . VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY

    VARIABLE        shift and go to state 494


state 459

    (197) for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT . LKEY all_block_code RKEY

    LKEY            shift and go to state 495


state 460

    (191) normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .

    PRINT           reduce using rule 191 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    CHARTYPE        reduce using rule 191 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    STRINGTYPE      reduce using rule 191 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    FLOATTYPE       reduce using rule 191 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    DECIMALTYPE     reduce using rule 191 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    INTTYPE         reduce using rule 191 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    BOOLTYPE        reduce using rule 191 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    VARIABLE        reduce using rule 191 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    STATIC          reduce using rule 191 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    WRITE           reduce using rule 191 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    LPARENT         reduce using rule 191 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    ENUM            reduce using rule 191 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    IF              reduce using rule 191 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    STACK           reduce using rule 191 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    QUEUE           reduce using rule 191 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    CONST           reduce using rule 191 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    THREAD          reduce using rule 191 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    TRY             reduce using rule 191 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    LIST            reduce using rule 191 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    FOR             reduce using rule 191 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    FOREACH         reduce using rule 191 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    WHILE           reduce using rule 191 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    DO              reduce using rule 191 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    PUBLIC          reduce using rule 191 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    PRIVATE         reduce using rule 191 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    RKEY            reduce using rule 191 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)
    $end            reduce using rule 191 (normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY .)


state 461

    (192) do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation . RPARENT

    RPARENT         shift and go to state 496


state 462

    (166) thread_expression -> thread_identificator DOT . concurrent_method LPARENT RPARENT
    (161) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (162) concurrent_method -> . WRITE

    STATIC          shift and go to state 29
    WRITE           shift and go to state 63

    concurrent_method              shift and go to state 497

state 463

    (161) concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .

    PRINT           reduce using rule 161 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    CHARTYPE        reduce using rule 161 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    STRINGTYPE      reduce using rule 161 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    FLOATTYPE       reduce using rule 161 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    DECIMALTYPE     reduce using rule 161 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    INTTYPE         reduce using rule 161 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    BOOLTYPE        reduce using rule 161 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    VARIABLE        reduce using rule 161 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    STATIC          reduce using rule 161 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    WRITE           reduce using rule 161 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    LPARENT         reduce using rule 161 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    ENUM            reduce using rule 161 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    IF              reduce using rule 161 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    STACK           reduce using rule 161 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    QUEUE           reduce using rule 161 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    CONST           reduce using rule 161 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    THREAD          reduce using rule 161 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    TRY             reduce using rule 161 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    LIST            reduce using rule 161 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    FOR             reduce using rule 161 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    FOREACH         reduce using rule 161 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    WHILE           reduce using rule 161 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    DO              reduce using rule 161 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    PUBLIC          reduce using rule 161 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    PRIVATE         reduce using rule 161 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    RKEY            reduce using rule 161 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    $end            reduce using rule 161 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)
    RPARENT         reduce using rule 161 (concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY .)


state 464

    (164) thread_logic -> thread_logic thread_sentence .

    RKEY            reduce using rule 164 (thread_logic -> thread_logic thread_sentence .)
    PRINT           reduce using rule 164 (thread_logic -> thread_logic thread_sentence .)
    VARIABLE        reduce using rule 164 (thread_logic -> thread_logic thread_sentence .)


state 465

    (165) thread_sentence -> thread_expression DOTANDCOMMA .

    RKEY            reduce using rule 165 (thread_sentence -> thread_expression DOTANDCOMMA .)
    PRINT           reduce using rule 165 (thread_sentence -> thread_expression DOTANDCOMMA .)
    VARIABLE        reduce using rule 165 (thread_sentence -> thread_expression DOTANDCOMMA .)


state 466

    (167) thread_expression -> PRINT LPARENT . STRING RPARENT

    STRING          shift and go to state 498


state 467

    (64) string_array_assignation -> VARIABLE ASSIGNATION LBRACKET string_content_multiple RBRACKET .

    DOTANDCOMMA     reduce using rule 64 (string_array_assignation -> VARIABLE ASSIGNATION LBRACKET string_content_multiple RBRACKET .)


state 468

    (66) string_content_multiple -> STRING COMMA . string_content_multiple
    (65) string_content_multiple -> . STRING
    (66) string_content_multiple -> . STRING COMMA string_content_multiple

    STRING          shift and go to state 423

    string_content_multiple        shift and go to state 499

state 469

    (46) read_data -> READ LPARENT RPARENT DOTANDCOMMA .

    RPARENT         reduce using rule 46 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    DOTANDCOMMA     reduce using rule 46 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    COMMA           reduce using rule 46 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)
    RBRACKET        reduce using rule 46 (read_data -> READ LPARENT RPARENT DOTANDCOMMA .)


state 470

    (83) array_content -> value COMMA array_content .

    RBRACKET        reduce using rule 83 (array_content -> value COMMA array_content .)


state 471

    (61) char_array_assignation -> VARIABLE ASSIGNATION LBRACKET char_content_multiple RBRACKET .

    DOTANDCOMMA     reduce using rule 61 (char_array_assignation -> VARIABLE ASSIGNATION LBRACKET char_content_multiple RBRACKET .)


state 472

    (63) char_content_multiple -> CHAR COMMA . char_content_multiple
    (62) char_content_multiple -> . CHAR
    (63) char_content_multiple -> . CHAR COMMA char_content_multiple

    CHAR            shift and go to state 438

    char_content_multiple          shift and go to state 500

state 473

    (67) float_array_assignation -> VARIABLE ASSIGNATION LBRACKET float_content_multiple RBRACKET .

    DOTANDCOMMA     reduce using rule 67 (float_array_assignation -> VARIABLE ASSIGNATION LBRACKET float_content_multiple RBRACKET .)


state 474

    (69) float_content_multiple -> FLOAT_NUMBER COMMA . float_content_multiple
    (68) float_content_multiple -> . FLOAT_NUMBER
    (69) float_content_multiple -> . FLOAT_NUMBER COMMA float_content_multiple

    FLOAT_NUMBER    shift and go to state 440

    float_content_multiple         shift and go to state 501

state 475

    (73) decimal_array_assignation -> VARIABLE ASSIGNATION LBRACKET decimal_content_multiple RBRACKET .

    DOTANDCOMMA     reduce using rule 73 (decimal_array_assignation -> VARIABLE ASSIGNATION LBRACKET decimal_content_multiple RBRACKET .)


state 476

    (75) decimal_content_multiple -> DECIMAL_NUMBER COMMA . decimal_content_multiple
    (74) decimal_content_multiple -> . DECIMAL_NUMBER
    (75) decimal_content_multiple -> . DECIMAL_NUMBER COMMA decimal_content_multiple

    DECIMAL_NUMBER  shift and go to state 442

    decimal_content_multiple       shift and go to state 502

state 477

    (70) int_array_assignation -> VARIABLE ASSIGNATION LBRACKET int_content_multiple RBRACKET .

    DOTANDCOMMA     reduce using rule 70 (int_array_assignation -> VARIABLE ASSIGNATION LBRACKET int_content_multiple RBRACKET .)


state 478

    (72) int_content_multiple -> INTEGER COMMA . int_content_multiple
    (71) int_content_multiple -> . INTEGER
    (72) int_content_multiple -> . INTEGER COMMA int_content_multiple

    INTEGER         shift and go to state 444

    int_content_multiple           shift and go to state 503

state 479

    (76) bool_array_assignation -> VARIABLE ASSIGNATION LBRACKET bool_content_multiple RBRACKET .

    DOTANDCOMMA     reduce using rule 76 (bool_array_assignation -> VARIABLE ASSIGNATION LBRACKET bool_content_multiple RBRACKET .)


state 480

    (79) bool_content_multiple -> BOOLTRUE COMMA . bool_content_multiple
    (77) bool_content_multiple -> . BOOLTRUE
    (78) bool_content_multiple -> . BOOLFALSE
    (79) bool_content_multiple -> . BOOLTRUE COMMA bool_content_multiple
    (80) bool_content_multiple -> . BOOLFALSE COMMA bool_content_multiple

    BOOLTRUE        shift and go to state 446
    BOOLFALSE       shift and go to state 447

    bool_content_multiple          shift and go to state 504

state 481

    (80) bool_content_multiple -> BOOLFALSE COMMA . bool_content_multiple
    (77) bool_content_multiple -> . BOOLTRUE
    (78) bool_content_multiple -> . BOOLFALSE
    (79) bool_content_multiple -> . BOOLTRUE COMMA bool_content_multiple
    (80) bool_content_multiple -> . BOOLFALSE COMMA bool_content_multiple

    BOOLTRUE        shift and go to state 446
    BOOLFALSE       shift and go to state 447

    bool_content_multiple          shift and go to state 505

state 482

    (160) thread_wait -> thread_identificator DOT JOIN LPARENT . RPARENT DOTANDCOMMA

    RPARENT         shift and go to state 506


state 483

    (159) thread_init -> thread_identificator DOT START LPARENT RPARENT DOTANDCOMMA .

    VARIABLE        reduce using rule 159 (thread_init -> thread_identificator DOT START LPARENT RPARENT DOTANDCOMMA .)


state 484

    (185) normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .

    PRINT           reduce using rule 185 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    CHARTYPE        reduce using rule 185 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    STRINGTYPE      reduce using rule 185 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    FLOATTYPE       reduce using rule 185 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    DECIMALTYPE     reduce using rule 185 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    INTTYPE         reduce using rule 185 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    BOOLTYPE        reduce using rule 185 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    VARIABLE        reduce using rule 185 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    STATIC          reduce using rule 185 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    WRITE           reduce using rule 185 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    LPARENT         reduce using rule 185 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    ENUM            reduce using rule 185 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    IF              reduce using rule 185 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    STACK           reduce using rule 185 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    QUEUE           reduce using rule 185 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    CONST           reduce using rule 185 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    THREAD          reduce using rule 185 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    TRY             reduce using rule 185 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    LIST            reduce using rule 185 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    FOR             reduce using rule 185 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    FOREACH         reduce using rule 185 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    WHILE           reduce using rule 185 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    DO              reduce using rule 185 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    PUBLIC          reduce using rule 185 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    PRIVATE         reduce using rule 185 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    RKEY            reduce using rule 185 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    $end            reduce using rule 185 (normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)


state 485

    (187) other_if -> ELSE . LKEY block_if RKEY

    LKEY            shift and go to state 507


state 486

    (188) other_if -> ELSE_IF . LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if

    LPARENT         shift and go to state 508


state 487

    (218) stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 218 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 218 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 218 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 218 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 218 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 218 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 218 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 218 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 218 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 218 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 218 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 218 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 218 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 218 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 218 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 218 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 218 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 218 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 218 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 218 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 218 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 218 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 218 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 218 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 218 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 218 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 218 (stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA .)


state 488

    (229) queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 229 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 229 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 229 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 229 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 229 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 229 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 229 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 229 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 229 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 229 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 229 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 229 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 229 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 229 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 229 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 229 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 229 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 229 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 229 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 229 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 229 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 229 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 229 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 229 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 229 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 229 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 229 (queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA .)


state 489

    (157) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 509


state 490

    (158) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 510


state 491

    (177) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR . RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (178) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR . RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    RPARENT         shift and go to state 511


state 492

    (200) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST . SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (202) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST . SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    SMALLER_THAN    shift and go to state 512


state 493

    (201) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST . SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (203) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST . SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    SMALLER_THAN    shift and go to state 513


state 494

    (195) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE . INCREMENT RPARENT LKEY all_block_code RKEY
    (196) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE . DECREMENT RPARENT LKEY all_block_code RKEY

    INCREMENT       shift and go to state 514
    DECREMENT       shift and go to state 515


state 495

    (197) for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY . all_block_code RKEY
    (25) all_block_code -> . block_code
    (26) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . array_assignation
    (9) block_code -> . array_value_assign
    (10) block_code -> . array_indexing
    (11) block_code -> . thread_main
    (12) block_code -> . concurrent_method
    (13) block_code -> . block_try_catch
    (14) block_code -> . lists
    (15) block_code -> . functions_list
    (16) block_code -> . statement_lambda
    (17) block_code -> . enums
    (18) block_code -> . normal_if
    (19) block_code -> . block_for
    (20) block_code -> . block_while
    (21) block_code -> . stack_struct
    (22) block_code -> . functions_stack
    (23) block_code -> . queue_struct
    (24) block_code -> . functions_queue
    (114) def_const_or_var -> . constant_assignation
    (115) def_const_or_var -> . variable_assignation
    (44) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (45) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (55) array_assignation -> . CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA
    (56) array_assignation -> . STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
    (57) array_assignation -> . FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
    (58) array_assignation -> . DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA
    (59) array_assignation -> . INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
    (60) array_assignation -> . BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
    (86) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (87) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (84) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (85) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (156) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (161) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (162) concurrent_method -> . WRITE
    (175) block_try_catch -> . try_catch_simply
    (176) block_try_catch -> . try_catch_finally
    (198) lists -> . list_empty
    (199) lists -> . list_full
    (208) functions_list -> . list_func_clear
    (209) functions_list -> . list_func_count
    (210) functions_list -> . list_func_add
    (211) functions_list -> . list_func_removeat
    (171) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (172) enums -> . ENUM METHOD LKEY list_enums RKEY
    (185) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (186) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (193) block_for -> . for_simple
    (194) block_for -> . for_each
    (189) block_while -> . normal_while
    (190) block_while -> . do_while
    (218) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (219) functions_stack -> . stack_push
    (220) functions_stack -> . stack_pop
    (221) functions_stack -> . stack_clear
    (222) functions_stack -> . stack_peek
    (223) functions_stack -> . stack_isEmpty
    (229) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (230) functions_queue -> . queue_enqueue
    (231) functions_queue -> . queue_dequeue
    (232) functions_queue -> . queue_clear
    (233) functions_queue -> . queue_isEmpty
    (234) functions_queue -> . queue_peek
    (116) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (117) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (118) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (119) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (157) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (158) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (177) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (178) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (200) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (201) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (202) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (203) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (212) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (213) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (214) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (215) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (216) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (217) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (195) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (196) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (197) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (191) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (192) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (224) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (225) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (226) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (227) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (228) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (235) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (236) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (237) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (239) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (238) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (120) access_modifiers -> . PUBLIC
    (121) access_modifiers -> . PRIVATE
    (141) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (142) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (143) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (144) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (145) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 56
    CHARTYPE        shift and go to state 57
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 58
    DECIMALTYPE     shift and go to state 59
    INTTYPE         shift and go to state 60
    BOOLTYPE        shift and go to state 61
    VARIABLE        shift and go to state 32
    STATIC          shift and go to state 29
    WRITE           shift and go to state 63
    LPARENT         shift and go to state 30
    ENUM            shift and go to state 72
    IF              shift and go to state 73
    STACK           shift and go to state 78
    QUEUE           shift and go to state 84
    CONST           shift and go to state 91
    THREAD          shift and go to state 93
    TRY             shift and go to state 94
    LIST            shift and go to state 95
    FOR             shift and go to state 96
    FOREACH         shift and go to state 97
    WHILE           shift and go to state 98
    DO              shift and go to state 99
    PUBLIC          shift and go to state 100
    PRIVATE         shift and go to state 101

    all_block_code                 shift and go to state 516
    block_code                     shift and go to state 34
    def_const_or_var               shift and go to state 35
    print_data                     shift and go to state 36
    array_assignation              shift and go to state 37
    array_value_assign             shift and go to state 38
    array_indexing                 shift and go to state 39
    thread_main                    shift and go to state 40
    concurrent_method              shift and go to state 41
    block_try_catch                shift and go to state 42
    lists                          shift and go to state 43
    functions_list                 shift and go to state 44
    statement_lambda               shift and go to state 45
    enums                          shift and go to state 46
    normal_if                      shift and go to state 47
    block_for                      shift and go to state 48
    block_while                    shift and go to state 49
    stack_struct                   shift and go to state 50
    functions_stack                shift and go to state 51
    queue_struct                   shift and go to state 52
    functions_queue                shift and go to state 53
    constant_assignation           shift and go to state 54
    variable_assignation           shift and go to state 55
    declaration_thread             shift and go to state 62
    try_catch_simply               shift and go to state 64
    try_catch_finally              shift and go to state 65
    list_empty                     shift and go to state 66
    list_full                      shift and go to state 67
    list_func_clear                shift and go to state 68
    list_func_count                shift and go to state 69
    list_func_add                  shift and go to state 70
    list_func_removeat             shift and go to state 71
    for_simple                     shift and go to state 74
    for_each                       shift and go to state 75
    normal_while                   shift and go to state 76
    do_while                       shift and go to state 77
    stack_push                     shift and go to state 79
    stack_pop                      shift and go to state 80
    stack_clear                    shift and go to state 81
    stack_peek                     shift and go to state 82
    stack_isEmpty                  shift and go to state 83
    queue_enqueue                  shift and go to state 85
    queue_dequeue                  shift and go to state 86
    queue_clear                    shift and go to state 87
    queue_isEmpty                  shift and go to state 88
    queue_peek                     shift and go to state 89
    access_modifiers               shift and go to state 90
    assignation_type_value_multiple shift and go to state 92

state 496

    (192) do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .

    PRINT           reduce using rule 192 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    CHARTYPE        reduce using rule 192 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    STRINGTYPE      reduce using rule 192 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    FLOATTYPE       reduce using rule 192 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    DECIMALTYPE     reduce using rule 192 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    INTTYPE         reduce using rule 192 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    BOOLTYPE        reduce using rule 192 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    VARIABLE        reduce using rule 192 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    STATIC          reduce using rule 192 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    WRITE           reduce using rule 192 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    LPARENT         reduce using rule 192 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    ENUM            reduce using rule 192 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    IF              reduce using rule 192 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    STACK           reduce using rule 192 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    QUEUE           reduce using rule 192 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    CONST           reduce using rule 192 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    THREAD          reduce using rule 192 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    TRY             reduce using rule 192 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    LIST            reduce using rule 192 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    FOR             reduce using rule 192 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    FOREACH         reduce using rule 192 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    WHILE           reduce using rule 192 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    DO              reduce using rule 192 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    PUBLIC          reduce using rule 192 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    PRIVATE         reduce using rule 192 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    RKEY            reduce using rule 192 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)
    $end            reduce using rule 192 (do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT .)


state 497

    (166) thread_expression -> thread_identificator DOT concurrent_method . LPARENT RPARENT

    LPARENT         shift and go to state 517


state 498

    (167) thread_expression -> PRINT LPARENT STRING . RPARENT

    RPARENT         shift and go to state 518


state 499

    (66) string_content_multiple -> STRING COMMA string_content_multiple .

    RBRACKET        reduce using rule 66 (string_content_multiple -> STRING COMMA string_content_multiple .)


state 500

    (63) char_content_multiple -> CHAR COMMA char_content_multiple .

    RBRACKET        reduce using rule 63 (char_content_multiple -> CHAR COMMA char_content_multiple .)


state 501

    (69) float_content_multiple -> FLOAT_NUMBER COMMA float_content_multiple .

    RBRACKET        reduce using rule 69 (float_content_multiple -> FLOAT_NUMBER COMMA float_content_multiple .)


state 502

    (75) decimal_content_multiple -> DECIMAL_NUMBER COMMA decimal_content_multiple .

    RBRACKET        reduce using rule 75 (decimal_content_multiple -> DECIMAL_NUMBER COMMA decimal_content_multiple .)


state 503

    (72) int_content_multiple -> INTEGER COMMA int_content_multiple .

    RBRACKET        reduce using rule 72 (int_content_multiple -> INTEGER COMMA int_content_multiple .)


state 504

    (79) bool_content_multiple -> BOOLTRUE COMMA bool_content_multiple .

    RBRACKET        reduce using rule 79 (bool_content_multiple -> BOOLTRUE COMMA bool_content_multiple .)


state 505

    (80) bool_content_multiple -> BOOLFALSE COMMA bool_content_multiple .

    RBRACKET        reduce using rule 80 (bool_content_multiple -> BOOLFALSE COMMA bool_content_multiple .)


state 506

    (160) thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 519


state 507

    (187) other_if -> ELSE LKEY . block_if RKEY
    (183) block_if -> . normal_if
    (184) block_if -> . all_block_code
    (185) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (186) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (25) all_block_code -> . block_code
    (26) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . array_assignation
    (9) block_code -> . array_value_assign
    (10) block_code -> . array_indexing
    (11) block_code -> . thread_main
    (12) block_code -> . concurrent_method
    (13) block_code -> . block_try_catch
    (14) block_code -> . lists
    (15) block_code -> . functions_list
    (16) block_code -> . statement_lambda
    (17) block_code -> . enums
    (18) block_code -> . normal_if
    (19) block_code -> . block_for
    (20) block_code -> . block_while
    (21) block_code -> . stack_struct
    (22) block_code -> . functions_stack
    (23) block_code -> . queue_struct
    (24) block_code -> . functions_queue
    (114) def_const_or_var -> . constant_assignation
    (115) def_const_or_var -> . variable_assignation
    (44) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (45) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (55) array_assignation -> . CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA
    (56) array_assignation -> . STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
    (57) array_assignation -> . FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
    (58) array_assignation -> . DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA
    (59) array_assignation -> . INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
    (60) array_assignation -> . BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
    (86) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (87) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (84) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (85) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (156) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (161) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (162) concurrent_method -> . WRITE
    (175) block_try_catch -> . try_catch_simply
    (176) block_try_catch -> . try_catch_finally
    (198) lists -> . list_empty
    (199) lists -> . list_full
    (208) functions_list -> . list_func_clear
    (209) functions_list -> . list_func_count
    (210) functions_list -> . list_func_add
    (211) functions_list -> . list_func_removeat
    (171) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (172) enums -> . ENUM METHOD LKEY list_enums RKEY
    (193) block_for -> . for_simple
    (194) block_for -> . for_each
    (189) block_while -> . normal_while
    (190) block_while -> . do_while
    (218) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (219) functions_stack -> . stack_push
    (220) functions_stack -> . stack_pop
    (221) functions_stack -> . stack_clear
    (222) functions_stack -> . stack_peek
    (223) functions_stack -> . stack_isEmpty
    (229) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (230) functions_queue -> . queue_enqueue
    (231) functions_queue -> . queue_dequeue
    (232) functions_queue -> . queue_clear
    (233) functions_queue -> . queue_isEmpty
    (234) functions_queue -> . queue_peek
    (116) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (117) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (118) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (119) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (157) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (158) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (177) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (178) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (200) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (201) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (202) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (203) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (212) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (213) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (214) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (215) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (216) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (217) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (195) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (196) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (197) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (191) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (192) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (224) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (225) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (226) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (227) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (228) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (235) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (236) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (237) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (239) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (238) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (120) access_modifiers -> . PUBLIC
    (121) access_modifiers -> . PRIVATE
    (141) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (142) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (143) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (144) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (145) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    IF              shift and go to state 73
    PRINT           shift and go to state 56
    CHARTYPE        shift and go to state 57
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 58
    DECIMALTYPE     shift and go to state 59
    INTTYPE         shift and go to state 60
    BOOLTYPE        shift and go to state 61
    VARIABLE        shift and go to state 32
    STATIC          shift and go to state 29
    WRITE           shift and go to state 63
    LPARENT         shift and go to state 30
    ENUM            shift and go to state 72
    STACK           shift and go to state 78
    QUEUE           shift and go to state 84
    CONST           shift and go to state 91
    THREAD          shift and go to state 93
    TRY             shift and go to state 94
    LIST            shift and go to state 95
    FOR             shift and go to state 96
    FOREACH         shift and go to state 97
    WHILE           shift and go to state 98
    DO              shift and go to state 99
    PUBLIC          shift and go to state 100
    PRIVATE         shift and go to state 101

    block_if                       shift and go to state 520
    normal_if                      shift and go to state 403
    all_block_code                 shift and go to state 404
    block_code                     shift and go to state 34
    def_const_or_var               shift and go to state 35
    print_data                     shift and go to state 36
    array_assignation              shift and go to state 37
    array_value_assign             shift and go to state 38
    array_indexing                 shift and go to state 39
    thread_main                    shift and go to state 40
    concurrent_method              shift and go to state 41
    block_try_catch                shift and go to state 42
    lists                          shift and go to state 43
    functions_list                 shift and go to state 44
    statement_lambda               shift and go to state 45
    enums                          shift and go to state 46
    block_for                      shift and go to state 48
    block_while                    shift and go to state 49
    stack_struct                   shift and go to state 50
    functions_stack                shift and go to state 51
    queue_struct                   shift and go to state 52
    functions_queue                shift and go to state 53
    constant_assignation           shift and go to state 54
    variable_assignation           shift and go to state 55
    declaration_thread             shift and go to state 62
    try_catch_simply               shift and go to state 64
    try_catch_finally              shift and go to state 65
    list_empty                     shift and go to state 66
    list_full                      shift and go to state 67
    list_func_clear                shift and go to state 68
    list_func_count                shift and go to state 69
    list_func_add                  shift and go to state 70
    list_func_removeat             shift and go to state 71
    for_simple                     shift and go to state 74
    for_each                       shift and go to state 75
    normal_while                   shift and go to state 76
    do_while                       shift and go to state 77
    stack_push                     shift and go to state 79
    stack_pop                      shift and go to state 80
    stack_clear                    shift and go to state 81
    stack_peek                     shift and go to state 82
    stack_isEmpty                  shift and go to state 83
    queue_enqueue                  shift and go to state 85
    queue_dequeue                  shift and go to state 86
    queue_clear                    shift and go to state 87
    queue_isEmpty                  shift and go to state 88
    queue_peek                     shift and go to state 89
    access_modifiers               shift and go to state 90
    assignation_type_value_multiple shift and go to state 92

state 508

    (188) other_if -> ELSE_IF LPARENT . boolean_operation RPARENT LKEY block_if RKEY other_if
    (109) boolean_operation -> . value_boolean
    (110) boolean_operation -> . LOGICNOT value_boolean
    (111) boolean_operation -> . value_boolean boolean_operator boolean_operation
    (36) value_boolean -> . BOOLTRUE
    (37) value_boolean -> . BOOLFALSE
    (38) value_boolean -> . VARIABLE
    (39) value_boolean -> . comparison_operation
    (101) comparison_operation -> . value_numeric
    (102) comparison_operation -> . value_numeric comparison_operator comparison_operation
    (40) value_numeric -> . INTEGER
    (41) value_numeric -> . FLOAT_NUMBER
    (42) value_numeric -> . DECIMAL_NUMBER
    (43) value_numeric -> . VARIABLE

    LOGICNOT        shift and go to state 189
    BOOLTRUE        shift and go to state 190
    BOOLFALSE       shift and go to state 191
    VARIABLE        shift and go to state 192
    INTEGER         shift and go to state 195
    FLOAT_NUMBER    shift and go to state 196
    DECIMAL_NUMBER  shift and go to state 197

    boolean_operation              shift and go to state 521
    value_boolean                  shift and go to state 188
    comparison_operation           shift and go to state 193
    value_numeric                  shift and go to state 194

state 509

    (157) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA .

    THREAD          reduce using rule 157 (declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 157 (declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA .)


state 510

    (158) declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA .

    THREAD          reduce using rule 158 (declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 158 (declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA .)


state 511

    (177) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT . LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (178) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT . LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    LKEY            shift and go to state 522


state 512

    (200) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN . STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (202) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN . STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    STRINGTYPE      shift and go to state 523


state 513

    (201) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN . INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (203) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN . INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    INTTYPE         shift and go to state 524


state 514

    (195) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT . RPARENT LKEY all_block_code RKEY

    RPARENT         shift and go to state 525


state 515

    (196) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT . RPARENT LKEY all_block_code RKEY

    RPARENT         shift and go to state 526


state 516

    (197) for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code . RKEY

    RKEY            shift and go to state 527


state 517

    (166) thread_expression -> thread_identificator DOT concurrent_method LPARENT . RPARENT

    RPARENT         shift and go to state 528


state 518

    (167) thread_expression -> PRINT LPARENT STRING RPARENT .

    DOTANDCOMMA     reduce using rule 167 (thread_expression -> PRINT LPARENT STRING RPARENT .)


state 519

    (160) thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .

    VARIABLE        reduce using rule 160 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    PRINT           reduce using rule 160 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 160 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 160 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 160 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 160 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 160 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 160 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 160 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 160 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 160 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 160 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 160 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 160 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 160 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 160 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 160 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 160 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 160 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 160 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 160 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 160 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 160 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 160 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 160 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 160 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 160 (thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA .)


state 520

    (187) other_if -> ELSE LKEY block_if . RKEY

    RKEY            shift and go to state 529


state 521

    (188) other_if -> ELSE_IF LPARENT boolean_operation . RPARENT LKEY block_if RKEY other_if

    RPARENT         shift and go to state 530


state 522

    (177) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY . PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (178) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY . PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    PRINT           shift and go to state 531


state 523

    (200) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE . GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (202) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE . GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    GREATER_THAN    shift and go to state 532


state 524

    (201) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE . GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (203) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE . GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    GREATER_THAN    shift and go to state 533


state 525

    (195) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT . LKEY all_block_code RKEY

    LKEY            shift and go to state 534


state 526

    (196) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT . LKEY all_block_code RKEY

    LKEY            shift and go to state 535


state 527

    (197) for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .

    PRINT           reduce using rule 197 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    CHARTYPE        reduce using rule 197 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    STRINGTYPE      reduce using rule 197 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    FLOATTYPE       reduce using rule 197 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    DECIMALTYPE     reduce using rule 197 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    INTTYPE         reduce using rule 197 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    BOOLTYPE        reduce using rule 197 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    VARIABLE        reduce using rule 197 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    STATIC          reduce using rule 197 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    WRITE           reduce using rule 197 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    LPARENT         reduce using rule 197 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    ENUM            reduce using rule 197 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    IF              reduce using rule 197 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    STACK           reduce using rule 197 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    QUEUE           reduce using rule 197 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    CONST           reduce using rule 197 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    THREAD          reduce using rule 197 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    TRY             reduce using rule 197 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    LIST            reduce using rule 197 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    FOR             reduce using rule 197 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    FOREACH         reduce using rule 197 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    WHILE           reduce using rule 197 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    DO              reduce using rule 197 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    PUBLIC          reduce using rule 197 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    PRIVATE         reduce using rule 197 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    RKEY            reduce using rule 197 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)
    $end            reduce using rule 197 (for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY .)


state 528

    (166) thread_expression -> thread_identificator DOT concurrent_method LPARENT RPARENT .

    DOTANDCOMMA     reduce using rule 166 (thread_expression -> thread_identificator DOT concurrent_method LPARENT RPARENT .)


state 529

    (187) other_if -> ELSE LKEY block_if RKEY .

    PRINT           reduce using rule 187 (other_if -> ELSE LKEY block_if RKEY .)
    CHARTYPE        reduce using rule 187 (other_if -> ELSE LKEY block_if RKEY .)
    STRINGTYPE      reduce using rule 187 (other_if -> ELSE LKEY block_if RKEY .)
    FLOATTYPE       reduce using rule 187 (other_if -> ELSE LKEY block_if RKEY .)
    DECIMALTYPE     reduce using rule 187 (other_if -> ELSE LKEY block_if RKEY .)
    INTTYPE         reduce using rule 187 (other_if -> ELSE LKEY block_if RKEY .)
    BOOLTYPE        reduce using rule 187 (other_if -> ELSE LKEY block_if RKEY .)
    VARIABLE        reduce using rule 187 (other_if -> ELSE LKEY block_if RKEY .)
    STATIC          reduce using rule 187 (other_if -> ELSE LKEY block_if RKEY .)
    WRITE           reduce using rule 187 (other_if -> ELSE LKEY block_if RKEY .)
    LPARENT         reduce using rule 187 (other_if -> ELSE LKEY block_if RKEY .)
    ENUM            reduce using rule 187 (other_if -> ELSE LKEY block_if RKEY .)
    IF              reduce using rule 187 (other_if -> ELSE LKEY block_if RKEY .)
    STACK           reduce using rule 187 (other_if -> ELSE LKEY block_if RKEY .)
    QUEUE           reduce using rule 187 (other_if -> ELSE LKEY block_if RKEY .)
    CONST           reduce using rule 187 (other_if -> ELSE LKEY block_if RKEY .)
    THREAD          reduce using rule 187 (other_if -> ELSE LKEY block_if RKEY .)
    TRY             reduce using rule 187 (other_if -> ELSE LKEY block_if RKEY .)
    LIST            reduce using rule 187 (other_if -> ELSE LKEY block_if RKEY .)
    FOR             reduce using rule 187 (other_if -> ELSE LKEY block_if RKEY .)
    FOREACH         reduce using rule 187 (other_if -> ELSE LKEY block_if RKEY .)
    WHILE           reduce using rule 187 (other_if -> ELSE LKEY block_if RKEY .)
    DO              reduce using rule 187 (other_if -> ELSE LKEY block_if RKEY .)
    PUBLIC          reduce using rule 187 (other_if -> ELSE LKEY block_if RKEY .)
    PRIVATE         reduce using rule 187 (other_if -> ELSE LKEY block_if RKEY .)
    RKEY            reduce using rule 187 (other_if -> ELSE LKEY block_if RKEY .)
    $end            reduce using rule 187 (other_if -> ELSE LKEY block_if RKEY .)


state 530

    (188) other_if -> ELSE_IF LPARENT boolean_operation RPARENT . LKEY block_if RKEY other_if

    LKEY            shift and go to state 536


state 531

    (177) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT . LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (178) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT . LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    LPARENT         shift and go to state 537


state 532

    (200) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN . LPARENT RPARENT DOTANDCOMMA
    (202) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN . LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA

    LPARENT         shift and go to state 538


state 533

    (201) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN . LPARENT RPARENT DOTANDCOMMA
    (203) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN . LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA

    LPARENT         shift and go to state 539


state 534

    (195) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY . all_block_code RKEY
    (25) all_block_code -> . block_code
    (26) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . array_assignation
    (9) block_code -> . array_value_assign
    (10) block_code -> . array_indexing
    (11) block_code -> . thread_main
    (12) block_code -> . concurrent_method
    (13) block_code -> . block_try_catch
    (14) block_code -> . lists
    (15) block_code -> . functions_list
    (16) block_code -> . statement_lambda
    (17) block_code -> . enums
    (18) block_code -> . normal_if
    (19) block_code -> . block_for
    (20) block_code -> . block_while
    (21) block_code -> . stack_struct
    (22) block_code -> . functions_stack
    (23) block_code -> . queue_struct
    (24) block_code -> . functions_queue
    (114) def_const_or_var -> . constant_assignation
    (115) def_const_or_var -> . variable_assignation
    (44) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (45) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (55) array_assignation -> . CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA
    (56) array_assignation -> . STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
    (57) array_assignation -> . FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
    (58) array_assignation -> . DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA
    (59) array_assignation -> . INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
    (60) array_assignation -> . BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
    (86) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (87) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (84) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (85) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (156) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (161) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (162) concurrent_method -> . WRITE
    (175) block_try_catch -> . try_catch_simply
    (176) block_try_catch -> . try_catch_finally
    (198) lists -> . list_empty
    (199) lists -> . list_full
    (208) functions_list -> . list_func_clear
    (209) functions_list -> . list_func_count
    (210) functions_list -> . list_func_add
    (211) functions_list -> . list_func_removeat
    (171) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (172) enums -> . ENUM METHOD LKEY list_enums RKEY
    (185) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (186) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (193) block_for -> . for_simple
    (194) block_for -> . for_each
    (189) block_while -> . normal_while
    (190) block_while -> . do_while
    (218) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (219) functions_stack -> . stack_push
    (220) functions_stack -> . stack_pop
    (221) functions_stack -> . stack_clear
    (222) functions_stack -> . stack_peek
    (223) functions_stack -> . stack_isEmpty
    (229) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (230) functions_queue -> . queue_enqueue
    (231) functions_queue -> . queue_dequeue
    (232) functions_queue -> . queue_clear
    (233) functions_queue -> . queue_isEmpty
    (234) functions_queue -> . queue_peek
    (116) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (117) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (118) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (119) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (157) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (158) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (177) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (178) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (200) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (201) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (202) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (203) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (212) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (213) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (214) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (215) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (216) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (217) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (195) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (196) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (197) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (191) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (192) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (224) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (225) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (226) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (227) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (228) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (235) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (236) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (237) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (239) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (238) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (120) access_modifiers -> . PUBLIC
    (121) access_modifiers -> . PRIVATE
    (141) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (142) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (143) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (144) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (145) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 56
    CHARTYPE        shift and go to state 57
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 58
    DECIMALTYPE     shift and go to state 59
    INTTYPE         shift and go to state 60
    BOOLTYPE        shift and go to state 61
    VARIABLE        shift and go to state 32
    STATIC          shift and go to state 29
    WRITE           shift and go to state 63
    LPARENT         shift and go to state 30
    ENUM            shift and go to state 72
    IF              shift and go to state 73
    STACK           shift and go to state 78
    QUEUE           shift and go to state 84
    CONST           shift and go to state 91
    THREAD          shift and go to state 93
    TRY             shift and go to state 94
    LIST            shift and go to state 95
    FOR             shift and go to state 96
    FOREACH         shift and go to state 97
    WHILE           shift and go to state 98
    DO              shift and go to state 99
    PUBLIC          shift and go to state 100
    PRIVATE         shift and go to state 101

    all_block_code                 shift and go to state 540
    block_code                     shift and go to state 34
    def_const_or_var               shift and go to state 35
    print_data                     shift and go to state 36
    array_assignation              shift and go to state 37
    array_value_assign             shift and go to state 38
    array_indexing                 shift and go to state 39
    thread_main                    shift and go to state 40
    concurrent_method              shift and go to state 41
    block_try_catch                shift and go to state 42
    lists                          shift and go to state 43
    functions_list                 shift and go to state 44
    statement_lambda               shift and go to state 45
    enums                          shift and go to state 46
    normal_if                      shift and go to state 47
    block_for                      shift and go to state 48
    block_while                    shift and go to state 49
    stack_struct                   shift and go to state 50
    functions_stack                shift and go to state 51
    queue_struct                   shift and go to state 52
    functions_queue                shift and go to state 53
    constant_assignation           shift and go to state 54
    variable_assignation           shift and go to state 55
    declaration_thread             shift and go to state 62
    try_catch_simply               shift and go to state 64
    try_catch_finally              shift and go to state 65
    list_empty                     shift and go to state 66
    list_full                      shift and go to state 67
    list_func_clear                shift and go to state 68
    list_func_count                shift and go to state 69
    list_func_add                  shift and go to state 70
    list_func_removeat             shift and go to state 71
    for_simple                     shift and go to state 74
    for_each                       shift and go to state 75
    normal_while                   shift and go to state 76
    do_while                       shift and go to state 77
    stack_push                     shift and go to state 79
    stack_pop                      shift and go to state 80
    stack_clear                    shift and go to state 81
    stack_peek                     shift and go to state 82
    stack_isEmpty                  shift and go to state 83
    queue_enqueue                  shift and go to state 85
    queue_dequeue                  shift and go to state 86
    queue_clear                    shift and go to state 87
    queue_isEmpty                  shift and go to state 88
    queue_peek                     shift and go to state 89
    access_modifiers               shift and go to state 90
    assignation_type_value_multiple shift and go to state 92

state 535

    (196) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY . all_block_code RKEY
    (25) all_block_code -> . block_code
    (26) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . array_assignation
    (9) block_code -> . array_value_assign
    (10) block_code -> . array_indexing
    (11) block_code -> . thread_main
    (12) block_code -> . concurrent_method
    (13) block_code -> . block_try_catch
    (14) block_code -> . lists
    (15) block_code -> . functions_list
    (16) block_code -> . statement_lambda
    (17) block_code -> . enums
    (18) block_code -> . normal_if
    (19) block_code -> . block_for
    (20) block_code -> . block_while
    (21) block_code -> . stack_struct
    (22) block_code -> . functions_stack
    (23) block_code -> . queue_struct
    (24) block_code -> . functions_queue
    (114) def_const_or_var -> . constant_assignation
    (115) def_const_or_var -> . variable_assignation
    (44) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (45) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (55) array_assignation -> . CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA
    (56) array_assignation -> . STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
    (57) array_assignation -> . FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
    (58) array_assignation -> . DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA
    (59) array_assignation -> . INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
    (60) array_assignation -> . BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
    (86) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (87) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (84) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (85) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (156) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (161) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (162) concurrent_method -> . WRITE
    (175) block_try_catch -> . try_catch_simply
    (176) block_try_catch -> . try_catch_finally
    (198) lists -> . list_empty
    (199) lists -> . list_full
    (208) functions_list -> . list_func_clear
    (209) functions_list -> . list_func_count
    (210) functions_list -> . list_func_add
    (211) functions_list -> . list_func_removeat
    (171) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (172) enums -> . ENUM METHOD LKEY list_enums RKEY
    (185) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (186) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (193) block_for -> . for_simple
    (194) block_for -> . for_each
    (189) block_while -> . normal_while
    (190) block_while -> . do_while
    (218) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (219) functions_stack -> . stack_push
    (220) functions_stack -> . stack_pop
    (221) functions_stack -> . stack_clear
    (222) functions_stack -> . stack_peek
    (223) functions_stack -> . stack_isEmpty
    (229) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (230) functions_queue -> . queue_enqueue
    (231) functions_queue -> . queue_dequeue
    (232) functions_queue -> . queue_clear
    (233) functions_queue -> . queue_isEmpty
    (234) functions_queue -> . queue_peek
    (116) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (117) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (118) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (119) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (157) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (158) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (177) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (178) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (200) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (201) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (202) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (203) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (212) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (213) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (214) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (215) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (216) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (217) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (195) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (196) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (197) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (191) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (192) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (224) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (225) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (226) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (227) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (228) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (235) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (236) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (237) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (239) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (238) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (120) access_modifiers -> . PUBLIC
    (121) access_modifiers -> . PRIVATE
    (141) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (142) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (143) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (144) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (145) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 56
    CHARTYPE        shift and go to state 57
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 58
    DECIMALTYPE     shift and go to state 59
    INTTYPE         shift and go to state 60
    BOOLTYPE        shift and go to state 61
    VARIABLE        shift and go to state 32
    STATIC          shift and go to state 29
    WRITE           shift and go to state 63
    LPARENT         shift and go to state 30
    ENUM            shift and go to state 72
    IF              shift and go to state 73
    STACK           shift and go to state 78
    QUEUE           shift and go to state 84
    CONST           shift and go to state 91
    THREAD          shift and go to state 93
    TRY             shift and go to state 94
    LIST            shift and go to state 95
    FOR             shift and go to state 96
    FOREACH         shift and go to state 97
    WHILE           shift and go to state 98
    DO              shift and go to state 99
    PUBLIC          shift and go to state 100
    PRIVATE         shift and go to state 101

    all_block_code                 shift and go to state 541
    block_code                     shift and go to state 34
    def_const_or_var               shift and go to state 35
    print_data                     shift and go to state 36
    array_assignation              shift and go to state 37
    array_value_assign             shift and go to state 38
    array_indexing                 shift and go to state 39
    thread_main                    shift and go to state 40
    concurrent_method              shift and go to state 41
    block_try_catch                shift and go to state 42
    lists                          shift and go to state 43
    functions_list                 shift and go to state 44
    statement_lambda               shift and go to state 45
    enums                          shift and go to state 46
    normal_if                      shift and go to state 47
    block_for                      shift and go to state 48
    block_while                    shift and go to state 49
    stack_struct                   shift and go to state 50
    functions_stack                shift and go to state 51
    queue_struct                   shift and go to state 52
    functions_queue                shift and go to state 53
    constant_assignation           shift and go to state 54
    variable_assignation           shift and go to state 55
    declaration_thread             shift and go to state 62
    try_catch_simply               shift and go to state 64
    try_catch_finally              shift and go to state 65
    list_empty                     shift and go to state 66
    list_full                      shift and go to state 67
    list_func_clear                shift and go to state 68
    list_func_count                shift and go to state 69
    list_func_add                  shift and go to state 70
    list_func_removeat             shift and go to state 71
    for_simple                     shift and go to state 74
    for_each                       shift and go to state 75
    normal_while                   shift and go to state 76
    do_while                       shift and go to state 77
    stack_push                     shift and go to state 79
    stack_pop                      shift and go to state 80
    stack_clear                    shift and go to state 81
    stack_peek                     shift and go to state 82
    stack_isEmpty                  shift and go to state 83
    queue_enqueue                  shift and go to state 85
    queue_dequeue                  shift and go to state 86
    queue_clear                    shift and go to state 87
    queue_isEmpty                  shift and go to state 88
    queue_peek                     shift and go to state 89
    access_modifiers               shift and go to state 90
    assignation_type_value_multiple shift and go to state 92

state 536

    (188) other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY . block_if RKEY other_if
    (183) block_if -> . normal_if
    (184) block_if -> . all_block_code
    (185) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if
    (186) normal_if -> . IF LPARENT boolean_operation RPARENT LKEY block_if RKEY
    (25) all_block_code -> . block_code
    (26) all_block_code -> . block_code all_block_code
    (6) block_code -> . def_const_or_var
    (7) block_code -> . print_data
    (8) block_code -> . array_assignation
    (9) block_code -> . array_value_assign
    (10) block_code -> . array_indexing
    (11) block_code -> . thread_main
    (12) block_code -> . concurrent_method
    (13) block_code -> . block_try_catch
    (14) block_code -> . lists
    (15) block_code -> . functions_list
    (16) block_code -> . statement_lambda
    (17) block_code -> . enums
    (18) block_code -> . normal_if
    (19) block_code -> . block_for
    (20) block_code -> . block_while
    (21) block_code -> . stack_struct
    (22) block_code -> . functions_stack
    (23) block_code -> . queue_struct
    (24) block_code -> . functions_queue
    (114) def_const_or_var -> . constant_assignation
    (115) def_const_or_var -> . variable_assignation
    (44) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (45) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (55) array_assignation -> . CHARTYPE LBRACKET RBRACKET char_array_assignation DOTANDCOMMA
    (56) array_assignation -> . STRINGTYPE LBRACKET RBRACKET string_array_assignation DOTANDCOMMA
    (57) array_assignation -> . FLOATTYPE LBRACKET RBRACKET float_array_assignation DOTANDCOMMA
    (58) array_assignation -> . DECIMALTYPE LBRACKET RBRACKET decimal_array_assignation DOTANDCOMMA
    (59) array_assignation -> . INTTYPE LBRACKET RBRACKET int_array_assignation DOTANDCOMMA
    (60) array_assignation -> . BOOLTYPE LBRACKET RBRACKET bool_array_assignation DOTANDCOMMA
    (86) array_value_assign -> . VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA
    (87) array_value_assign -> . VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA
    (84) array_indexing -> . VARIABLE LBRACKET VARIABLE RBRACKET
    (85) array_indexing -> . VARIABLE LBRACKET INTEGER RBRACKET
    (156) thread_main -> . declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait
    (161) concurrent_method -> . STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY
    (162) concurrent_method -> . WRITE
    (175) block_try_catch -> . try_catch_simply
    (176) block_try_catch -> . try_catch_finally
    (198) lists -> . list_empty
    (199) lists -> . list_full
    (208) functions_list -> . list_func_clear
    (209) functions_list -> . list_func_count
    (210) functions_list -> . list_func_add
    (211) functions_list -> . list_func_removeat
    (171) statement_lambda -> . LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT
    (172) enums -> . ENUM METHOD LKEY list_enums RKEY
    (193) block_for -> . for_simple
    (194) block_for -> . for_each
    (189) block_while -> . normal_while
    (190) block_while -> . do_while
    (218) stack_struct -> . STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA
    (219) functions_stack -> . stack_push
    (220) functions_stack -> . stack_pop
    (221) functions_stack -> . stack_clear
    (222) functions_stack -> . stack_peek
    (223) functions_stack -> . stack_isEmpty
    (229) queue_struct -> . QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA
    (230) functions_queue -> . queue_enqueue
    (231) functions_queue -> . queue_dequeue
    (232) functions_queue -> . queue_clear
    (233) functions_queue -> . queue_isEmpty
    (234) functions_queue -> . queue_peek
    (116) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (117) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (118) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (119) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (157) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA
    (158) declaration_thread -> . THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA
    (177) try_catch_simply -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY
    (178) try_catch_finally -> . TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY
    (200) list_empty -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (201) list_empty -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA
    (202) list_full -> . LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA
    (203) list_full -> . LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA
    (212) list_func_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (213) list_func_count -> . VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA
    (214) list_func_add -> . VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA
    (215) list_func_add -> . VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA
    (216) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA
    (217) list_func_removeat -> . VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA
    (195) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY
    (196) for_simple -> . FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY
    (197) for_each -> . FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY
    (191) normal_while -> . WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY
    (192) do_while -> . DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT
    (224) stack_push -> . VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA
    (225) stack_pop -> . VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA
    (226) stack_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (227) stack_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (228) stack_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (235) queue_enqueue -> . VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA
    (236) queue_dequeue -> . VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA
    (237) queue_clear -> . VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA
    (239) queue_isEmpty -> . VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA
    (238) queue_peek -> . VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA
    (120) access_modifiers -> . PUBLIC
    (121) access_modifiers -> . PRIVATE
    (141) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (142) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (143) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (144) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (145) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    IF              shift and go to state 73
    PRINT           shift and go to state 56
    CHARTYPE        shift and go to state 57
    STRINGTYPE      shift and go to state 31
    FLOATTYPE       shift and go to state 58
    DECIMALTYPE     shift and go to state 59
    INTTYPE         shift and go to state 60
    BOOLTYPE        shift and go to state 61
    VARIABLE        shift and go to state 32
    STATIC          shift and go to state 29
    WRITE           shift and go to state 63
    LPARENT         shift and go to state 30
    ENUM            shift and go to state 72
    STACK           shift and go to state 78
    QUEUE           shift and go to state 84
    CONST           shift and go to state 91
    THREAD          shift and go to state 93
    TRY             shift and go to state 94
    LIST            shift and go to state 95
    FOR             shift and go to state 96
    FOREACH         shift and go to state 97
    WHILE           shift and go to state 98
    DO              shift and go to state 99
    PUBLIC          shift and go to state 100
    PRIVATE         shift and go to state 101

    block_if                       shift and go to state 542
    normal_if                      shift and go to state 403
    all_block_code                 shift and go to state 404
    block_code                     shift and go to state 34
    def_const_or_var               shift and go to state 35
    print_data                     shift and go to state 36
    array_assignation              shift and go to state 37
    array_value_assign             shift and go to state 38
    array_indexing                 shift and go to state 39
    thread_main                    shift and go to state 40
    concurrent_method              shift and go to state 41
    block_try_catch                shift and go to state 42
    lists                          shift and go to state 43
    functions_list                 shift and go to state 44
    statement_lambda               shift and go to state 45
    enums                          shift and go to state 46
    block_for                      shift and go to state 48
    block_while                    shift and go to state 49
    stack_struct                   shift and go to state 50
    functions_stack                shift and go to state 51
    queue_struct                   shift and go to state 52
    functions_queue                shift and go to state 53
    constant_assignation           shift and go to state 54
    variable_assignation           shift and go to state 55
    declaration_thread             shift and go to state 62
    try_catch_simply               shift and go to state 64
    try_catch_finally              shift and go to state 65
    list_empty                     shift and go to state 66
    list_full                      shift and go to state 67
    list_func_clear                shift and go to state 68
    list_func_count                shift and go to state 69
    list_func_add                  shift and go to state 70
    list_func_removeat             shift and go to state 71
    for_simple                     shift and go to state 74
    for_each                       shift and go to state 75
    normal_while                   shift and go to state 76
    do_while                       shift and go to state 77
    stack_push                     shift and go to state 79
    stack_pop                      shift and go to state 80
    stack_clear                    shift and go to state 81
    stack_peek                     shift and go to state 82
    stack_isEmpty                  shift and go to state 83
    queue_enqueue                  shift and go to state 85
    queue_dequeue                  shift and go to state 86
    queue_clear                    shift and go to state 87
    queue_isEmpty                  shift and go to state 88
    queue_peek                     shift and go to state 89
    access_modifiers               shift and go to state 90
    assignation_type_value_multiple shift and go to state 92

state 537

    (177) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT . ERROR RPARENT DOTANDCOMMA RKEY
    (178) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT . ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    ERROR           shift and go to state 543


state 538

    (200) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT . RPARENT DOTANDCOMMA
    (202) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT . RPARENT LKEY strings_list RKEY DOTANDCOMMA

    RPARENT         shift and go to state 544


state 539

    (201) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT . RPARENT DOTANDCOMMA
    (203) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT . RPARENT LKEY ints_list RKEY DOTANDCOMMA

    RPARENT         shift and go to state 545


state 540

    (195) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code . RKEY

    RKEY            shift and go to state 546


state 541

    (196) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code . RKEY

    RKEY            shift and go to state 547


state 542

    (188) other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if . RKEY other_if

    RKEY            shift and go to state 548


state 543

    (177) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR . RPARENT DOTANDCOMMA RKEY
    (178) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR . RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    RPARENT         shift and go to state 549


state 544

    (200) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT . DOTANDCOMMA
    (202) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT . LKEY strings_list RKEY DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 550
    LKEY            shift and go to state 551


state 545

    (201) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT . DOTANDCOMMA
    (203) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT . LKEY ints_list RKEY DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 552
    LKEY            shift and go to state 553


state 546

    (195) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .

    PRINT           reduce using rule 195 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    CHARTYPE        reduce using rule 195 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    STRINGTYPE      reduce using rule 195 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    FLOATTYPE       reduce using rule 195 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    DECIMALTYPE     reduce using rule 195 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    INTTYPE         reduce using rule 195 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    BOOLTYPE        reduce using rule 195 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    VARIABLE        reduce using rule 195 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    STATIC          reduce using rule 195 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    WRITE           reduce using rule 195 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    LPARENT         reduce using rule 195 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    ENUM            reduce using rule 195 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    IF              reduce using rule 195 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    STACK           reduce using rule 195 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    QUEUE           reduce using rule 195 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    CONST           reduce using rule 195 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    THREAD          reduce using rule 195 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    TRY             reduce using rule 195 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    LIST            reduce using rule 195 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    FOR             reduce using rule 195 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    FOREACH         reduce using rule 195 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    WHILE           reduce using rule 195 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    DO              reduce using rule 195 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    PUBLIC          reduce using rule 195 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    PRIVATE         reduce using rule 195 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    RKEY            reduce using rule 195 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)
    $end            reduce using rule 195 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY .)


state 547

    (196) for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .

    PRINT           reduce using rule 196 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    CHARTYPE        reduce using rule 196 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    STRINGTYPE      reduce using rule 196 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    FLOATTYPE       reduce using rule 196 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    DECIMALTYPE     reduce using rule 196 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    INTTYPE         reduce using rule 196 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    BOOLTYPE        reduce using rule 196 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    VARIABLE        reduce using rule 196 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    STATIC          reduce using rule 196 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    WRITE           reduce using rule 196 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    LPARENT         reduce using rule 196 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    ENUM            reduce using rule 196 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    IF              reduce using rule 196 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    STACK           reduce using rule 196 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    QUEUE           reduce using rule 196 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    CONST           reduce using rule 196 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    THREAD          reduce using rule 196 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    TRY             reduce using rule 196 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    LIST            reduce using rule 196 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    FOR             reduce using rule 196 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    FOREACH         reduce using rule 196 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    WHILE           reduce using rule 196 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    DO              reduce using rule 196 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    PUBLIC          reduce using rule 196 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    PRIVATE         reduce using rule 196 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    RKEY            reduce using rule 196 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)
    $end            reduce using rule 196 (for_simple -> FOR LPARENT INTTYPE assignation_int DOTANDCOMMA comparison_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY .)


state 548

    (188) other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY . other_if
    (187) other_if -> . ELSE LKEY block_if RKEY
    (188) other_if -> . ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if

    ELSE            shift and go to state 485
    ELSE_IF         shift and go to state 486

    other_if                       shift and go to state 554

state 549

    (177) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT . DOTANDCOMMA RKEY
    (178) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT . DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY

    DOTANDCOMMA     shift and go to state 555


state 550

    (200) list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 200 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 200 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 200 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 200 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 200 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 200 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 200 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 200 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 200 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 200 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 200 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 200 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 200 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 200 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 200 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 200 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 200 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 200 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 200 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 200 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 200 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 200 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 200 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 200 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 200 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 200 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 200 (list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)


state 551

    (202) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY . strings_list RKEY DOTANDCOMMA
    (204) strings_list -> . STRING
    (205) strings_list -> . STRING COMMA strings_list

    STRING          shift and go to state 557

    strings_list                   shift and go to state 556

state 552

    (201) list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .

    PRINT           reduce using rule 201 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    CHARTYPE        reduce using rule 201 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 201 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 201 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 201 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    INTTYPE         reduce using rule 201 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 201 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    VARIABLE        reduce using rule 201 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    STATIC          reduce using rule 201 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    WRITE           reduce using rule 201 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    LPARENT         reduce using rule 201 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    ENUM            reduce using rule 201 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    IF              reduce using rule 201 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    STACK           reduce using rule 201 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    QUEUE           reduce using rule 201 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    CONST           reduce using rule 201 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    THREAD          reduce using rule 201 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    TRY             reduce using rule 201 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    LIST            reduce using rule 201 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FOR             reduce using rule 201 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    FOREACH         reduce using rule 201 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    WHILE           reduce using rule 201 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    DO              reduce using rule 201 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    PUBLIC          reduce using rule 201 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    PRIVATE         reduce using rule 201 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    RKEY            reduce using rule 201 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)
    $end            reduce using rule 201 (list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA .)


state 553

    (203) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY . ints_list RKEY DOTANDCOMMA
    (206) ints_list -> . INTEGER
    (207) ints_list -> . INTEGER COMMA ints_list

    INTEGER         shift and go to state 559

    ints_list                      shift and go to state 558

state 554

    (188) other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .

    PRINT           reduce using rule 188 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    CHARTYPE        reduce using rule 188 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    STRINGTYPE      reduce using rule 188 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    FLOATTYPE       reduce using rule 188 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    DECIMALTYPE     reduce using rule 188 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    INTTYPE         reduce using rule 188 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    BOOLTYPE        reduce using rule 188 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    VARIABLE        reduce using rule 188 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    STATIC          reduce using rule 188 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    WRITE           reduce using rule 188 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    LPARENT         reduce using rule 188 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    ENUM            reduce using rule 188 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    IF              reduce using rule 188 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    STACK           reduce using rule 188 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    QUEUE           reduce using rule 188 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    CONST           reduce using rule 188 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    THREAD          reduce using rule 188 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    TRY             reduce using rule 188 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    LIST            reduce using rule 188 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    FOR             reduce using rule 188 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    FOREACH         reduce using rule 188 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    WHILE           reduce using rule 188 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    DO              reduce using rule 188 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    PUBLIC          reduce using rule 188 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    PRIVATE         reduce using rule 188 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    RKEY            reduce using rule 188 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)
    $end            reduce using rule 188 (other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if .)


state 555

    (177) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA . RKEY
    (178) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA . RKEY FINALLY LKEY all_block_code_try RKEY

    RKEY            shift and go to state 560


state 556

    (202) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list . RKEY DOTANDCOMMA

    RKEY            shift and go to state 561


state 557

    (204) strings_list -> STRING .
    (205) strings_list -> STRING . COMMA strings_list

    RKEY            reduce using rule 204 (strings_list -> STRING .)
    COMMA           shift and go to state 562


state 558

    (203) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list . RKEY DOTANDCOMMA

    RKEY            shift and go to state 563


state 559

    (206) ints_list -> INTEGER .
    (207) ints_list -> INTEGER . COMMA ints_list

    RKEY            reduce using rule 206 (ints_list -> INTEGER .)
    COMMA           shift and go to state 564


state 560

    (177) try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .
    (178) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY . FINALLY LKEY all_block_code_try RKEY

    PRINT           reduce using rule 177 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    CHARTYPE        reduce using rule 177 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    STRINGTYPE      reduce using rule 177 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    FLOATTYPE       reduce using rule 177 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    DECIMALTYPE     reduce using rule 177 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    INTTYPE         reduce using rule 177 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    BOOLTYPE        reduce using rule 177 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    VARIABLE        reduce using rule 177 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    STATIC          reduce using rule 177 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    WRITE           reduce using rule 177 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    LPARENT         reduce using rule 177 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    ENUM            reduce using rule 177 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    IF              reduce using rule 177 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    STACK           reduce using rule 177 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    QUEUE           reduce using rule 177 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    CONST           reduce using rule 177 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    THREAD          reduce using rule 177 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    TRY             reduce using rule 177 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    LIST            reduce using rule 177 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    FOR             reduce using rule 177 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    FOREACH         reduce using rule 177 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    WHILE           reduce using rule 177 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    DO              reduce using rule 177 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    PUBLIC          reduce using rule 177 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    PRIVATE         reduce using rule 177 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    RKEY            reduce using rule 177 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    $end            reduce using rule 177 (try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY .)
    FINALLY         shift and go to state 565


state 561

    (202) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 566


state 562

    (205) strings_list -> STRING COMMA . strings_list
    (204) strings_list -> . STRING
    (205) strings_list -> . STRING COMMA strings_list

    STRING          shift and go to state 557

    strings_list                   shift and go to state 567

state 563

    (203) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY . DOTANDCOMMA

    DOTANDCOMMA     shift and go to state 568


state 564

    (207) ints_list -> INTEGER COMMA . ints_list
    (206) ints_list -> . INTEGER
    (207) ints_list -> . INTEGER COMMA ints_list

    INTEGER         shift and go to state 559

    ints_list                      shift and go to state 569

state 565

    (178) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY . LKEY all_block_code_try RKEY

    LKEY            shift and go to state 570


state 566

    (202) list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .

    PRINT           reduce using rule 202 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    CHARTYPE        reduce using rule 202 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 202 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 202 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 202 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    INTTYPE         reduce using rule 202 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 202 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    VARIABLE        reduce using rule 202 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    STATIC          reduce using rule 202 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    WRITE           reduce using rule 202 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    LPARENT         reduce using rule 202 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    ENUM            reduce using rule 202 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    IF              reduce using rule 202 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    STACK           reduce using rule 202 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    QUEUE           reduce using rule 202 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    CONST           reduce using rule 202 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    THREAD          reduce using rule 202 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    TRY             reduce using rule 202 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    LIST            reduce using rule 202 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    FOR             reduce using rule 202 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    FOREACH         reduce using rule 202 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    WHILE           reduce using rule 202 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    DO              reduce using rule 202 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    PUBLIC          reduce using rule 202 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    PRIVATE         reduce using rule 202 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    RKEY            reduce using rule 202 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)
    $end            reduce using rule 202 (list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA .)


state 567

    (205) strings_list -> STRING COMMA strings_list .

    RKEY            reduce using rule 205 (strings_list -> STRING COMMA strings_list .)


state 568

    (203) list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .

    PRINT           reduce using rule 203 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    CHARTYPE        reduce using rule 203 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    STRINGTYPE      reduce using rule 203 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    FLOATTYPE       reduce using rule 203 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    DECIMALTYPE     reduce using rule 203 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    INTTYPE         reduce using rule 203 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    BOOLTYPE        reduce using rule 203 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    VARIABLE        reduce using rule 203 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    STATIC          reduce using rule 203 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    WRITE           reduce using rule 203 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    LPARENT         reduce using rule 203 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    ENUM            reduce using rule 203 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    IF              reduce using rule 203 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    STACK           reduce using rule 203 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    QUEUE           reduce using rule 203 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    CONST           reduce using rule 203 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    THREAD          reduce using rule 203 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    TRY             reduce using rule 203 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    LIST            reduce using rule 203 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    FOR             reduce using rule 203 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    FOREACH         reduce using rule 203 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    WHILE           reduce using rule 203 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    DO              reduce using rule 203 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    PUBLIC          reduce using rule 203 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    PRIVATE         reduce using rule 203 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    RKEY            reduce using rule 203 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)
    $end            reduce using rule 203 (list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA .)


state 569

    (207) ints_list -> INTEGER COMMA ints_list .

    RKEY            reduce using rule 207 (ints_list -> INTEGER COMMA ints_list .)


state 570

    (178) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY . all_block_code_try RKEY
    (181) all_block_code_try -> . block_code_try
    (182) all_block_code_try -> . block_code_try all_block_code_try
    (179) block_code_try -> . def_const_or_var
    (180) block_code_try -> . print_data
    (114) def_const_or_var -> . constant_assignation
    (115) def_const_or_var -> . variable_assignation
    (44) print_data -> . PRINT LPARENT STRING RPARENT DOTANDCOMMA
    (45) print_data -> . PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA
    (116) constant_assignation -> . access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA
    (117) constant_assignation -> . CONST assignation_type_value_multiple DOTANDCOMMA
    (118) variable_assignation -> . access_modifiers assignation_type_value_multiple DOTANDCOMMA
    (119) variable_assignation -> . assignation_type_value_multiple DOTANDCOMMA
    (120) access_modifiers -> . PUBLIC
    (121) access_modifiers -> . PRIVATE
    (141) assignation_type_value_multiple -> . INTTYPE assignation_int_multiple
    (142) assignation_type_value_multiple -> . STRINGTYPE assignation_string_multiple
    (143) assignation_type_value_multiple -> . FLOATTYPE assignation_float_multiple
    (144) assignation_type_value_multiple -> . BOOLTYPE assignation_true_multiple
    (145) assignation_type_value_multiple -> . BOOLTYPE assignation_false_multiple

    PRINT           shift and go to state 56
    CONST           shift and go to state 91
    PUBLIC          shift and go to state 100
    PRIVATE         shift and go to state 101
    INTTYPE         shift and go to state 137
    STRINGTYPE      shift and go to state 138
    FLOATTYPE       shift and go to state 139
    BOOLTYPE        shift and go to state 140

    all_block_code_try             shift and go to state 571
    block_code_try                 shift and go to state 205
    def_const_or_var               shift and go to state 206
    print_data                     shift and go to state 207
    constant_assignation           shift and go to state 54
    variable_assignation           shift and go to state 55
    access_modifiers               shift and go to state 90
    assignation_type_value_multiple shift and go to state 92

state 571

    (178) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try . RKEY

    RKEY            shift and go to state 572


state 572

    (178) try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .

    PRINT           reduce using rule 178 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    CHARTYPE        reduce using rule 178 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    STRINGTYPE      reduce using rule 178 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    FLOATTYPE       reduce using rule 178 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    DECIMALTYPE     reduce using rule 178 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    INTTYPE         reduce using rule 178 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    BOOLTYPE        reduce using rule 178 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    VARIABLE        reduce using rule 178 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    STATIC          reduce using rule 178 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    WRITE           reduce using rule 178 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    LPARENT         reduce using rule 178 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    ENUM            reduce using rule 178 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    IF              reduce using rule 178 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    STACK           reduce using rule 178 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    QUEUE           reduce using rule 178 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    CONST           reduce using rule 178 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    THREAD          reduce using rule 178 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    TRY             reduce using rule 178 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    LIST            reduce using rule 178 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    FOR             reduce using rule 178 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    FOREACH         reduce using rule 178 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    WHILE           reduce using rule 178 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    DO              reduce using rule 178 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    PUBLIC          reduce using rule 178 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    PRIVATE         reduce using rule 178 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    RKEY            reduce using rule 178 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)
    $end            reduce using rule 178 (try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 192 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (value_numeric -> VARIABLE) in state 192
WARNING: reduce/reduce conflict in state 247 resolved using rule (value_numeric -> VARIABLE)
WARNING: rejected rule (assignation_float -> VARIABLE ASSIGNATION VARIABLE) in state 247
WARNING: reduce/reduce conflict in state 248 resolved using rule (value_numeric -> FLOAT_NUMBER)
WARNING: rejected rule (assignation_float -> VARIABLE ASSIGNATION FLOAT_NUMBER) in state 248
WARNING: reduce/reduce conflict in state 256 resolved using rule (value_numeric -> VARIABLE)
WARNING: rejected rule (assignation_int -> VARIABLE ASSIGNATION VARIABLE) in state 256
WARNING: reduce/reduce conflict in state 257 resolved using rule (value_numeric -> INTEGER)
WARNING: rejected rule (assignation_int -> VARIABLE ASSIGNATION INTEGER) in state 257
WARNING: reduce/reduce conflict in state 265 resolved using rule (assignation_true -> VARIABLE ASSIGNATION VARIABLE)
WARNING: rejected rule (assignation_false -> VARIABLE ASSIGNATION VARIABLE) in state 265
WARNING: reduce/reduce conflict in state 265 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (assignation_true -> VARIABLE ASSIGNATION VARIABLE) in state 265
WARNING: reduce/reduce conflict in state 265 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (value_numeric -> VARIABLE) in state 265
WARNING: reduce/reduce conflict in state 266 resolved using rule (value_boolean -> BOOLTRUE)
WARNING: rejected rule (assignation_true -> VARIABLE ASSIGNATION BOOLTRUE) in state 266
WARNING: reduce/reduce conflict in state 267 resolved using rule (assignation_true -> VARIABLE ASSIGNATION boolean_operation)
WARNING: rejected rule (assignation_false -> VARIABLE ASSIGNATION boolean_operation) in state 267
WARNING: reduce/reduce conflict in state 268 resolved using rule (value_boolean -> BOOLFALSE)
WARNING: rejected rule (assignation_false -> VARIABLE ASSIGNATION BOOLFALSE) in state 268
WARNING: reduce/reduce conflict in state 310 resolved using rule (value_numeric -> VARIABLE)
WARNING: rejected rule (value -> VARIABLE) in state 310
WARNING: reduce/reduce conflict in state 310 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (value_numeric -> VARIABLE) in state 310
WARNING: reduce/reduce conflict in state 312 resolved using rule (value -> value_numeric)
WARNING: rejected rule (comparison_operation -> value_numeric) in state 312
WARNING: reduce/reduce conflict in state 317 resolved using rule (value_string -> STRING)
WARNING: rejected rule (concatenation -> STRING) in state 317
WARNING: reduce/reduce conflict in state 372 resolved using rule (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA)
WARNING: rejected rule (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA) in state 372
WARNING: reduce/reduce conflict in state 372 resolved using rule (list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA)
WARNING: rejected rule (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA) in state 372
WARNING: reduce/reduce conflict in state 384 resolved using rule (stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA)
WARNING: rejected rule (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA) in state 384
WARNING: reduce/reduce conflict in state 385 resolved using rule (stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA)
WARNING: rejected rule (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA) in state 385
WARNING: reduce/reduce conflict in state 394 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (assignation_true -> VARIABLE ASSIGNATION VARIABLE) in state 394
WARNING: reduce/reduce conflict in state 394 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (value_numeric -> VARIABLE) in state 394
WARNING: reduce/reduce conflict in state 396 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (assignation_false -> VARIABLE ASSIGNATION VARIABLE) in state 396
WARNING: reduce/reduce conflict in state 396 resolved using rule (value_boolean -> VARIABLE)
WARNING: rejected rule (value_numeric -> VARIABLE) in state 396
WARNING: reduce/reduce conflict in state 403 resolved using rule (block_code -> normal_if)
WARNING: rejected rule (block_if -> normal_if) in state 403
WARNING: Rule (assignation_float -> VARIABLE ASSIGNATION VARIABLE) is never reduced
WARNING: Rule (assignation_float -> VARIABLE ASSIGNATION FLOAT_NUMBER) is never reduced
WARNING: Rule (assignation_int -> VARIABLE ASSIGNATION VARIABLE) is never reduced
WARNING: Rule (assignation_int -> VARIABLE ASSIGNATION INTEGER) is never reduced
WARNING: Rule (assignation_false -> VARIABLE ASSIGNATION VARIABLE) is never reduced
WARNING: Rule (assignation_true -> VARIABLE ASSIGNATION VARIABLE) is never reduced
WARNING: Rule (assignation_true -> VARIABLE ASSIGNATION BOOLTRUE) is never reduced
WARNING: Rule (assignation_false -> VARIABLE ASSIGNATION BOOLFALSE) is never reduced
WARNING: Rule (value -> VARIABLE) is never reduced
WARNING: Rule (stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA) is never reduced
WARNING: Rule (queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA) is never reduced
WARNING: Rule (queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA) is never reduced
WARNING: Rule (queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA) is never reduced
WARNING: Rule (block_if -> normal_if) is never reduced
