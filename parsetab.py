
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ACTION ADD ADDITION_ASSIGNMENT ARROW ASSIGNATION ASYNC AWAIT BACK_SLASH BOOLFALSE BOOLTRUE BOOLTYPE BREAK CATCH CHAR CHARTYPE CLASS CLEAR COMMA CONCURRENT CONST COUNT DECIMALTYPE DECIMAL_NUMBER DECREMENT DEQUEUE DICTIONARY DIVIDE DIVISION_ASSIGNMENT DO DOLLARSIGN DOT DOTANDCOMMA DOUBLEPOINT DOUBLE_QUOTATION_MARKS ELSE ELSE_IF ENQUEUE ENUM EQUAL_COMPARATION ERROR EXCEPTION FINALLY FLOATTYPE FLOAT_NUMBER FOR FOREACH GREATER_THAN GREATER_THAN_OR_EQUAL ID IDENTIFIER IF IN INCREMENT INEQUALITY INTEGER INTTYPE ISEMPTY JOIN JUMP_LINE LBRACKET LIST LKEY LOGICAND LOGICNOT LOGICOR LONG LPARENT MAIN METHOD MINUS MODULE_ASSIGNMENT MULTIPLICATION_ASSIGNMENT NAMESPACE NEW PEEK PERCENT PIPE PLUS POP PRINT PRIVATE PUBLIC PUSH PUT QUEUE RBRACKET READ REMOVE REMOVEAT RETURN RKEY RPARENT SIPLE_QUOTATION_MARKS SMALLER_THAN SMALLER_THAN_OR_EQUAL STACK START STATIC STRING STRINGTYPE SUBTRACTION_ASSIGNMENT SWITCH SYSTEM TABULATION TASK THREAD TIMES TRY USING VARIABLE VOID WHILE WRITEprogram                    : USING SYSTEM DOTANDCOMMA block_publicClassblock_publicClass        : PUBLIC CLASS VARIABLE LKEY block_main_method RKEY\n                                | STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code\n    block_main_method        : STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY\n                                | STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code\n    block_code               : def_const_or_var\n                                | print_data\n                                | thread_main\n                                | concurrent_method\n\n                                | block_try_catch\n                                | lists\n                                | functions_list\n                                \n                                | statement_lambda\n\n                                | enums\n    all_block_code           : block_code\n                                | block_code all_block_code        \n    data_type                : CHARTYPE\n                                | STRINGTYPE\n                                | FLOATTYPE\n                                | DECIMALTYPE\n                                | INTTYPE\n                                | BOOLTYPE\n    value_string             : STRING\n                                | CHAR\n                                | concatenation\n    value_boolean            : BOOLTRUE\n                                | BOOLFALSE\n                                | VARIABLE\n                                | comparison_operation\n    value_numeric            : INTEGER\n                                | FLOAT_NUMBER\n                                | DECIMAL_NUMBER\n                                | VARIABLE\n    print_data               : PRINT LPARENT STRING RPARENT DOTANDCOMMA\n                                | PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA\n    read_data                : READ LPARENT RPARENT DOTANDCOMMA\n    concatenation            : STRING\n                                | STRING PLUS concatenation\n    value                    : value_numeric\n                                | value_boolean\n                                | value_string\n                                | VARIABLE\n                                | read_data\n    arithmetic_operation     : value_numeric\n                                | value_numeric arithmetic_operator arithmetic_operation\n    arithmetic_operator      : PLUS\n                                | MINUS\n                                | TIMES\n                                | DIVIDE\n                                | PERCENT\n    comparison_operation     : value_numeric\n                                | value_numeric comparison_operator comparison_operation\n    comparison_operator      : GREATER_THAN\n                                | SMALLER_THAN\n                                | EQUAL_COMPARATION\n                                | INEQUALITY\n                                | GREATER_THAN_OR_EQUAL\n                                | SMALLER_THAN_OR_EQUAL\n    boolean_operation        : value_boolean\n                                | LOGICNOT value_boolean\n                                | value_boolean boolean_operator boolean_operation\n    boolean_operator         : LOGICAND\n                                | LOGICOR\n    def_const_or_var         : constant_assignation\n                                | variable_assignation\n    constant_assignation     : access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA\n                                | CONST assignation_type_value_multiple DOTANDCOMMA\n    variable_assignation     : access_modifiers assignation_type_value_multiple DOTANDCOMMA\n                                | assignation_type_value_multiple DOTANDCOMMA\n    access_modifiers         : PUBLIC\n                                | PRIVATE\n    assignation_type_value   : INTTYPE assignation_int\n                                | STRINGTYPE assignation_string\n                                | FLOATTYPE assignation_float\n                                | BOOLTYPE assignation_true\n                                | BOOLTYPE assignation_false\n    assignation_int          : VARIABLE ASSIGNATION INTEGER\n                                | VARIABLE ASSIGNATION VARIABLE\n                                | VARIABLE ASSIGNATION arithmetic_operation\n    assignation_string       : VARIABLE ASSIGNATION STRING\n                                | VARIABLE ASSIGNATION VARIABLE\n    assignation_float        : VARIABLE ASSIGNATION FLOAT_NUMBER\n                                | VARIABLE ASSIGNATION VARIABLE\n                                | VARIABLE ASSIGNATION arithmetic_operation\n    assignation_true         : VARIABLE ASSIGNATION BOOLTRUE\n                                | VARIABLE ASSIGNATION VARIABLE\n                                | VARIABLE ASSIGNATION boolean_operation\n    assignation_false        : VARIABLE ASSIGNATION BOOLFALSE\n                                | VARIABLE ASSIGNATION VARIABLE\n                                | VARIABLE ASSIGNATION boolean_operation\n    assignation_type_value_multiple          : INTTYPE assignation_int_multiple\n                                                | STRINGTYPE assignation_string_multiple\n                                                | FLOATTYPE assignation_float_multiple\n                                                | BOOLTYPE assignation_true_multiple\n                                                | BOOLTYPE assignation_false_multiple\n    assignation_int_multiple                 : assignation_int\n                                                | assignation_int COMMA assignation_int_multiple\n    assignation_string_multiple              : assignation_string\n                                                | assignation_string COMMA assignation_string_multiple\n    assignation_float_multiple               : assignation_float\n                                                | assignation_float COMMA assignation_float_multiple\n    assignation_true_multiple                : assignation_true\n                                                | assignation_true COMMA assignation_true_multiple\n    assignation_false_multiple               : assignation_false\n                                                | assignation_false COMMA assignation_false_multiple\n    \n    thread_main                 : declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait\n    \n    declaration_thread          : THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA\n                                | THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA\n    \n    thread_init                 : thread_identificator DOT START LPARENT RPARENT DOTANDCOMMA\n    \n    thread_wait                 : thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA\n    \n    concurrent_method           : STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY\n                                | WRITE\n    \n    thread_logic                : thread_sentence\n                                | thread_logic thread_sentence\n    \n    thread_sentence             : thread_expression DOTANDCOMMA\n    \n    thread_expression           : thread_identificator DOT concurrent_method LPARENT RPARENT\n                                | PRINT LPARENT STRING RPARENT\n    \n    thread_arguments            : thread_expression\n                                | thread_arguments COMMA thread_expression\n    \n    thread_identificator        : VARIABLE\n    block_try_catch          : try_catch_simply\n                                | try_catch_finally\n    try_catch_simply           : TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEYtry_catch_finally          : TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEYblock_code_try           : def_const_or_var\n                                | print_data\n    all_block_code_try       : block_code_try\n                                | block_code_try all_block_code_try        \n     lists                   : list_empty\n                                | list_full\n    list_empty               : LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA\n                                | LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA\n    list_full                : LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA\n                                | LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA\n    strings_list             : STRING\n                                | STRING COMMA strings_list\n    ints_list                : INTEGER\n                                | INTEGER COMMA ints_list\n    functions_list           : list_func_clear\n                                | list_func_count\n                                | list_func_add\n                                | list_func_removeat\n    list_func_clear            : VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMAlist_func_count            : VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMAlist_func_add            : VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA\n                                | VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA\n    list_func_removeat       : VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA\n                                | VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA\n    statement_lambda           : LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENTenums                    : ENUM METHOD LKEY list_enums RKEYlist_enums               : METHOD\n                                | METHOD COMMA list_enums \n    '
    
_lr_action_items = {'USING':([0,],[2,]),'$end':([1,5,17,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,77,84,109,116,117,148,187,188,193,223,224,229,251,252,253,254,255,264,285,300,302,309,315,317,321,],[0,-1,-2,-15,-6,-7,-8,-9,-10,-11,-12,-13,-14,-64,-65,-112,-121,-122,-129,-130,-139,-140,-141,-142,-16,-69,-3,-68,-67,-66,-34,-35,-150,-143,-144,-106,-149,-145,-146,-147,-148,-111,-110,-131,-132,-123,-133,-134,-124,]),'SYSTEM':([2,],[3,]),'DOTANDCOMMA':([3,60,72,73,82,83,89,90,92,93,95,96,97,98,115,135,136,137,142,143,154,155,156,157,158,159,160,161,162,163,164,165,166,168,170,171,172,173,174,176,177,181,182,209,210,211,212,225,226,227,228,237,238,239,240,241,242,243,244,249,257,270,271,277,284,289,297,298,299,310,312,],[4,84,-92,-98,116,117,-91,-96,-93,-100,-94,-95,-102,-104,148,-99,-81,-80,187,188,-97,-33,-30,-79,-44,-31,-32,-101,-33,-31,-84,-30,-103,-105,-28,-26,-87,-27,-59,-29,-51,223,224,-60,-26,-27,-28,252,253,254,255,-45,-33,-28,-87,-28,-90,-61,-52,266,269,278,279,285,-117,-116,300,302,304,315,317,]),'PUBLIC':([4,27,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,76,84,87,116,117,120,121,122,132,134,148,187,188,193,220,223,224,229,251,252,253,254,255,264,285,300,302,309,315,317,319,321,],[6,65,65,-6,-7,-8,-9,-10,-11,-12,-13,-14,-64,-65,-112,-121,-122,-129,-130,-139,-140,-141,-142,65,-69,65,-68,-67,65,-125,-126,65,65,-66,-34,-35,-150,65,-143,-144,-106,-149,-145,-146,-147,-148,-111,-110,-131,-132,-123,-133,-134,65,-124,]),'STATIC':([4,12,27,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,76,84,116,117,132,134,148,187,188,193,220,223,224,229,233,251,252,253,254,255,263,264,285,300,302,309,315,317,321,],[7,15,29,29,-6,-7,-8,-9,-10,-11,-12,-13,-14,-64,-65,-112,-121,-122,-129,-130,-139,-140,-141,-142,29,-69,-68,-67,29,29,-66,-34,-35,-150,29,-143,-144,-106,29,-149,-145,-146,-147,-148,29,-111,-110,-131,-132,-123,-133,-134,-124,]),'CLASS':([6,],[8,]),'VOID':([7,15,29,],[9,18,70,]),'VARIABLE':([8,21,27,28,30,31,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,61,64,67,68,70,76,78,79,84,103,104,112,116,117,125,126,127,128,129,130,131,132,134,144,148,152,153,175,187,188,189,193,198,199,200,201,202,203,204,205,206,207,208,213,214,215,216,217,218,219,220,221,223,224,229,233,247,248,251,252,253,254,255,264,265,266,269,278,279,285,300,302,309,315,317,321,],[10,23,32,69,71,74,32,-6,-7,-8,-9,-10,-11,-12,-13,-14,-64,-65,-112,-121,-122,-129,-130,-139,-140,-141,-142,86,91,94,99,86,32,111,86,-69,74,136,86,-68,-67,91,155,94,162,167,169,170,32,32,86,-66,196,197,212,-34,-35,86,-150,238,-46,-47,-48,-49,-50,239,241,212,-62,-63,238,-53,-54,-55,-56,-57,-58,32,86,-143,-144,-106,86,86,-113,-149,-145,-146,-147,-148,-111,-114,-115,-109,-107,-108,-110,-131,-132,-123,-133,-134,-124,]),'MAIN':([9,18,],[11,20,]),'LKEY':([10,25,62,80,100,102,179,280,297,298,314,],[12,27,87,114,132,134,221,286,301,303,319,]),'LPARENT':([11,20,27,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,50,51,52,53,54,55,56,76,84,86,101,105,106,107,108,116,117,132,134,148,187,188,191,193,194,195,220,223,224,229,250,251,252,253,254,255,256,264,275,285,290,291,292,300,302,309,315,317,321,],[13,22,30,30,-6,-7,-8,-9,-10,-11,-12,-13,-14,-64,-65,78,-112,-121,-122,-129,-130,-139,-140,-141,-142,30,-69,-120,133,138,139,140,141,-68,-67,30,30,-66,-34,-35,231,-150,233,234,30,-143,-144,-106,267,-149,-145,-146,-147,-148,268,-111,283,-110,293,294,295,-131,-132,-123,-133,-134,-124,]),'STRINGTYPE':([13,22,27,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,58,59,65,66,76,81,84,87,88,116,117,120,121,122,132,134,148,187,188,193,220,223,224,229,251,252,253,254,255,264,281,285,300,302,309,315,317,319,321,],[16,24,31,31,-6,-7,-8,-9,-10,-11,-12,-13,-14,-64,-65,-112,-121,-122,-129,-130,-139,-140,-141,-142,31,31,-70,-71,31,31,-69,31,123,-68,-67,31,-125,-126,31,31,-66,-34,-35,-150,31,-143,-144,-106,-149,-145,-146,-147,-148,-111,287,-110,-131,-132,-123,-133,-134,31,-124,]),'RKEY':([14,33,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,77,84,116,117,119,120,121,122,146,147,148,151,178,180,187,188,193,220,223,224,229,232,245,247,248,251,252,253,254,255,264,265,266,285,300,302,304,305,306,307,308,309,315,316,317,318,320,321,],[17,76,-15,-6,-7,-8,-9,-10,-11,-12,-13,-14,-64,-65,-112,-121,-122,-129,-130,-139,-140,-141,-142,-16,-69,-68,-67,150,-127,-125,-126,-151,193,-66,-128,220,222,-34,-35,-150,-4,-143,-144,-106,-152,-5,264,-113,-149,-145,-146,-147,-148,-111,-114,-115,-110,-131,-132,309,310,-135,312,-137,-123,-133,-136,-134,-138,321,-124,]),'LBRACKET':([16,24,],[19,26,]),'RBRACKET':([19,26,],[21,28,]),'RPARENT':([23,48,69,86,110,111,133,138,139,183,184,185,186,222,231,258,259,264,268,272,276,283,294,295,296,],[25,-112,100,-120,142,143,179,181,182,225,226,227,228,251,257,270,271,-111,277,280,284,289,297,298,299,]),'PRINT':([27,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,76,84,87,116,117,120,121,122,132,134,148,187,188,193,220,221,223,224,229,247,248,251,252,253,254,255,264,265,266,285,286,300,302,309,315,317,319,321,],[46,46,-6,-7,-8,-9,-10,-11,-12,-13,-14,-64,-65,-112,-121,-122,-129,-130,-139,-140,-141,-142,46,-69,46,-68,-67,46,-125,-126,46,46,-66,-34,-35,-150,46,250,-143,-144,-106,250,-113,-149,-145,-146,-147,-148,-111,-114,-115,-110,290,-131,-132,-123,-133,-134,46,-124,]),'WRITE':([27,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,76,84,116,117,132,134,148,187,188,193,220,223,224,229,233,251,252,253,254,255,263,264,285,300,302,309,315,317,321,],[48,48,-6,-7,-8,-9,-10,-11,-12,-13,-14,-64,-65,-112,-121,-122,-129,-130,-139,-140,-141,-142,48,-69,-68,-67,48,48,-66,-34,-35,-150,48,-143,-144,-106,48,-149,-145,-146,-147,-148,48,-111,-110,-131,-132,-123,-133,-134,-124,]),'ENUM':([27,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,76,84,116,117,132,134,148,187,188,193,220,223,224,229,251,252,253,254,255,264,285,300,302,309,315,317,321,],[57,57,-6,-7,-8,-9,-10,-11,-12,-13,-14,-64,-65,-112,-121,-122,-129,-130,-139,-140,-141,-142,57,-69,-68,-67,57,57,-66,-34,-35,-150,57,-143,-144,-106,-149,-145,-146,-147,-148,-111,-110,-131,-132,-123,-133,-134,-124,]),'CONST':([27,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,58,65,66,76,84,87,116,117,120,121,122,132,134,148,187,188,193,220,223,224,229,251,252,253,254,255,264,285,300,302,309,315,317,319,321,],[59,59,-6,-7,-8,-9,-10,-11,-12,-13,-14,-64,-65,-112,-121,-122,-129,-130,-139,-140,-141,-142,81,-70,-71,59,-69,59,-68,-67,59,-125,-126,59,59,-66,-34,-35,-150,59,-143,-144,-106,-149,-145,-146,-147,-148,-111,-110,-131,-132,-123,-133,-134,59,-124,]),'THREAD':([27,34,35,36,37,38,39,40,41,42,43,44,45,47,48,49,50,51,52,53,54,55,56,76,84,116,117,132,134,148,149,187,188,193,220,223,224,229,251,252,253,254,255,264,278,279,285,300,302,309,315,317,321,],[61,61,-6,-7,-8,-9,-10,-11,-12,-13,-14,-64,-65,61,-112,-121,-122,-129,-130,-139,-140,-141,-142,61,-69,-68,-67,61,61,-66,194,-34,-35,-150,61,-143,-144,-106,-149,-145,-146,-147,-148,-111,-107,-108,-110,-131,-132,-123,-133,-134,-124,]),'TRY':([27,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,76,84,116,117,132,134,148,187,188,193,220,223,224,229,251,252,253,254,255,264,285,300,302,309,315,317,321,],[62,62,-6,-7,-8,-9,-10,-11,-12,-13,-14,-64,-65,-112,-121,-122,-129,-130,-139,-140,-141,-142,62,-69,-68,-67,62,62,-66,-34,-35,-150,62,-143,-144,-106,-149,-145,-146,-147,-148,-111,-110,-131,-132,-123,-133,-134,-124,]),'LIST':([27,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,76,84,116,117,132,134,148,187,188,193,220,223,224,229,251,252,253,254,255,261,262,264,285,300,302,309,315,317,321,],[63,63,-6,-7,-8,-9,-10,-11,-12,-13,-14,-64,-65,-112,-121,-122,-129,-130,-139,-140,-141,-142,63,-69,-68,-67,63,63,-66,-34,-35,-150,63,-143,-144,-106,-149,-145,-146,-147,-148,273,274,-111,-110,-131,-132,-123,-133,-134,-124,]),'PRIVATE':([27,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,76,84,87,116,117,120,121,122,132,134,148,187,188,193,220,223,224,229,251,252,253,254,255,264,285,300,302,309,315,317,319,321,],[66,66,-6,-7,-8,-9,-10,-11,-12,-13,-14,-64,-65,-112,-121,-122,-129,-130,-139,-140,-141,-142,66,-69,66,-68,-67,66,-125,-126,66,66,-66,-34,-35,-150,66,-143,-144,-106,-149,-145,-146,-147,-148,-111,-110,-131,-132,-123,-133,-134,66,-124,]),'INTTYPE':([27,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,58,59,65,66,76,81,84,87,88,116,117,120,121,122,132,134,148,187,188,193,220,223,224,229,251,252,253,254,255,264,282,285,300,302,309,315,317,319,321,],[64,64,-6,-7,-8,-9,-10,-11,-12,-13,-14,-64,-65,-112,-121,-122,-129,-130,-139,-140,-141,-142,64,64,-70,-71,64,64,-69,64,124,-68,-67,64,-125,-126,64,64,-66,-34,-35,-150,64,-143,-144,-106,-149,-145,-146,-147,-148,-111,288,-110,-131,-132,-123,-133,-134,64,-124,]),'FLOATTYPE':([27,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,58,59,65,66,76,81,84,87,116,117,120,121,122,132,134,148,187,188,193,220,223,224,229,251,252,253,254,255,264,285,300,302,309,315,317,319,321,],[67,67,-6,-7,-8,-9,-10,-11,-12,-13,-14,-64,-65,-112,-121,-122,-129,-130,-139,-140,-141,-142,67,67,-70,-71,67,67,-69,67,-68,-67,67,-125,-126,67,67,-66,-34,-35,-150,67,-143,-144,-106,-149,-145,-146,-147,-148,-111,-110,-131,-132,-123,-133,-134,67,-124,]),'BOOLTYPE':([27,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,58,59,65,66,76,81,84,87,116,117,120,121,122,132,134,148,187,188,193,220,223,224,229,251,252,253,254,255,264,285,300,302,309,315,317,319,321,],[68,68,-6,-7,-8,-9,-10,-11,-12,-13,-14,-64,-65,-112,-121,-122,-129,-130,-139,-140,-141,-142,68,68,-70,-71,68,68,-69,68,-68,-67,68,-125,-126,68,68,-66,-34,-35,-150,68,-143,-144,-106,-149,-145,-146,-147,-148,-111,-110,-131,-132,-123,-133,-134,68,-124,]),'DOT':([32,86,113,190,246,],[75,-120,145,230,263,]),'METHOD':([57,114,192,],[80,146,146,]),'SMALLER_THAN':([63,159,160,165,170,177,212,238,239,241,273,274,],[88,-31,-32,-30,-33,215,-33,-33,-33,-33,281,282,]),'ARROW':([71,],[102,]),'COMMA':([73,90,93,97,98,136,137,146,155,156,157,158,159,160,162,163,164,165,170,171,172,173,174,176,177,209,210,211,212,237,238,239,240,241,242,243,244,306,308,],[103,125,127,129,130,-81,-80,192,-33,-30,-79,-44,-31,-32,-33,-31,-84,-30,-28,-26,-87,-27,-59,-29,-51,-60,-26,-27,-28,-45,-33,-28,-87,-28,-90,-61,-52,311,313,]),'ASSIGNATION':([74,85,86,91,94,99,167,169,196,197,],[104,118,-120,126,128,131,204,205,235,236,]),'CLEAR':([75,],[105,]),'COUNT':([75,],[106,]),'ADD':([75,],[107,]),'REMOVEAT':([75,],[108,]),'STRING':([78,104,140,141,267,301,311,],[110,137,184,186,276,306,306,]),'NEW':([118,235,236,],[149,261,262,]),'GREATER_THAN':([123,124,159,160,165,170,177,212,238,239,241,287,288,],[152,153,-31,-32,-30,-33,214,-33,-33,-33,-33,291,292,]),'INTEGER':([126,128,131,140,141,175,198,199,200,201,202,203,204,205,206,207,208,213,214,215,216,217,218,219,303,313,],[156,165,165,183,185,165,165,-46,-47,-48,-49,-50,165,165,165,-62,-63,165,-53,-54,-55,-56,-57,-58,308,308,]),'FLOAT_NUMBER':([126,128,131,175,198,199,200,201,202,203,204,205,206,207,208,213,214,215,216,217,218,219,],[159,163,159,159,159,-46,-47,-48,-49,-50,159,159,159,-62,-63,159,-53,-54,-55,-56,-57,-58,]),'DECIMAL_NUMBER':([126,128,131,175,198,199,200,201,202,203,204,205,206,207,208,213,214,215,216,217,218,219,],[160,160,160,160,160,-46,-47,-48,-49,-50,160,160,160,-62,-63,160,-53,-54,-55,-56,-57,-58,]),'BOOLTRUE':([131,175,204,205,206,207,208,],[171,210,171,210,210,-62,-63,]),'BOOLFALSE':([131,175,204,205,206,207,208,],[173,211,211,173,211,-62,-63,]),'LOGICNOT':([131,204,205,206,207,208,],[175,175,175,175,-62,-63,]),'START':([145,],[191,]),'CATCH':([150,],[195,]),'PLUS':([155,156,158,159,160,162,163,165,238,],[-33,-30,199,-31,-32,-33,-31,-30,-33,]),'MINUS':([155,156,158,159,160,162,163,165,238,],[-33,-30,200,-31,-32,-33,-31,-30,-33,]),'TIMES':([155,156,158,159,160,162,163,165,238,],[-33,-30,201,-31,-32,-33,-31,-30,-33,]),'DIVIDE':([155,156,158,159,160,162,163,165,238,],[-33,-30,202,-31,-32,-33,-31,-30,-33,]),'PERCENT':([155,156,158,159,160,162,163,165,238,],[-33,-30,203,-31,-32,-33,-31,-30,-33,]),'EQUAL_COMPARATION':([159,160,165,170,177,212,238,239,241,],[-31,-32,-30,-33,216,-33,-33,-33,-33,]),'INEQUALITY':([159,160,165,170,177,212,238,239,241,],[-31,-32,-30,-33,217,-33,-33,-33,-33,]),'GREATER_THAN_OR_EQUAL':([159,160,165,170,177,212,238,239,241,],[-31,-32,-30,-33,218,-33,-33,-33,-33,]),'SMALLER_THAN_OR_EQUAL':([159,160,165,170,177,212,238,239,241,],[-31,-32,-30,-33,219,-33,-33,-33,-33,]),'LOGICAND':([159,160,165,170,171,173,174,176,177,210,211,212,238,239,241,244,],[-31,-32,-30,-28,-26,-27,207,-29,-51,-26,-27,-28,-33,-28,-28,-52,]),'LOGICOR':([159,160,165,170,171,173,174,176,177,210,211,212,238,239,241,244,],[-31,-32,-30,-28,-26,-27,208,-29,-51,-26,-27,-28,-33,-28,-28,-52,]),'JOIN':([230,],[256,]),'EXCEPTION':([234,],[260,]),'ERROR':([260,293,],[272,296,]),'FINALLY':([309,],[314,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block_publicClass':([4,],[5,]),'block_main_method':([12,],[14,]),'all_block_code':([27,34,76,132,134,220,],[33,77,109,178,180,245,]),'block_code':([27,34,76,132,134,220,],[34,34,34,34,34,34,]),'def_const_or_var':([27,34,76,87,120,132,134,220,319,],[35,35,35,121,121,35,35,35,121,]),'print_data':([27,34,76,87,120,132,134,220,319,],[36,36,36,122,122,36,36,36,122,]),'thread_main':([27,34,76,132,134,220,],[37,37,37,37,37,37,]),'concurrent_method':([27,34,76,132,134,220,233,263,],[38,38,38,38,38,38,259,275,]),'block_try_catch':([27,34,76,132,134,220,],[39,39,39,39,39,39,]),'lists':([27,34,76,132,134,220,],[40,40,40,40,40,40,]),'functions_list':([27,34,76,132,134,220,],[41,41,41,41,41,41,]),'statement_lambda':([27,34,76,132,134,220,],[42,42,42,42,42,42,]),'enums':([27,34,76,132,134,220,],[43,43,43,43,43,43,]),'constant_assignation':([27,34,76,87,120,132,134,220,319,],[44,44,44,44,44,44,44,44,44,]),'variable_assignation':([27,34,76,87,120,132,134,220,319,],[45,45,45,45,45,45,45,45,45,]),'declaration_thread':([27,34,47,76,132,134,220,],[47,47,79,47,47,47,47,]),'try_catch_simply':([27,34,76,132,134,220,],[49,49,49,49,49,49,]),'try_catch_finally':([27,34,76,132,134,220,],[50,50,50,50,50,50,]),'list_empty':([27,34,76,132,134,220,],[51,51,51,51,51,51,]),'list_full':([27,34,76,132,134,220,],[52,52,52,52,52,52,]),'list_func_clear':([27,34,76,132,134,220,],[53,53,53,53,53,53,]),'list_func_count':([27,34,76,132,134,220,],[54,54,54,54,54,54,]),'list_func_add':([27,34,76,132,134,220,],[55,55,55,55,55,55,]),'list_func_removeat':([27,34,76,132,134,220,],[56,56,56,56,56,56,]),'access_modifiers':([27,34,76,87,120,132,134,220,319,],[58,58,58,58,58,58,58,58,58,]),'assignation_type_value_multiple':([27,34,58,59,76,81,87,120,132,134,220,319,],[60,60,82,83,60,115,60,60,60,60,60,60,]),'assignation_string_multiple':([31,103,],[72,135,]),'assignation_string':([31,103,],[73,73,]),'thread_identificator':([61,70,79,112,144,189,221,233,247,],[85,101,113,113,190,190,246,258,246,]),'assignation_int_multiple':([64,125,],[89,154,]),'assignation_int':([64,125,],[90,90,]),'assignation_float_multiple':([67,127,],[92,161,]),'assignation_float':([67,127,],[93,93,]),'assignation_true_multiple':([68,129,],[95,166,]),'assignation_false_multiple':([68,130,],[96,168,]),'assignation_true':([68,129,],[97,97,]),'assignation_false':([68,130,],[98,98,]),'thread_init':([79,112,],[112,144,]),'all_block_code_try':([87,120,319,],[119,151,320,]),'block_code_try':([87,120,319,],[120,120,120,]),'list_enums':([114,192,],[147,232,]),'arithmetic_operation':([126,128,198,],[157,164,237,]),'value_numeric':([126,128,131,175,198,204,205,206,213,],[158,158,177,177,158,177,177,177,177,]),'boolean_operation':([131,204,205,206,],[172,240,242,243,]),'value_boolean':([131,175,204,205,206,],[174,209,174,174,174,]),'comparison_operation':([131,175,204,205,206,213,],[176,176,176,176,176,244,]),'thread_wait':([144,189,],[189,229,]),'arithmetic_operator':([158,],[198,]),'boolean_operator':([174,],[206,]),'comparison_operator':([177,],[213,]),'thread_logic':([221,],[247,]),'thread_sentence':([221,247,],[248,265,]),'thread_expression':([221,247,],[249,249,]),'strings_list':([301,311,],[305,316,]),'ints_list':([303,313,],[307,318,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> USING SYSTEM DOTANDCOMMA block_publicClass','program',4,'p_program','sintactico2.py',8),
  ('block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_main_method RKEY','block_publicClass',6,'p_block_publicClass','sintactico2.py',11),
  ('block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code','block_publicClass',13,'p_block_publicClass','sintactico2.py',12),
  ('block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY','block_main_method',12,'p_block_main_method','sintactico2.py',16),
  ('block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code','block_main_method',13,'p_block_main_method','sintactico2.py',17),
  ('block_code -> def_const_or_var','block_code',1,'p_block_code','sintactico2.py',21),
  ('block_code -> print_data','block_code',1,'p_block_code','sintactico2.py',22),
  ('block_code -> thread_main','block_code',1,'p_block_code','sintactico2.py',23),
  ('block_code -> concurrent_method','block_code',1,'p_block_code','sintactico2.py',24),
  ('block_code -> block_try_catch','block_code',1,'p_block_code','sintactico2.py',26),
  ('block_code -> lists','block_code',1,'p_block_code','sintactico2.py',27),
  ('block_code -> functions_list','block_code',1,'p_block_code','sintactico2.py',28),
  ('block_code -> statement_lambda','block_code',1,'p_block_code','sintactico2.py',30),
  ('block_code -> enums','block_code',1,'p_block_code','sintactico2.py',32),
  ('all_block_code -> block_code','all_block_code',1,'p_all_block_code','sintactico2.py',36),
  ('all_block_code -> block_code all_block_code','all_block_code',2,'p_all_block_code','sintactico2.py',37),
  ('data_type -> CHARTYPE','data_type',1,'p_data_type','sintactico2.py',43),
  ('data_type -> STRINGTYPE','data_type',1,'p_data_type','sintactico2.py',44),
  ('data_type -> FLOATTYPE','data_type',1,'p_data_type','sintactico2.py',45),
  ('data_type -> DECIMALTYPE','data_type',1,'p_data_type','sintactico2.py',46),
  ('data_type -> INTTYPE','data_type',1,'p_data_type','sintactico2.py',47),
  ('data_type -> BOOLTYPE','data_type',1,'p_data_type','sintactico2.py',48),
  ('value_string -> STRING','value_string',1,'p_value_string','sintactico2.py',54),
  ('value_string -> CHAR','value_string',1,'p_value_string','sintactico2.py',55),
  ('value_string -> concatenation','value_string',1,'p_value_string','sintactico2.py',56),
  ('value_boolean -> BOOLTRUE','value_boolean',1,'p_value_boolean','sintactico2.py',60),
  ('value_boolean -> BOOLFALSE','value_boolean',1,'p_value_boolean','sintactico2.py',61),
  ('value_boolean -> VARIABLE','value_boolean',1,'p_value_boolean','sintactico2.py',62),
  ('value_boolean -> comparison_operation','value_boolean',1,'p_value_boolean','sintactico2.py',63),
  ('value_numeric -> INTEGER','value_numeric',1,'p_value_numeric','sintactico2.py',67),
  ('value_numeric -> FLOAT_NUMBER','value_numeric',1,'p_value_numeric','sintactico2.py',68),
  ('value_numeric -> DECIMAL_NUMBER','value_numeric',1,'p_value_numeric','sintactico2.py',69),
  ('value_numeric -> VARIABLE','value_numeric',1,'p_value_numeric','sintactico2.py',70),
  ('print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA','print_data',5,'p_print_data','sintactico2.py',74),
  ('print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA','print_data',5,'p_print_data','sintactico2.py',75),
  ('read_data -> READ LPARENT RPARENT DOTANDCOMMA','read_data',4,'p_read_data','sintactico2.py',79),
  ('concatenation -> STRING','concatenation',1,'p_concatenation','sintactico2.py',83),
  ('concatenation -> STRING PLUS concatenation','concatenation',3,'p_concatenation','sintactico2.py',84),
  ('value -> value_numeric','value',1,'p_value','sintactico2.py',88),
  ('value -> value_boolean','value',1,'p_value','sintactico2.py',89),
  ('value -> value_string','value',1,'p_value','sintactico2.py',90),
  ('value -> VARIABLE','value',1,'p_value','sintactico2.py',91),
  ('value -> read_data','value',1,'p_value','sintactico2.py',92),
  ('arithmetic_operation -> value_numeric','arithmetic_operation',1,'p_arithmetic_operation','sintactico2.py',98),
  ('arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation','arithmetic_operation',3,'p_arithmetic_operation','sintactico2.py',99),
  ('arithmetic_operator -> PLUS','arithmetic_operator',1,'p_arithmetic_operator','sintactico2.py',103),
  ('arithmetic_operator -> MINUS','arithmetic_operator',1,'p_arithmetic_operator','sintactico2.py',104),
  ('arithmetic_operator -> TIMES','arithmetic_operator',1,'p_arithmetic_operator','sintactico2.py',105),
  ('arithmetic_operator -> DIVIDE','arithmetic_operator',1,'p_arithmetic_operator','sintactico2.py',106),
  ('arithmetic_operator -> PERCENT','arithmetic_operator',1,'p_arithmetic_operator','sintactico2.py',107),
  ('comparison_operation -> value_numeric','comparison_operation',1,'p_comparison_operation','sintactico2.py',111),
  ('comparison_operation -> value_numeric comparison_operator comparison_operation','comparison_operation',3,'p_comparison_operation','sintactico2.py',112),
  ('comparison_operator -> GREATER_THAN','comparison_operator',1,'p_comparison_operator','sintactico2.py',116),
  ('comparison_operator -> SMALLER_THAN','comparison_operator',1,'p_comparison_operator','sintactico2.py',117),
  ('comparison_operator -> EQUAL_COMPARATION','comparison_operator',1,'p_comparison_operator','sintactico2.py',118),
  ('comparison_operator -> INEQUALITY','comparison_operator',1,'p_comparison_operator','sintactico2.py',119),
  ('comparison_operator -> GREATER_THAN_OR_EQUAL','comparison_operator',1,'p_comparison_operator','sintactico2.py',120),
  ('comparison_operator -> SMALLER_THAN_OR_EQUAL','comparison_operator',1,'p_comparison_operator','sintactico2.py',121),
  ('boolean_operation -> value_boolean','boolean_operation',1,'p_boolean_operation','sintactico2.py',125),
  ('boolean_operation -> LOGICNOT value_boolean','boolean_operation',2,'p_boolean_operation','sintactico2.py',126),
  ('boolean_operation -> value_boolean boolean_operator boolean_operation','boolean_operation',3,'p_boolean_operation','sintactico2.py',127),
  ('boolean_operator -> LOGICAND','boolean_operator',1,'p_boolean_operator','sintactico2.py',131),
  ('boolean_operator -> LOGICOR','boolean_operator',1,'p_boolean_operator','sintactico2.py',132),
  ('def_const_or_var -> constant_assignation','def_const_or_var',1,'p_def_const_or_var','sintactico2.py',138),
  ('def_const_or_var -> variable_assignation','def_const_or_var',1,'p_def_const_or_var','sintactico2.py',139),
  ('constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA','constant_assignation',4,'p_constant_assignation','sintactico2.py',143),
  ('constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA','constant_assignation',3,'p_constant_assignation','sintactico2.py',144),
  ('variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA','variable_assignation',3,'p_variable_assignation','sintactico2.py',148),
  ('variable_assignation -> assignation_type_value_multiple DOTANDCOMMA','variable_assignation',2,'p_variable_assignation','sintactico2.py',149),
  ('access_modifiers -> PUBLIC','access_modifiers',1,'p_access_modifiers','sintactico2.py',153),
  ('access_modifiers -> PRIVATE','access_modifiers',1,'p_access_modifiers','sintactico2.py',154),
  ('assignation_type_value -> INTTYPE assignation_int','assignation_type_value',2,'p_assignation_type_value','sintactico2.py',158),
  ('assignation_type_value -> STRINGTYPE assignation_string','assignation_type_value',2,'p_assignation_type_value','sintactico2.py',159),
  ('assignation_type_value -> FLOATTYPE assignation_float','assignation_type_value',2,'p_assignation_type_value','sintactico2.py',160),
  ('assignation_type_value -> BOOLTYPE assignation_true','assignation_type_value',2,'p_assignation_type_value','sintactico2.py',161),
  ('assignation_type_value -> BOOLTYPE assignation_false','assignation_type_value',2,'p_assignation_type_value','sintactico2.py',162),
  ('assignation_int -> VARIABLE ASSIGNATION INTEGER','assignation_int',3,'p_assignation_int','sintactico2.py',166),
  ('assignation_int -> VARIABLE ASSIGNATION VARIABLE','assignation_int',3,'p_assignation_int','sintactico2.py',167),
  ('assignation_int -> VARIABLE ASSIGNATION arithmetic_operation','assignation_int',3,'p_assignation_int','sintactico2.py',168),
  ('assignation_string -> VARIABLE ASSIGNATION STRING','assignation_string',3,'p_assignation_string','sintactico2.py',172),
  ('assignation_string -> VARIABLE ASSIGNATION VARIABLE','assignation_string',3,'p_assignation_string','sintactico2.py',173),
  ('assignation_float -> VARIABLE ASSIGNATION FLOAT_NUMBER','assignation_float',3,'p_assignation_float','sintactico2.py',177),
  ('assignation_float -> VARIABLE ASSIGNATION VARIABLE','assignation_float',3,'p_assignation_float','sintactico2.py',178),
  ('assignation_float -> VARIABLE ASSIGNATION arithmetic_operation','assignation_float',3,'p_assignation_float','sintactico2.py',179),
  ('assignation_true -> VARIABLE ASSIGNATION BOOLTRUE','assignation_true',3,'p_assignation_true','sintactico2.py',183),
  ('assignation_true -> VARIABLE ASSIGNATION VARIABLE','assignation_true',3,'p_assignation_true','sintactico2.py',184),
  ('assignation_true -> VARIABLE ASSIGNATION boolean_operation','assignation_true',3,'p_assignation_true','sintactico2.py',185),
  ('assignation_false -> VARIABLE ASSIGNATION BOOLFALSE','assignation_false',3,'p_assignation_false','sintactico2.py',189),
  ('assignation_false -> VARIABLE ASSIGNATION VARIABLE','assignation_false',3,'p_assignation_false','sintactico2.py',190),
  ('assignation_false -> VARIABLE ASSIGNATION boolean_operation','assignation_false',3,'p_assignation_false','sintactico2.py',191),
  ('assignation_type_value_multiple -> INTTYPE assignation_int_multiple','assignation_type_value_multiple',2,'p_assignation_type_value_multiple','sintactico2.py',196),
  ('assignation_type_value_multiple -> STRINGTYPE assignation_string_multiple','assignation_type_value_multiple',2,'p_assignation_type_value_multiple','sintactico2.py',197),
  ('assignation_type_value_multiple -> FLOATTYPE assignation_float_multiple','assignation_type_value_multiple',2,'p_assignation_type_value_multiple','sintactico2.py',198),
  ('assignation_type_value_multiple -> BOOLTYPE assignation_true_multiple','assignation_type_value_multiple',2,'p_assignation_type_value_multiple','sintactico2.py',199),
  ('assignation_type_value_multiple -> BOOLTYPE assignation_false_multiple','assignation_type_value_multiple',2,'p_assignation_type_value_multiple','sintactico2.py',200),
  ('assignation_int_multiple -> assignation_int','assignation_int_multiple',1,'p_assignation_int_multiple','sintactico2.py',204),
  ('assignation_int_multiple -> assignation_int COMMA assignation_int_multiple','assignation_int_multiple',3,'p_assignation_int_multiple','sintactico2.py',205),
  ('assignation_string_multiple -> assignation_string','assignation_string_multiple',1,'p_assignation_string_multiple','sintactico2.py',209),
  ('assignation_string_multiple -> assignation_string COMMA assignation_string_multiple','assignation_string_multiple',3,'p_assignation_string_multiple','sintactico2.py',210),
  ('assignation_float_multiple -> assignation_float','assignation_float_multiple',1,'p_assignation_float_multiple','sintactico2.py',214),
  ('assignation_float_multiple -> assignation_float COMMA assignation_float_multiple','assignation_float_multiple',3,'p_assignation_float_multiple','sintactico2.py',215),
  ('assignation_true_multiple -> assignation_true','assignation_true_multiple',1,'p_assignation_true_multiple','sintactico2.py',219),
  ('assignation_true_multiple -> assignation_true COMMA assignation_true_multiple','assignation_true_multiple',3,'p_assignation_true_multiple','sintactico2.py',220),
  ('assignation_false_multiple -> assignation_false','assignation_false_multiple',1,'p_assignation_false_multiple','sintactico2.py',224),
  ('assignation_false_multiple -> assignation_false COMMA assignation_false_multiple','assignation_false_multiple',3,'p_assignation_false_multiple','sintactico2.py',225),
  ('thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait','thread_main',6,'p_thread_main','sintactico2.py',231),
  ('declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA','declaration_thread',9,'p_declaration_thread','sintactico2.py',236),
  ('declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA','declaration_thread',9,'p_declaration_thread','sintactico2.py',237),
  ('thread_init -> thread_identificator DOT START LPARENT RPARENT DOTANDCOMMA','thread_init',6,'p_thread_init','sintactico2.py',242),
  ('thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA','thread_wait',6,'p_thread_wait','sintactico2.py',247),
  ('concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY','concurrent_method',8,'p_concurrent_method','sintactico2.py',252),
  ('concurrent_method -> WRITE','concurrent_method',1,'p_concurrent_method','sintactico2.py',253),
  ('thread_logic -> thread_sentence','thread_logic',1,'p_thread_logic','sintactico2.py',258),
  ('thread_logic -> thread_logic thread_sentence','thread_logic',2,'p_thread_logic','sintactico2.py',259),
  ('thread_sentence -> thread_expression DOTANDCOMMA','thread_sentence',2,'p_thread_sentence','sintactico2.py',264),
  ('thread_expression -> thread_identificator DOT concurrent_method LPARENT RPARENT','thread_expression',5,'p_thread_expression','sintactico2.py',269),
  ('thread_expression -> PRINT LPARENT STRING RPARENT','thread_expression',4,'p_thread_expression','sintactico2.py',270),
  ('thread_arguments -> thread_expression','thread_arguments',1,'p_thread_arguments','sintactico2.py',275),
  ('thread_arguments -> thread_arguments COMMA thread_expression','thread_arguments',3,'p_thread_arguments','sintactico2.py',276),
  ('thread_identificator -> VARIABLE','thread_identificator',1,'p_thread_identificator','sintactico2.py',281),
  ('block_try_catch -> try_catch_simply','block_try_catch',1,'p_block_try_catch','sintactico2.py',289),
  ('block_try_catch -> try_catch_finally','block_try_catch',1,'p_block_try_catch','sintactico2.py',290),
  ('try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY','try_catch_simply',16,'p_try_catch_simply','sintactico2.py',294),
  ('try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY','try_catch_finally',20,'p_try_catch_finally','sintactico2.py',297),
  ('block_code_try -> def_const_or_var','block_code_try',1,'p_block_code_try','sintactico2.py',300),
  ('block_code_try -> print_data','block_code_try',1,'p_block_code_try','sintactico2.py',301),
  ('all_block_code_try -> block_code_try','all_block_code_try',1,'p_all_block_code_try','sintactico2.py',305),
  ('all_block_code_try -> block_code_try all_block_code_try','all_block_code_try',2,'p_all_block_code_try','sintactico2.py',306),
  ('lists -> list_empty','lists',1,'p_lists','sintactico2.py',314),
  ('lists -> list_full','lists',1,'p_lists','sintactico2.py',315),
  ('list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA','list_empty',14,'p_list_empty','sintactico2.py',319),
  ('list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA','list_empty',14,'p_list_empty','sintactico2.py',320),
  ('list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA','list_full',17,'p_list_full','sintactico2.py',324),
  ('list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA','list_full',17,'p_list_full','sintactico2.py',325),
  ('strings_list -> STRING','strings_list',1,'p_strings_list','sintactico2.py',329),
  ('strings_list -> STRING COMMA strings_list','strings_list',3,'p_strings_list','sintactico2.py',330),
  ('ints_list -> INTEGER','ints_list',1,'p_ints_list','sintactico2.py',334),
  ('ints_list -> INTEGER COMMA ints_list','ints_list',3,'p_ints_list','sintactico2.py',335),
  ('functions_list -> list_func_clear','functions_list',1,'p_functions_list','sintactico2.py',339),
  ('functions_list -> list_func_count','functions_list',1,'p_functions_list','sintactico2.py',340),
  ('functions_list -> list_func_add','functions_list',1,'p_functions_list','sintactico2.py',341),
  ('functions_list -> list_func_removeat','functions_list',1,'p_functions_list','sintactico2.py',342),
  ('list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA','list_func_clear',6,'p_list_func_clear','sintactico2.py',346),
  ('list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA','list_func_count',6,'p_list_func_count','sintactico2.py',349),
  ('list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA','list_func_add',7,'p_list_func_add','sintactico2.py',352),
  ('list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA','list_func_add',7,'p_list_func_add','sintactico2.py',353),
  ('list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA','list_func_removeat',7,'p_list_func_removeat','sintactico2.py',358),
  ('list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA','list_func_removeat',7,'p_list_func_removeat','sintactico2.py',359),
  ('statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT','statement_lambda',7,'p_statement_lambda','sintactico2.py',367),
  ('enums -> ENUM METHOD LKEY list_enums RKEY','enums',5,'p_enums','sintactico2.py',374),
  ('list_enums -> METHOD','list_enums',1,'p_list_enums','sintactico2.py',377),
  ('list_enums -> METHOD COMMA list_enums','list_enums',3,'p_list_enums','sintactico2.py',378),
]
