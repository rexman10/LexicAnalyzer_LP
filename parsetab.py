
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADDITION_ASSIGNMENT ASSIGNATION BACK_SLASH BOOL BOOLFALSE BOOLTRUE BOOLTYPE BREAK CATCH CHAR CHARTYPE CLASS COMMA CONST DECIMALTYPE DECIMAL_NUMBER DECREMENT DIVIDE DIVISION_ASSIGNMENT DOLLARSIGN DOT DOTANDCOMMA DOUBLEPOINT DOUBLE_QUOTATION_MARKS ELSE EQUAL_COMPARATION EXCEPTION FINALLY FLOATTYPE FLOAT_NUMBER FOR GREATER_THAN GREATER_THAN_OR_EQUAL IF INCREMENT INEQUALITY INTEGER INTTYPE JUMP_LINE LBRACKET LKEY LOGICAND LOGICNOT LOGICOR LOGICXOR LONG LPARENT MINUS MODULE_ASSIGNMENT MULTIPLICATION_ASSIGNMENT NAMESPACE NEW PERCENT PIPE PLUS PRINT PRIVATE PUBLIC RBRACKET READ RETURN RKEY RPARENT SIPLE_QUOTATION_MARKS SMALLER_THAN SMALLER_THAN_OR_EQUAL STATIC STRING STRINGTYPE SUBTRACTION_ASSIGNMENT SWITCH SYSTEM TABULATION TIMES TRY USING VARIABLE VOID WHILEprogram : block_using block_publicClassblock_using : USING SYSTEM DOTANDCOMMAblock_publicClass : PUBLIC CLASS VARIABLE LKEY block_code RKEYblock_code : def_const_or_var\n                    | block_try_catch\n                    | VARIABLE\n    def_const_or_var : constant_assignation\n                        | variable_assignation\n    variable_assignation : access_modifiers data_type multi_or_one_assignation DOTANDCOMMA\n                                    | data_type multi_or_one_assignation DOTANDCOMMA\n                                    | data_type VARIABLE DOTANDCOMMA\n                                    | multi_or_one_assignation DOTANDCOMMA\n    constant_assignation : access_modifiers CONST data_type multi_or_one_assignation DOTANDCOMMA\n                            | CONST data_type multi_or_one_assignation DOTANDCOMMA\n                            | CONST data_type VARIABLE DOTANDCOMMA\n    multi_or_one_assignation : assignation_key_value\n                                | assignation_key_value COMMA multi_or_one_assignation\n    assignation_key_value : VARIABLE ASSIGNATION valuedata_type    : CHARTYPE\n                    | STRINGTYPE\n                    | FLOATTYPE\n                    | DECIMALTYPE\n                    | INTTYPE\n                    | BOOLTYPE\n    value    : value_numeric\n                | value_logic\n                | value_string\n    value_string : STRING\n                    | CHAR\n                    | VARIABLE\n                    | READ LPARENT RPARENT\n                    | concatenation\n    value_logic  : BOOLTRUE\n                    | BOOLFALSE\n    value_numeric    : INTEGER\n                        | FLOAT_NUMBER\n                        | DECIMAL_NUMBER\n    block_try_catch : try_catch_simply\n                        | try_catch_finally\n    try_catch_simply : TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEYtry_catch_finally : TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEY FINALLY LKEY block_code RKEYaccess_modifiers : PUBLIC\n                        | PRIVATE\n    arithmetic_operation : value_numeric\n                            | value_numeric arithmetic_operator arithmetic_operation\n    logic_operation  : value_logic\n                        | value_logic logic_operator logic_operation\n    concatenation    : STRING\n                        | STRING PLUS concatenation\n    logic_operator   : GREATER_THAN\n                        | SMALLER_THAN\n                        | EQUAL_COMPARATION\n                        | INEQUALITY\n                        | GREATER_THAN_OR_EQUAL\n                        | SMALLER_THAN_OR_EQUAL\n                        | LOGICAND\n                        | LOGICOR\n                        | LOGICNOT\n                        | LOGICXOR\n    arithmetic_operator  : PLUS\n                            | MINUS\n                            | TIMES\n                            | DIVIDE\n                            | PERCENT\n    variable_assignation_multiline   : \n    '
    
_lr_action_items = {'USING':([0,],[3,]),'$end':([1,4,34,],[0,-1,-3,]),'PUBLIC':([2,8,10,41,82,86,],[5,-2,11,11,11,11,]),'SYSTEM':([3,],[6,]),'CLASS':([5,],[7,]),'DOTANDCOMMA':([6,23,32,38,39,43,44,45,46,47,48,49,50,51,52,53,54,56,58,60,61,65,68,73,74,75,],[8,40,-16,62,63,-30,-18,-25,-26,-27,-35,-36,-37,-33,-34,-28,-29,-32,69,70,71,-17,76,-48,-49,-31,]),'VARIABLE':([7,10,22,26,27,28,29,30,31,33,36,37,41,42,57,79,82,86,],[9,12,39,-19,-20,-21,-22,-23,-24,43,59,61,12,59,59,80,12,12,]),'LKEY':([9,24,81,85,],[10,41,82,86,]),'CONST':([10,11,20,25,41,82,86,],[21,-42,35,-43,21,21,21,]),'TRY':([10,41,82,86,],[24,24,24,24,]),'PRIVATE':([10,41,82,86,],[25,25,25,25,]),'CHARTYPE':([10,11,20,21,25,35,41,82,86,],[26,-42,26,26,-43,26,26,26,26,]),'STRINGTYPE':([10,11,20,21,25,35,41,82,86,],[27,-42,27,27,-43,27,27,27,27,]),'FLOATTYPE':([10,11,20,21,25,35,41,82,86,],[28,-42,28,28,-43,28,28,28,28,]),'DECIMALTYPE':([10,11,20,21,25,35,41,82,86,],[29,-42,29,29,-43,29,29,29,29,]),'INTTYPE':([10,11,20,21,25,35,41,82,86,],[30,-42,30,30,-43,30,30,30,30,]),'BOOLTYPE':([10,11,20,21,25,35,41,82,86,],[31,-42,31,31,-43,31,31,31,31,]),'RKEY':([12,13,14,15,16,17,18,19,40,62,63,64,69,70,71,76,83,84,87,88,],[-6,34,-4,-5,-7,-8,-38,-39,-12,-10,-11,72,-9,-14,-15,-13,84,-40,88,-41,]),'ASSIGNATION':([12,39,59,61,],[33,33,33,33,]),'COMMA':([32,43,44,45,46,47,48,49,50,51,52,53,54,56,73,74,75,],[42,-30,-18,-25,-26,-27,-35,-36,-37,-33,-34,-28,-29,-32,-48,-49,-31,]),'INTEGER':([33,],[48,]),'FLOAT_NUMBER':([33,],[49,]),'DECIMAL_NUMBER':([33,],[50,]),'BOOLTRUE':([33,],[51,]),'BOOLFALSE':([33,],[52,]),'STRING':([33,66,],[53,73,]),'CHAR':([33,],[54,]),'READ':([33,],[55,]),'PLUS':([53,73,],[66,66,]),'LPARENT':([55,77,],[67,78,]),'RPARENT':([67,80,],[75,81,]),'CATCH':([72,],[77,]),'EXCEPTION':([78,],[79,]),'FINALLY':([84,],[85,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block_using':([0,],[2,]),'block_publicClass':([2,],[4,]),'block_code':([10,41,82,86,],[13,64,83,87,]),'def_const_or_var':([10,41,82,86,],[14,14,14,14,]),'block_try_catch':([10,41,82,86,],[15,15,15,15,]),'constant_assignation':([10,41,82,86,],[16,16,16,16,]),'variable_assignation':([10,41,82,86,],[17,17,17,17,]),'try_catch_simply':([10,41,82,86,],[18,18,18,18,]),'try_catch_finally':([10,41,82,86,],[19,19,19,19,]),'access_modifiers':([10,41,82,86,],[20,20,20,20,]),'data_type':([10,20,21,35,41,82,86,],[22,36,37,57,22,22,22,]),'multi_or_one_assignation':([10,22,36,37,41,42,57,82,86,],[23,38,58,60,23,65,68,23,23,]),'assignation_key_value':([10,22,36,37,41,42,57,82,86,],[32,32,32,32,32,32,32,32,32,]),'value':([33,],[44,]),'value_numeric':([33,],[45,]),'value_logic':([33,],[46,]),'value_string':([33,],[47,]),'concatenation':([33,66,],[56,74,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block_using block_publicClass','program',2,'p_program','sintactico.py',14),
  ('block_using -> USING SYSTEM DOTANDCOMMA','block_using',3,'p_block_using','sintactico.py',17),
  ('block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_code RKEY','block_publicClass',6,'p_block_publicClass','sintactico.py',20),
  ('block_code -> def_const_or_var','block_code',1,'p_block_code','sintactico.py',25),
  ('block_code -> block_try_catch','block_code',1,'p_block_code','sintactico.py',26),
  ('block_code -> VARIABLE','block_code',1,'p_block_code','sintactico.py',27),
  ('def_const_or_var -> constant_assignation','def_const_or_var',1,'p_def_const_or_var','sintactico.py',36),
  ('def_const_or_var -> variable_assignation','def_const_or_var',1,'p_def_const_or_var','sintactico.py',37),
  ('variable_assignation -> access_modifiers data_type multi_or_one_assignation DOTANDCOMMA','variable_assignation',4,'p_variable_assignation','sintactico.py',41),
  ('variable_assignation -> data_type multi_or_one_assignation DOTANDCOMMA','variable_assignation',3,'p_variable_assignation','sintactico.py',42),
  ('variable_assignation -> data_type VARIABLE DOTANDCOMMA','variable_assignation',3,'p_variable_assignation','sintactico.py',43),
  ('variable_assignation -> multi_or_one_assignation DOTANDCOMMA','variable_assignation',2,'p_variable_assignation','sintactico.py',44),
  ('constant_assignation -> access_modifiers CONST data_type multi_or_one_assignation DOTANDCOMMA','constant_assignation',5,'p_constant_assignation','sintactico.py',47),
  ('constant_assignation -> CONST data_type multi_or_one_assignation DOTANDCOMMA','constant_assignation',4,'p_constant_assignation','sintactico.py',48),
  ('constant_assignation -> CONST data_type VARIABLE DOTANDCOMMA','constant_assignation',4,'p_constant_assignation','sintactico.py',49),
  ('multi_or_one_assignation -> assignation_key_value','multi_or_one_assignation',1,'p_multi_or_one_assignation','sintactico.py',53),
  ('multi_or_one_assignation -> assignation_key_value COMMA multi_or_one_assignation','multi_or_one_assignation',3,'p_multi_or_one_assignation','sintactico.py',54),
  ('assignation_key_value -> VARIABLE ASSIGNATION value','assignation_key_value',3,'p_assignation_key_value','sintactico.py',58),
  ('data_type -> CHARTYPE','data_type',1,'p_data_type','sintactico.py',61),
  ('data_type -> STRINGTYPE','data_type',1,'p_data_type','sintactico.py',62),
  ('data_type -> FLOATTYPE','data_type',1,'p_data_type','sintactico.py',63),
  ('data_type -> DECIMALTYPE','data_type',1,'p_data_type','sintactico.py',64),
  ('data_type -> INTTYPE','data_type',1,'p_data_type','sintactico.py',65),
  ('data_type -> BOOLTYPE','data_type',1,'p_data_type','sintactico.py',66),
  ('value -> value_numeric','value',1,'p_value','sintactico.py',75),
  ('value -> value_logic','value',1,'p_value','sintactico.py',76),
  ('value -> value_string','value',1,'p_value','sintactico.py',77),
  ('value_string -> STRING','value_string',1,'p_value_string','sintactico.py',81),
  ('value_string -> CHAR','value_string',1,'p_value_string','sintactico.py',82),
  ('value_string -> VARIABLE','value_string',1,'p_value_string','sintactico.py',83),
  ('value_string -> READ LPARENT RPARENT','value_string',3,'p_value_string','sintactico.py',84),
  ('value_string -> concatenation','value_string',1,'p_value_string','sintactico.py',85),
  ('value_logic -> BOOLTRUE','value_logic',1,'p_value_logic','sintactico.py',89),
  ('value_logic -> BOOLFALSE','value_logic',1,'p_value_logic','sintactico.py',90),
  ('value_numeric -> INTEGER','value_numeric',1,'p_value_numeric','sintactico.py',94),
  ('value_numeric -> FLOAT_NUMBER','value_numeric',1,'p_value_numeric','sintactico.py',95),
  ('value_numeric -> DECIMAL_NUMBER','value_numeric',1,'p_value_numeric','sintactico.py',96),
  ('block_try_catch -> try_catch_simply','block_try_catch',1,'p_block_try_catch','sintactico.py',105),
  ('block_try_catch -> try_catch_finally','block_try_catch',1,'p_block_try_catch','sintactico.py',106),
  ('try_catch_simply -> TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEY','try_catch_simply',12,'p_try_catch_simply','sintactico.py',110),
  ('try_catch_finally -> TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEY FINALLY LKEY block_code RKEY','try_catch_finally',16,'p_try_catch_finally','sintactico.py',113),
  ('access_modifiers -> PUBLIC','access_modifiers',1,'p_access_modifiers','sintactico.py',117),
  ('access_modifiers -> PRIVATE','access_modifiers',1,'p_access_modifiers','sintactico.py',118),
  ('arithmetic_operation -> value_numeric','arithmetic_operation',1,'p_arithmetic_operation','sintactico.py',125),
  ('arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation','arithmetic_operation',3,'p_arithmetic_operation','sintactico.py',126),
  ('logic_operation -> value_logic','logic_operation',1,'p_logic_operation','sintactico.py',130),
  ('logic_operation -> value_logic logic_operator logic_operation','logic_operation',3,'p_logic_operation','sintactico.py',131),
  ('concatenation -> STRING','concatenation',1,'p_concatenation','sintactico.py',135),
  ('concatenation -> STRING PLUS concatenation','concatenation',3,'p_concatenation','sintactico.py',136),
  ('logic_operator -> GREATER_THAN','logic_operator',1,'p_logic_operator','sintactico.py',140),
  ('logic_operator -> SMALLER_THAN','logic_operator',1,'p_logic_operator','sintactico.py',141),
  ('logic_operator -> EQUAL_COMPARATION','logic_operator',1,'p_logic_operator','sintactico.py',142),
  ('logic_operator -> INEQUALITY','logic_operator',1,'p_logic_operator','sintactico.py',143),
  ('logic_operator -> GREATER_THAN_OR_EQUAL','logic_operator',1,'p_logic_operator','sintactico.py',144),
  ('logic_operator -> SMALLER_THAN_OR_EQUAL','logic_operator',1,'p_logic_operator','sintactico.py',145),
  ('logic_operator -> LOGICAND','logic_operator',1,'p_logic_operator','sintactico.py',146),
  ('logic_operator -> LOGICOR','logic_operator',1,'p_logic_operator','sintactico.py',147),
  ('logic_operator -> LOGICNOT','logic_operator',1,'p_logic_operator','sintactico.py',148),
  ('logic_operator -> LOGICXOR','logic_operator',1,'p_logic_operator','sintactico.py',149),
  ('arithmetic_operator -> PLUS','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',153),
  ('arithmetic_operator -> MINUS','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',154),
  ('arithmetic_operator -> TIMES','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',155),
  ('arithmetic_operator -> DIVIDE','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',156),
  ('arithmetic_operator -> PERCENT','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',157),
  ('variable_assignation_multiline -> <empty>','variable_assignation_multiline',0,'p_variable_assignation_multiline','sintactico.py',164),
]
