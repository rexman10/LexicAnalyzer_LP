
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADDITION_ASSIGNMENT ASSIGNATION BACK_SLASH BOOL BOOLFALSE BOOLTRUE BOOLTYPE BREAK CATCH CHAR CHARTYPE CLASS COMMA CONST DECIMALTYPE DECIMAL_NUMBER DECREMENT DIVIDE DIVISION_ASSIGNMENT DOLLARSIGN DOT DOTANDCOMMA DOUBLEPOINT DOUBLE_QUOTATION_MARKS ELSE EQUAL_COMPARATION EXCEPTION FINALLY FLOATTYPE FLOAT_NUMBER FOR GREATER_THAN GREATER_THAN_OR_EQUAL IF INCREMENT INEQUALITY INTEGER INTTYPE JUMP_LINE LBRACKET LIST LKEY LOGICAND LOGICNOT LOGICOR LOGICXOR LONG LPARENT MINUS MODULE_ASSIGNMENT MULTIPLICATION_ASSIGNMENT NAMESPACE NEW PERCENT PIPE PLUS PRINT PRIVATE PUBLIC RBRACKET READ RETURN RKEY RPARENT SIPLE_QUOTATION_MARKS SMALLER_THAN SMALLER_THAN_OR_EQUAL STATIC STRING STRINGTYPE SUBTRACTION_ASSIGNMENT SWITCH SYSTEM TABULATION TIMES TRY USING VARIABLE VOID WHILEprogram : block_using block_publicClassblock_using : USING SYSTEM DOTANDCOMMAblock_publicClass : PUBLIC CLASS VARIABLE LKEY block_code RKEYblock_code : def_const_or_var\n                    | estruct_of_data\n                    | block_try_catch\n                    | VARIABLE\n    def_const_or_var : constant_assignation\n                        | variable_assignation\n    variable_assignation : access_modifiers all_asignations\n                            | all_asignations\n\n    constant_assignation : access_modifiers CONST all_asignations\n                            | CONST all_asignations\n                            | CONST data_type assignation_key_value COMMA some_assignation_constant\n    all_asignations : assignation_with_datatype\n                        | assignation_without_datatype\n    assignation_with_datatype : data_type assignation_key_value DOTANDCOMMA\n                            | data_type assignation_key_value DOTANDCOMMA assignation_with_datatype   \n                            | data_type assignation_key_value DOTANDCOMMA assignation_without_datatype                     \n    assignation_without_datatype : assignation_key_value DOTANDCOMMA\n                                    | assignation_key_value DOTANDCOMMA assignation_without_datatype\n                                    | assignation_key_value DOTANDCOMMA assignation_with_datatype\n    some_assignation_constant : assignation_key_value DOTANDCOMMA\n                                | assignation_key_value COMMA some_assignation_constant\n    assignation_key_value : VARIABLE ASSIGNATION valuedata_type    : CHARTYPE\n                    | STRINGTYPE\n                    | FLOATTYPE\n                    | DECIMALTYPE\n                    | INTTYPE\n                    | BOOLTYPE\n    value    : value_numeric\n                | value_logic\n                | value_string\n    value_string : STRING\n                    | CHAR\n                    | VARIABLE\n                    | READ LPARENT RPARENT\n                    | concatenation\n    value_logic  : BOOLTRUE\n                    | BOOLFALSE\n    value_numeric    : INTEGER\n                        | FLOAT_NUMBER\n                        | DECIMAL_NUMBER\n    block_try_catch : try_catch_simply\n                        | try_catch_finally\n    try_catch_simply : TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEYtry_catch_finally : TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEY FINALLY LKEY block_code RKEYaccess_modifiers : PUBLIC\n                        | PRIVATE\n    arithmetic_operation : value_numeric\n                            | value_numeric arithmetic_operator arithmetic_operation\n    logic_operation  : value_logic\n                        | value_logic logic_operator logic_operation\n    concatenation    : STRING\n                        | STRING PLUS concatenation\n    logic_operator   : GREATER_THAN\n                        | SMALLER_THAN\n                        | EQUAL_COMPARATION\n                        | INEQUALITY\n                        | GREATER_THAN_OR_EQUAL\n                        | SMALLER_THAN_OR_EQUAL\n                        | LOGICAND\n                        | LOGICOR\n                        | LOGICNOT\n                        | LOGICXOR\n    arithmetic_operator  : PLUS\n                            | MINUS\n                            | TIMES\n                            | DIVIDE\n                            | PERCENT\n    variable_assignation_multiline   : \n    estruct_of_data : list_empty\n                        | list_full\n    list_empty : LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA\n                    | LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA\n    list_full : LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY VARIABLE RKEY\n                    | LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY VARIABLE RKEY\n    '
    
_lr_action_items = {'USING':([0,],[3,]),'$end':([1,4,40,],[0,-1,-3,]),'PUBLIC':([2,8,10,49,105,119,],[5,-2,11,11,11,11,]),'SYSTEM':([3,],[6,]),'CLASS':([5,],[7,]),'DOTANDCOMMA':([6,27,46,50,51,52,53,54,55,56,57,58,59,60,61,63,65,80,81,82,83,112,113,],[8,47,66,-37,-25,-32,-33,-34,-42,-43,-44,-40,-41,-35,-36,-39,66,-55,-56,-38,88,115,117,]),'VARIABLE':([7,10,11,23,24,26,29,30,32,35,36,37,38,39,41,45,47,49,66,74,77,78,89,96,105,116,118,119,],[9,12,-49,43,43,43,-27,-30,-50,-26,-28,-29,-31,50,43,43,43,12,43,43,85,86,43,99,12,120,121,12,]),'LKEY':([9,31,102,112,113,114,],[10,49,105,116,118,119,]),'CONST':([10,11,23,32,49,105,119,],[24,-49,41,-50,24,24,24,]),'LIST':([10,49,94,95,105,119,],[28,28,97,98,28,28,]),'TRY':([10,49,105,119,],[31,31,31,31,]),'PRIVATE':([10,49,105,119,],[32,32,32,32,]),'CHARTYPE':([10,11,23,24,32,41,47,49,66,105,119,],[35,-49,35,35,-50,35,35,35,35,35,35,]),'STRINGTYPE':([10,11,23,24,32,41,47,48,49,66,100,105,119,],[29,-49,29,29,-50,29,29,69,29,29,103,29,29,]),'FLOATTYPE':([10,11,23,24,32,41,47,49,66,105,119,],[36,-49,36,36,-50,36,36,36,36,36,36,]),'DECIMALTYPE':([10,11,23,24,32,41,47,49,66,105,119,],[37,-49,37,37,-50,37,37,37,37,37,37,]),'INTTYPE':([10,11,23,24,32,41,47,48,49,66,101,105,119,],[30,-49,30,30,-50,30,30,70,30,30,104,30,30,]),'BOOLTYPE':([10,11,23,24,32,41,47,49,66,105,119,],[38,-49,38,38,-50,38,38,38,38,38,38,]),'RKEY':([12,13,14,15,16,17,18,19,20,21,22,25,33,34,42,44,47,64,66,67,68,71,75,76,84,88,93,108,111,115,117,120,121,122,123,124,125,],[-7,40,-4,-5,-6,-8,-9,-73,-74,-45,-46,-11,-15,-16,-10,-13,-20,-12,-17,-21,-22,79,-18,-19,-14,-23,-24,111,-47,-75,-76,123,124,125,-77,-78,-48,]),'ASSIGNATION':([12,43,85,86,],[39,39,90,91,]),'SMALLER_THAN':([28,97,98,],[48,100,101,]),'INTEGER':([39,],[55,]),'FLOAT_NUMBER':([39,],[56,]),'DECIMAL_NUMBER':([39,],[57,]),'BOOLTRUE':([39,],[58,]),'BOOLFALSE':([39,],[59,]),'STRING':([39,72,],[60,80,]),'CHAR':([39,],[61,]),'READ':([39,],[62,]),'COMMA':([50,51,52,53,54,55,56,57,58,59,60,61,63,65,80,81,82,83,],[-37,-25,-32,-33,-34,-42,-43,-44,-40,-41,-35,-36,-39,74,-55,-56,-38,89,]),'PLUS':([60,80,],[72,72,]),'LPARENT':([62,87,106,107,],[73,92,109,110,]),'GREATER_THAN':([69,70,103,104,],[77,78,106,107,]),'RPARENT':([73,99,109,110,],[82,102,112,113,]),'CATCH':([79,],[87,]),'NEW':([90,91,],[94,95,]),'EXCEPTION':([92,],[96,]),'FINALLY':([111,],[114,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block_using':([0,],[2,]),'block_publicClass':([2,],[4,]),'block_code':([10,49,105,119,],[13,71,108,122,]),'def_const_or_var':([10,49,105,119,],[14,14,14,14,]),'estruct_of_data':([10,49,105,119,],[15,15,15,15,]),'block_try_catch':([10,49,105,119,],[16,16,16,16,]),'constant_assignation':([10,49,105,119,],[17,17,17,17,]),'variable_assignation':([10,49,105,119,],[18,18,18,18,]),'list_empty':([10,49,105,119,],[19,19,19,19,]),'list_full':([10,49,105,119,],[20,20,20,20,]),'try_catch_simply':([10,49,105,119,],[21,21,21,21,]),'try_catch_finally':([10,49,105,119,],[22,22,22,22,]),'access_modifiers':([10,49,105,119,],[23,23,23,23,]),'all_asignations':([10,23,24,41,49,105,119,],[25,42,44,64,25,25,25,]),'data_type':([10,23,24,41,47,49,66,105,119,],[26,26,45,26,26,26,26,26,26,]),'assignation_key_value':([10,23,24,26,41,45,47,49,66,74,89,105,119,],[27,27,27,46,27,65,27,27,27,83,83,27,27,]),'assignation_with_datatype':([10,23,24,41,47,49,66,105,119,],[33,33,33,33,68,33,75,33,33,]),'assignation_without_datatype':([10,23,24,41,47,49,66,105,119,],[34,34,34,34,67,34,76,34,34,]),'value':([39,],[51,]),'value_numeric':([39,],[52,]),'value_logic':([39,],[53,]),'value_string':([39,],[54,]),'concatenation':([39,72,],[63,81,]),'some_assignation_constant':([74,89,],[84,93,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block_using block_publicClass','program',2,'p_program','sintactico.py',24),
  ('block_using -> USING SYSTEM DOTANDCOMMA','block_using',3,'p_block_using','sintactico.py',27),
  ('block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_code RKEY','block_publicClass',6,'p_block_publicClass','sintactico.py',30),
  ('block_code -> def_const_or_var','block_code',1,'p_block_code','sintactico.py',35),
  ('block_code -> estruct_of_data','block_code',1,'p_block_code','sintactico.py',36),
  ('block_code -> block_try_catch','block_code',1,'p_block_code','sintactico.py',37),
  ('block_code -> VARIABLE','block_code',1,'p_block_code','sintactico.py',38),
  ('def_const_or_var -> constant_assignation','def_const_or_var',1,'p_def_const_or_var','sintactico.py',47),
  ('def_const_or_var -> variable_assignation','def_const_or_var',1,'p_def_const_or_var','sintactico.py',48),
  ('variable_assignation -> access_modifiers all_asignations','variable_assignation',2,'p_variable_assignation','sintactico.py',52),
  ('variable_assignation -> all_asignations','variable_assignation',1,'p_variable_assignation','sintactico.py',53),
  ('constant_assignation -> access_modifiers CONST all_asignations','constant_assignation',3,'p_constant_assignation','sintactico.py',58),
  ('constant_assignation -> CONST all_asignations','constant_assignation',2,'p_constant_assignation','sintactico.py',59),
  ('constant_assignation -> CONST data_type assignation_key_value COMMA some_assignation_constant','constant_assignation',5,'p_constant_assignation','sintactico.py',60),
  ('all_asignations -> assignation_with_datatype','all_asignations',1,'p_all_asignations','sintactico.py',64),
  ('all_asignations -> assignation_without_datatype','all_asignations',1,'p_all_asignations','sintactico.py',65),
  ('assignation_with_datatype -> data_type assignation_key_value DOTANDCOMMA','assignation_with_datatype',3,'p_assignation_with_datatype','sintactico.py',69),
  ('assignation_with_datatype -> data_type assignation_key_value DOTANDCOMMA assignation_with_datatype','assignation_with_datatype',4,'p_assignation_with_datatype','sintactico.py',70),
  ('assignation_with_datatype -> data_type assignation_key_value DOTANDCOMMA assignation_without_datatype','assignation_with_datatype',4,'p_assignation_with_datatype','sintactico.py',71),
  ('assignation_without_datatype -> assignation_key_value DOTANDCOMMA','assignation_without_datatype',2,'p_assignation_without_datatype','sintactico.py',75),
  ('assignation_without_datatype -> assignation_key_value DOTANDCOMMA assignation_without_datatype','assignation_without_datatype',3,'p_assignation_without_datatype','sintactico.py',76),
  ('assignation_without_datatype -> assignation_key_value DOTANDCOMMA assignation_with_datatype','assignation_without_datatype',3,'p_assignation_without_datatype','sintactico.py',77),
  ('some_assignation_constant -> assignation_key_value DOTANDCOMMA','some_assignation_constant',2,'p_some_assignation_constant','sintactico.py',81),
  ('some_assignation_constant -> assignation_key_value COMMA some_assignation_constant','some_assignation_constant',3,'p_some_assignation_constant','sintactico.py',82),
  ('assignation_key_value -> VARIABLE ASSIGNATION value','assignation_key_value',3,'p_assignation_key_value','sintactico.py',86),
  ('data_type -> CHARTYPE','data_type',1,'p_data_type','sintactico.py',89),
  ('data_type -> STRINGTYPE','data_type',1,'p_data_type','sintactico.py',90),
  ('data_type -> FLOATTYPE','data_type',1,'p_data_type','sintactico.py',91),
  ('data_type -> DECIMALTYPE','data_type',1,'p_data_type','sintactico.py',92),
  ('data_type -> INTTYPE','data_type',1,'p_data_type','sintactico.py',93),
  ('data_type -> BOOLTYPE','data_type',1,'p_data_type','sintactico.py',94),
  ('value -> value_numeric','value',1,'p_value','sintactico.py',103),
  ('value -> value_logic','value',1,'p_value','sintactico.py',104),
  ('value -> value_string','value',1,'p_value','sintactico.py',105),
  ('value_string -> STRING','value_string',1,'p_value_string','sintactico.py',109),
  ('value_string -> CHAR','value_string',1,'p_value_string','sintactico.py',110),
  ('value_string -> VARIABLE','value_string',1,'p_value_string','sintactico.py',111),
  ('value_string -> READ LPARENT RPARENT','value_string',3,'p_value_string','sintactico.py',112),
  ('value_string -> concatenation','value_string',1,'p_value_string','sintactico.py',113),
  ('value_logic -> BOOLTRUE','value_logic',1,'p_value_logic','sintactico.py',117),
  ('value_logic -> BOOLFALSE','value_logic',1,'p_value_logic','sintactico.py',118),
  ('value_numeric -> INTEGER','value_numeric',1,'p_value_numeric','sintactico.py',122),
  ('value_numeric -> FLOAT_NUMBER','value_numeric',1,'p_value_numeric','sintactico.py',123),
  ('value_numeric -> DECIMAL_NUMBER','value_numeric',1,'p_value_numeric','sintactico.py',124),
  ('block_try_catch -> try_catch_simply','block_try_catch',1,'p_block_try_catch','sintactico.py',133),
  ('block_try_catch -> try_catch_finally','block_try_catch',1,'p_block_try_catch','sintactico.py',134),
  ('try_catch_simply -> TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEY','try_catch_simply',12,'p_try_catch_simply','sintactico.py',138),
  ('try_catch_finally -> TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEY FINALLY LKEY block_code RKEY','try_catch_finally',16,'p_try_catch_finally','sintactico.py',141),
  ('access_modifiers -> PUBLIC','access_modifiers',1,'p_access_modifiers','sintactico.py',145),
  ('access_modifiers -> PRIVATE','access_modifiers',1,'p_access_modifiers','sintactico.py',146),
  ('arithmetic_operation -> value_numeric','arithmetic_operation',1,'p_arithmetic_operation','sintactico.py',156),
  ('arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation','arithmetic_operation',3,'p_arithmetic_operation','sintactico.py',157),
  ('logic_operation -> value_logic','logic_operation',1,'p_logic_operation','sintactico.py',161),
  ('logic_operation -> value_logic logic_operator logic_operation','logic_operation',3,'p_logic_operation','sintactico.py',162),
  ('concatenation -> STRING','concatenation',1,'p_concatenation','sintactico.py',166),
  ('concatenation -> STRING PLUS concatenation','concatenation',3,'p_concatenation','sintactico.py',167),
  ('logic_operator -> GREATER_THAN','logic_operator',1,'p_logic_operator','sintactico.py',171),
  ('logic_operator -> SMALLER_THAN','logic_operator',1,'p_logic_operator','sintactico.py',172),
  ('logic_operator -> EQUAL_COMPARATION','logic_operator',1,'p_logic_operator','sintactico.py',173),
  ('logic_operator -> INEQUALITY','logic_operator',1,'p_logic_operator','sintactico.py',174),
  ('logic_operator -> GREATER_THAN_OR_EQUAL','logic_operator',1,'p_logic_operator','sintactico.py',175),
  ('logic_operator -> SMALLER_THAN_OR_EQUAL','logic_operator',1,'p_logic_operator','sintactico.py',176),
  ('logic_operator -> LOGICAND','logic_operator',1,'p_logic_operator','sintactico.py',177),
  ('logic_operator -> LOGICOR','logic_operator',1,'p_logic_operator','sintactico.py',178),
  ('logic_operator -> LOGICNOT','logic_operator',1,'p_logic_operator','sintactico.py',179),
  ('logic_operator -> LOGICXOR','logic_operator',1,'p_logic_operator','sintactico.py',180),
  ('arithmetic_operator -> PLUS','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',184),
  ('arithmetic_operator -> MINUS','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',185),
  ('arithmetic_operator -> TIMES','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',186),
  ('arithmetic_operator -> DIVIDE','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',187),
  ('arithmetic_operator -> PERCENT','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',188),
  ('variable_assignation_multiline -> <empty>','variable_assignation_multiline',0,'p_variable_assignation_multiline','sintactico.py',192),
  ('estruct_of_data -> list_empty','estruct_of_data',1,'p_estruct_of_data','sintactico.py',245),
  ('estruct_of_data -> list_full','estruct_of_data',1,'p_estruct_of_data','sintactico.py',246),
  ('list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA','list_empty',14,'p_list_empty','sintactico.py',250),
  ('list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA','list_empty',14,'p_list_empty','sintactico.py',251),
  ('list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY VARIABLE RKEY','list_full',16,'p_list_full','sintactico.py',255),
  ('list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY VARIABLE RKEY','list_full',16,'p_list_full','sintactico.py',256),
]
