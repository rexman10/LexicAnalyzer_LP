
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ACTION ADD ADDITION_ASSIGNMENT ARROW ASSIGNATION ASYNC AWAIT BACK_SLASH BOOL BOOLFALSE BOOLTRUE BOOLTYPE BREAK CATCH CHAR CHARTYPE CLASS CLEAR COMMA CONST COUNT DECIMALTYPE DECIMAL_NUMBER DECREMENT DEQUEUE DICTIONARY DIVIDE DIVISION_ASSIGNMENT DO DOLLARSIGN DOT DOTANDCOMMA DOUBLEPOINT DOUBLE_QUOTATION_MARKS ELSE ELSE_IF ENQUEUE EQUAL_COMPARATION EXCEPTION FINALLY FLOATTYPE FLOAT_NUMBER FOR FOREACH GREATER_THAN GREATER_THAN_OR_EQUAL ID IF IN INCREMENT INEQUALITY INTEGER INTTYPE ISEMPTY JUMP_LINE LBRACKET LIST LKEY LOGICAND LOGICNOT LOGICOR LOGICXOR LONG LPARENT METHOD MINUS MODULE_ASSIGNMENT MULTIPLICATION_ASSIGNMENT NAMESPACE NEW PEEK PERCENT PIPE PLUS POP PRINT PRIVATE PUBLIC PUSH PUT QUEUE RBRACKET READ REMOVE REMOVEAT RETURN RKEY RPARENT SIPLE_QUOTATION_MARKS SMALLER_THAN SMALLER_THAN_OR_EQUAL STACK STATIC STRING STRINGTYPE SUBTRACTION_ASSIGNMENT SWITCH SYSTEM TABULATION TASK TIMES TRY USING VARIABLE VOID WHILEprogram                    : USING SYSTEM DOTANDCOMMA block_publicClassblock_publicClass          : PUBLIC CLASS VARIABLE LKEY all_block_code RKEYblock_code               : def_const_or_var\n                                | print_data\n                                | read_data\n                                | arithmetic_operation\n                                | logic_operation\n\n                                | lists\n                                | functions_list\n\n                                | dict_estruct\n                                | functions_dict\n\n                                | block_for\n\n                                | block_try_catch\n\n                                | block_while\n    all_block_code           : block_code\n                                | block_code all_block_code  \n    print_data               : PRINT LPARENT STRING RPARENT DOTANDCOMMA\n    read_data                : READ LPARENT RPARENT DOTANDCOMMA\n    concatenation            : STRING\n                                | STRING PLUS concatenation\n    value                    : value_numeric\n                                | value_logic\n                                | value_string\n                                | read_data\n    value_string             : STRING\n                                | CHAR\n                                | VARIABLE\n                                | concatenation\n    value_logic              : BOOLTRUE\n                                | BOOLFALSE\n                                | logic_operation\n    value_numeric            : INTEGER\n                                | FLOAT_NUMBER\n                                | DECIMAL_NUMBER\n                                | arithmetic_operation\n    arithmetic_operation     : value_numeric\n                                | VARIABLE\n                                | value_numeric arithmetic_operator arithmetic_operation\n                                | VARIABLE arithmetic_operator arithmetic_operation\n    logic_operation          : value_numeric\n                                | VARIABLE\n                                | value_numeric logic_operator logic_operation\n                                | VARIABLE logic_operator logic_operation\n    logic_operator           : GREATER_THAN\n                                | SMALLER_THAN\n                                | EQUAL_COMPARATION\n                                | INEQUALITY\n                                | GREATER_THAN_OR_EQUAL\n                                | SMALLER_THAN_OR_EQUAL\n                                | LOGICAND\n                                | LOGICOR\n                                | LOGICNOT\n                                | LOGICXOR\n    arithmetic_operator      : PLUS\n                                | MINUS\n                                | TIMES\n                                | DIVIDE\n                                | PERCENT\n    access_modifiers         : PUBLIC\n                                | PRIVATE\n    def_const_or_var         : constant_assignation\n                                | variable_assignation\n                                | late_initialization\n    constant_assignation     : access_modifiers CONST data_type assignation_key_value DOTANDCOMMA\n                                | CONST data_type assignation_key_value DOTANDCOMMA\n                                | access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA\n                                | CONST data_type assignation_key_value_multiple DOTANDCOMMA\n    variable_assignation     : access_modifiers data_type assignation_key_value DOTANDCOMMA\n                                | data_type assignation_key_value DOTANDCOMMA\n                                | access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA\n                                | data_type assignation_key_value_multiple DOTANDCOMMA\n    late_initialization      : access_modifiers VARIABLE DOTANDCOMMA\n                                | VARIABLE DOTANDCOMMA\n                                | assignation_key_value DOTANDCOMMA\n    assignation_key_value    : VARIABLE ASSIGNATION value\n                                | READ LPARENT RPARENT\n    assignation_key_value_multiple   : VARIABLE ASSIGNATION value\n                                        | VARIABLE ASSIGNATION value COMMA assignation_key_value_multiple   \n    assignation_with_datatype        : data_type assignation_key_value DOTANDCOMMA\n                                        | data_type assignation_key_value DOTANDCOMMA assignation_with_datatype                    \n    data_type                : CHARTYPE\n                                | STRINGTYPE\n                                | FLOATTYPE\n                                | DECIMALTYPE\n                                | INTTYPE\n                                | BOOLTYPE\n    block_for                : for_anidado\n                                | for_each\n    for_simple               : FOR LPARENT assignation_with_datatype logic_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY\n                                | FOR LPARENT assignation_with_datatype logic_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY\n\n    for_anidado              : for_simple\n                                | FOR LPARENT assignation_with_datatype logic_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY\n                                | FOR LPARENT assignation_with_datatype logic_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY \n    for_each                 : FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY\n    block_try_catch          : try_catch_simply\n                                | try_catch_finally\n    try_catch_simply           : TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEYtry_catch_finally          : TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEYblock_while              : normal_while\n                                | do_while             \n    normal_while               : WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEYdo_while                   : DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENTblock_if                   : IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if\n    other_if                    : ELSE LKEY not_yes_nested_if RKEY\n                                | ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if\n    \n    not_yes_nested_if           : block_if\n                                | block_code\n    \n    dict_estruct                : dict_empty\n                                | dict_full\n    \n    dict_empty                  : DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA\n    \n    dict_full                   : DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY dictionary_value RKEY DOTANDCOMMA\n    dictionary_value         : LKEY key_value_pair RKEY\n    key_value_pairs          : key_value_pair\n                                | key_value_pair COMMA key_value_pairs\n    key_value_pair           : STRING DOUBLEPOINT valueHash\n    valueHash                : INTTYPE\n    estruct_of_data          : list_empty\n                                | list_full\n    \n    functions_dict              : dict_func_put\n                                | dict_func_remove\n    \n    dict_func_put               : VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA\n    \n    dict_func_remove            : VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA\n     lists                   : list_empty\n                                | list_full\n    list_empty               : LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA\n                                | LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA\n    list_full                : LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY\n                                | LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY\n    strings_list             : STRING\n                                | STRING COMMA strings_list\n    ints_list                : INTEGER\n                                | INTEGER COMMA ints_list\n    functions_list           : list_func_clear\n                                | list_func_count\n                                | list_func_add\n                                | list_func_removeat\n    list_func_clear            : VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMAlist_func_count            : VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMAlist_func_add              : VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMAlist_func_removeat         : VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMAstack_assignation          : STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMAstack_push                 : VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMAstack_pop                  : VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMAqueue_struct             : QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA\n    queue_enqueue            : VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA\n    queue_dequeue            : VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA\n    queue_clear              : VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA\n    queue_clear              : VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA\n    queue_isEmpty            : VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA\n    declaration_async    : PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY\n    declaration_lambda : ACTION SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION VARIABLE ARROW LKEY block_code RKEY'
    
_lr_action_items = {'USING':([0,],[2,]),'$end':([1,5,90,],[0,-1,-2,]),'SYSTEM':([2,],[3,]),'DOTANDCOMMA':([3,11,51,52,53,54,98,100,101,112,113,114,115,116,117,118,125,126,127,128,129,130,131,132,133,134,135,136,139,140,141,143,144,146,147,169,170,171,172,177,178,182,183,189,190,195,196,197,213,214,216,218,242,243,271,282,283,293,],[4,72,104,-32,-33,-34,145,148,149,-37,-35,-36,-37,-43,-36,-35,-27,-75,-21,-22,-23,-24,-29,-30,-31,-19,-26,-28,170,-35,-42,173,174,175,176,198,-18,199,200,-75,-76,205,206,211,212,-19,-20,170,228,229,231,-78,252,-77,279,287,289,301,]),'PUBLIC':([4,9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,52,53,54,59,72,104,109,111,112,113,114,115,116,117,118,140,141,145,148,149,170,173,174,175,176,198,199,200,209,211,212,228,229,231,240,249,251,252,256,257,263,265,267,268,272,273,274,275,279,281,287,289,294,301,303,305,309,],[6,10,-37,10,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-62,-63,-36,-123,-124,-133,-134,-135,-136,-108,-109,-119,-120,-87,-88,-95,-96,-99,-100,-32,-33,-34,-91,-73,-74,10,10,-37,-35,-36,-37,-43,-36,-35,-35,-42,-72,-69,-71,-18,-68,-70,-65,-67,-17,-64,-66,10,-137,-138,-139,-140,-122,-101,10,-102,-121,10,10,-87,-87,-94,10,-92,-89,-93,-90,-110,-97,-125,-126,10,-111,-127,-128,-98,]),'CLASS':([6,],[7,]),'VARIABLE':([7,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,52,53,54,56,57,59,65,66,67,68,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,94,95,97,99,104,109,110,111,112,113,114,115,116,117,118,140,141,142,145,148,149,150,154,155,156,157,166,170,173,174,175,176,179,180,198,199,200,201,205,206,207,209,211,212,215,223,227,228,229,231,232,239,240,249,251,252,256,257,263,265,267,268,272,273,274,275,279,281,287,289,294,301,303,305,309,],[8,11,-59,-37,11,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-62,-63,-36,-123,-124,-133,-134,-135,-136,-108,-109,-119,-120,-87,-88,-95,-96,-99,-100,98,102,-32,-33,-34,-82,-85,-91,-60,-81,-83,-84,-86,112,115,-73,125,-54,-55,-56,-57,-58,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,112,115,102,102,-74,11,115,11,-37,-35,-36,-37,-43,-36,-35,-35,-42,102,-72,-69,-71,125,181,115,184,185,194,-18,-68,-70,-65,-67,202,203,-17,-64,-66,217,222,-79,224,11,-137,-138,230,-80,115,-139,-140,-122,125,250,-101,11,-102,-121,11,11,-87,-87,-94,11,-92,-89,-93,-90,-110,-97,-125,-126,11,-111,-127,-128,-98,]),'LKEY':([8,62,64,187,238,247,248,259,271,280,282,283,286,],[9,109,111,209,249,256,257,268,280,284,288,290,294,]),'PRINT':([9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,52,53,54,59,72,104,109,111,112,113,114,115,116,117,118,140,141,145,148,149,170,173,174,175,176,198,199,200,209,211,212,228,229,231,240,249,251,252,256,257,263,265,267,268,272,273,274,275,279,281,287,289,294,301,303,305,309,],[29,-37,29,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-62,-63,-36,-123,-124,-133,-134,-135,-136,-108,-109,-119,-120,-87,-88,-95,-96,-99,-100,-32,-33,-34,-91,-73,-74,29,29,-37,-35,-36,-37,-43,-36,-35,-35,-42,-72,-69,-71,-18,-68,-70,-65,-67,-17,-64,-66,29,-137,-138,-139,-140,-122,-101,29,-102,-121,29,29,-87,-87,-94,29,-92,-89,-93,-90,-110,-97,-125,-126,29,-111,-127,-128,-98,]),'READ':([9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,50,52,53,54,56,57,59,66,67,68,69,72,74,97,99,104,109,111,112,113,114,115,116,117,118,140,141,142,145,148,149,150,156,170,173,174,175,176,198,199,200,209,211,212,228,229,231,232,240,249,251,252,256,257,263,265,267,268,272,273,274,275,279,281,287,289,294,301,303,305,309,],[30,-37,30,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-62,-63,-36,-123,-124,-133,-134,-135,-136,-108,-109,-119,-120,-87,-88,-95,-96,-99,-100,103,-32,-33,-34,-82,-85,-91,-81,-83,-84,-86,-73,137,103,103,-74,30,30,-37,-35,-36,-37,-43,-36,-35,-35,-42,103,-72,-69,-71,137,103,-18,-68,-70,-65,-67,-17,-64,-66,30,-137,-138,-139,-140,-122,137,-101,30,-102,-121,30,30,-87,-87,-94,30,-92,-89,-93,-90,-110,-97,-125,-126,30,-111,-127,-128,-98,]),'CONST':([9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,52,53,54,59,65,72,104,109,111,112,113,114,115,116,117,118,140,141,145,148,149,170,173,174,175,176,198,199,200,209,211,212,228,229,231,240,249,251,252,256,257,263,265,267,268,272,273,274,275,279,281,287,289,294,301,303,305,309,],[49,-59,-37,49,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-62,-63,-36,-123,-124,-133,-134,-135,-136,-108,-109,-119,-120,-87,-88,-95,-96,-99,-100,96,-32,-33,-34,-91,-60,-73,-74,49,49,-37,-35,-36,-37,-43,-36,-35,-35,-42,-72,-69,-71,-18,-68,-70,-65,-67,-17,-64,-66,49,-137,-138,-139,-140,-122,-101,49,-102,-121,49,49,-87,-87,-94,49,-92,-89,-93,-90,-110,-97,-125,-126,49,-111,-127,-128,-98,]),'INTEGER':([9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,52,53,54,59,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,94,95,104,109,110,111,112,113,114,115,116,117,118,140,141,145,148,149,150,155,164,170,173,174,175,176,198,199,200,206,209,211,212,223,227,228,229,231,232,240,249,251,252,256,257,263,265,267,268,272,273,274,275,279,281,287,289,290,294,301,303,305,306,309,],[52,-37,52,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-62,-63,-36,-123,-124,-133,-134,-135,-136,-108,-109,-119,-120,-87,-88,-95,-96,-99,-100,-32,-33,-34,-91,52,52,-73,52,-54,-55,-56,-57,-58,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,52,52,-74,52,52,52,-37,-35,-36,-37,-43,-36,-35,-35,-42,-72,-69,-71,52,52,192,-18,-68,-70,-65,-67,-17,-64,-66,-79,52,-137,-138,-80,52,-139,-140,-122,52,-101,52,-102,-121,52,52,-87,-87,-94,52,-92,-89,-93,-90,-110,-97,-125,-126,298,52,-111,-127,-128,298,-98,]),'FLOAT_NUMBER':([9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,52,53,54,59,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,94,95,104,109,110,111,112,113,114,115,116,117,118,140,141,145,148,149,150,155,170,173,174,175,176,198,199,200,206,209,211,212,223,227,228,229,231,232,240,249,251,252,256,257,263,265,267,268,272,273,274,275,279,281,287,289,294,301,303,305,309,],[53,-37,53,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-62,-63,-36,-123,-124,-133,-134,-135,-136,-108,-109,-119,-120,-87,-88,-95,-96,-99,-100,-32,-33,-34,-91,53,53,-73,53,-54,-55,-56,-57,-58,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,53,53,-74,53,53,53,-37,-35,-36,-37,-43,-36,-35,-35,-42,-72,-69,-71,53,53,-18,-68,-70,-65,-67,-17,-64,-66,-79,53,-137,-138,-80,53,-139,-140,-122,53,-101,53,-102,-121,53,53,-87,-87,-94,53,-92,-89,-93,-90,-110,-97,-125,-126,53,-111,-127,-128,-98,]),'DECIMAL_NUMBER':([9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,52,53,54,59,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,94,95,104,109,110,111,112,113,114,115,116,117,118,140,141,145,148,149,150,155,170,173,174,175,176,198,199,200,206,209,211,212,223,227,228,229,231,232,240,249,251,252,256,257,263,265,267,268,272,273,274,275,279,281,287,289,294,301,303,305,309,],[54,-37,54,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-62,-63,-36,-123,-124,-133,-134,-135,-136,-108,-109,-119,-120,-87,-88,-95,-96,-99,-100,-32,-33,-34,-91,54,54,-73,54,-54,-55,-56,-57,-58,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,54,54,-74,54,54,54,-37,-35,-36,-37,-43,-36,-35,-35,-42,-72,-69,-71,54,54,-18,-68,-70,-65,-67,-17,-64,-66,-79,54,-137,-138,-80,54,-139,-140,-122,54,-101,54,-102,-121,54,54,-87,-87,-94,54,-92,-89,-93,-90,-110,-97,-125,-126,54,-111,-127,-128,-98,]),'LIST':([9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,52,53,54,59,72,104,109,111,112,113,114,115,116,117,118,140,141,145,148,149,170,173,174,175,176,198,199,200,209,211,212,228,229,231,233,234,240,249,251,252,256,257,263,265,267,268,272,273,274,275,279,281,287,289,294,301,303,305,309,],[55,-37,55,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-62,-63,-36,-123,-124,-133,-134,-135,-136,-108,-109,-119,-120,-87,-88,-95,-96,-99,-100,-32,-33,-34,-91,-73,-74,55,55,-37,-35,-36,-37,-43,-36,-35,-35,-42,-72,-69,-71,-18,-68,-70,-65,-67,-17,-64,-66,55,-137,-138,-139,-140,-122,244,245,-101,55,-102,-121,55,55,-87,-87,-94,55,-92,-89,-93,-90,-110,-97,-125,-126,55,-111,-127,-128,-98,]),'DICTIONARY':([9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,52,53,54,59,72,104,109,111,112,113,114,115,116,117,118,140,141,145,148,149,170,173,174,175,176,198,199,200,209,211,212,221,228,229,231,240,249,251,252,256,257,263,265,267,268,272,273,274,275,279,281,287,289,294,301,303,305,309,],[58,-37,58,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-62,-63,-36,-123,-124,-133,-134,-135,-136,-108,-109,-119,-120,-87,-88,-95,-96,-99,-100,-32,-33,-34,-91,-73,-74,58,58,-37,-35,-36,-37,-43,-36,-35,-35,-42,-72,-69,-71,-18,-68,-70,-65,-67,-17,-64,-66,58,-137,-138,235,-139,-140,-122,-101,58,-102,-121,58,58,-87,-87,-94,58,-92,-89,-93,-90,-110,-97,-125,-126,58,-111,-127,-128,-98,]),'FOR':([9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,52,53,54,59,72,104,109,111,112,113,114,115,116,117,118,140,141,145,148,149,170,173,174,175,176,198,199,200,209,211,212,228,229,231,240,249,251,252,256,257,263,265,267,268,272,273,274,275,279,281,287,289,294,301,303,305,309,],[60,-37,60,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-62,-63,-36,-123,-124,-133,-134,-135,-136,-108,-109,-119,-120,-87,-88,-95,-96,-99,-100,-32,-33,-34,-91,-73,-74,60,60,-37,-35,-36,-37,-43,-36,-35,-35,-42,-72,-69,-71,-18,-68,-70,-65,-67,-17,-64,-66,60,-137,-138,-139,-140,-122,-101,60,-102,-121,60,60,-87,-87,-94,60,-92,-89,-93,-90,-110,-97,-125,-126,60,-111,-127,-128,-98,]),'FOREACH':([9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,52,53,54,59,72,104,109,111,112,113,114,115,116,117,118,140,141,145,148,149,170,173,174,175,176,198,199,200,209,211,212,228,229,231,240,249,251,252,256,257,263,265,267,268,272,273,274,275,279,281,287,289,294,301,303,305,309,],[61,-37,61,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-62,-63,-36,-123,-124,-133,-134,-135,-136,-108,-109,-119,-120,-87,-88,-95,-96,-99,-100,-32,-33,-34,-91,-73,-74,61,61,-37,-35,-36,-37,-43,-36,-35,-35,-42,-72,-69,-71,-18,-68,-70,-65,-67,-17,-64,-66,61,-137,-138,-139,-140,-122,-101,61,-102,-121,61,61,-87,-87,-94,61,-92,-89,-93,-90,-110,-97,-125,-126,61,-111,-127,-128,-98,]),'TRY':([9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,52,53,54,59,72,104,109,111,112,113,114,115,116,117,118,140,141,145,148,149,170,173,174,175,176,198,199,200,209,211,212,228,229,231,240,249,251,252,256,257,263,265,267,268,272,273,274,275,279,281,287,289,294,301,303,305,309,],[62,-37,62,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-62,-63,-36,-123,-124,-133,-134,-135,-136,-108,-109,-119,-120,-87,-88,-95,-96,-99,-100,-32,-33,-34,-91,-73,-74,62,62,-37,-35,-36,-37,-43,-36,-35,-35,-42,-72,-69,-71,-18,-68,-70,-65,-67,-17,-64,-66,62,-137,-138,-139,-140,-122,-101,62,-102,-121,62,62,-87,-87,-94,62,-92,-89,-93,-90,-110,-97,-125,-126,62,-111,-127,-128,-98,]),'WHILE':([9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,52,53,54,59,72,104,109,111,112,113,114,115,116,117,118,140,141,145,148,149,170,173,174,175,176,188,198,199,200,209,211,212,228,229,231,240,249,251,252,256,257,263,265,267,268,272,273,274,275,279,281,287,289,294,301,303,305,309,],[63,-37,63,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-62,-63,-36,-123,-124,-133,-134,-135,-136,-108,-109,-119,-120,-87,-88,-95,-96,-99,-100,-32,-33,-34,-91,-73,-74,63,63,-37,-35,-36,-37,-43,-36,-35,-35,-42,-72,-69,-71,-18,-68,-70,-65,-67,210,-17,-64,-66,63,-137,-138,-139,-140,-122,-101,63,-102,-121,63,63,-87,-87,-94,63,-92,-89,-93,-90,-110,-97,-125,-126,63,-111,-127,-128,-98,]),'DO':([9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,52,53,54,59,72,104,109,111,112,113,114,115,116,117,118,140,141,145,148,149,170,173,174,175,176,198,199,200,209,211,212,228,229,231,240,249,251,252,256,257,263,265,267,268,272,273,274,275,279,281,287,289,294,301,303,305,309,],[64,-37,64,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-62,-63,-36,-123,-124,-133,-134,-135,-136,-108,-109,-119,-120,-87,-88,-95,-96,-99,-100,-32,-33,-34,-91,-73,-74,64,64,-37,-35,-36,-37,-43,-36,-35,-35,-42,-72,-69,-71,-18,-68,-70,-65,-67,-17,-64,-66,64,-137,-138,-139,-140,-122,-101,64,-102,-121,64,64,-87,-87,-94,64,-92,-89,-93,-90,-110,-97,-125,-126,64,-111,-127,-128,-98,]),'PRIVATE':([9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,52,53,54,59,72,104,109,111,112,113,114,115,116,117,118,140,141,145,148,149,170,173,174,175,176,198,199,200,209,211,212,228,229,231,240,249,251,252,256,257,263,265,267,268,272,273,274,275,279,281,287,289,294,301,303,305,309,],[65,-37,65,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-62,-63,-36,-123,-124,-133,-134,-135,-136,-108,-109,-119,-120,-87,-88,-95,-96,-99,-100,-32,-33,-34,-91,-73,-74,65,65,-37,-35,-36,-37,-43,-36,-35,-35,-42,-72,-69,-71,-18,-68,-70,-65,-67,-17,-64,-66,65,-137,-138,-139,-140,-122,-101,65,-102,-121,65,65,-87,-87,-94,65,-92,-89,-93,-90,-110,-97,-125,-126,65,-111,-127,-128,-98,]),'CHARTYPE':([9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,52,53,54,59,65,72,96,104,107,108,109,111,112,113,114,115,116,117,118,140,141,145,148,149,170,173,174,175,176,198,199,200,206,209,211,212,228,229,231,240,249,251,252,256,257,263,265,267,268,272,273,274,275,279,281,287,289,294,301,303,305,309,],[66,-59,-37,66,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-62,-63,-36,-123,-124,-133,-134,-135,-136,-108,-109,-119,-120,-87,-88,-95,-96,-99,-100,66,66,-32,-33,-34,-91,-60,-73,66,-74,66,66,66,66,-37,-35,-36,-37,-43,-36,-35,-35,-42,-72,-69,-71,-18,-68,-70,-65,-67,-17,-64,-66,66,66,-137,-138,-139,-140,-122,-101,66,-102,-121,66,66,-87,-87,-94,66,-92,-89,-93,-90,-110,-97,-125,-126,66,-111,-127,-128,-98,]),'STRINGTYPE':([9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,52,53,54,59,65,72,96,104,105,107,108,109,111,112,113,114,115,116,117,118,140,141,145,148,149,170,173,174,175,176,198,199,200,206,209,211,212,228,229,231,240,249,251,252,253,256,257,263,265,267,268,272,273,274,275,279,281,287,289,294,301,303,305,309,],[56,-59,-37,56,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-62,-63,-36,-123,-124,-133,-134,-135,-136,-108,-109,-119,-120,-87,-88,-95,-96,-99,-100,56,56,-32,-33,-34,-91,-60,-73,56,-74,152,56,56,56,56,-37,-35,-36,-37,-43,-36,-35,-35,-42,-72,-69,-71,-18,-68,-70,-65,-67,-17,-64,-66,56,56,-137,-138,-139,-140,-122,-101,56,-102,-121,260,56,56,-87,-87,-94,56,-92,-89,-93,-90,-110,-97,-125,-126,56,-111,-127,-128,-98,]),'FLOATTYPE':([9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,52,53,54,59,65,72,96,104,107,108,109,111,112,113,114,115,116,117,118,140,141,145,148,149,170,173,174,175,176,198,199,200,206,209,211,212,228,229,231,240,249,251,252,256,257,263,265,267,268,272,273,274,275,279,281,287,289,294,301,303,305,309,],[67,-59,-37,67,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-62,-63,-36,-123,-124,-133,-134,-135,-136,-108,-109,-119,-120,-87,-88,-95,-96,-99,-100,67,67,-32,-33,-34,-91,-60,-73,67,-74,67,67,67,67,-37,-35,-36,-37,-43,-36,-35,-35,-42,-72,-69,-71,-18,-68,-70,-65,-67,-17,-64,-66,67,67,-137,-138,-139,-140,-122,-101,67,-102,-121,67,67,-87,-87,-94,67,-92,-89,-93,-90,-110,-97,-125,-126,67,-111,-127,-128,-98,]),'DECIMALTYPE':([9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,52,53,54,59,65,72,96,104,107,108,109,111,112,113,114,115,116,117,118,140,141,145,148,149,170,173,174,175,176,198,199,200,206,209,211,212,228,229,231,240,249,251,252,256,257,263,265,267,268,272,273,274,275,279,281,287,289,294,301,303,305,309,],[68,-59,-37,68,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-62,-63,-36,-123,-124,-133,-134,-135,-136,-108,-109,-119,-120,-87,-88,-95,-96,-99,-100,68,68,-32,-33,-34,-91,-60,-73,68,-74,68,68,68,68,-37,-35,-36,-37,-43,-36,-35,-35,-42,-72,-69,-71,-18,-68,-70,-65,-67,-17,-64,-66,68,68,-137,-138,-139,-140,-122,-101,68,-102,-121,68,68,-87,-87,-94,68,-92,-89,-93,-90,-110,-97,-125,-126,68,-111,-127,-128,-98,]),'INTTYPE':([9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,52,53,54,59,65,72,96,104,105,107,108,109,111,112,113,114,115,116,117,118,140,141,145,148,149,170,173,174,175,176,198,199,200,206,209,211,212,228,229,231,240,249,251,252,254,256,257,263,265,267,268,272,273,274,275,279,281,287,289,294,300,301,303,305,309,],[57,-59,-37,57,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-62,-63,-36,-123,-124,-133,-134,-135,-136,-108,-109,-119,-120,-87,-88,-95,-96,-99,-100,57,57,-32,-33,-34,-91,-60,-73,57,-74,153,57,57,57,57,-37,-35,-36,-37,-43,-36,-35,-35,-42,-72,-69,-71,-18,-68,-70,-65,-67,-17,-64,-66,57,57,-137,-138,-139,-140,-122,-101,57,-102,-121,261,57,57,-87,-87,-94,57,-92,-89,-93,-90,-110,-97,-125,-126,57,308,-111,-127,-128,-98,]),'BOOLTYPE':([9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,52,53,54,59,65,72,96,104,107,108,109,111,112,113,114,115,116,117,118,140,141,145,148,149,170,173,174,175,176,198,199,200,206,209,211,212,228,229,231,240,249,251,252,256,257,263,265,267,268,272,273,274,275,279,281,287,289,294,301,303,305,309,],[69,-59,-37,69,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-62,-63,-36,-123,-124,-133,-134,-135,-136,-108,-109,-119,-120,-87,-88,-95,-96,-99,-100,69,69,-32,-33,-34,-91,-60,-73,69,-74,69,69,69,69,-37,-35,-36,-37,-43,-36,-35,-35,-42,-72,-69,-71,-18,-68,-70,-65,-67,-17,-64,-66,69,69,-137,-138,-139,-140,-122,-101,69,-102,-121,69,69,-87,-87,-94,69,-92,-89,-93,-90,-110,-97,-125,-126,69,-111,-127,-128,-98,]),'RKEY':([11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,52,53,54,59,72,91,104,112,113,114,115,116,117,118,140,141,145,148,149,158,160,170,173,174,175,176,198,199,200,211,212,226,228,229,231,240,251,252,258,263,264,265,266,267,272,273,274,275,276,279,281,285,287,289,291,295,296,297,298,299,301,302,303,305,307,308,309,310,311,],[-37,90,-15,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-61,-62,-63,-36,-123,-124,-133,-134,-135,-136,-108,-109,-119,-120,-87,-88,-95,-96,-99,-100,-32,-33,-34,-91,-73,-16,-74,-37,-35,-36,-37,-43,-36,-35,-35,-42,-72,-69,-71,186,188,-18,-68,-70,-65,-67,-17,-64,-66,-137,-138,240,-139,-140,-122,-101,-102,-121,267,272,273,274,275,-94,-92,-89,-93,-90,281,-110,-97,293,-125,-126,299,303,-129,305,-131,-112,-111,309,-127,-128,-115,-116,-98,-130,-132,]),'PLUS':([11,17,31,52,53,54,112,113,114,115,117,118,125,127,134,140,195,],[75,-35,75,-32,-33,-34,75,-35,75,75,75,-35,75,75,167,-35,167,]),'MINUS':([11,17,31,52,53,54,112,113,114,115,117,118,125,127,140,],[76,-35,76,-32,-33,-34,76,-35,76,76,76,-35,76,76,-35,]),'TIMES':([11,17,31,52,53,54,112,113,114,115,117,118,125,127,140,],[77,-35,77,-32,-33,-34,77,-35,77,77,77,-35,77,77,-35,]),'DIVIDE':([11,17,31,52,53,54,112,113,114,115,117,118,125,127,140,],[78,-35,78,-32,-33,-34,78,-35,78,78,78,-35,78,78,-35,]),'PERCENT':([11,17,31,52,53,54,112,113,114,115,117,118,125,127,140,],[79,-35,79,-32,-33,-34,79,-35,79,79,79,-35,79,79,-35,]),'GREATER_THAN':([11,17,31,52,53,54,106,112,113,114,115,117,118,125,127,140,152,153,246,260,261,],[80,-35,80,-32,-33,-34,154,-37,-35,-36,80,80,-35,80,80,-35,179,180,255,269,270,]),'SMALLER_THAN':([11,17,31,52,53,54,55,58,112,113,114,115,117,118,125,127,140,235,244,245,],[81,-35,81,-32,-33,-34,105,106,-37,-35,-36,81,81,-35,81,81,-35,246,253,254,]),'EQUAL_COMPARATION':([11,17,31,52,53,54,112,113,114,115,117,118,125,127,140,],[82,-35,82,-32,-33,-34,-37,-35,-36,82,82,-35,82,82,-35,]),'INEQUALITY':([11,17,31,52,53,54,112,113,114,115,117,118,125,127,140,],[83,-35,83,-32,-33,-34,-37,-35,-36,83,83,-35,83,83,-35,]),'GREATER_THAN_OR_EQUAL':([11,17,31,52,53,54,112,113,114,115,117,118,125,127,140,],[84,-35,84,-32,-33,-34,-37,-35,-36,84,84,-35,84,84,-35,]),'SMALLER_THAN_OR_EQUAL':([11,17,31,52,53,54,112,113,114,115,117,118,125,127,140,],[85,-35,85,-32,-33,-34,-37,-35,-36,85,85,-35,85,85,-35,]),'LOGICAND':([11,17,31,52,53,54,112,113,114,115,117,118,125,127,140,],[86,-35,86,-32,-33,-34,-37,-35,-36,86,86,-35,86,86,-35,]),'LOGICOR':([11,17,31,52,53,54,112,113,114,115,117,118,125,127,140,],[87,-35,87,-32,-33,-34,-37,-35,-36,87,87,-35,87,87,-35,]),'LOGICNOT':([11,17,31,52,53,54,112,113,114,115,117,118,125,127,140,],[88,-35,88,-32,-33,-34,-37,-35,-36,88,88,-35,88,88,-35,]),'LOGICXOR':([11,17,31,52,53,54,112,113,114,115,117,118,125,127,140,],[89,-35,89,-32,-33,-34,-37,-35,-36,89,89,-35,89,89,-35,]),'DOT':([11,],[73,]),'ASSIGNATION':([11,102,181,184,202,203,217,],[74,150,204,74,219,220,232,]),'LPARENT':([29,30,60,61,63,103,119,120,121,122,123,124,137,208,210,255,269,270,],[92,93,107,108,110,151,161,162,163,164,165,166,168,225,227,262,277,278,]),'RPARENT':([52,53,54,93,112,113,114,115,116,117,118,138,140,141,151,159,161,162,168,191,192,194,224,230,236,237,241,250,262,277,278,],[-32,-33,-34,139,-37,-35,-36,-37,-43,-36,-35,169,-35,-42,178,187,189,190,197,213,214,216,238,242,247,248,251,259,271,282,283,]),'COMMA':([52,53,54,112,113,114,115,116,117,118,125,127,128,129,130,131,132,133,134,135,136,140,141,170,177,193,195,196,243,296,298,],[-32,-33,-34,-37,-35,-36,-37,-43,-36,-35,-27,-21,-22,-23,-24,-29,-30,-31,-19,-26,-28,-35,-42,-18,201,215,-19,-20,201,304,306,]),'CLEAR':([73,],[119,]),'COUNT':([73,],[120,]),'ADD':([73,],[121,]),'REMOVEAT':([73,],[122,]),'PUT':([73,],[123,]),'REMOVE':([73,],[124,]),'BOOLTRUE':([74,150,232,],[131,131,131,]),'BOOLFALSE':([74,150,232,],[132,132,132,]),'STRING':([74,92,150,163,165,167,232,284,288,304,],[134,138,134,191,193,195,134,292,296,296,]),'CHAR':([74,150,232,],[135,135,135,]),'IN':([185,],[207,]),'CATCH':([186,],[208,]),'NEW':([204,219,220,],[221,233,234,]),'INCREMENT':([222,],[236,]),'DECREMENT':([222,],[237,]),'EXCEPTION':([225,],[239,]),'FINALLY':([281,],[286,]),'DOUBLEPOINT':([292,],[300,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block_publicClass':([4,],[5,]),'all_block_code':([9,13,109,111,209,249,256,257,268,294,],[12,91,158,160,226,258,264,266,276,302,]),'block_code':([9,13,109,111,209,249,256,257,268,294,],[13,13,13,13,13,13,13,13,13,13,]),'def_const_or_var':([9,13,109,111,209,249,256,257,268,294,],[14,14,14,14,14,14,14,14,14,14,]),'print_data':([9,13,109,111,209,249,256,257,268,294,],[15,15,15,15,15,15,15,15,15,15,]),'read_data':([9,13,74,109,111,150,209,232,249,256,257,268,294,],[16,16,130,16,16,130,16,130,16,16,16,16,16,]),'arithmetic_operation':([9,13,70,71,74,94,95,109,110,111,150,155,209,227,232,249,256,257,268,294,],[17,17,113,118,118,140,118,17,118,17,118,118,17,118,118,17,17,17,17,17,]),'logic_operation':([9,13,71,74,95,109,110,111,150,155,209,227,232,249,256,257,268,294,],[18,18,116,133,141,18,159,18,133,182,18,241,133,18,18,18,18,18,]),'lists':([9,13,109,111,209,249,256,257,268,294,],[19,19,19,19,19,19,19,19,19,19,]),'functions_list':([9,13,109,111,209,249,256,257,268,294,],[20,20,20,20,20,20,20,20,20,20,]),'dict_estruct':([9,13,109,111,209,249,256,257,268,294,],[21,21,21,21,21,21,21,21,21,21,]),'functions_dict':([9,13,109,111,209,249,256,257,268,294,],[22,22,22,22,22,22,22,22,22,22,]),'block_for':([9,13,109,111,209,249,256,257,268,294,],[23,23,23,23,23,23,23,23,23,23,]),'block_try_catch':([9,13,109,111,209,249,256,257,268,294,],[24,24,24,24,24,24,24,24,24,24,]),'block_while':([9,13,109,111,209,249,256,257,268,294,],[25,25,25,25,25,25,25,25,25,25,]),'constant_assignation':([9,13,109,111,209,249,256,257,268,294,],[26,26,26,26,26,26,26,26,26,26,]),'variable_assignation':([9,13,109,111,209,249,256,257,268,294,],[27,27,27,27,27,27,27,27,27,27,]),'late_initialization':([9,13,109,111,209,249,256,257,268,294,],[28,28,28,28,28,28,28,28,28,28,]),'value_numeric':([9,13,70,71,74,94,95,109,110,111,150,155,209,227,232,249,256,257,268,294,],[31,31,114,117,127,114,117,31,117,31,127,117,31,117,127,31,31,31,31,31,]),'list_empty':([9,13,109,111,209,249,256,257,268,294,],[32,32,32,32,32,32,32,32,32,32,]),'list_full':([9,13,109,111,209,249,256,257,268,294,],[33,33,33,33,33,33,33,33,33,33,]),'list_func_clear':([9,13,109,111,209,249,256,257,268,294,],[34,34,34,34,34,34,34,34,34,34,]),'list_func_count':([9,13,109,111,209,249,256,257,268,294,],[35,35,35,35,35,35,35,35,35,35,]),'list_func_add':([9,13,109,111,209,249,256,257,268,294,],[36,36,36,36,36,36,36,36,36,36,]),'list_func_removeat':([9,13,109,111,209,249,256,257,268,294,],[37,37,37,37,37,37,37,37,37,37,]),'dict_empty':([9,13,109,111,209,249,256,257,268,294,],[38,38,38,38,38,38,38,38,38,38,]),'dict_full':([9,13,109,111,209,249,256,257,268,294,],[39,39,39,39,39,39,39,39,39,39,]),'dict_func_put':([9,13,109,111,209,249,256,257,268,294,],[40,40,40,40,40,40,40,40,40,40,]),'dict_func_remove':([9,13,109,111,209,249,256,257,268,294,],[41,41,41,41,41,41,41,41,41,41,]),'for_anidado':([9,13,109,111,209,249,256,257,268,294,],[42,42,42,42,42,42,263,265,42,42,]),'for_each':([9,13,109,111,209,249,256,257,268,294,],[43,43,43,43,43,43,43,43,43,43,]),'try_catch_simply':([9,13,109,111,209,249,256,257,268,294,],[44,44,44,44,44,44,44,44,44,44,]),'try_catch_finally':([9,13,109,111,209,249,256,257,268,294,],[45,45,45,45,45,45,45,45,45,45,]),'normal_while':([9,13,109,111,209,249,256,257,268,294,],[46,46,46,46,46,46,46,46,46,46,]),'do_while':([9,13,109,111,209,249,256,257,268,294,],[47,47,47,47,47,47,47,47,47,47,]),'access_modifiers':([9,13,109,111,209,249,256,257,268,294,],[48,48,48,48,48,48,48,48,48,48,]),'data_type':([9,13,48,49,96,107,108,109,111,206,209,249,256,257,268,294,],[50,50,97,99,142,156,157,50,50,156,50,50,50,50,50,50,]),'assignation_key_value':([9,13,50,97,99,109,111,142,156,209,249,256,257,268,294,],[51,51,100,143,146,51,51,171,183,51,51,51,51,51,51,]),'for_simple':([9,13,109,111,209,249,256,257,268,294,],[59,59,59,59,59,59,59,59,59,59,]),'arithmetic_operator':([11,31,112,114,115,117,125,127,],[70,94,70,94,70,94,70,94,]),'logic_operator':([11,31,115,117,125,127,],[71,95,71,95,71,95,]),'assignation_key_value_multiple':([50,97,99,142,201,],[101,144,147,172,218,]),'value':([74,150,232,],[126,177,243,]),'value_logic':([74,150,232,],[128,128,128,]),'value_string':([74,150,232,],[129,129,129,]),'concatenation':([74,150,167,232,],[136,136,196,136,]),'assignation_with_datatype':([107,206,],[155,223,]),'dictionary_value':([280,],[285,]),'key_value_pair':([284,],[291,]),'strings_list':([288,304,],[295,310,]),'ints_list':([290,306,],[297,311,]),'valueHash':([300,],[307,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> USING SYSTEM DOTANDCOMMA block_publicClass','program',4,'p_program','sintactico.py',47),
  ('block_publicClass -> PUBLIC CLASS VARIABLE LKEY all_block_code RKEY','block_publicClass',6,'p_block_publicClass','sintactico.py',50),
  ('block_code -> def_const_or_var','block_code',1,'p_block_code','sintactico.py',53),
  ('block_code -> print_data','block_code',1,'p_block_code','sintactico.py',54),
  ('block_code -> read_data','block_code',1,'p_block_code','sintactico.py',55),
  ('block_code -> arithmetic_operation','block_code',1,'p_block_code','sintactico.py',56),
  ('block_code -> logic_operation','block_code',1,'p_block_code','sintactico.py',57),
  ('block_code -> lists','block_code',1,'p_block_code','sintactico.py',59),
  ('block_code -> functions_list','block_code',1,'p_block_code','sintactico.py',60),
  ('block_code -> dict_estruct','block_code',1,'p_block_code','sintactico.py',62),
  ('block_code -> functions_dict','block_code',1,'p_block_code','sintactico.py',63),
  ('block_code -> block_for','block_code',1,'p_block_code','sintactico.py',65),
  ('block_code -> block_try_catch','block_code',1,'p_block_code','sintactico.py',67),
  ('block_code -> block_while','block_code',1,'p_block_code','sintactico.py',69),
  ('all_block_code -> block_code','all_block_code',1,'p_all_block_code','sintactico.py',73),
  ('all_block_code -> block_code all_block_code','all_block_code',2,'p_all_block_code','sintactico.py',74),
  ('print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA','print_data',5,'p_print_data','sintactico.py',79),
  ('read_data -> READ LPARENT RPARENT DOTANDCOMMA','read_data',4,'p_read_data','sintactico.py',83),
  ('concatenation -> STRING','concatenation',1,'p_concatenation','sintactico.py',87),
  ('concatenation -> STRING PLUS concatenation','concatenation',3,'p_concatenation','sintactico.py',88),
  ('value -> value_numeric','value',1,'p_value','sintactico.py',92),
  ('value -> value_logic','value',1,'p_value','sintactico.py',93),
  ('value -> value_string','value',1,'p_value','sintactico.py',94),
  ('value -> read_data','value',1,'p_value','sintactico.py',95),
  ('value_string -> STRING','value_string',1,'p_value_string','sintactico.py',99),
  ('value_string -> CHAR','value_string',1,'p_value_string','sintactico.py',100),
  ('value_string -> VARIABLE','value_string',1,'p_value_string','sintactico.py',101),
  ('value_string -> concatenation','value_string',1,'p_value_string','sintactico.py',102),
  ('value_logic -> BOOLTRUE','value_logic',1,'p_value_logic','sintactico.py',106),
  ('value_logic -> BOOLFALSE','value_logic',1,'p_value_logic','sintactico.py',107),
  ('value_logic -> logic_operation','value_logic',1,'p_value_logic','sintactico.py',108),
  ('value_numeric -> INTEGER','value_numeric',1,'p_value_numeric','sintactico.py',112),
  ('value_numeric -> FLOAT_NUMBER','value_numeric',1,'p_value_numeric','sintactico.py',113),
  ('value_numeric -> DECIMAL_NUMBER','value_numeric',1,'p_value_numeric','sintactico.py',114),
  ('value_numeric -> arithmetic_operation','value_numeric',1,'p_value_numeric','sintactico.py',115),
  ('arithmetic_operation -> value_numeric','arithmetic_operation',1,'p_arithmetic_operation','sintactico.py',120),
  ('arithmetic_operation -> VARIABLE','arithmetic_operation',1,'p_arithmetic_operation','sintactico.py',121),
  ('arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation','arithmetic_operation',3,'p_arithmetic_operation','sintactico.py',122),
  ('arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation','arithmetic_operation',3,'p_arithmetic_operation','sintactico.py',123),
  ('logic_operation -> value_numeric','logic_operation',1,'p_logic_operation','sintactico.py',127),
  ('logic_operation -> VARIABLE','logic_operation',1,'p_logic_operation','sintactico.py',128),
  ('logic_operation -> value_numeric logic_operator logic_operation','logic_operation',3,'p_logic_operation','sintactico.py',129),
  ('logic_operation -> VARIABLE logic_operator logic_operation','logic_operation',3,'p_logic_operation','sintactico.py',130),
  ('logic_operator -> GREATER_THAN','logic_operator',1,'p_logic_operator','sintactico.py',134),
  ('logic_operator -> SMALLER_THAN','logic_operator',1,'p_logic_operator','sintactico.py',135),
  ('logic_operator -> EQUAL_COMPARATION','logic_operator',1,'p_logic_operator','sintactico.py',136),
  ('logic_operator -> INEQUALITY','logic_operator',1,'p_logic_operator','sintactico.py',137),
  ('logic_operator -> GREATER_THAN_OR_EQUAL','logic_operator',1,'p_logic_operator','sintactico.py',138),
  ('logic_operator -> SMALLER_THAN_OR_EQUAL','logic_operator',1,'p_logic_operator','sintactico.py',139),
  ('logic_operator -> LOGICAND','logic_operator',1,'p_logic_operator','sintactico.py',140),
  ('logic_operator -> LOGICOR','logic_operator',1,'p_logic_operator','sintactico.py',141),
  ('logic_operator -> LOGICNOT','logic_operator',1,'p_logic_operator','sintactico.py',142),
  ('logic_operator -> LOGICXOR','logic_operator',1,'p_logic_operator','sintactico.py',143),
  ('arithmetic_operator -> PLUS','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',147),
  ('arithmetic_operator -> MINUS','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',148),
  ('arithmetic_operator -> TIMES','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',149),
  ('arithmetic_operator -> DIVIDE','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',150),
  ('arithmetic_operator -> PERCENT','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',151),
  ('access_modifiers -> PUBLIC','access_modifiers',1,'p_access_modifiers','sintactico.py',156),
  ('access_modifiers -> PRIVATE','access_modifiers',1,'p_access_modifiers','sintactico.py',157),
  ('def_const_or_var -> constant_assignation','def_const_or_var',1,'p_def_const_or_var','sintactico.py',161),
  ('def_const_or_var -> variable_assignation','def_const_or_var',1,'p_def_const_or_var','sintactico.py',162),
  ('def_const_or_var -> late_initialization','def_const_or_var',1,'p_def_const_or_var','sintactico.py',163),
  ('constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA','constant_assignation',5,'p_constant_assignation','sintactico.py',167),
  ('constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA','constant_assignation',4,'p_constant_assignation','sintactico.py',168),
  ('constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA','constant_assignation',5,'p_constant_assignation','sintactico.py',169),
  ('constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA','constant_assignation',4,'p_constant_assignation','sintactico.py',170),
  ('variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA','variable_assignation',4,'p_variable_assignation','sintactico.py',174),
  ('variable_assignation -> data_type assignation_key_value DOTANDCOMMA','variable_assignation',3,'p_variable_assignation','sintactico.py',175),
  ('variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA','variable_assignation',4,'p_variable_assignation','sintactico.py',176),
  ('variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA','variable_assignation',3,'p_variable_assignation','sintactico.py',177),
  ('late_initialization -> access_modifiers VARIABLE DOTANDCOMMA','late_initialization',3,'p_late_initialization','sintactico.py',181),
  ('late_initialization -> VARIABLE DOTANDCOMMA','late_initialization',2,'p_late_initialization','sintactico.py',182),
  ('late_initialization -> assignation_key_value DOTANDCOMMA','late_initialization',2,'p_late_initialization','sintactico.py',183),
  ('assignation_key_value -> VARIABLE ASSIGNATION value','assignation_key_value',3,'p_assignation_key_value','sintactico.py',187),
  ('assignation_key_value -> READ LPARENT RPARENT','assignation_key_value',3,'p_assignation_key_value','sintactico.py',188),
  ('assignation_key_value_multiple -> VARIABLE ASSIGNATION value','assignation_key_value_multiple',3,'p_assignation_key_value_multiple','sintactico.py',192),
  ('assignation_key_value_multiple -> VARIABLE ASSIGNATION value COMMA assignation_key_value_multiple','assignation_key_value_multiple',5,'p_assignation_key_value_multiple','sintactico.py',193),
  ('assignation_with_datatype -> data_type assignation_key_value DOTANDCOMMA','assignation_with_datatype',3,'p_assignation_with_datatype','sintactico.py',197),
  ('assignation_with_datatype -> data_type assignation_key_value DOTANDCOMMA assignation_with_datatype','assignation_with_datatype',4,'p_assignation_with_datatype','sintactico.py',198),
  ('data_type -> CHARTYPE','data_type',1,'p_data_type','sintactico.py',202),
  ('data_type -> STRINGTYPE','data_type',1,'p_data_type','sintactico.py',203),
  ('data_type -> FLOATTYPE','data_type',1,'p_data_type','sintactico.py',204),
  ('data_type -> DECIMALTYPE','data_type',1,'p_data_type','sintactico.py',205),
  ('data_type -> INTTYPE','data_type',1,'p_data_type','sintactico.py',206),
  ('data_type -> BOOLTYPE','data_type',1,'p_data_type','sintactico.py',207),
  ('block_for -> for_anidado','block_for',1,'p_block_for','sintactico.py',213),
  ('block_for -> for_each','block_for',1,'p_block_for','sintactico.py',214),
  ('for_simple -> FOR LPARENT assignation_with_datatype logic_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY','for_simple',11,'p_for_simple','sintactico.py',218),
  ('for_simple -> FOR LPARENT assignation_with_datatype logic_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY','for_simple',11,'p_for_simple','sintactico.py',219),
  ('for_anidado -> for_simple','for_anidado',1,'p_for_anidado','sintactico.py',224),
  ('for_anidado -> FOR LPARENT assignation_with_datatype logic_operation DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY','for_anidado',11,'p_for_anidado','sintactico.py',225),
  ('for_anidado -> FOR LPARENT assignation_with_datatype logic_operation DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY','for_anidado',11,'p_for_anidado','sintactico.py',226),
  ('for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY','for_each',10,'p_for_each','sintactico.py',230),
  ('block_try_catch -> try_catch_simply','block_try_catch',1,'p_block_try_catch','sintactico.py',234),
  ('block_try_catch -> try_catch_finally','block_try_catch',1,'p_block_try_catch','sintactico.py',235),
  ('try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY','try_catch_simply',12,'p_try_catch_simply','sintactico.py',239),
  ('try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY','try_catch_finally',16,'p_try_catch_finally','sintactico.py',242),
  ('block_while -> normal_while','block_while',1,'p_block_while','sintactico.py',246),
  ('block_while -> do_while','block_while',1,'p_block_while','sintactico.py',247),
  ('normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY','normal_while',7,'p_normal_while','sintactico.py',251),
  ('do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT','do_while',8,'p_do_while','sintactico.py',254),
  ('block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if','block_if',8,'p_block_if','sintactico.py',257),
  ('other_if -> ELSE LKEY not_yes_nested_if RKEY','other_if',4,'p_other_if','sintactico.py',261),
  ('other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if','other_if',8,'p_other_if','sintactico.py',262),
  ('not_yes_nested_if -> block_if','not_yes_nested_if',1,'p_not_yes_nested_if','sintactico.py',267),
  ('not_yes_nested_if -> block_code','not_yes_nested_if',1,'p_not_yes_nested_if','sintactico.py',268),
  ('dict_estruct -> dict_empty','dict_estruct',1,'p_dict_estruct','sintactico.py',277),
  ('dict_estruct -> dict_full','dict_estruct',1,'p_dict_estruct','sintactico.py',278),
  ('dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA','dict_empty',12,'p_dict_empty','sintactico.py',284),
  ('dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY dictionary_value RKEY DOTANDCOMMA','dict_full',15,'p_dict_full','sintactico.py',289),
  ('dictionary_value -> LKEY key_value_pair RKEY','dictionary_value',3,'p_dictionary_value','sintactico.py',293),
  ('key_value_pairs -> key_value_pair','key_value_pairs',1,'p_key_value_pairs','sintactico.py',297),
  ('key_value_pairs -> key_value_pair COMMA key_value_pairs','key_value_pairs',3,'p_key_value_pairs','sintactico.py',298),
  ('key_value_pair -> STRING DOUBLEPOINT valueHash','key_value_pair',3,'p_key_value_pair','sintactico.py',303),
  ('valueHash -> INTTYPE','valueHash',1,'p_valueHash','sintactico.py',308),
  ('estruct_of_data -> list_empty','estruct_of_data',1,'p_estruct_of_data','sintactico.py',311),
  ('estruct_of_data -> list_full','estruct_of_data',1,'p_estruct_of_data','sintactico.py',312),
  ('functions_dict -> dict_func_put','functions_dict',1,'p_functions_dict','sintactico.py',317),
  ('functions_dict -> dict_func_remove','functions_dict',1,'p_functions_dict','sintactico.py',318),
  ('dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA','dict_func_put',9,'p_dict_func_put','sintactico.py',323),
  ('dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA','dict_func_remove',7,'p_dict_func_remove','sintactico.py',328),
  ('lists -> list_empty','lists',1,'p_lists','sintactico.py',334),
  ('lists -> list_full','lists',1,'p_lists','sintactico.py',335),
  ('list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA','list_empty',14,'p_list_empty','sintactico.py',339),
  ('list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA','list_empty',14,'p_list_empty','sintactico.py',340),
  ('list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY','list_full',16,'p_list_full','sintactico.py',344),
  ('list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY','list_full',16,'p_list_full','sintactico.py',345),
  ('strings_list -> STRING','strings_list',1,'p_strings_list','sintactico.py',349),
  ('strings_list -> STRING COMMA strings_list','strings_list',3,'p_strings_list','sintactico.py',350),
  ('ints_list -> INTEGER','ints_list',1,'p_ints_list','sintactico.py',354),
  ('ints_list -> INTEGER COMMA ints_list','ints_list',3,'p_ints_list','sintactico.py',355),
  ('functions_list -> list_func_clear','functions_list',1,'p_functions_list','sintactico.py',359),
  ('functions_list -> list_func_count','functions_list',1,'p_functions_list','sintactico.py',360),
  ('functions_list -> list_func_add','functions_list',1,'p_functions_list','sintactico.py',361),
  ('functions_list -> list_func_removeat','functions_list',1,'p_functions_list','sintactico.py',362),
  ('list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA','list_func_clear',6,'p_list_func_clear','sintactico.py',366),
  ('list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA','list_func_count',6,'p_list_func_count','sintactico.py',369),
  ('list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA','list_func_add',7,'p_list_func_add','sintactico.py',372),
  ('list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA','list_func_removeat',7,'p_list_func_removeat','sintactico.py',375),
  ('stack_assignation -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA','stack_assignation',8,'p_stack_assignation','sintactico.py',378),
  ('stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA','stack_push',7,'p_stack_push','sintactico.py',381),
  ('stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA','stack_pop',6,'p_stack_pop','sintactico.py',384),
  ('queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA','queue_struct',14,'p_queue_struct','sintactico.py',387),
  ('queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA','queue_enqueue',7,'p_queue_enqueue','sintactico.py',391),
  ('queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA','queue_dequeue',6,'p_queue_dequeue','sintactico.py',395),
  ('queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA','queue_clear',6,'p_queue_clear','sintactico.py',399),
  ('queue_clear -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA','queue_clear',6,'p_queue_peek','sintactico.py',403),
  ('queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA','queue_isEmpty',6,'p_queue_isEmpty','sintactico.py',407),
  ('declaration_async -> PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY','declaration_async',22,'p_declaration_async','sintactico.py',413),
  ('declaration_lambda -> ACTION SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION VARIABLE ARROW LKEY block_code RKEY','declaration_lambda',11,'p_declration_lambda','sintactico.py',417),
]
