
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADDITION_ASSIGNMENT ASSIGNATION BACK_SLASH BOOL BOOLFALSE BOOLTRUE BOOLTYPE BREAK CATCH CHARTYPE CLASS COMMA CONST DECIMALTYPE DIVIDE DIVISION_ASSIGNMENT DOLLARSIGN DOT DOTANDCOMMA DOUBLEPOINT DOUBLETYPE DOUBLE_QUOTATION_MARKS ELSE EQUAL_COMPARATION EXCEPTION FINALLY FLOATTYPE FLOAT_NUMBER FOR GREATER_THAN GREATER_THAN_OR_EQUAL IF INEQUALITY INT INTEGER JUMP_LINE LBRACKET LKEY LOGICAND LOGICNOT LOGICOR LOGICXOR LONG LPARENT MINUS MODULE_ASSIGNMENT MULTIPLICATION_ASSIGNMENT NAMESPACE NEW OBJECT PERCENT PIPE PLUS PRINT PRIVATE PUBLIC RBRACKET RETURN RKEY RPARENT SIPLE_QUOTATION_MARKS SMALLER_THAN SMALLER_THAN_OR_EQUAL STATIC STRING STRINGTYPE SUBTRACTION_ASSIGNMENT SWITCH SYSTEM TABULATION TIMES TRY USING VARIABLE VOID WHILEprogram : block_using block_publicClassblock_using : USING SYSTEMblock_publicClass : PUBLIC CLASS VARIABLE LKEY block_code RKEYblock_code : VARIABLE\n                    | try_catch_simply\n    try_catch_simply : TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEYoperator : logic_operator\n                | arithmetic_operator\n    logic_operator   : GREATER_THAN\n                        | SMALLER_THAN\n                        | EQUAL_COMPARATION\n                        | INEQUALITY\n                        | GREATER_THAN_OR_EQUAL\n                        | SMALLER_THAN_OR_EQUAL\n                        | LOGICAND\n                        | LOGICOR\n                        | LOGICNOT\n    arithmetic_operator  : PLUS\n                            | MINUS\n                            | TIMES\n                            | DIVIDE\n                            | PERCENT\n    '
    
_lr_action_items = {'USING':([0,],[3,]),'$end':([1,4,14,],[0,-1,-3,]),'PUBLIC':([2,6,],[5,-2,]),'SYSTEM':([3,],[6,]),'CLASS':([5,],[7,]),'VARIABLE':([7,9,15,20,23,],[8,10,10,21,10,]),'LKEY':([8,13,22,],[9,15,23,]),'TRY':([9,15,23,],[13,13,13,]),'RKEY':([10,11,12,16,24,25,],[-4,14,-5,17,25,-6,]),'CATCH':([17,],[18,]),'LPARENT':([18,],[19,]),'EXCEPTION':([19,],[20,]),'RPARENT':([21,],[22,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block_using':([0,],[2,]),'block_publicClass':([2,],[4,]),'block_code':([9,15,23,],[11,16,24,]),'try_catch_simply':([9,15,23,],[12,12,12,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block_using block_publicClass','program',2,'p_program','sintactico.py',6),
  ('block_using -> USING SYSTEM','block_using',2,'p_block_using','sintactico.py',9),
  ('block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_code RKEY','block_publicClass',6,'p_block_publicClass','sintactico.py',12),
  ('block_code -> VARIABLE','block_code',1,'p_block_code','sintactico.py',19),
  ('block_code -> try_catch_simply','block_code',1,'p_block_code','sintactico.py',20),
  ('try_catch_simply -> TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEY','try_catch_simply',12,'p_try_catch_simply','sintactico.py',24),
  ('operator -> logic_operator','operator',1,'p_operator','sintactico.py',29),
  ('operator -> arithmetic_operator','operator',1,'p_operator','sintactico.py',30),
  ('logic_operator -> GREATER_THAN','logic_operator',1,'p_logic_operators','sintactico.py',34),
  ('logic_operator -> SMALLER_THAN','logic_operator',1,'p_logic_operators','sintactico.py',35),
  ('logic_operator -> EQUAL_COMPARATION','logic_operator',1,'p_logic_operators','sintactico.py',36),
  ('logic_operator -> INEQUALITY','logic_operator',1,'p_logic_operators','sintactico.py',37),
  ('logic_operator -> GREATER_THAN_OR_EQUAL','logic_operator',1,'p_logic_operators','sintactico.py',38),
  ('logic_operator -> SMALLER_THAN_OR_EQUAL','logic_operator',1,'p_logic_operators','sintactico.py',39),
  ('logic_operator -> LOGICAND','logic_operator',1,'p_logic_operators','sintactico.py',40),
  ('logic_operator -> LOGICOR','logic_operator',1,'p_logic_operators','sintactico.py',41),
  ('logic_operator -> LOGICNOT','logic_operator',1,'p_logic_operators','sintactico.py',42),
  ('arithmetic_operator -> PLUS','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',46),
  ('arithmetic_operator -> MINUS','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',47),
  ('arithmetic_operator -> TIMES','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',48),
  ('arithmetic_operator -> DIVIDE','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',49),
  ('arithmetic_operator -> PERCENT','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',50),
]
