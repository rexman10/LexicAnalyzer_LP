
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ACTION ADD ADDITION_ASSIGNMENT ARROW ASSIGNATION ASYNC AWAIT BACK_SLASH BOOLFALSE BOOLTRUE BOOLTYPE BREAK CATCH CHAR CHARTYPE CLASS CLEAR COMMA CONCURRENT CONST COUNT DECIMALTYPE DECIMAL_NUMBER DECREMENT DEQUEUE DICTIONARY DIVIDE DIVISION_ASSIGNMENT DO DOLLARSIGN DOT DOTANDCOMMA DOUBLEPOINT DOUBLE_QUOTATION_MARKS ELSE ELSE_IF ENQUEUE ENUM EQUAL_COMPARATION ERROR EXCEPTION FINALLY FLOATTYPE FLOAT_NUMBER FOR FOREACH GREATER_THAN GREATER_THAN_OR_EQUAL ID IDENTIFIER IF IN INCREMENT INEQUALITY INTEGER INTTYPE ISEMPTY JOIN JUMP_LINE LBRACKET LIST LKEY LOGICAND LOGICNOT LOGICOR LONG LPARENT MAIN METHOD MINUS MODULE_ASSIGNMENT MULTIPLICATION_ASSIGNMENT NAMESPACE NEW PEEK PERCENT PIPE PLUS POP PRINT PRIVATE PUBLIC PUSH PUT QUEUE RBRACKET READ REMOVE REMOVEAT RETURN RKEY RPARENT SIPLE_QUOTATION_MARKS SMALLER_THAN SMALLER_THAN_OR_EQUAL STACK START STATIC STRING STRINGTYPE SUBTRACTION_ASSIGNMENT SWITCH SYSTEM TABULATION TASK THREAD TIMES TRY USING VARIABLE VOID WHILE WRITEprogram                    : USING SYSTEM DOTANDCOMMA block_publicClassblock_publicClass        : PUBLIC CLASS VARIABLE LKEY block_main_method RKEY\n                                | STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code\n    block_main_method        : STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY\n                                | STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code\n    block_code               : def_const_or_var\n                                | print_data\n                                | thread_main\n                                | concurrent_method\n\n                                | block_try_catch\n                                | lists\n                                | functions_list\n                                \n                                | statement_lambda\n\n                                | enums\n                                | normal_if\n                                | block_while\n                                | stack_struct\n                                | functions_stack\n                                | queue_struct\n                                | functions_queue\n    all_block_code           : block_code\n                                | block_code all_block_code        \n    data_type                : CHARTYPE\n                                | STRINGTYPE\n                                | FLOATTYPE\n                                | DECIMALTYPE\n                                | INTTYPE\n                                | BOOLTYPE\n    value_string             : STRING\n                                | CHAR\n                                | concatenation\n    value_boolean            : BOOLTRUE\n                                | BOOLFALSE\n                                | VARIABLE\n                                | comparison_operation\n    value_numeric            : INTEGER\n                                | FLOAT_NUMBER\n                                | DECIMAL_NUMBER\n                                | VARIABLE\n    print_data               : PRINT LPARENT STRING RPARENT DOTANDCOMMA\n                                | PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA\n    read_data                : READ LPARENT RPARENT DOTANDCOMMA\n    concatenation            : STRING\n                                | STRING PLUS concatenation\n    value                    : value_numeric\n                                | value_boolean\n                                | value_string\n                                | VARIABLE\n                                | read_data\n    arithmetic_operation     : value_numeric\n                                | value_numeric arithmetic_operator arithmetic_operation\n    arithmetic_operator      : PLUS\n                                | MINUS\n                                | TIMES\n                                | DIVIDE\n                                | PERCENT\n    comparison_operation     : value_numeric\n                                | value_numeric comparison_operator comparison_operation\n    comparison_operator      : GREATER_THAN\n                                | SMALLER_THAN\n                                | EQUAL_COMPARATION\n                                | INEQUALITY\n                                | GREATER_THAN_OR_EQUAL\n                                | SMALLER_THAN_OR_EQUAL\n    boolean_operation        : value_boolean\n                                | LOGICNOT value_boolean\n                                | value_boolean boolean_operator boolean_operation\n    boolean_operator         : LOGICAND\n                                | LOGICOR\n    def_const_or_var         : constant_assignation\n                                | variable_assignation\n    constant_assignation     : access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA\n                                | CONST assignation_type_value_multiple DOTANDCOMMA\n    variable_assignation     : access_modifiers assignation_type_value_multiple DOTANDCOMMA\n                                | assignation_type_value_multiple DOTANDCOMMA\n    access_modifiers         : PUBLIC\n                                | PRIVATE\n    assignation_type_value   : INTTYPE assignation_int\n                                | STRINGTYPE assignation_string\n                                | FLOATTYPE assignation_float\n                                | BOOLTYPE assignation_true\n                                | BOOLTYPE assignation_false\n    assignation_int          : VARIABLE ASSIGNATION INTEGER\n                                | VARIABLE ASSIGNATION VARIABLE\n                                | VARIABLE ASSIGNATION arithmetic_operation\n    assignation_string       : VARIABLE ASSIGNATION STRING\n                                | VARIABLE ASSIGNATION VARIABLE\n    assignation_float        : VARIABLE ASSIGNATION FLOAT_NUMBER\n                                | VARIABLE ASSIGNATION VARIABLE\n                                | VARIABLE ASSIGNATION arithmetic_operation\n    assignation_true         : VARIABLE ASSIGNATION BOOLTRUE\n                                | VARIABLE ASSIGNATION VARIABLE\n                                | VARIABLE ASSIGNATION boolean_operation\n    assignation_false        : VARIABLE ASSIGNATION BOOLFALSE\n                                | VARIABLE ASSIGNATION VARIABLE\n                                | VARIABLE ASSIGNATION boolean_operation\n    assignation_type_value_multiple          : INTTYPE assignation_int_multiple\n                                                | STRINGTYPE assignation_string_multiple\n                                                | FLOATTYPE assignation_float_multiple\n                                                | BOOLTYPE assignation_true_multiple\n                                                | BOOLTYPE assignation_false_multiple\n    assignation_int_multiple                 : assignation_int\n                                                | assignation_int COMMA assignation_int_multiple\n    assignation_string_multiple              : assignation_string\n                                                | assignation_string COMMA assignation_string_multiple\n    assignation_float_multiple               : assignation_float\n                                                | assignation_float COMMA assignation_float_multiple\n    assignation_true_multiple                : assignation_true\n                                                | assignation_true COMMA assignation_true_multiple\n    assignation_false_multiple               : assignation_false\n                                                | assignation_false COMMA assignation_false_multiple\n    \n    thread_main                 : declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait\n    \n    declaration_thread          : THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA\n                                | THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA\n    \n    thread_init                 : thread_identificator DOT START LPARENT RPARENT DOTANDCOMMA\n    \n    thread_wait                 : thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA\n    \n    concurrent_method           : STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY\n                                | WRITE\n    \n    thread_logic                : thread_sentence\n                                | thread_logic thread_sentence\n    \n    thread_sentence             : thread_expression DOTANDCOMMA\n    \n    thread_expression           : thread_identificator DOT concurrent_method LPARENT RPARENT\n                                | PRINT LPARENT STRING RPARENT\n    \n    thread_arguments            : thread_expression\n                                | thread_arguments COMMA thread_expression\n    \n    thread_identificator        : VARIABLE\n    block_try_catch          : try_catch_simply\n                                | try_catch_finally\n    try_catch_simply           : TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEYtry_catch_finally          : TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEYblock_code_try           : def_const_or_var\n                                | print_data\n    all_block_code_try       : block_code_try\n                                | block_code_try all_block_code_try        \n     lists                   : list_empty\n                                | list_full\n    list_empty               : LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA\n                                | LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA\n    list_full                : LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA\n                                | LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA\n    strings_list             : STRING\n                                | STRING COMMA strings_list\n    ints_list                : INTEGER\n                                | INTEGER COMMA ints_list\n    functions_list           : list_func_clear\n                                | list_func_count\n                                | list_func_add\n                                | list_func_removeat\n    list_func_clear            : VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMAlist_func_count            : VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMAlist_func_add            : VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA\n                                | VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA\n    list_func_removeat       : VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA\n                                | VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA\n    statement_lambda           : LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENTenums                    : ENUM METHOD LKEY list_enums RKEYlist_enums               : METHOD\n                                | METHOD COMMA list_enums \n    block_if                 : normal_if\n                                | all_block_code\n    normal_if                : IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if\n                                | IF LPARENT boolean_operation RPARENT LKEY block_if RKEY \n    other_if                 : ELSE LKEY block_if RKEY\n                                | ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if\n    block_while              : normal_while\n                                | do_while             \n    normal_while               : WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEYdo_while                   : DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENTstack_struct               : STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMAfunctions_stack          : stack_push\n                                | stack_pop\n                                | stack_clear\n                                | stack_peek\n                                | stack_isEmpty\n    stack_push                 : VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMAstack_pop                  : VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMAstack_clear                : VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMAstack_peek                 : VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMAstack_isEmpty              : VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMAqueue_struct               : QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMAfunctions_queue          : queue_enqueue\n                                | queue_dequeue\n                                | queue_clear\n                                | queue_isEmpty\n                                | queue_peek\n    queue_enqueue            : VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMAqueue_dequeue            : VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMAqueue_clear              : VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMAqueue_peek               : VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMAqueue_isEmpty            : VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA'
    
_lr_action_items = {'USING':([0,],[2,]),'$end':([1,5,17,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,65,66,68,69,70,71,72,74,75,76,77,78,100,110,143,163,164,217,266,267,272,296,297,305,306,307,309,310,336,337,338,339,340,341,345,348,356,359,366,369,370,376,389,396,411,413,415,421,427,429,433,],[0,-1,-2,-21,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-70,-71,-118,-127,-128,-135,-136,-145,-146,-147,-148,-165,-166,-170,-171,-172,-173,-174,-181,-182,-183,-184,-185,-22,-75,-3,-74,-73,-72,-40,-41,-156,-149,-150,-176,-178,-179,-187,-112,-155,-151,-152,-153,-154,-175,-186,-162,-167,-117,-161,-169,-180,-168,-116,-163,-137,-138,-164,-129,-139,-140,-130,]),'SYSTEM':([2,],[3,]),'DOTANDCOMMA':([3,81,95,96,108,109,115,116,120,121,123,124,125,126,150,152,153,154,155,156,157,158,159,162,184,185,186,197,198,207,223,224,225,226,227,230,231,232,233,234,236,238,239,240,241,245,246,261,262,263,265,274,275,276,298,299,300,301,302,308,323,326,327,328,329,334,344,347,349,350,371,372,379,388,395,407,408,410,422,424,],[4,110,-98,-104,163,164,-97,-102,-99,-106,-100,-101,-108,-110,-65,-32,-33,-34,-35,-57,-36,-37,-38,217,-105,-87,-86,266,267,-66,-103,-39,-36,-85,-50,-107,-39,-37,-90,-109,-111,-34,-32,-93,-33,296,297,305,306,307,309,-67,-58,-39,337,338,339,340,341,345,-51,-34,-93,-34,-96,361,363,365,369,370,382,383,389,-123,-122,411,413,416,427,429,]),'PUBLIC':([4,27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,65,66,68,69,70,71,72,74,75,76,77,78,99,110,113,119,163,164,167,168,169,181,183,217,266,267,272,273,289,293,296,297,305,306,307,309,310,315,336,337,338,339,340,341,345,348,356,359,366,369,370,376,380,389,396,401,411,413,415,421,427,429,431,433,],[6,88,88,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-70,-71,-118,-127,-128,-135,-136,-145,-146,-147,-148,-165,-166,-170,-171,-172,-173,-174,-181,-182,-183,-184,-185,88,-75,88,88,-74,-73,88,-131,-132,88,88,-72,-40,-41,-156,88,88,88,-149,-150,-176,-178,-179,-187,-112,-15,-155,-151,-152,-153,-154,-175,-186,-162,-167,-117,-161,-169,-180,-168,88,-116,-163,88,-137,-138,-164,-129,-139,-140,88,-130,]),'STATIC':([4,12,27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,65,66,68,69,70,71,72,74,75,76,77,78,99,110,119,163,164,181,183,217,266,267,272,273,289,293,296,297,305,306,307,309,310,315,319,336,337,338,339,340,341,345,348,356,358,359,366,369,370,376,380,389,396,401,411,413,415,421,427,429,433,],[7,15,29,29,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-70,-71,-118,-127,-128,-135,-136,-145,-146,-147,-148,-165,-166,-170,-171,-172,-173,-174,-181,-182,-183,-184,-185,29,-75,29,-74,-73,29,29,-72,-40,-41,-156,29,29,29,-149,-150,-176,-178,-179,-187,-112,-15,29,-155,-151,-152,-153,-154,-175,-186,-162,-167,29,-117,-161,-169,-180,-168,29,-116,-163,29,-137,-138,-164,-129,-139,-140,-130,]),'CLASS':([6,],[8,]),'VOID':([7,15,29,],[9,18,93,]),'VARIABLE':([8,21,27,28,30,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,82,85,90,91,93,99,101,102,104,110,118,119,131,132,146,151,163,164,172,173,176,177,178,179,180,181,183,191,195,199,204,205,206,208,209,210,211,212,213,214,217,221,222,266,267,268,272,273,283,284,285,286,287,288,289,291,292,293,294,296,297,305,306,307,309,310,315,319,325,332,333,336,337,338,339,340,341,345,348,356,359,360,361,365,366,369,370,376,380,381,382,383,389,396,401,411,413,415,421,427,429,433,],[10,23,32,92,94,97,32,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-70,-71,-118,-127,-128,-135,-136,-145,-146,-147,-148,-165,-166,105,-170,-171,-172,-173,-174,106,-181,-182,-183,-184,-185,112,117,122,127,112,32,145,112,154,-75,154,32,97,185,112,154,-74,-73,117,224,122,231,235,237,238,32,32,251,251,112,154,-68,-69,276,-59,-60,-61,-62,-63,-64,-72,281,282,-40,-41,112,-156,32,276,-52,-53,-54,-55,-56,32,326,328,32,112,-149,-150,-176,-178,-179,-187,-112,-15,112,154,112,-119,-155,-151,-152,-153,-154,-175,-186,-162,-167,-117,-120,-121,-115,-161,-169,-180,-168,32,154,-113,-114,-116,-163,32,-137,-138,-164,-129,-139,-140,-130,]),'MAIN':([9,18,],[11,20,]),'LKEY':([10,25,83,87,103,128,130,203,228,243,367,384,397,407,408,426,],[12,27,113,119,148,181,183,273,289,294,380,392,401,412,414,431,]),'LPARENT':([11,20,27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,61,62,64,65,66,68,69,70,71,72,74,75,76,77,78,86,99,110,112,119,129,133,134,135,136,137,138,139,140,141,142,163,164,181,183,217,260,266,267,270,272,273,277,278,279,280,289,290,293,296,297,305,306,307,309,310,315,335,336,337,338,339,340,341,345,346,348,356,359,366,368,369,370,376,377,380,389,396,398,399,400,401,411,413,415,421,427,429,433,],[13,22,30,30,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-70,-71,101,-118,-127,-128,-135,-136,-145,-146,-147,-148,104,-165,-166,-170,-171,-172,-173,-174,-181,-182,-183,-184,-185,118,30,-75,-126,30,182,187,188,189,190,191,192,193,194,195,196,-74,-73,30,30,-72,304,-40,-41,312,-156,30,317,318,319,320,30,325,30,-149,-150,-176,-178,-179,-187,-112,-15,362,-155,-151,-152,-153,-154,-175,-186,364,-162,-167,-117,-161,381,-169,-180,-168,387,30,-116,-163,402,403,404,30,-137,-138,-164,-129,-139,-140,-130,]),'STRINGTYPE':([13,22,27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,65,66,68,69,70,71,72,74,75,76,77,78,79,80,88,89,99,107,110,113,114,119,163,164,167,168,169,181,183,217,266,267,272,273,289,293,296,297,305,306,307,309,310,315,336,337,338,339,340,341,345,348,356,359,366,369,370,376,380,385,389,396,401,411,413,415,421,427,429,431,433,],[16,24,31,31,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-70,-71,-118,-127,-128,-135,-136,-145,-146,-147,-148,-165,-166,-170,-171,-172,-173,-174,-181,-182,-183,-184,-185,31,31,-76,-77,31,31,-75,31,170,31,-74,-73,31,-131,-132,31,31,-72,-40,-41,-156,31,31,31,-149,-150,-176,-178,-179,-187,-112,-15,-155,-151,-152,-153,-154,-175,-186,-162,-167,-117,-161,-169,-180,-168,31,393,-116,-163,31,-137,-138,-164,-129,-139,-140,31,-130,]),'RKEY':([14,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,65,66,68,69,70,71,72,74,75,76,77,78,100,110,163,164,166,167,168,169,175,201,202,217,220,242,244,266,267,272,293,296,297,305,306,307,309,310,313,314,315,316,324,330,332,333,336,337,338,339,340,341,345,348,356,359,360,361,366,369,370,376,389,390,396,405,411,413,415,416,417,418,419,420,421,427,428,429,430,432,433,],[17,99,-21,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-70,-71,-118,-127,-128,-135,-136,-145,-146,-147,-148,-165,-166,-170,-171,-172,-173,-174,-181,-182,-183,-184,-185,-22,-75,-74,-73,219,-133,-131,-132,229,-157,272,-72,-134,293,295,-40,-41,-156,-4,-149,-150,-176,-178,-179,-187,-112,-158,348,-15,-160,356,-5,359,-119,-155,-151,-152,-153,-154,-175,-186,-162,-167,-117,-120,-121,-161,-169,-180,-168,-116,396,-163,409,-137,-138,-164,421,422,-141,424,-143,-129,-139,-142,-140,-144,433,-130,]),'LBRACKET':([16,24,],[19,26,]),'RBRACKET':([19,26,],[21,28,]),'RPARENT':([23,54,92,112,144,145,149,150,152,153,154,155,156,157,158,159,174,182,187,188,192,193,194,196,207,247,248,249,250,251,252,253,254,255,256,257,258,259,264,274,275,276,295,304,312,317,318,342,343,351,352,357,359,363,364,373,378,387,391,403,404,406,],[25,-118,128,-126,197,198,203,-65,-32,-33,-34,-35,-57,-36,-37,-38,228,243,245,246,261,262,263,265,-66,298,299,300,301,-34,302,-45,-46,-47,-49,-29,-30,-31,308,-67,-58,-39,336,344,347,349,350,-43,-44,371,372,376,-117,-42,379,384,388,395,397,407,408,410,]),'PRINT':([27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,65,66,68,69,70,71,72,74,75,76,77,78,99,110,113,119,163,164,167,168,169,181,183,217,266,267,272,273,289,293,294,296,297,305,306,307,309,310,315,332,333,336,337,338,339,340,341,345,348,356,359,360,361,366,369,370,376,380,389,392,396,401,411,413,415,421,427,429,431,433,],[52,52,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-70,-71,-118,-127,-128,-135,-136,-145,-146,-147,-148,-165,-166,-170,-171,-172,-173,-174,-181,-182,-183,-184,-185,52,-75,52,52,-74,-73,52,-131,-132,52,52,-72,-40,-41,-156,52,52,52,335,-149,-150,-176,-178,-179,-187,-112,-15,335,-119,-155,-151,-152,-153,-154,-175,-186,-162,-167,-117,-120,-121,-161,-169,-180,-168,52,-116,398,-163,52,-137,-138,-164,-129,-139,-140,52,-130,]),'WRITE':([27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,65,66,68,69,70,71,72,74,75,76,77,78,99,110,119,163,164,181,183,217,266,267,272,273,289,293,296,297,305,306,307,309,310,315,319,336,337,338,339,340,341,345,348,356,358,359,366,369,370,376,380,389,396,401,411,413,415,421,427,429,433,],[54,54,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-70,-71,-118,-127,-128,-135,-136,-145,-146,-147,-148,-165,-166,-170,-171,-172,-173,-174,-181,-182,-183,-184,-185,54,-75,54,-74,-73,54,54,-72,-40,-41,-156,54,54,54,-149,-150,-176,-178,-179,-187,-112,-15,54,-155,-151,-152,-153,-154,-175,-186,-162,-167,54,-117,-161,-169,-180,-168,54,-116,-163,54,-137,-138,-164,-129,-139,-140,-130,]),'ENUM':([27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,65,66,68,69,70,71,72,74,75,76,77,78,99,110,119,163,164,181,183,217,266,267,272,273,289,293,296,297,305,306,307,309,310,315,336,337,338,339,340,341,345,348,356,359,366,369,370,376,380,389,396,401,411,413,415,421,427,429,433,],[63,63,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-70,-71,-118,-127,-128,-135,-136,-145,-146,-147,-148,-165,-166,-170,-171,-172,-173,-174,-181,-182,-183,-184,-185,63,-75,63,-74,-73,63,63,-72,-40,-41,-156,63,63,63,-149,-150,-176,-178,-179,-187,-112,-15,-155,-151,-152,-153,-154,-175,-186,-162,-167,-117,-161,-169,-180,-168,63,-116,-163,63,-137,-138,-164,-129,-139,-140,-130,]),'IF':([27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,65,66,68,69,70,71,72,74,75,76,77,78,99,110,119,163,164,181,183,217,266,267,272,273,289,293,296,297,305,306,307,309,310,315,336,337,338,339,340,341,345,348,356,359,366,369,370,376,380,389,396,401,411,413,415,421,427,429,433,],[64,64,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-70,-71,-118,-127,-128,-135,-136,-145,-146,-147,-148,-165,-166,-170,-171,-172,-173,-174,-181,-182,-183,-184,-185,64,-75,64,-74,-73,64,64,-72,-40,-41,-156,64,64,64,-149,-150,-176,-178,-179,-187,-112,-15,-155,-151,-152,-153,-154,-175,-186,-162,-167,-117,-161,-169,-180,-168,64,-116,-163,64,-137,-138,-164,-129,-139,-140,-130,]),'STACK':([27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,65,66,68,69,70,71,72,74,75,76,77,78,99,110,119,163,164,181,183,215,217,266,267,272,273,289,293,296,297,305,306,307,309,310,315,336,337,338,339,340,341,345,348,356,359,366,369,370,376,380,389,396,401,411,413,415,421,427,429,433,],[67,67,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-70,-71,-118,-127,-128,-135,-136,-145,-146,-147,-148,-165,-166,-170,-171,-172,-173,-174,-181,-182,-183,-184,-185,67,-75,67,-74,-73,67,67,277,-72,-40,-41,-156,67,67,67,-149,-150,-176,-178,-179,-187,-112,-15,-155,-151,-152,-153,-154,-175,-186,-162,-167,-117,-161,-169,-180,-168,67,-116,-163,67,-137,-138,-164,-129,-139,-140,-130,]),'QUEUE':([27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,65,66,68,69,70,71,72,74,75,76,77,78,99,110,119,163,164,181,183,216,217,266,267,272,273,289,293,296,297,305,306,307,309,310,315,336,337,338,339,340,341,345,348,356,359,366,369,370,376,380,389,396,401,411,413,415,421,427,429,433,],[73,73,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-70,-71,-118,-127,-128,-135,-136,-145,-146,-147,-148,-165,-166,-170,-171,-172,-173,-174,-181,-182,-183,-184,-185,73,-75,73,-74,-73,73,73,278,-72,-40,-41,-156,73,73,73,-149,-150,-176,-178,-179,-187,-112,-15,-155,-151,-152,-153,-154,-175,-186,-162,-167,-117,-161,-169,-180,-168,73,-116,-163,73,-137,-138,-164,-129,-139,-140,-130,]),'CONST':([27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,65,66,68,69,70,71,72,74,75,76,77,78,79,88,89,99,110,113,119,163,164,167,168,169,181,183,217,266,267,272,273,289,293,296,297,305,306,307,309,310,315,336,337,338,339,340,341,345,348,356,359,366,369,370,376,380,389,396,401,411,413,415,421,427,429,431,433,],[80,80,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-70,-71,-118,-127,-128,-135,-136,-145,-146,-147,-148,-165,-166,-170,-171,-172,-173,-174,-181,-182,-183,-184,-185,107,-76,-77,80,-75,80,80,-74,-73,80,-131,-132,80,80,-72,-40,-41,-156,80,80,80,-149,-150,-176,-178,-179,-187,-112,-15,-155,-151,-152,-153,-154,-175,-186,-162,-167,-117,-161,-169,-180,-168,80,-116,-163,80,-137,-138,-164,-129,-139,-140,80,-130,]),'THREAD':([27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,58,59,60,61,62,65,66,68,69,70,71,72,74,75,76,77,78,99,110,119,163,164,181,183,217,218,266,267,272,273,289,293,296,297,305,306,307,309,310,315,336,337,338,339,340,341,345,348,356,359,366,369,370,376,380,382,383,389,396,401,411,413,415,421,427,429,433,],[82,82,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-70,-71,82,-118,-127,-128,-135,-136,-145,-146,-147,-148,-165,-166,-170,-171,-172,-173,-174,-181,-182,-183,-184,-185,82,-75,82,-74,-73,82,82,-72,279,-40,-41,-156,82,82,82,-149,-150,-176,-178,-179,-187,-112,-15,-155,-151,-152,-153,-154,-175,-186,-162,-167,-117,-161,-169,-180,-168,82,-113,-114,-116,-163,82,-137,-138,-164,-129,-139,-140,-130,]),'TRY':([27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,65,66,68,69,70,71,72,74,75,76,77,78,99,110,119,163,164,181,183,217,266,267,272,273,289,293,296,297,305,306,307,309,310,315,336,337,338,339,340,341,345,348,356,359,366,369,370,376,380,389,396,401,411,413,415,421,427,429,433,],[83,83,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-70,-71,-118,-127,-128,-135,-136,-145,-146,-147,-148,-165,-166,-170,-171,-172,-173,-174,-181,-182,-183,-184,-185,83,-75,83,-74,-73,83,83,-72,-40,-41,-156,83,83,83,-149,-150,-176,-178,-179,-187,-112,-15,-155,-151,-152,-153,-154,-175,-186,-162,-167,-117,-161,-169,-180,-168,83,-116,-163,83,-137,-138,-164,-129,-139,-140,-130,]),'LIST':([27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,65,66,68,69,70,71,72,74,75,76,77,78,99,110,119,163,164,181,183,217,266,267,272,273,289,293,296,297,305,306,307,309,310,315,336,337,338,339,340,341,345,348,354,355,356,359,366,369,370,376,380,389,396,401,411,413,415,421,427,429,433,],[84,84,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-70,-71,-118,-127,-128,-135,-136,-145,-146,-147,-148,-165,-166,-170,-171,-172,-173,-174,-181,-182,-183,-184,-185,84,-75,84,-74,-73,84,84,-72,-40,-41,-156,84,84,84,-149,-150,-176,-178,-179,-187,-112,-15,-155,-151,-152,-153,-154,-175,-186,-162,374,375,-167,-117,-161,-169,-180,-168,84,-116,-163,84,-137,-138,-164,-129,-139,-140,-130,]),'WHILE':([27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,65,66,68,69,70,71,72,74,75,76,77,78,99,110,119,163,164,181,183,217,229,266,267,272,273,289,293,296,297,305,306,307,309,310,315,336,337,338,339,340,341,345,348,356,359,366,369,370,376,380,389,396,401,411,413,415,421,427,429,433,],[86,86,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-70,-71,-118,-127,-128,-135,-136,-145,-146,-147,-148,-165,-166,-170,-171,-172,-173,-174,-181,-182,-183,-184,-185,86,-75,86,-74,-73,86,86,-72,290,-40,-41,-156,86,86,86,-149,-150,-176,-178,-179,-187,-112,-15,-155,-151,-152,-153,-154,-175,-186,-162,-167,-117,-161,-169,-180,-168,86,-116,-163,86,-137,-138,-164,-129,-139,-140,-130,]),'DO':([27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,65,66,68,69,70,71,72,74,75,76,77,78,99,110,119,163,164,181,183,217,266,267,272,273,289,293,296,297,305,306,307,309,310,315,336,337,338,339,340,341,345,348,356,359,366,369,370,376,380,389,396,401,411,413,415,421,427,429,433,],[87,87,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-70,-71,-118,-127,-128,-135,-136,-145,-146,-147,-148,-165,-166,-170,-171,-172,-173,-174,-181,-182,-183,-184,-185,87,-75,87,-74,-73,87,87,-72,-40,-41,-156,87,87,87,-149,-150,-176,-178,-179,-187,-112,-15,-155,-151,-152,-153,-154,-175,-186,-162,-167,-117,-161,-169,-180,-168,87,-116,-163,87,-137,-138,-164,-129,-139,-140,-130,]),'PRIVATE':([27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,65,66,68,69,70,71,72,74,75,76,77,78,99,110,113,119,163,164,167,168,169,181,183,217,266,267,272,273,289,293,296,297,305,306,307,309,310,315,336,337,338,339,340,341,345,348,356,359,366,369,370,376,380,389,396,401,411,413,415,421,427,429,431,433,],[89,89,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-70,-71,-118,-127,-128,-135,-136,-145,-146,-147,-148,-165,-166,-170,-171,-172,-173,-174,-181,-182,-183,-184,-185,89,-75,89,89,-74,-73,89,-131,-132,89,89,-72,-40,-41,-156,89,89,89,-149,-150,-176,-178,-179,-187,-112,-15,-155,-151,-152,-153,-154,-175,-186,-162,-167,-117,-161,-169,-180,-168,89,-116,-163,89,-137,-138,-164,-129,-139,-140,89,-130,]),'INTTYPE':([27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,65,66,68,69,70,71,72,74,75,76,77,78,79,80,88,89,99,107,110,113,114,119,163,164,167,168,169,181,183,217,266,267,272,273,289,293,296,297,305,306,307,309,310,315,336,337,338,339,340,341,345,348,356,359,366,369,370,376,380,386,389,396,401,411,413,415,421,427,429,431,433,],[85,85,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-70,-71,-118,-127,-128,-135,-136,-145,-146,-147,-148,-165,-166,-170,-171,-172,-173,-174,-181,-182,-183,-184,-185,85,85,-76,-77,85,85,-75,85,171,85,-74,-73,85,-131,-132,85,85,-72,-40,-41,-156,85,85,85,-149,-150,-176,-178,-179,-187,-112,-15,-155,-151,-152,-153,-154,-175,-186,-162,-167,-117,-161,-169,-180,-168,85,394,-116,-163,85,-137,-138,-164,-129,-139,-140,85,-130,]),'FLOATTYPE':([27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,65,66,68,69,70,71,72,74,75,76,77,78,79,80,88,89,99,107,110,113,119,163,164,167,168,169,181,183,217,266,267,272,273,289,293,296,297,305,306,307,309,310,315,336,337,338,339,340,341,345,348,356,359,366,369,370,376,380,389,396,401,411,413,415,421,427,429,431,433,],[90,90,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-70,-71,-118,-127,-128,-135,-136,-145,-146,-147,-148,-165,-166,-170,-171,-172,-173,-174,-181,-182,-183,-184,-185,90,90,-76,-77,90,90,-75,90,90,-74,-73,90,-131,-132,90,90,-72,-40,-41,-156,90,90,90,-149,-150,-176,-178,-179,-187,-112,-15,-155,-151,-152,-153,-154,-175,-186,-162,-167,-117,-161,-169,-180,-168,90,-116,-163,90,-137,-138,-164,-129,-139,-140,90,-130,]),'BOOLTYPE':([27,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,65,66,68,69,70,71,72,74,75,76,77,78,79,80,88,89,99,107,110,113,119,163,164,167,168,169,181,183,217,266,267,272,273,289,293,296,297,305,306,307,309,310,315,336,337,338,339,340,341,345,348,356,359,366,369,370,376,380,389,396,401,411,413,415,421,427,429,431,433,],[91,91,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-70,-71,-118,-127,-128,-135,-136,-145,-146,-147,-148,-165,-166,-170,-171,-172,-173,-174,-181,-182,-183,-184,-185,91,91,-76,-77,91,91,-75,91,91,-74,-73,91,-131,-132,91,91,-72,-40,-41,-156,91,91,91,-149,-150,-176,-178,-179,-187,-112,-15,-155,-151,-152,-153,-154,-175,-186,-162,-167,-117,-161,-169,-180,-168,91,-116,-163,91,-137,-138,-164,-129,-139,-140,91,-130,]),'DOT':([32,112,147,269,331,],[98,-126,200,311,358,]),'METHOD':([63,148,271,],[103,201,201,]),'SMALLER_THAN':([84,154,156,157,158,159,238,251,253,276,326,328,374,375,],[114,-39,210,-36,-37,-38,-39,-39,210,-39,-39,-39,385,386,]),'ARROW':([94,],[130,]),'COMMA':([96,116,121,125,126,150,152,153,154,155,156,157,158,159,185,186,201,207,224,225,226,227,231,232,233,238,239,240,241,274,275,276,323,326,327,328,329,418,420,],[131,172,176,178,179,-65,-32,-33,-34,-35,-57,-36,-37,-38,-87,-86,271,-66,-39,-36,-85,-50,-39,-37,-90,-34,-32,-93,-33,-67,-58,-39,-51,-34,-93,-34,-96,423,425,]),'ASSIGNATION':([97,105,106,111,112,117,122,127,235,237,281,282,],[132,160,161,165,-126,173,177,180,291,292,321,322,]),'CLEAR':([98,],[133,]),'COUNT':([98,],[134,]),'ADD':([98,],[135,]),'REMOVEAT':([98,],[136,]),'PUSH':([98,],[137,]),'POP':([98,],[138,]),'PEEK':([98,],[139,]),'ISEMPTY':([98,],[140,]),'ENQUEUE':([98,],[141,]),'DEQUEUE':([98,],[142,]),'STRING':([101,132,189,190,191,195,303,362,412,423,],[144,186,248,250,257,257,342,378,418,418,]),'LOGICNOT':([104,118,180,204,205,206,291,292,325,381,],[151,151,151,151,-68,-69,151,151,151,151,]),'BOOLTRUE':([104,118,151,180,191,195,204,205,206,291,292,325,381,],[152,152,152,239,152,152,152,-68,-69,239,152,152,152,]),'BOOLFALSE':([104,118,151,180,191,195,204,205,206,291,292,325,381,],[153,153,153,241,153,153,153,-68,-69,153,241,153,153,]),'INTEGER':([104,118,151,173,177,180,189,190,191,195,204,205,206,208,209,210,211,212,213,214,283,284,285,286,287,288,291,292,325,381,414,425,],[157,157,157,225,157,157,247,249,157,157,157,-68,-69,157,-59,-60,-61,-62,-63,-64,157,-52,-53,-54,-55,-56,157,157,157,157,420,420,]),'FLOAT_NUMBER':([104,118,151,173,177,180,191,195,204,205,206,208,209,210,211,212,213,214,283,284,285,286,287,288,291,292,325,381,],[158,158,158,158,232,158,158,158,158,-68,-69,158,-59,-60,-61,-62,-63,-64,158,-52,-53,-54,-55,-56,158,158,158,158,]),'DECIMAL_NUMBER':([104,118,151,173,177,180,191,195,204,205,206,208,209,210,211,212,213,214,283,284,285,286,287,288,291,292,325,381,],[159,159,159,159,159,159,159,159,159,-68,-69,159,-59,-60,-61,-62,-63,-64,159,-52,-53,-54,-55,-56,159,159,159,159,]),'LOGICAND':([150,152,153,154,155,156,157,158,159,238,239,241,275,276,326,328,],[205,-32,-33,-34,-35,-57,-36,-37,-38,-34,-32,-33,-58,-39,-34,-34,]),'LOGICOR':([150,152,153,154,155,156,157,158,159,238,239,241,275,276,326,328,],[206,-32,-33,-34,-35,-57,-36,-37,-38,-34,-32,-33,-58,-39,-34,-34,]),'GREATER_THAN':([154,156,157,158,159,170,171,238,251,253,276,326,328,393,394,],[-39,209,-36,-37,-38,221,222,-39,-39,209,-39,-39,-39,399,400,]),'EQUAL_COMPARATION':([154,156,157,158,159,238,251,253,276,326,328,],[-39,211,-36,-37,-38,-39,-39,211,-39,-39,-39,]),'INEQUALITY':([154,156,157,158,159,238,251,253,276,326,328,],[-39,212,-36,-37,-38,-39,-39,212,-39,-39,-39,]),'GREATER_THAN_OR_EQUAL':([154,156,157,158,159,238,251,253,276,326,328,],[-39,213,-36,-37,-38,-39,-39,213,-39,-39,-39,]),'SMALLER_THAN_OR_EQUAL':([154,156,157,158,159,238,251,253,276,326,328,],[-39,214,-36,-37,-38,-39,-39,214,-39,-39,-39,]),'PLUS':([157,158,159,224,225,227,231,232,257,276,342,],[-36,-37,-38,-39,-36,284,-39,-37,303,-39,303,]),'MINUS':([157,158,159,224,225,227,231,232,276,],[-36,-37,-38,-39,-36,285,-39,-37,-39,]),'TIMES':([157,158,159,224,225,227,231,232,276,],[-36,-37,-38,-39,-36,286,-39,-37,-39,]),'DIVIDE':([157,158,159,224,225,227,231,232,276,],[-36,-37,-38,-39,-36,287,-39,-37,-39,]),'PERCENT':([157,158,159,224,225,227,231,232,276,],[-36,-37,-38,-39,-36,288,-39,-37,-39,]),'NEW':([160,161,165,321,322,],[215,216,218,354,355,]),'CHAR':([191,195,],[258,258,]),'READ':([191,195,],[260,260,]),'START':([200,],[270,]),'CATCH':([219,],[280,]),'JOIN':([311,],[346,]),'EXCEPTION':([320,],[353,]),'ELSE':([348,409,],[367,367,]),'ELSE_IF':([348,409,],[368,368,]),'ERROR':([353,402,],[373,406,]),'FINALLY':([421,],[426,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block_publicClass':([4,],[5,]),'block_main_method':([12,],[14,]),'all_block_code':([27,34,99,119,181,183,273,289,293,380,401,],[33,100,143,175,242,244,316,324,330,316,316,]),'block_code':([27,34,99,119,181,183,273,289,293,380,401,],[34,34,34,34,34,34,34,34,34,34,34,]),'def_const_or_var':([27,34,99,113,119,167,181,183,273,289,293,380,401,431,],[35,35,35,168,35,168,35,35,35,35,35,35,35,168,]),'print_data':([27,34,99,113,119,167,181,183,273,289,293,380,401,431,],[36,36,36,169,36,169,36,36,36,36,36,36,36,169,]),'thread_main':([27,34,99,119,181,183,273,289,293,380,401,],[37,37,37,37,37,37,37,37,37,37,37,]),'concurrent_method':([27,34,99,119,181,183,273,289,293,319,358,380,401,],[38,38,38,38,38,38,38,38,38,352,377,38,38,]),'block_try_catch':([27,34,99,119,181,183,273,289,293,380,401,],[39,39,39,39,39,39,39,39,39,39,39,]),'lists':([27,34,99,119,181,183,273,289,293,380,401,],[40,40,40,40,40,40,40,40,40,40,40,]),'functions_list':([27,34,99,119,181,183,273,289,293,380,401,],[41,41,41,41,41,41,41,41,41,41,41,]),'statement_lambda':([27,34,99,119,181,183,273,289,293,380,401,],[42,42,42,42,42,42,42,42,42,42,42,]),'enums':([27,34,99,119,181,183,273,289,293,380,401,],[43,43,43,43,43,43,43,43,43,43,43,]),'normal_if':([27,34,99,119,181,183,273,289,293,380,401,],[44,44,44,44,44,44,315,44,44,315,315,]),'block_while':([27,34,99,119,181,183,273,289,293,380,401,],[45,45,45,45,45,45,45,45,45,45,45,]),'stack_struct':([27,34,99,119,181,183,273,289,293,380,401,],[46,46,46,46,46,46,46,46,46,46,46,]),'functions_stack':([27,34,99,119,181,183,273,289,293,380,401,],[47,47,47,47,47,47,47,47,47,47,47,]),'queue_struct':([27,34,99,119,181,183,273,289,293,380,401,],[48,48,48,48,48,48,48,48,48,48,48,]),'functions_queue':([27,34,99,119,181,183,273,289,293,380,401,],[49,49,49,49,49,49,49,49,49,49,49,]),'constant_assignation':([27,34,99,113,119,167,181,183,273,289,293,380,401,431,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'variable_assignation':([27,34,99,113,119,167,181,183,273,289,293,380,401,431,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'declaration_thread':([27,34,53,99,119,181,183,273,289,293,380,401,],[53,53,102,53,53,53,53,53,53,53,53,53,]),'try_catch_simply':([27,34,99,119,181,183,273,289,293,380,401,],[55,55,55,55,55,55,55,55,55,55,55,]),'try_catch_finally':([27,34,99,119,181,183,273,289,293,380,401,],[56,56,56,56,56,56,56,56,56,56,56,]),'list_empty':([27,34,99,119,181,183,273,289,293,380,401,],[57,57,57,57,57,57,57,57,57,57,57,]),'list_full':([27,34,99,119,181,183,273,289,293,380,401,],[58,58,58,58,58,58,58,58,58,58,58,]),'list_func_clear':([27,34,99,119,181,183,273,289,293,380,401,],[59,59,59,59,59,59,59,59,59,59,59,]),'list_func_count':([27,34,99,119,181,183,273,289,293,380,401,],[60,60,60,60,60,60,60,60,60,60,60,]),'list_func_add':([27,34,99,119,181,183,273,289,293,380,401,],[61,61,61,61,61,61,61,61,61,61,61,]),'list_func_removeat':([27,34,99,119,181,183,273,289,293,380,401,],[62,62,62,62,62,62,62,62,62,62,62,]),'normal_while':([27,34,99,119,181,183,273,289,293,380,401,],[65,65,65,65,65,65,65,65,65,65,65,]),'do_while':([27,34,99,119,181,183,273,289,293,380,401,],[66,66,66,66,66,66,66,66,66,66,66,]),'stack_push':([27,34,99,119,181,183,273,289,293,380,401,],[68,68,68,68,68,68,68,68,68,68,68,]),'stack_pop':([27,34,99,119,181,183,273,289,293,380,401,],[69,69,69,69,69,69,69,69,69,69,69,]),'stack_clear':([27,34,99,119,181,183,273,289,293,380,401,],[70,70,70,70,70,70,70,70,70,70,70,]),'stack_peek':([27,34,99,119,181,183,273,289,293,380,401,],[71,71,71,71,71,71,71,71,71,71,71,]),'stack_isEmpty':([27,34,99,119,181,183,273,289,293,380,401,],[72,72,72,72,72,72,72,72,72,72,72,]),'queue_enqueue':([27,34,99,119,181,183,273,289,293,380,401,],[74,74,74,74,74,74,74,74,74,74,74,]),'queue_dequeue':([27,34,99,119,181,183,273,289,293,380,401,],[75,75,75,75,75,75,75,75,75,75,75,]),'queue_clear':([27,34,99,119,181,183,273,289,293,380,401,],[76,76,76,76,76,76,76,76,76,76,76,]),'queue_isEmpty':([27,34,99,119,181,183,273,289,293,380,401,],[77,77,77,77,77,77,77,77,77,77,77,]),'queue_peek':([27,34,99,119,181,183,273,289,293,380,401,],[78,78,78,78,78,78,78,78,78,78,78,]),'access_modifiers':([27,34,99,113,119,167,181,183,273,289,293,380,401,431,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'assignation_type_value_multiple':([27,34,79,80,99,107,113,119,167,181,183,273,289,293,380,401,431,],[81,81,108,109,81,162,81,81,81,81,81,81,81,81,81,81,81,]),'assignation_string_multiple':([31,131,],[95,184,]),'assignation_string':([31,131,],[96,96,]),'thread_identificator':([82,93,102,146,199,268,294,319,332,],[111,129,147,147,269,269,331,351,331,]),'assignation_int_multiple':([85,172,],[115,223,]),'assignation_int':([85,172,],[116,116,]),'assignation_float_multiple':([90,176,],[120,230,]),'assignation_float':([90,176,],[121,121,]),'assignation_true_multiple':([91,178,],[123,234,]),'assignation_false_multiple':([91,179,],[124,236,]),'assignation_true':([91,178,],[125,125,]),'assignation_false':([91,179,],[126,126,]),'thread_init':([102,146,],[146,199,]),'boolean_operation':([104,118,180,204,291,292,325,381,],[149,174,240,274,327,329,357,391,]),'value_boolean':([104,118,151,180,191,195,204,291,292,325,381,],[150,150,207,150,254,254,150,150,150,150,150,]),'comparison_operation':([104,118,151,180,191,195,204,208,291,292,325,381,],[155,155,155,155,155,155,155,275,155,155,155,155,]),'value_numeric':([104,118,151,173,177,180,191,195,204,208,283,291,292,325,381,],[156,156,156,227,227,156,253,253,156,156,227,156,156,156,156,]),'all_block_code_try':([113,167,431,],[166,220,432,]),'block_code_try':([113,167,431,],[167,167,167,]),'list_enums':([148,271,],[202,313,]),'boolean_operator':([150,],[204,]),'comparison_operator':([156,253,],[208,208,]),'arithmetic_operation':([173,177,283,],[226,233,323,]),'value':([191,195,],[252,264,]),'value_string':([191,195,],[255,255,]),'read_data':([191,195,],[256,256,]),'concatenation':([191,195,303,],[259,259,343,]),'thread_wait':([199,268,],[268,310,]),'arithmetic_operator':([227,],[283,]),'block_if':([273,380,401,],[314,390,405,]),'thread_logic':([294,],[332,]),'thread_sentence':([294,332,],[333,360,]),'thread_expression':([294,332,],[334,334,]),'other_if':([348,409,],[366,415,]),'strings_list':([412,423,],[417,428,]),'ints_list':([414,425,],[419,430,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> USING SYSTEM DOTANDCOMMA block_publicClass','program',4,'p_program','sintactico2.py',8),
  ('block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_main_method RKEY','block_publicClass',6,'p_block_publicClass','sintactico2.py',11),
  ('block_publicClass -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code','block_publicClass',13,'p_block_publicClass','sintactico2.py',12),
  ('block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY','block_main_method',12,'p_block_main_method','sintactico2.py',16),
  ('block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY all_block_code','block_main_method',13,'p_block_main_method','sintactico2.py',17),
  ('block_code -> def_const_or_var','block_code',1,'p_block_code','sintactico2.py',21),
  ('block_code -> print_data','block_code',1,'p_block_code','sintactico2.py',22),
  ('block_code -> thread_main','block_code',1,'p_block_code','sintactico2.py',23),
  ('block_code -> concurrent_method','block_code',1,'p_block_code','sintactico2.py',24),
  ('block_code -> block_try_catch','block_code',1,'p_block_code','sintactico2.py',26),
  ('block_code -> lists','block_code',1,'p_block_code','sintactico2.py',27),
  ('block_code -> functions_list','block_code',1,'p_block_code','sintactico2.py',28),
  ('block_code -> statement_lambda','block_code',1,'p_block_code','sintactico2.py',30),
  ('block_code -> enums','block_code',1,'p_block_code','sintactico2.py',32),
  ('block_code -> normal_if','block_code',1,'p_block_code','sintactico2.py',33),
  ('block_code -> block_while','block_code',1,'p_block_code','sintactico2.py',34),
  ('block_code -> stack_struct','block_code',1,'p_block_code','sintactico2.py',35),
  ('block_code -> functions_stack','block_code',1,'p_block_code','sintactico2.py',36),
  ('block_code -> queue_struct','block_code',1,'p_block_code','sintactico2.py',37),
  ('block_code -> functions_queue','block_code',1,'p_block_code','sintactico2.py',38),
  ('all_block_code -> block_code','all_block_code',1,'p_all_block_code','sintactico2.py',42),
  ('all_block_code -> block_code all_block_code','all_block_code',2,'p_all_block_code','sintactico2.py',43),
  ('data_type -> CHARTYPE','data_type',1,'p_data_type','sintactico2.py',49),
  ('data_type -> STRINGTYPE','data_type',1,'p_data_type','sintactico2.py',50),
  ('data_type -> FLOATTYPE','data_type',1,'p_data_type','sintactico2.py',51),
  ('data_type -> DECIMALTYPE','data_type',1,'p_data_type','sintactico2.py',52),
  ('data_type -> INTTYPE','data_type',1,'p_data_type','sintactico2.py',53),
  ('data_type -> BOOLTYPE','data_type',1,'p_data_type','sintactico2.py',54),
  ('value_string -> STRING','value_string',1,'p_value_string','sintactico2.py',60),
  ('value_string -> CHAR','value_string',1,'p_value_string','sintactico2.py',61),
  ('value_string -> concatenation','value_string',1,'p_value_string','sintactico2.py',62),
  ('value_boolean -> BOOLTRUE','value_boolean',1,'p_value_boolean','sintactico2.py',66),
  ('value_boolean -> BOOLFALSE','value_boolean',1,'p_value_boolean','sintactico2.py',67),
  ('value_boolean -> VARIABLE','value_boolean',1,'p_value_boolean','sintactico2.py',68),
  ('value_boolean -> comparison_operation','value_boolean',1,'p_value_boolean','sintactico2.py',69),
  ('value_numeric -> INTEGER','value_numeric',1,'p_value_numeric','sintactico2.py',73),
  ('value_numeric -> FLOAT_NUMBER','value_numeric',1,'p_value_numeric','sintactico2.py',74),
  ('value_numeric -> DECIMAL_NUMBER','value_numeric',1,'p_value_numeric','sintactico2.py',75),
  ('value_numeric -> VARIABLE','value_numeric',1,'p_value_numeric','sintactico2.py',76),
  ('print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA','print_data',5,'p_print_data','sintactico2.py',80),
  ('print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA','print_data',5,'p_print_data','sintactico2.py',81),
  ('read_data -> READ LPARENT RPARENT DOTANDCOMMA','read_data',4,'p_read_data','sintactico2.py',85),
  ('concatenation -> STRING','concatenation',1,'p_concatenation','sintactico2.py',89),
  ('concatenation -> STRING PLUS concatenation','concatenation',3,'p_concatenation','sintactico2.py',90),
  ('value -> value_numeric','value',1,'p_value','sintactico2.py',94),
  ('value -> value_boolean','value',1,'p_value','sintactico2.py',95),
  ('value -> value_string','value',1,'p_value','sintactico2.py',96),
  ('value -> VARIABLE','value',1,'p_value','sintactico2.py',97),
  ('value -> read_data','value',1,'p_value','sintactico2.py',98),
  ('arithmetic_operation -> value_numeric','arithmetic_operation',1,'p_arithmetic_operation','sintactico2.py',104),
  ('arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation','arithmetic_operation',3,'p_arithmetic_operation','sintactico2.py',105),
  ('arithmetic_operator -> PLUS','arithmetic_operator',1,'p_arithmetic_operator','sintactico2.py',109),
  ('arithmetic_operator -> MINUS','arithmetic_operator',1,'p_arithmetic_operator','sintactico2.py',110),
  ('arithmetic_operator -> TIMES','arithmetic_operator',1,'p_arithmetic_operator','sintactico2.py',111),
  ('arithmetic_operator -> DIVIDE','arithmetic_operator',1,'p_arithmetic_operator','sintactico2.py',112),
  ('arithmetic_operator -> PERCENT','arithmetic_operator',1,'p_arithmetic_operator','sintactico2.py',113),
  ('comparison_operation -> value_numeric','comparison_operation',1,'p_comparison_operation','sintactico2.py',117),
  ('comparison_operation -> value_numeric comparison_operator comparison_operation','comparison_operation',3,'p_comparison_operation','sintactico2.py',118),
  ('comparison_operator -> GREATER_THAN','comparison_operator',1,'p_comparison_operator','sintactico2.py',122),
  ('comparison_operator -> SMALLER_THAN','comparison_operator',1,'p_comparison_operator','sintactico2.py',123),
  ('comparison_operator -> EQUAL_COMPARATION','comparison_operator',1,'p_comparison_operator','sintactico2.py',124),
  ('comparison_operator -> INEQUALITY','comparison_operator',1,'p_comparison_operator','sintactico2.py',125),
  ('comparison_operator -> GREATER_THAN_OR_EQUAL','comparison_operator',1,'p_comparison_operator','sintactico2.py',126),
  ('comparison_operator -> SMALLER_THAN_OR_EQUAL','comparison_operator',1,'p_comparison_operator','sintactico2.py',127),
  ('boolean_operation -> value_boolean','boolean_operation',1,'p_boolean_operation','sintactico2.py',131),
  ('boolean_operation -> LOGICNOT value_boolean','boolean_operation',2,'p_boolean_operation','sintactico2.py',132),
  ('boolean_operation -> value_boolean boolean_operator boolean_operation','boolean_operation',3,'p_boolean_operation','sintactico2.py',133),
  ('boolean_operator -> LOGICAND','boolean_operator',1,'p_boolean_operator','sintactico2.py',137),
  ('boolean_operator -> LOGICOR','boolean_operator',1,'p_boolean_operator','sintactico2.py',138),
  ('def_const_or_var -> constant_assignation','def_const_or_var',1,'p_def_const_or_var','sintactico2.py',144),
  ('def_const_or_var -> variable_assignation','def_const_or_var',1,'p_def_const_or_var','sintactico2.py',145),
  ('constant_assignation -> access_modifiers CONST assignation_type_value_multiple DOTANDCOMMA','constant_assignation',4,'p_constant_assignation','sintactico2.py',149),
  ('constant_assignation -> CONST assignation_type_value_multiple DOTANDCOMMA','constant_assignation',3,'p_constant_assignation','sintactico2.py',150),
  ('variable_assignation -> access_modifiers assignation_type_value_multiple DOTANDCOMMA','variable_assignation',3,'p_variable_assignation','sintactico2.py',154),
  ('variable_assignation -> assignation_type_value_multiple DOTANDCOMMA','variable_assignation',2,'p_variable_assignation','sintactico2.py',155),
  ('access_modifiers -> PUBLIC','access_modifiers',1,'p_access_modifiers','sintactico2.py',159),
  ('access_modifiers -> PRIVATE','access_modifiers',1,'p_access_modifiers','sintactico2.py',160),
  ('assignation_type_value -> INTTYPE assignation_int','assignation_type_value',2,'p_assignation_type_value','sintactico2.py',164),
  ('assignation_type_value -> STRINGTYPE assignation_string','assignation_type_value',2,'p_assignation_type_value','sintactico2.py',165),
  ('assignation_type_value -> FLOATTYPE assignation_float','assignation_type_value',2,'p_assignation_type_value','sintactico2.py',166),
  ('assignation_type_value -> BOOLTYPE assignation_true','assignation_type_value',2,'p_assignation_type_value','sintactico2.py',167),
  ('assignation_type_value -> BOOLTYPE assignation_false','assignation_type_value',2,'p_assignation_type_value','sintactico2.py',168),
  ('assignation_int -> VARIABLE ASSIGNATION INTEGER','assignation_int',3,'p_assignation_int','sintactico2.py',172),
  ('assignation_int -> VARIABLE ASSIGNATION VARIABLE','assignation_int',3,'p_assignation_int','sintactico2.py',173),
  ('assignation_int -> VARIABLE ASSIGNATION arithmetic_operation','assignation_int',3,'p_assignation_int','sintactico2.py',174),
  ('assignation_string -> VARIABLE ASSIGNATION STRING','assignation_string',3,'p_assignation_string','sintactico2.py',178),
  ('assignation_string -> VARIABLE ASSIGNATION VARIABLE','assignation_string',3,'p_assignation_string','sintactico2.py',179),
  ('assignation_float -> VARIABLE ASSIGNATION FLOAT_NUMBER','assignation_float',3,'p_assignation_float','sintactico2.py',183),
  ('assignation_float -> VARIABLE ASSIGNATION VARIABLE','assignation_float',3,'p_assignation_float','sintactico2.py',184),
  ('assignation_float -> VARIABLE ASSIGNATION arithmetic_operation','assignation_float',3,'p_assignation_float','sintactico2.py',185),
  ('assignation_true -> VARIABLE ASSIGNATION BOOLTRUE','assignation_true',3,'p_assignation_true','sintactico2.py',189),
  ('assignation_true -> VARIABLE ASSIGNATION VARIABLE','assignation_true',3,'p_assignation_true','sintactico2.py',190),
  ('assignation_true -> VARIABLE ASSIGNATION boolean_operation','assignation_true',3,'p_assignation_true','sintactico2.py',191),
  ('assignation_false -> VARIABLE ASSIGNATION BOOLFALSE','assignation_false',3,'p_assignation_false','sintactico2.py',195),
  ('assignation_false -> VARIABLE ASSIGNATION VARIABLE','assignation_false',3,'p_assignation_false','sintactico2.py',196),
  ('assignation_false -> VARIABLE ASSIGNATION boolean_operation','assignation_false',3,'p_assignation_false','sintactico2.py',197),
  ('assignation_type_value_multiple -> INTTYPE assignation_int_multiple','assignation_type_value_multiple',2,'p_assignation_type_value_multiple','sintactico2.py',202),
  ('assignation_type_value_multiple -> STRINGTYPE assignation_string_multiple','assignation_type_value_multiple',2,'p_assignation_type_value_multiple','sintactico2.py',203),
  ('assignation_type_value_multiple -> FLOATTYPE assignation_float_multiple','assignation_type_value_multiple',2,'p_assignation_type_value_multiple','sintactico2.py',204),
  ('assignation_type_value_multiple -> BOOLTYPE assignation_true_multiple','assignation_type_value_multiple',2,'p_assignation_type_value_multiple','sintactico2.py',205),
  ('assignation_type_value_multiple -> BOOLTYPE assignation_false_multiple','assignation_type_value_multiple',2,'p_assignation_type_value_multiple','sintactico2.py',206),
  ('assignation_int_multiple -> assignation_int','assignation_int_multiple',1,'p_assignation_int_multiple','sintactico2.py',210),
  ('assignation_int_multiple -> assignation_int COMMA assignation_int_multiple','assignation_int_multiple',3,'p_assignation_int_multiple','sintactico2.py',211),
  ('assignation_string_multiple -> assignation_string','assignation_string_multiple',1,'p_assignation_string_multiple','sintactico2.py',215),
  ('assignation_string_multiple -> assignation_string COMMA assignation_string_multiple','assignation_string_multiple',3,'p_assignation_string_multiple','sintactico2.py',216),
  ('assignation_float_multiple -> assignation_float','assignation_float_multiple',1,'p_assignation_float_multiple','sintactico2.py',220),
  ('assignation_float_multiple -> assignation_float COMMA assignation_float_multiple','assignation_float_multiple',3,'p_assignation_float_multiple','sintactico2.py',221),
  ('assignation_true_multiple -> assignation_true','assignation_true_multiple',1,'p_assignation_true_multiple','sintactico2.py',225),
  ('assignation_true_multiple -> assignation_true COMMA assignation_true_multiple','assignation_true_multiple',3,'p_assignation_true_multiple','sintactico2.py',226),
  ('assignation_false_multiple -> assignation_false','assignation_false_multiple',1,'p_assignation_false_multiple','sintactico2.py',230),
  ('assignation_false_multiple -> assignation_false COMMA assignation_false_multiple','assignation_false_multiple',3,'p_assignation_false_multiple','sintactico2.py',231),
  ('thread_main -> declaration_thread declaration_thread thread_init thread_init thread_wait thread_wait','thread_main',6,'p_thread_main','sintactico2.py',237),
  ('declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT thread_identificator RPARENT DOTANDCOMMA','declaration_thread',9,'p_declaration_thread','sintactico2.py',242),
  ('declaration_thread -> THREAD thread_identificator ASSIGNATION NEW THREAD LPARENT concurrent_method RPARENT DOTANDCOMMA','declaration_thread',9,'p_declaration_thread','sintactico2.py',243),
  ('thread_init -> thread_identificator DOT START LPARENT RPARENT DOTANDCOMMA','thread_init',6,'p_thread_init','sintactico2.py',248),
  ('thread_wait -> thread_identificator DOT JOIN LPARENT RPARENT DOTANDCOMMA','thread_wait',6,'p_thread_wait','sintactico2.py',253),
  ('concurrent_method -> STATIC VOID thread_identificator LPARENT RPARENT LKEY thread_logic RKEY','concurrent_method',8,'p_concurrent_method','sintactico2.py',258),
  ('concurrent_method -> WRITE','concurrent_method',1,'p_concurrent_method','sintactico2.py',259),
  ('thread_logic -> thread_sentence','thread_logic',1,'p_thread_logic','sintactico2.py',264),
  ('thread_logic -> thread_logic thread_sentence','thread_logic',2,'p_thread_logic','sintactico2.py',265),
  ('thread_sentence -> thread_expression DOTANDCOMMA','thread_sentence',2,'p_thread_sentence','sintactico2.py',270),
  ('thread_expression -> thread_identificator DOT concurrent_method LPARENT RPARENT','thread_expression',5,'p_thread_expression','sintactico2.py',275),
  ('thread_expression -> PRINT LPARENT STRING RPARENT','thread_expression',4,'p_thread_expression','sintactico2.py',276),
  ('thread_arguments -> thread_expression','thread_arguments',1,'p_thread_arguments','sintactico2.py',281),
  ('thread_arguments -> thread_arguments COMMA thread_expression','thread_arguments',3,'p_thread_arguments','sintactico2.py',282),
  ('thread_identificator -> VARIABLE','thread_identificator',1,'p_thread_identificator','sintactico2.py',287),
  ('block_try_catch -> try_catch_simply','block_try_catch',1,'p_block_try_catch','sintactico2.py',295),
  ('block_try_catch -> try_catch_finally','block_try_catch',1,'p_block_try_catch','sintactico2.py',296),
  ('try_catch_simply -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY','try_catch_simply',16,'p_try_catch_simply','sintactico2.py',300),
  ('try_catch_finally -> TRY LKEY all_block_code_try RKEY CATCH LPARENT EXCEPTION ERROR RPARENT LKEY PRINT LPARENT ERROR RPARENT DOTANDCOMMA RKEY FINALLY LKEY all_block_code_try RKEY','try_catch_finally',20,'p_try_catch_finally','sintactico2.py',303),
  ('block_code_try -> def_const_or_var','block_code_try',1,'p_block_code_try','sintactico2.py',306),
  ('block_code_try -> print_data','block_code_try',1,'p_block_code_try','sintactico2.py',307),
  ('all_block_code_try -> block_code_try','all_block_code_try',1,'p_all_block_code_try','sintactico2.py',311),
  ('all_block_code_try -> block_code_try all_block_code_try','all_block_code_try',2,'p_all_block_code_try','sintactico2.py',312),
  ('lists -> list_empty','lists',1,'p_lists','sintactico2.py',320),
  ('lists -> list_full','lists',1,'p_lists','sintactico2.py',321),
  ('list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA','list_empty',14,'p_list_empty','sintactico2.py',325),
  ('list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA','list_empty',14,'p_list_empty','sintactico2.py',326),
  ('list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA','list_full',17,'p_list_full','sintactico2.py',330),
  ('list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA','list_full',17,'p_list_full','sintactico2.py',331),
  ('strings_list -> STRING','strings_list',1,'p_strings_list','sintactico2.py',335),
  ('strings_list -> STRING COMMA strings_list','strings_list',3,'p_strings_list','sintactico2.py',336),
  ('ints_list -> INTEGER','ints_list',1,'p_ints_list','sintactico2.py',340),
  ('ints_list -> INTEGER COMMA ints_list','ints_list',3,'p_ints_list','sintactico2.py',341),
  ('functions_list -> list_func_clear','functions_list',1,'p_functions_list','sintactico2.py',345),
  ('functions_list -> list_func_count','functions_list',1,'p_functions_list','sintactico2.py',346),
  ('functions_list -> list_func_add','functions_list',1,'p_functions_list','sintactico2.py',347),
  ('functions_list -> list_func_removeat','functions_list',1,'p_functions_list','sintactico2.py',348),
  ('list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA','list_func_clear',6,'p_list_func_clear','sintactico2.py',352),
  ('list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA','list_func_count',6,'p_list_func_count','sintactico2.py',355),
  ('list_func_add -> VARIABLE DOT ADD LPARENT INTEGER RPARENT DOTANDCOMMA','list_func_add',7,'p_list_func_add','sintactico2.py',358),
  ('list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA','list_func_add',7,'p_list_func_add','sintactico2.py',359),
  ('list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA','list_func_removeat',7,'p_list_func_removeat','sintactico2.py',364),
  ('list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT STRING RPARENT DOTANDCOMMA','list_func_removeat',7,'p_list_func_removeat','sintactico2.py',365),
  ('statement_lambda -> LPARENT VARIABLE ARROW LKEY all_block_code RKEY RPARENT','statement_lambda',7,'p_statement_lambda','sintactico2.py',373),
  ('enums -> ENUM METHOD LKEY list_enums RKEY','enums',5,'p_enums','sintactico2.py',380),
  ('list_enums -> METHOD','list_enums',1,'p_list_enums','sintactico2.py',383),
  ('list_enums -> METHOD COMMA list_enums','list_enums',3,'p_list_enums','sintactico2.py',384),
  ('block_if -> normal_if','block_if',1,'p_block_if','sintactico2.py',393),
  ('block_if -> all_block_code','block_if',1,'p_block_if','sintactico2.py',394),
  ('normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if','normal_if',8,'p_normal_if','sintactico2.py',397),
  ('normal_if -> IF LPARENT boolean_operation RPARENT LKEY block_if RKEY','normal_if',7,'p_normal_if','sintactico2.py',398),
  ('other_if -> ELSE LKEY block_if RKEY','other_if',4,'p_other_if','sintactico2.py',402),
  ('other_if -> ELSE_IF LPARENT boolean_operation RPARENT LKEY block_if RKEY other_if','other_if',8,'p_other_if','sintactico2.py',403),
  ('block_while -> normal_while','block_while',1,'p_block_while','sintactico2.py',409),
  ('block_while -> do_while','block_while',1,'p_block_while','sintactico2.py',410),
  ('normal_while -> WHILE LPARENT boolean_operation RPARENT LKEY all_block_code RKEY','normal_while',7,'p_normal_while','sintactico2.py',414),
  ('do_while -> DO LKEY all_block_code RKEY WHILE LPARENT boolean_operation RPARENT','do_while',8,'p_do_while','sintactico2.py',417),
  ('stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA','stack_struct',8,'p_stack_struct','sintactico2.py',424),
  ('functions_stack -> stack_push','functions_stack',1,'p_functions_stack','sintactico2.py',427),
  ('functions_stack -> stack_pop','functions_stack',1,'p_functions_stack','sintactico2.py',428),
  ('functions_stack -> stack_clear','functions_stack',1,'p_functions_stack','sintactico2.py',429),
  ('functions_stack -> stack_peek','functions_stack',1,'p_functions_stack','sintactico2.py',430),
  ('functions_stack -> stack_isEmpty','functions_stack',1,'p_functions_stack','sintactico2.py',431),
  ('stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA','stack_push',7,'p_stack_push','sintactico2.py',434),
  ('stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA','stack_pop',6,'p_stack_pop','sintactico2.py',437),
  ('stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA','stack_clear',6,'p_stack_clear','sintactico2.py',440),
  ('stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA','stack_peek',6,'p_stack_peek','sintactico2.py',443),
  ('stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA','stack_isEmpty',6,'p_stack_isEmpty','sintactico2.py',446),
  ('queue_struct -> QUEUE VARIABLE ASSIGNATION NEW QUEUE LPARENT RPARENT DOTANDCOMMA','queue_struct',8,'p_queue_struct','sintactico2.py',451),
  ('functions_queue -> queue_enqueue','functions_queue',1,'p_functions_queue','sintactico2.py',454),
  ('functions_queue -> queue_dequeue','functions_queue',1,'p_functions_queue','sintactico2.py',455),
  ('functions_queue -> queue_clear','functions_queue',1,'p_functions_queue','sintactico2.py',456),
  ('functions_queue -> queue_isEmpty','functions_queue',1,'p_functions_queue','sintactico2.py',457),
  ('functions_queue -> queue_peek','functions_queue',1,'p_functions_queue','sintactico2.py',458),
  ('queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA','queue_enqueue',7,'p_queue_enqueue','sintactico2.py',462),
  ('queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA','queue_dequeue',6,'p_queue_dequeue','sintactico2.py',465),
  ('queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA','queue_clear',6,'p_queue_clear','sintactico2.py',468),
  ('queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA','queue_peek',6,'p_queue_peek','sintactico2.py',471),
  ('queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA','queue_isEmpty',6,'p_queue_isEmpty','sintactico2.py',474),
]
