
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADDITION_ASSIGNMENT ASSIGNATION BACK_SLASH BOOL BOOLFALSE BOOLTRUE BOOLTYPE BREAK CATCH CHAR CHARTYPE CLASS COMMA CONST DECIMALTYPE DECIMAL_NUMBER DECREMENT DIVIDE DIVISION_ASSIGNMENT DOLLARSIGN DOT DOTANDCOMMA DOUBLEPOINT DOUBLE_QUOTATION_MARKS ELSE EQUAL_COMPARATION EXCEPTION FINALLY FLOATTYPE FLOAT_NUMBER FOR GREATER_THAN GREATER_THAN_OR_EQUAL IF INCREMENT INEQUALITY INTEGER INTTYPE JUMP_LINE LBRACKET LIST LKEY LOGICAND LOGICNOT LOGICOR LOGICXOR LONG LPARENT MINUS MODULE_ASSIGNMENT MULTIPLICATION_ASSIGNMENT NAMESPACE NEW PERCENT PIPE PLUS PRINT PRIVATE PUBLIC RBRACKET READ RETURN RKEY RPARENT SIPLE_QUOTATION_MARKS SMALLER_THAN SMALLER_THAN_OR_EQUAL STATIC STRING STRINGTYPE SUBTRACTION_ASSIGNMENT SWITCH SYSTEM TABULATION TIMES TRY USING VARIABLE VOID WHILEprogram : block_using block_publicClassblock_using : USING SYSTEM DOTANDCOMMAblock_publicClass : PUBLIC CLASS VARIABLE LKEY block_code RKEYblock_code : def_const_or_var\n                    | estruct_of_data\n                    | block_try_catch\n                    | VARIABLE\n    def_const_or_var : constant_assignation\n                        | variable_assignation\n    variable_assignation : access_modifiers all_asignations\n                            | all_asignations\n\n    constant_assignation : access_modifiers CONST all_asignations\n                            | CONST all_asignations\n                            | CONST data_type assignation_key_value COMMA some_assignation_constant\n    all_asignations : assignation_with_datatype\n                        | assignation_without_datatype\n    assignation_with_datatype : data_type assignation_key_value DOTANDCOMMA\n                            | data_type assignation_key_value DOTANDCOMMA assignation_with_datatype   \n                            | data_type assignation_key_value DOTANDCOMMA assignation_without_datatype                     \n    assignation_without_datatype : assignation_key_value DOTANDCOMMA\n                                    | assignation_key_value DOTANDCOMMA assignation_without_datatype\n                                    | assignation_key_value DOTANDCOMMA assignation_with_datatype\n    some_assignation_constant : assignation_key_value DOTANDCOMMA\n                                | assignation_key_value COMMA some_assignation_constant\n    assignation_key_value : VARIABLE ASSIGNATION valuedata_type    : CHARTYPE\n                    | STRINGTYPE\n                    | FLOATTYPE\n                    | DECIMALTYPE\n                    | INTTYPE\n                    | BOOLTYPE\n    value    : value_numeric\n                | value_logic\n                | value_string\n    value_string : STRING\n                    | CHAR\n                    | VARIABLE\n                    | READ LPARENT RPARENT\n                    | concatenation\n    value_logic  : BOOLTRUE\n                    | BOOLFALSE\n    value_numeric    : INTEGER\n                        | FLOAT_NUMBER\n                        | DECIMAL_NUMBER\n    block_try_catch : try_catch_simply\n                        | try_catch_finally\n    try_catch_simply : TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEYtry_catch_finally : TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEY FINALLY LKEY block_code RKEYaccess_modifiers : PUBLIC\n                        | PRIVATE\n    arithmetic_operation : value_numeric\n                            | value_numeric arithmetic_operator arithmetic_operation\n    logic_operation  : value_logic\n                        | value_logic logic_operator logic_operation\n    concatenation    : STRING\n                        | STRING PLUS concatenation\n    logic_operator   : GREATER_THAN\n                        | SMALLER_THAN\n                        | EQUAL_COMPARATION\n                        | INEQUALITY\n                        | GREATER_THAN_OR_EQUAL\n                        | SMALLER_THAN_OR_EQUAL\n                        | LOGICAND\n                        | LOGICOR\n                        | LOGICNOT\n                        | LOGICXOR\n    arithmetic_operator  : PLUS\n                            | MINUS\n                            | TIMES\n                            | DIVIDE\n                            | PERCENT\n    variable_assignation_multiline   : \n    estruct_of_data : list\n    list : LIST SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA'
    
_lr_action_items = {'USING':([0,],[3,]),'$end':([1,4,39,],[0,-1,-3,]),'PUBLIC':([2,8,10,48,96,104,],[5,-2,11,11,11,11,]),'SYSTEM':([3,],[6,]),'CLASS':([5,],[7,]),'DOTANDCOMMA':([6,26,45,49,50,51,52,53,54,55,56,57,58,59,60,62,64,77,78,79,80,101,],[8,46,65,-37,-25,-32,-33,-34,-42,-43,-44,-40,-41,-35,-36,-39,65,-55,-56,-38,84,103,]),'VARIABLE':([7,10,11,22,23,25,29,32,33,34,35,36,37,38,40,44,46,48,65,72,75,85,90,96,104,],[9,12,-49,42,42,42,-50,-26,-27,-28,-29,-30,-31,49,42,42,42,12,42,42,82,42,92,12,12,]),'LKEY':([9,28,94,102,],[10,48,96,104,]),'CONST':([10,11,22,29,48,96,104,],[23,-49,40,-50,23,23,23,]),'LIST':([10,48,89,96,104,],[27,27,91,27,27,]),'TRY':([10,48,96,104,],[28,28,28,28,]),'PRIVATE':([10,48,96,104,],[29,29,29,29,]),'CHARTYPE':([10,11,22,23,29,40,46,47,48,65,93,96,104,],[32,-49,32,32,-50,32,32,32,32,32,32,32,32,]),'STRINGTYPE':([10,11,22,23,29,40,46,47,48,65,93,96,104,],[33,-49,33,33,-50,33,33,33,33,33,33,33,33,]),'FLOATTYPE':([10,11,22,23,29,40,46,47,48,65,93,96,104,],[34,-49,34,34,-50,34,34,34,34,34,34,34,34,]),'DECIMALTYPE':([10,11,22,23,29,40,46,47,48,65,93,96,104,],[35,-49,35,35,-50,35,35,35,35,35,35,35,35,]),'INTTYPE':([10,11,22,23,29,40,46,47,48,65,93,96,104,],[36,-49,36,36,-50,36,36,36,36,36,36,36,36,]),'BOOLTYPE':([10,11,22,23,29,40,46,47,48,65,93,96,104,],[37,-49,37,37,-50,37,37,37,37,37,37,37,37,]),'RKEY':([12,13,14,15,16,17,18,19,20,21,24,30,31,41,43,46,63,65,66,67,69,73,74,81,84,88,98,100,103,105,106,],[-7,39,-4,-5,-6,-8,-9,-73,-45,-46,-11,-15,-16,-10,-13,-20,-12,-17,-21,-22,76,-18,-19,-14,-23,-24,100,-47,-74,106,-48,]),'ASSIGNATION':([12,42,82,],[38,38,86,]),'SMALLER_THAN':([27,91,],[47,93,]),'GREATER_THAN':([32,33,34,35,36,37,68,95,],[-26,-27,-28,-29,-30,-31,75,97,]),'INTEGER':([38,],[54,]),'FLOAT_NUMBER':([38,],[55,]),'DECIMAL_NUMBER':([38,],[56,]),'BOOLTRUE':([38,],[57,]),'BOOLFALSE':([38,],[58,]),'STRING':([38,70,],[59,77,]),'CHAR':([38,],[60,]),'READ':([38,],[61,]),'COMMA':([49,50,51,52,53,54,55,56,57,58,59,60,62,64,77,78,79,80,],[-37,-25,-32,-33,-34,-42,-43,-44,-40,-41,-35,-36,-39,72,-55,-56,-38,85,]),'PLUS':([59,77,],[70,70,]),'LPARENT':([61,83,97,],[71,87,99,]),'RPARENT':([71,92,99,],[79,94,101,]),'CATCH':([76,],[83,]),'NEW':([86,],[89,]),'EXCEPTION':([87,],[90,]),'FINALLY':([100,],[102,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block_using':([0,],[2,]),'block_publicClass':([2,],[4,]),'block_code':([10,48,96,104,],[13,69,98,105,]),'def_const_or_var':([10,48,96,104,],[14,14,14,14,]),'estruct_of_data':([10,48,96,104,],[15,15,15,15,]),'block_try_catch':([10,48,96,104,],[16,16,16,16,]),'constant_assignation':([10,48,96,104,],[17,17,17,17,]),'variable_assignation':([10,48,96,104,],[18,18,18,18,]),'list':([10,48,96,104,],[19,19,19,19,]),'try_catch_simply':([10,48,96,104,],[20,20,20,20,]),'try_catch_finally':([10,48,96,104,],[21,21,21,21,]),'access_modifiers':([10,48,96,104,],[22,22,22,22,]),'all_asignations':([10,22,23,40,48,96,104,],[24,41,43,63,24,24,24,]),'data_type':([10,22,23,40,46,47,48,65,93,96,104,],[25,25,44,25,25,68,25,25,95,25,25,]),'assignation_key_value':([10,22,23,25,40,44,46,48,65,72,85,96,104,],[26,26,26,45,26,64,26,26,26,80,80,26,26,]),'assignation_with_datatype':([10,22,23,40,46,48,65,96,104,],[30,30,30,30,67,30,73,30,30,]),'assignation_without_datatype':([10,22,23,40,46,48,65,96,104,],[31,31,31,31,66,31,74,31,31,]),'value':([38,],[50,]),'value_numeric':([38,],[51,]),'value_logic':([38,],[52,]),'value_string':([38,],[53,]),'concatenation':([38,70,],[62,78,]),'some_assignation_constant':([72,85,],[81,88,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block_using block_publicClass','program',2,'p_program','sintactico.py',19),
  ('block_using -> USING SYSTEM DOTANDCOMMA','block_using',3,'p_block_using','sintactico.py',22),
  ('block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_code RKEY','block_publicClass',6,'p_block_publicClass','sintactico.py',25),
  ('block_code -> def_const_or_var','block_code',1,'p_block_code','sintactico.py',30),
  ('block_code -> estruct_of_data','block_code',1,'p_block_code','sintactico.py',31),
  ('block_code -> block_try_catch','block_code',1,'p_block_code','sintactico.py',32),
  ('block_code -> VARIABLE','block_code',1,'p_block_code','sintactico.py',33),
  ('def_const_or_var -> constant_assignation','def_const_or_var',1,'p_def_const_or_var','sintactico.py',42),
  ('def_const_or_var -> variable_assignation','def_const_or_var',1,'p_def_const_or_var','sintactico.py',43),
  ('variable_assignation -> access_modifiers all_asignations','variable_assignation',2,'p_variable_assignation','sintactico.py',47),
  ('variable_assignation -> all_asignations','variable_assignation',1,'p_variable_assignation','sintactico.py',48),
  ('constant_assignation -> access_modifiers CONST all_asignations','constant_assignation',3,'p_constant_assignation','sintactico.py',53),
  ('constant_assignation -> CONST all_asignations','constant_assignation',2,'p_constant_assignation','sintactico.py',54),
  ('constant_assignation -> CONST data_type assignation_key_value COMMA some_assignation_constant','constant_assignation',5,'p_constant_assignation','sintactico.py',55),
  ('all_asignations -> assignation_with_datatype','all_asignations',1,'p_all_asignations','sintactico.py',59),
  ('all_asignations -> assignation_without_datatype','all_asignations',1,'p_all_asignations','sintactico.py',60),
  ('assignation_with_datatype -> data_type assignation_key_value DOTANDCOMMA','assignation_with_datatype',3,'p_assignation_with_datatype','sintactico.py',64),
  ('assignation_with_datatype -> data_type assignation_key_value DOTANDCOMMA assignation_with_datatype','assignation_with_datatype',4,'p_assignation_with_datatype','sintactico.py',65),
  ('assignation_with_datatype -> data_type assignation_key_value DOTANDCOMMA assignation_without_datatype','assignation_with_datatype',4,'p_assignation_with_datatype','sintactico.py',66),
  ('assignation_without_datatype -> assignation_key_value DOTANDCOMMA','assignation_without_datatype',2,'p_assignation_without_datatype','sintactico.py',70),
  ('assignation_without_datatype -> assignation_key_value DOTANDCOMMA assignation_without_datatype','assignation_without_datatype',3,'p_assignation_without_datatype','sintactico.py',71),
  ('assignation_without_datatype -> assignation_key_value DOTANDCOMMA assignation_with_datatype','assignation_without_datatype',3,'p_assignation_without_datatype','sintactico.py',72),
  ('some_assignation_constant -> assignation_key_value DOTANDCOMMA','some_assignation_constant',2,'p_some_assignation_constant','sintactico.py',76),
  ('some_assignation_constant -> assignation_key_value COMMA some_assignation_constant','some_assignation_constant',3,'p_some_assignation_constant','sintactico.py',77),
  ('assignation_key_value -> VARIABLE ASSIGNATION value','assignation_key_value',3,'p_assignation_key_value','sintactico.py',81),
  ('data_type -> CHARTYPE','data_type',1,'p_data_type','sintactico.py',84),
  ('data_type -> STRINGTYPE','data_type',1,'p_data_type','sintactico.py',85),
  ('data_type -> FLOATTYPE','data_type',1,'p_data_type','sintactico.py',86),
  ('data_type -> DECIMALTYPE','data_type',1,'p_data_type','sintactico.py',87),
  ('data_type -> INTTYPE','data_type',1,'p_data_type','sintactico.py',88),
  ('data_type -> BOOLTYPE','data_type',1,'p_data_type','sintactico.py',89),
  ('value -> value_numeric','value',1,'p_value','sintactico.py',98),
  ('value -> value_logic','value',1,'p_value','sintactico.py',99),
  ('value -> value_string','value',1,'p_value','sintactico.py',100),
  ('value_string -> STRING','value_string',1,'p_value_string','sintactico.py',104),
  ('value_string -> CHAR','value_string',1,'p_value_string','sintactico.py',105),
  ('value_string -> VARIABLE','value_string',1,'p_value_string','sintactico.py',106),
  ('value_string -> READ LPARENT RPARENT','value_string',3,'p_value_string','sintactico.py',107),
  ('value_string -> concatenation','value_string',1,'p_value_string','sintactico.py',108),
  ('value_logic -> BOOLTRUE','value_logic',1,'p_value_logic','sintactico.py',112),
  ('value_logic -> BOOLFALSE','value_logic',1,'p_value_logic','sintactico.py',113),
  ('value_numeric -> INTEGER','value_numeric',1,'p_value_numeric','sintactico.py',117),
  ('value_numeric -> FLOAT_NUMBER','value_numeric',1,'p_value_numeric','sintactico.py',118),
  ('value_numeric -> DECIMAL_NUMBER','value_numeric',1,'p_value_numeric','sintactico.py',119),
  ('block_try_catch -> try_catch_simply','block_try_catch',1,'p_block_try_catch','sintactico.py',128),
  ('block_try_catch -> try_catch_finally','block_try_catch',1,'p_block_try_catch','sintactico.py',129),
  ('try_catch_simply -> TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEY','try_catch_simply',12,'p_try_catch_simply','sintactico.py',133),
  ('try_catch_finally -> TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEY FINALLY LKEY block_code RKEY','try_catch_finally',16,'p_try_catch_finally','sintactico.py',136),
  ('access_modifiers -> PUBLIC','access_modifiers',1,'p_access_modifiers','sintactico.py',140),
  ('access_modifiers -> PRIVATE','access_modifiers',1,'p_access_modifiers','sintactico.py',141),
  ('arithmetic_operation -> value_numeric','arithmetic_operation',1,'p_arithmetic_operation','sintactico.py',151),
  ('arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation','arithmetic_operation',3,'p_arithmetic_operation','sintactico.py',152),
  ('logic_operation -> value_logic','logic_operation',1,'p_logic_operation','sintactico.py',156),
  ('logic_operation -> value_logic logic_operator logic_operation','logic_operation',3,'p_logic_operation','sintactico.py',157),
  ('concatenation -> STRING','concatenation',1,'p_concatenation','sintactico.py',161),
  ('concatenation -> STRING PLUS concatenation','concatenation',3,'p_concatenation','sintactico.py',162),
  ('logic_operator -> GREATER_THAN','logic_operator',1,'p_logic_operator','sintactico.py',166),
  ('logic_operator -> SMALLER_THAN','logic_operator',1,'p_logic_operator','sintactico.py',167),
  ('logic_operator -> EQUAL_COMPARATION','logic_operator',1,'p_logic_operator','sintactico.py',168),
  ('logic_operator -> INEQUALITY','logic_operator',1,'p_logic_operator','sintactico.py',169),
  ('logic_operator -> GREATER_THAN_OR_EQUAL','logic_operator',1,'p_logic_operator','sintactico.py',170),
  ('logic_operator -> SMALLER_THAN_OR_EQUAL','logic_operator',1,'p_logic_operator','sintactico.py',171),
  ('logic_operator -> LOGICAND','logic_operator',1,'p_logic_operator','sintactico.py',172),
  ('logic_operator -> LOGICOR','logic_operator',1,'p_logic_operator','sintactico.py',173),
  ('logic_operator -> LOGICNOT','logic_operator',1,'p_logic_operator','sintactico.py',174),
  ('logic_operator -> LOGICXOR','logic_operator',1,'p_logic_operator','sintactico.py',175),
  ('arithmetic_operator -> PLUS','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',179),
  ('arithmetic_operator -> MINUS','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',180),
  ('arithmetic_operator -> TIMES','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',181),
  ('arithmetic_operator -> DIVIDE','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',182),
  ('arithmetic_operator -> PERCENT','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',183),
  ('variable_assignation_multiline -> <empty>','variable_assignation_multiline',0,'p_variable_assignation_multiline','sintactico.py',187),
  ('estruct_of_data -> list','estruct_of_data',1,'p_estruct_of_data','sintactico.py',240),
  ('list -> LIST SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA','list',14,'p_list','sintactico.py',244),
]
