
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ACTION ADD ADDITION_ASSIGNMENT ARROW ASSIGNATION BACK_SLASH BOOL BOOLFALSE BOOLTRUE BOOLTYPE BREAK CATCH CHAR CHARTYPE CLASS CLEAR COMMA CONST COUNT DECIMALTYPE DECIMAL_NUMBER DECREMENT DICTIONARY DIVIDE DIVISION_ASSIGNMENT DO DOLLARSIGN DOT DOTANDCOMMA DOUBLEPOINT DOUBLE_QUOTATION_MARKS ELSE ELSE_IF EQUAL_COMPARATION EXCEPTION FINALLY FLOATTYPE FLOAT_NUMBER FOR GREATER_THAN GREATER_THAN_OR_EQUAL ID IF INCREMENT INEQUALITY INTEGER INTTYPE JUMP_LINE LBRACKET LIST LKEY LOGICAND LOGICNOT LOGICOR LOGICXOR LONG LPARENT MINUS MODULE_ASSIGNMENT MULTIPLICATION_ASSIGNMENT NAMESPACE NEW PERCENT PIPE PLUS PRINT PRIVATE PUBLIC PUT RBRACKET READ REMOVE REMOVEAT RETURN RKEY RPARENT SIPLE_QUOTATION_MARKS SMALLER_THAN SMALLER_THAN_OR_EQUAL STATIC STRING STRINGTYPE SUBTRACTION_ASSIGNMENT SWITCH SYSTEM TABULATION TIMES TRY USING VARIABLE VOID WHILEprogram : block_using block_publicClassblock_using : USING SYSTEM DOTANDCOMMAblock_publicClass : PUBLIC CLASS VARIABLE LKEY all_block_code RKEYall_block_code : block_code\n                        | block_code all_block_code  \n    block_code : def_const_or_var\n                    | estruct_of_data\n                    | block_try_catch\n                    | block_while\n                    | VARIABLE\n                    | dict_estruct\n                    | functions_dict\n                    | functions_list\n                    | declaration_lambda\n                    | block_if\n    def_const_or_var : constant_assignation\n                        | variable_assignation\n    variable_assignation : access_modifiers all_asignations\n                            | all_asignations\n\n    constant_assignation : access_modifiers CONST all_asignations\n                            | CONST all_asignations\n                            | CONST data_type assignation_key_value COMMA some_assignation_constant\n    all_asignations : assignation_with_datatype\n                        | assignation_without_datatype\n    assignation_with_datatype : data_type assignation_key_value DOTANDCOMMA\n                            | data_type assignation_key_value DOTANDCOMMA assignation_with_datatype   \n                            | data_type assignation_key_value DOTANDCOMMA assignation_without_datatype                     \n    assignation_without_datatype : assignation_key_value DOTANDCOMMA\n                                    | assignation_key_value DOTANDCOMMA assignation_without_datatype\n                                    | assignation_key_value DOTANDCOMMA assignation_with_datatype\n    some_assignation_constant : assignation_key_value DOTANDCOMMA\n                                | assignation_key_value COMMA some_assignation_constant\n    assignation_key_value : VARIABLE ASSIGNATION valuedata_type    : CHARTYPE\n                    | STRINGTYPE\n                    | FLOATTYPE\n                    | DECIMALTYPE\n                    | INTTYPE\n                    | BOOLTYPE\n    value    : value_numeric\n                | value_logic\n                | value_string\n    value_string : STRING\n                    | CHAR\n                    | VARIABLE\n                    | READ LPARENT RPARENT\n                    | concatenation\n    value_logic  : BOOLTRUE\n                    | BOOLFALSE\n    value_numeric    : INTEGER\n                        | FLOAT_NUMBER\n                        | DECIMAL_NUMBER\n    block_try_catch : try_catch_simply\n                        | try_catch_finally\n    try_catch_simply : TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEYtry_catch_finally : TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEY FINALLY LKEY block_code RKEYaccess_modifiers : PUBLIC\n                        | PRIVATE\n    block_while : normal_while\n                   | do_while             \n    normal_while : WHILE LPARENT logic_operation RPARENT LKEY block_code RKEYdo_while : DO LKEY block_code RKEY WHILE LPARENT logic_operation RPARENTblock_if : IF LPARENT VARIABLE RPARENT LKEY not_yes_nested_if RKEY other_if\n    other_if : ELSE LKEY not_yes_nested_if RKEY\n               | ELSE_IF LPARENT VARIABLE RPARENT LKEY not_yes_nested_if RKEY other_if\n    \n    not_yes_nested_if : block_if\n                       | block_code\n    arithmetic_operation : value_numeric\n                            | value_numeric arithmetic_operator arithmetic_operation\n    logic_operation  : value_logic\n                        | value_logic logic_operator logic_operation\n    concatenation    : STRING\n                        | STRING PLUS concatenation\n    logic_operator   : GREATER_THAN\n                        | SMALLER_THAN\n                        | EQUAL_COMPARATION\n                        | INEQUALITY\n                        | GREATER_THAN_OR_EQUAL\n                        | SMALLER_THAN_OR_EQUAL\n                        | LOGICAND\n                        | LOGICOR\n                        | LOGICNOT\n                        | LOGICXOR\n    arithmetic_operator  : PLUS\n                            | MINUS\n                            | TIMES\n                            | DIVIDE\n                            | PERCENT\n    variable_assignation_multiline   : \n    \n    dict_estruct : dict_empty\n                   | dict_full\n    \n    dict_empty : DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA\n    \n    dict_full : DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY dictionary_value RKEY DOTANDCOMMA\n    dictionary_value : LKEY key_value_pair RKEYkey_value_pairs : key_value_pair\n                       | key_value_pair COMMA key_value_pairskey_value_pair : STRING DOUBLEPOINT valueHashvalueHash : INTTYPE\n                estruct_of_data : list_empty\n                        | list_full\n    \n    functions_dict : dict_func_put\n                    | dict_func_remove\n    \n    dict_func_put : STRING DOT PUT LPARENT STRING COMMA STRING RPARENT DOTANDCOMMA\n    \n    dict_func_remove : STRING DOT REMOVE LPARENT STRING RPARENT DOTANDCOMMA\n    list_empty : LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA\n                    | LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA\n    list_full : LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY\n                    | LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY\n    strings_list : STRING\n                    | STRING COMMA strings_list\n    ints_list : INTEGER\n                | INTEGER COMMA ints_list\n    functions_list : list_func_clear\n                        | list_func_count\n                        | list_func_add\n                        | list_func_removeat\n    list_func_clear : VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMAlist_func_count : VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMAlist_func_add : VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMAlist_func_removeat : VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMAdeclaration_lambda : ACTION SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION VARIABLE ARROW LKEY RKEY'
    
_lr_action_items = {'USING':([0,],[3,]),'$end':([1,4,64,],[0,-1,-3,]),'PUBLIC':([2,8,10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,45,56,57,69,71,74,76,78,101,103,104,105,124,125,153,155,159,165,166,173,183,184,187,191,195,197,203,207,213,214,219,221,227,230,231,240,242,244,248,256,257,259,261,],[5,-2,11,-10,11,-6,-7,-8,-9,-11,-12,-13,-14,-15,-16,-17,-99,-100,-53,-54,-59,-60,-90,-91,-101,-102,-113,-114,-115,-116,-19,-23,-24,-18,-21,-28,11,11,-20,-25,-29,-30,-26,-27,11,-22,11,-117,-118,-31,-119,-120,-32,-61,-104,-63,-62,11,-103,-121,11,-64,11,-55,-92,-105,-106,11,-65,-93,-107,-108,-56,]),'SYSTEM':([3,],[6,]),'CLASS':([5,],[7,]),'DOTANDCOMMA':([6,47,73,85,86,87,88,89,90,91,92,93,94,95,96,98,102,145,146,149,150,151,154,167,168,182,205,226,234,235,247,],[8,74,103,-45,-33,-40,-41,-42,-50,-51,-52,-48,-49,-43,-44,-47,103,165,166,-72,-73,-46,173,183,184,195,213,231,240,242,256,]),'VARIABLE':([7,10,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,44,45,46,49,55,56,57,58,59,60,61,63,67,68,69,71,72,74,76,78,101,103,104,105,112,121,123,124,125,126,127,153,155,159,165,166,169,173,174,183,184,187,190,191,195,197,203,207,208,213,214,219,221,227,230,231,240,242,244,248,256,257,259,261,],[9,12,-57,-10,12,-6,-7,-8,-9,-11,-12,-13,-14,-15,-16,-17,-99,-100,-53,-54,-59,-60,-90,-91,-101,-102,-113,-114,-115,-116,-35,70,70,-19,70,-38,-58,-23,-24,-34,-36,-37,-39,85,100,70,-18,-21,70,70,12,12,-20,70,-29,-30,142,152,70,-26,-27,156,157,12,-22,12,-117,-118,185,-31,70,-119,-120,-32,202,-61,-104,-63,-62,12,216,-103,-121,12,-64,12,-55,-92,-105,-106,12,-65,-93,-107,-108,-56,]),'LKEY':([9,50,52,122,129,196,198,211,222,226,232,234,235,236,],[10,76,78,153,159,206,207,219,227,232,237,241,243,244,]),'ACTION':([10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,45,56,57,69,71,74,76,78,101,103,104,105,124,125,153,155,159,165,166,173,183,184,187,191,195,197,203,207,213,214,219,221,227,230,231,240,242,244,248,256,257,259,261,],[40,-10,40,-6,-7,-8,-9,-11,-12,-13,-14,-15,-16,-17,-99,-100,-53,-54,-59,-60,-90,-91,-101,-102,-113,-114,-115,-116,-19,-23,-24,-18,-21,-28,40,40,-20,-25,-29,-30,-26,-27,40,-22,40,-117,-118,-31,-119,-120,-32,-61,-104,-63,-62,40,-103,-121,40,-64,40,-55,-92,-105,-106,40,-65,-93,-107,-108,-56,]),'IF':([10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,45,56,57,69,71,74,76,78,101,103,104,105,124,125,153,155,159,165,166,173,183,184,187,191,195,197,203,207,213,214,219,221,227,230,231,240,242,244,248,256,257,259,261,],[42,-10,42,-6,-7,-8,-9,-11,-12,-13,-14,-15,-16,-17,-99,-100,-53,-54,-59,-60,-90,-91,-101,-102,-113,-114,-115,-116,-19,-23,-24,-18,-21,-28,42,42,-20,-25,-29,-30,-26,-27,42,-22,42,-117,-118,-31,-119,-120,-32,-61,-104,-63,-62,42,-103,-121,42,-64,42,-55,-92,-105,-106,42,-65,-93,-107,-108,-56,]),'CONST':([10,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,45,55,56,57,69,71,74,76,78,101,103,104,105,124,125,153,155,159,165,166,173,183,184,187,191,195,197,203,207,213,214,219,221,227,230,231,240,242,244,248,256,257,259,261,],[44,-57,-10,44,-6,-7,-8,-9,-11,-12,-13,-14,-15,-16,-17,-99,-100,-53,-54,-59,-60,-90,-91,-101,-102,-113,-114,-115,-116,68,-19,-58,-23,-24,-18,-21,-28,44,44,-20,-25,-29,-30,-26,-27,44,-22,44,-117,-118,-31,-119,-120,-32,-61,-104,-63,-62,44,-103,-121,44,-64,44,-55,-92,-105,-106,44,-65,-93,-107,-108,-56,]),'LIST':([10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,45,56,57,69,71,74,76,78,101,103,104,105,124,125,153,155,159,165,166,173,183,184,187,188,189,191,195,197,203,207,213,214,219,221,227,230,231,240,242,244,248,256,257,259,261,],[48,-10,48,-6,-7,-8,-9,-11,-12,-13,-14,-15,-16,-17,-99,-100,-53,-54,-59,-60,-90,-91,-101,-102,-113,-114,-115,-116,-19,-23,-24,-18,-21,-28,48,48,-20,-25,-29,-30,-26,-27,48,-22,48,-117,-118,-31,-119,-120,-32,200,201,-61,-104,-63,-62,48,-103,-121,48,-64,48,-55,-92,-105,-106,48,-65,-93,-107,-108,-56,]),'TRY':([10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,45,56,57,69,71,74,76,78,101,103,104,105,124,125,153,155,159,165,166,173,183,184,187,191,195,197,203,207,213,214,219,221,227,230,231,240,242,244,248,256,257,259,261,],[50,-10,50,-6,-7,-8,-9,-11,-12,-13,-14,-15,-16,-17,-99,-100,-53,-54,-59,-60,-90,-91,-101,-102,-113,-114,-115,-116,-19,-23,-24,-18,-21,-28,50,50,-20,-25,-29,-30,-26,-27,50,-22,50,-117,-118,-31,-119,-120,-32,-61,-104,-63,-62,50,-103,-121,50,-64,50,-55,-92,-105,-106,50,-65,-93,-107,-108,-56,]),'WHILE':([10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,45,56,57,69,71,74,76,78,101,103,104,105,124,125,141,153,155,159,165,166,173,183,184,187,191,195,197,203,207,213,214,219,221,227,230,231,240,242,244,248,256,257,259,261,],[51,-10,51,-6,-7,-8,-9,-11,-12,-13,-14,-15,-16,-17,-99,-100,-53,-54,-59,-60,-90,-91,-101,-102,-113,-114,-115,-116,-19,-23,-24,-18,-21,-28,51,51,-20,-25,-29,-30,-26,-27,161,51,-22,51,-117,-118,-31,-119,-120,-32,-61,-104,-63,-62,51,-103,-121,51,-64,51,-55,-92,-105,-106,51,-65,-93,-107,-108,-56,]),'DO':([10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,45,56,57,69,71,74,76,78,101,103,104,105,124,125,153,155,159,165,166,173,183,184,187,191,195,197,203,207,213,214,219,221,227,230,231,240,242,244,248,256,257,259,261,],[52,-10,52,-6,-7,-8,-9,-11,-12,-13,-14,-15,-16,-17,-99,-100,-53,-54,-59,-60,-90,-91,-101,-102,-113,-114,-115,-116,-19,-23,-24,-18,-21,-28,52,52,-20,-25,-29,-30,-26,-27,52,-22,52,-117,-118,-31,-119,-120,-32,-61,-104,-63,-62,52,-103,-121,52,-64,52,-55,-92,-105,-106,52,-65,-93,-107,-108,-56,]),'DICTIONARY':([10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,45,56,57,69,71,74,76,78,101,103,104,105,124,125,153,155,159,165,166,173,180,183,184,187,191,195,197,203,207,213,214,219,221,227,230,231,240,242,244,248,256,257,259,261,],[53,-10,53,-6,-7,-8,-9,-11,-12,-13,-14,-15,-16,-17,-99,-100,-53,-54,-59,-60,-90,-91,-101,-102,-113,-114,-115,-116,-19,-23,-24,-18,-21,-28,53,53,-20,-25,-29,-30,-26,-27,53,-22,53,-117,-118,-31,193,-119,-120,-32,-61,-104,-63,-62,53,-103,-121,53,-64,53,-55,-92,-105,-106,53,-65,-93,-107,-108,-56,]),'STRING':([10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,45,56,57,63,69,71,74,76,78,101,103,104,105,117,119,124,125,143,144,153,155,159,165,166,173,181,183,184,187,191,195,197,203,207,213,214,219,221,227,230,231,237,240,241,242,244,248,256,257,258,259,261,],[54,-10,54,-6,-7,-8,-9,-11,-12,-13,-14,-15,-16,-17,-99,-100,-53,-54,-59,-60,-90,-91,-101,-102,-113,-114,-115,-116,-19,-23,-24,95,-18,-21,-28,54,54,-20,-25,-29,-30,147,149,-26,-27,163,164,54,-22,54,-117,-118,-31,194,-119,-120,-32,-61,-104,-63,-62,54,-103,-121,54,-64,54,-55,-92,246,-105,250,-106,54,-65,-93,-107,250,-108,-56,]),'PRIVATE':([10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,45,56,57,69,71,74,76,78,101,103,104,105,124,125,153,155,159,165,166,173,183,184,187,191,195,197,203,207,213,214,219,221,227,230,231,240,242,244,248,256,257,259,261,],[55,-10,55,-6,-7,-8,-9,-11,-12,-13,-14,-15,-16,-17,-99,-100,-53,-54,-59,-60,-90,-91,-101,-102,-113,-114,-115,-116,-19,-23,-24,-18,-21,-28,55,55,-20,-25,-29,-30,-26,-27,55,-22,55,-117,-118,-31,-119,-120,-32,-61,-104,-63,-62,55,-103,-121,55,-64,55,-55,-92,-105,-106,55,-65,-93,-107,-108,-56,]),'CHARTYPE':([10,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,44,45,55,56,57,68,69,71,74,76,78,101,103,104,105,124,125,153,155,159,165,166,173,183,184,187,191,195,197,203,207,213,214,219,221,227,230,231,240,242,244,248,256,257,259,261,],[58,-57,-10,58,-6,-7,-8,-9,-11,-12,-13,-14,-15,-16,-17,-99,-100,-53,-54,-59,-60,-90,-91,-101,-102,-113,-114,-115,-116,58,58,-19,-58,-23,-24,58,-18,-21,58,58,58,-20,58,-29,-30,-26,-27,58,-22,58,-117,-118,-31,-119,-120,-32,-61,-104,-63,-62,58,-103,-121,58,-64,58,-55,-92,-105,-106,58,-65,-93,-107,-108,-56,]),'STRINGTYPE':([10,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,44,45,55,56,57,66,68,69,71,74,75,76,78,101,103,104,105,124,125,153,155,159,165,166,173,183,184,187,191,195,197,203,207,209,213,214,219,221,227,230,231,240,242,244,248,256,257,259,261,],[41,-57,-10,41,-6,-7,-8,-9,-11,-12,-13,-14,-15,-16,-17,-99,-100,-53,-54,-59,-60,-90,-91,-101,-102,-113,-114,-115,-116,41,41,-19,-58,-23,-24,99,41,-18,-21,41,106,41,41,-20,41,-29,-30,-26,-27,41,-22,41,-117,-118,-31,-119,-120,-32,-61,-104,-63,-62,41,217,-103,-121,41,-64,41,-55,-92,-105,-106,41,-65,-93,-107,-108,-56,]),'FLOATTYPE':([10,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,44,45,55,56,57,68,69,71,74,76,78,101,103,104,105,124,125,153,155,159,165,166,173,183,184,187,191,195,197,203,207,213,214,219,221,227,230,231,240,242,244,248,256,257,259,261,],[59,-57,-10,59,-6,-7,-8,-9,-11,-12,-13,-14,-15,-16,-17,-99,-100,-53,-54,-59,-60,-90,-91,-101,-102,-113,-114,-115,-116,59,59,-19,-58,-23,-24,59,-18,-21,59,59,59,-20,59,-29,-30,-26,-27,59,-22,59,-117,-118,-31,-119,-120,-32,-61,-104,-63,-62,59,-103,-121,59,-64,59,-55,-92,-105,-106,59,-65,-93,-107,-108,-56,]),'DECIMALTYPE':([10,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,44,45,55,56,57,68,69,71,74,76,78,101,103,104,105,124,125,153,155,159,165,166,173,183,184,187,191,195,197,203,207,213,214,219,221,227,230,231,240,242,244,248,256,257,259,261,],[60,-57,-10,60,-6,-7,-8,-9,-11,-12,-13,-14,-15,-16,-17,-99,-100,-53,-54,-59,-60,-90,-91,-101,-102,-113,-114,-115,-116,60,60,-19,-58,-23,-24,60,-18,-21,60,60,60,-20,60,-29,-30,-26,-27,60,-22,60,-117,-118,-31,-119,-120,-32,-61,-104,-63,-62,60,-103,-121,60,-64,60,-55,-92,-105,-106,60,-65,-93,-107,-108,-56,]),'INTTYPE':([10,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,44,45,55,56,57,68,69,71,74,75,76,78,101,103,104,105,124,125,153,155,159,165,166,173,183,184,187,191,195,197,203,207,210,213,214,219,221,227,230,231,240,242,244,248,255,256,257,259,261,],[49,-57,-10,49,-6,-7,-8,-9,-11,-12,-13,-14,-15,-16,-17,-99,-100,-53,-54,-59,-60,-90,-91,-101,-102,-113,-114,-115,-116,49,49,-19,-58,-23,-24,49,-18,-21,49,107,49,49,-20,49,-29,-30,-26,-27,49,-22,49,-117,-118,-31,-119,-120,-32,-61,-104,-63,-62,49,218,-103,-121,49,-64,49,-55,-92,-105,-106,49,-65,263,-93,-107,-108,-56,]),'BOOLTYPE':([10,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,43,44,45,55,56,57,68,69,71,74,76,78,101,103,104,105,124,125,153,155,159,165,166,173,183,184,187,191,195,197,203,207,213,214,219,221,227,230,231,240,242,244,248,256,257,259,261,],[61,-57,-10,61,-6,-7,-8,-9,-11,-12,-13,-14,-15,-16,-17,-99,-100,-53,-54,-59,-60,-90,-91,-101,-102,-113,-114,-115,-116,61,61,-19,-58,-23,-24,61,-18,-21,61,61,61,-20,61,-29,-30,-26,-27,61,-22,61,-117,-118,-31,-119,-120,-32,-61,-104,-63,-62,61,-103,-121,61,-64,61,-55,-92,-105,-106,61,-65,-93,-107,-108,-56,]),'RKEY':([12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,45,56,57,65,69,71,74,101,103,104,105,108,111,124,125,155,165,166,170,171,172,173,178,183,184,187,191,195,197,203,206,213,214,215,221,225,230,231,233,238,240,242,245,248,249,250,251,252,253,254,256,257,259,261,262,263,264,265,],[-10,64,-4,-6,-7,-8,-9,-11,-12,-13,-14,-15,-16,-17,-99,-100,-53,-54,-59,-60,-90,-91,-101,-102,-113,-114,-115,-116,-19,-23,-24,-5,-18,-21,-28,-20,-25,-29,-30,128,141,-26,-27,-22,-117,-118,186,-15,-67,-31,191,-119,-120,-32,-61,-104,-63,-62,214,-103,-121,221,-64,230,-55,-92,239,247,-105,-106,254,-65,257,-109,259,-111,261,-94,-93,-107,-108,-56,-97,-98,-110,-112,]),'DOT':([12,54,],[62,80,]),'ASSIGNATION':([12,70,142,152,156,157,],[63,63,162,169,175,176,]),'SMALLER_THAN':([40,48,53,93,94,110,193,200,201,],[66,75,79,-48,-49,132,204,209,210,]),'LPARENT':([42,51,81,82,83,84,97,113,114,158,161,199,212,223,224,],[67,77,115,116,117,118,120,143,144,177,179,208,220,228,229,]),'CLEAR':([62,],[81,]),'COUNT':([62,],[82,]),'ADD':([62,],[83,]),'REMOVEAT':([62,],[84,]),'INTEGER':([63,118,243,260,],[90,148,252,252,]),'FLOAT_NUMBER':([63,],[91,]),'DECIMAL_NUMBER':([63,],[92,]),'BOOLTRUE':([63,77,130,131,132,133,134,135,136,137,138,139,140,179,],[93,93,93,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,93,]),'BOOLFALSE':([63,77,130,131,132,133,134,135,136,137,138,139,140,179,],[94,94,94,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,94,]),'CHAR':([63,],[96,]),'READ':([63,],[97,]),'GREATER_THAN':([79,93,94,99,106,107,110,204,217,218,],[112,-48,-49,121,126,127,131,212,223,224,]),'PUT':([80,],[113,]),'REMOVE':([80,],[114,]),'COMMA':([85,86,87,88,89,90,91,92,93,94,95,96,98,102,149,150,151,154,163,250,252,],[-45,-33,-40,-41,-42,-50,-51,-52,-48,-49,-43,-44,-47,123,-72,-73,-46,174,181,258,260,]),'EQUAL_COMPARATION':([93,94,110,],[-48,-49,133,]),'INEQUALITY':([93,94,110,],[-48,-49,134,]),'GREATER_THAN_OR_EQUAL':([93,94,110,],[-48,-49,135,]),'SMALLER_THAN_OR_EQUAL':([93,94,110,],[-48,-49,136,]),'LOGICAND':([93,94,110,],[-48,-49,137,]),'LOGICOR':([93,94,110,],[-48,-49,138,]),'LOGICNOT':([93,94,110,],[-48,-49,139,]),'LOGICXOR':([93,94,110,],[-48,-49,140,]),'RPARENT':([93,94,100,109,110,115,116,120,147,148,160,164,192,194,202,216,220,228,229,],[-48,-49,122,129,-70,145,146,151,167,168,-71,182,203,205,211,222,226,234,235,]),'PLUS':([95,149,],[119,119,]),'CATCH':([128,],[158,]),'NEW':([162,175,176,],[180,188,189,]),'EXCEPTION':([177,],[190,]),'ARROW':([185,],[196,]),'ELSE':([186,239,],[198,198,]),'ELSE_IF':([186,239,],[199,199,]),'FINALLY':([230,],[236,]),'DOUBLEPOINT':([246,],[255,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block_using':([0,],[2,]),'block_publicClass':([2,],[4,]),'all_block_code':([10,14,],[13,65,]),'block_code':([10,14,76,78,153,159,207,219,227,244,],[14,14,108,111,172,178,172,225,172,253,]),'def_const_or_var':([10,14,76,78,153,159,207,219,227,244,],[15,15,15,15,15,15,15,15,15,15,]),'estruct_of_data':([10,14,76,78,153,159,207,219,227,244,],[16,16,16,16,16,16,16,16,16,16,]),'block_try_catch':([10,14,76,78,153,159,207,219,227,244,],[17,17,17,17,17,17,17,17,17,17,]),'block_while':([10,14,76,78,153,159,207,219,227,244,],[18,18,18,18,18,18,18,18,18,18,]),'dict_estruct':([10,14,76,78,153,159,207,219,227,244,],[19,19,19,19,19,19,19,19,19,19,]),'functions_dict':([10,14,76,78,153,159,207,219,227,244,],[20,20,20,20,20,20,20,20,20,20,]),'functions_list':([10,14,76,78,153,159,207,219,227,244,],[21,21,21,21,21,21,21,21,21,21,]),'declaration_lambda':([10,14,76,78,153,159,207,219,227,244,],[22,22,22,22,22,22,22,22,22,22,]),'block_if':([10,14,76,78,153,159,207,219,227,244,],[23,23,23,23,171,23,171,23,171,23,]),'constant_assignation':([10,14,76,78,153,159,207,219,227,244,],[24,24,24,24,24,24,24,24,24,24,]),'variable_assignation':([10,14,76,78,153,159,207,219,227,244,],[25,25,25,25,25,25,25,25,25,25,]),'list_empty':([10,14,76,78,153,159,207,219,227,244,],[26,26,26,26,26,26,26,26,26,26,]),'list_full':([10,14,76,78,153,159,207,219,227,244,],[27,27,27,27,27,27,27,27,27,27,]),'try_catch_simply':([10,14,76,78,153,159,207,219,227,244,],[28,28,28,28,28,28,28,28,28,28,]),'try_catch_finally':([10,14,76,78,153,159,207,219,227,244,],[29,29,29,29,29,29,29,29,29,29,]),'normal_while':([10,14,76,78,153,159,207,219,227,244,],[30,30,30,30,30,30,30,30,30,30,]),'do_while':([10,14,76,78,153,159,207,219,227,244,],[31,31,31,31,31,31,31,31,31,31,]),'dict_empty':([10,14,76,78,153,159,207,219,227,244,],[32,32,32,32,32,32,32,32,32,32,]),'dict_full':([10,14,76,78,153,159,207,219,227,244,],[33,33,33,33,33,33,33,33,33,33,]),'dict_func_put':([10,14,76,78,153,159,207,219,227,244,],[34,34,34,34,34,34,34,34,34,34,]),'dict_func_remove':([10,14,76,78,153,159,207,219,227,244,],[35,35,35,35,35,35,35,35,35,35,]),'list_func_clear':([10,14,76,78,153,159,207,219,227,244,],[36,36,36,36,36,36,36,36,36,36,]),'list_func_count':([10,14,76,78,153,159,207,219,227,244,],[37,37,37,37,37,37,37,37,37,37,]),'list_func_add':([10,14,76,78,153,159,207,219,227,244,],[38,38,38,38,38,38,38,38,38,38,]),'list_func_removeat':([10,14,76,78,153,159,207,219,227,244,],[39,39,39,39,39,39,39,39,39,39,]),'access_modifiers':([10,14,76,78,153,159,207,219,227,244,],[43,43,43,43,43,43,43,43,43,43,]),'all_asignations':([10,14,43,44,68,76,78,153,159,207,219,227,244,],[45,45,69,71,101,45,45,45,45,45,45,45,45,]),'data_type':([10,14,43,44,68,74,76,78,103,153,159,207,219,227,244,],[46,46,46,72,46,46,46,46,46,46,46,46,46,46,46,]),'assignation_key_value':([10,14,43,44,46,68,72,74,76,78,103,123,153,159,174,207,219,227,244,],[47,47,47,47,73,47,102,47,47,47,47,154,47,47,154,47,47,47,47,]),'assignation_with_datatype':([10,14,43,44,68,74,76,78,103,153,159,207,219,227,244,],[56,56,56,56,56,105,56,56,124,56,56,56,56,56,56,]),'assignation_without_datatype':([10,14,43,44,68,74,76,78,103,153,159,207,219,227,244,],[57,57,57,57,57,104,57,57,125,57,57,57,57,57,57,]),'value':([63,],[86,]),'value_numeric':([63,],[87,]),'value_logic':([63,77,130,179,],[88,110,110,110,]),'value_string':([63,],[89,]),'concatenation':([63,119,],[98,150,]),'logic_operation':([77,130,179,],[109,160,192,]),'logic_operator':([110,],[130,]),'some_assignation_constant':([123,174,],[155,187,]),'not_yes_nested_if':([153,207,227,],[170,215,233,]),'other_if':([186,239,],[197,248,]),'dictionary_value':([232,],[238,]),'key_value_pair':([237,],[245,]),'strings_list':([241,258,],[249,264,]),'ints_list':([243,260,],[251,265,]),'valueHash':([255,],[262,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block_using block_publicClass','program',2,'p_program','sintactico.py',48),
  ('block_using -> USING SYSTEM DOTANDCOMMA','block_using',3,'p_block_using','sintactico.py',51),
  ('block_publicClass -> PUBLIC CLASS VARIABLE LKEY all_block_code RKEY','block_publicClass',6,'p_block_publicClass','sintactico.py',54),
  ('all_block_code -> block_code','all_block_code',1,'p_all_block_code','sintactico.py',58),
  ('all_block_code -> block_code all_block_code','all_block_code',2,'p_all_block_code','sintactico.py',59),
  ('block_code -> def_const_or_var','block_code',1,'p_block_code','sintactico.py',63),
  ('block_code -> estruct_of_data','block_code',1,'p_block_code','sintactico.py',64),
  ('block_code -> block_try_catch','block_code',1,'p_block_code','sintactico.py',65),
  ('block_code -> block_while','block_code',1,'p_block_code','sintactico.py',66),
  ('block_code -> VARIABLE','block_code',1,'p_block_code','sintactico.py',67),
  ('block_code -> dict_estruct','block_code',1,'p_block_code','sintactico.py',68),
  ('block_code -> functions_dict','block_code',1,'p_block_code','sintactico.py',69),
  ('block_code -> functions_list','block_code',1,'p_block_code','sintactico.py',70),
  ('block_code -> declaration_lambda','block_code',1,'p_block_code','sintactico.py',71),
  ('block_code -> block_if','block_code',1,'p_block_code','sintactico.py',72),
  ('def_const_or_var -> constant_assignation','def_const_or_var',1,'p_def_const_or_var','sintactico.py',78),
  ('def_const_or_var -> variable_assignation','def_const_or_var',1,'p_def_const_or_var','sintactico.py',79),
  ('variable_assignation -> access_modifiers all_asignations','variable_assignation',2,'p_variable_assignation','sintactico.py',83),
  ('variable_assignation -> all_asignations','variable_assignation',1,'p_variable_assignation','sintactico.py',84),
  ('constant_assignation -> access_modifiers CONST all_asignations','constant_assignation',3,'p_constant_assignation','sintactico.py',89),
  ('constant_assignation -> CONST all_asignations','constant_assignation',2,'p_constant_assignation','sintactico.py',90),
  ('constant_assignation -> CONST data_type assignation_key_value COMMA some_assignation_constant','constant_assignation',5,'p_constant_assignation','sintactico.py',91),
  ('all_asignations -> assignation_with_datatype','all_asignations',1,'p_all_asignations','sintactico.py',95),
  ('all_asignations -> assignation_without_datatype','all_asignations',1,'p_all_asignations','sintactico.py',96),
  ('assignation_with_datatype -> data_type assignation_key_value DOTANDCOMMA','assignation_with_datatype',3,'p_assignation_with_datatype','sintactico.py',100),
  ('assignation_with_datatype -> data_type assignation_key_value DOTANDCOMMA assignation_with_datatype','assignation_with_datatype',4,'p_assignation_with_datatype','sintactico.py',101),
  ('assignation_with_datatype -> data_type assignation_key_value DOTANDCOMMA assignation_without_datatype','assignation_with_datatype',4,'p_assignation_with_datatype','sintactico.py',102),
  ('assignation_without_datatype -> assignation_key_value DOTANDCOMMA','assignation_without_datatype',2,'p_assignation_without_datatype','sintactico.py',106),
  ('assignation_without_datatype -> assignation_key_value DOTANDCOMMA assignation_without_datatype','assignation_without_datatype',3,'p_assignation_without_datatype','sintactico.py',107),
  ('assignation_without_datatype -> assignation_key_value DOTANDCOMMA assignation_with_datatype','assignation_without_datatype',3,'p_assignation_without_datatype','sintactico.py',108),
  ('some_assignation_constant -> assignation_key_value DOTANDCOMMA','some_assignation_constant',2,'p_some_assignation_constant','sintactico.py',112),
  ('some_assignation_constant -> assignation_key_value COMMA some_assignation_constant','some_assignation_constant',3,'p_some_assignation_constant','sintactico.py',113),
  ('assignation_key_value -> VARIABLE ASSIGNATION value','assignation_key_value',3,'p_assignation_key_value','sintactico.py',117),
  ('data_type -> CHARTYPE','data_type',1,'p_data_type','sintactico.py',120),
  ('data_type -> STRINGTYPE','data_type',1,'p_data_type','sintactico.py',121),
  ('data_type -> FLOATTYPE','data_type',1,'p_data_type','sintactico.py',122),
  ('data_type -> DECIMALTYPE','data_type',1,'p_data_type','sintactico.py',123),
  ('data_type -> INTTYPE','data_type',1,'p_data_type','sintactico.py',124),
  ('data_type -> BOOLTYPE','data_type',1,'p_data_type','sintactico.py',125),
  ('value -> value_numeric','value',1,'p_value','sintactico.py',134),
  ('value -> value_logic','value',1,'p_value','sintactico.py',135),
  ('value -> value_string','value',1,'p_value','sintactico.py',136),
  ('value_string -> STRING','value_string',1,'p_value_string','sintactico.py',140),
  ('value_string -> CHAR','value_string',1,'p_value_string','sintactico.py',141),
  ('value_string -> VARIABLE','value_string',1,'p_value_string','sintactico.py',142),
  ('value_string -> READ LPARENT RPARENT','value_string',3,'p_value_string','sintactico.py',143),
  ('value_string -> concatenation','value_string',1,'p_value_string','sintactico.py',144),
  ('value_logic -> BOOLTRUE','value_logic',1,'p_value_logic','sintactico.py',148),
  ('value_logic -> BOOLFALSE','value_logic',1,'p_value_logic','sintactico.py',149),
  ('value_numeric -> INTEGER','value_numeric',1,'p_value_numeric','sintactico.py',153),
  ('value_numeric -> FLOAT_NUMBER','value_numeric',1,'p_value_numeric','sintactico.py',154),
  ('value_numeric -> DECIMAL_NUMBER','value_numeric',1,'p_value_numeric','sintactico.py',155),
  ('block_try_catch -> try_catch_simply','block_try_catch',1,'p_block_try_catch','sintactico.py',164),
  ('block_try_catch -> try_catch_finally','block_try_catch',1,'p_block_try_catch','sintactico.py',165),
  ('try_catch_simply -> TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEY','try_catch_simply',12,'p_try_catch_simply','sintactico.py',169),
  ('try_catch_finally -> TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEY FINALLY LKEY block_code RKEY','try_catch_finally',16,'p_try_catch_finally','sintactico.py',172),
  ('access_modifiers -> PUBLIC','access_modifiers',1,'p_access_modifiers','sintactico.py',176),
  ('access_modifiers -> PRIVATE','access_modifiers',1,'p_access_modifiers','sintactico.py',177),
  ('block_while -> normal_while','block_while',1,'p_block_while','sintactico.py',181),
  ('block_while -> do_while','block_while',1,'p_block_while','sintactico.py',182),
  ('normal_while -> WHILE LPARENT logic_operation RPARENT LKEY block_code RKEY','normal_while',7,'p_normal_while','sintactico.py',186),
  ('do_while -> DO LKEY block_code RKEY WHILE LPARENT logic_operation RPARENT','do_while',8,'p_do_while','sintactico.py',189),
  ('block_if -> IF LPARENT VARIABLE RPARENT LKEY not_yes_nested_if RKEY other_if','block_if',8,'p_block_if','sintactico.py',192),
  ('other_if -> ELSE LKEY not_yes_nested_if RKEY','other_if',4,'p_other_if','sintactico.py',196),
  ('other_if -> ELSE_IF LPARENT VARIABLE RPARENT LKEY not_yes_nested_if RKEY other_if','other_if',8,'p_other_if','sintactico.py',197),
  ('not_yes_nested_if -> block_if','not_yes_nested_if',1,'p_not_yes_nested_if','sintactico.py',202),
  ('not_yes_nested_if -> block_code','not_yes_nested_if',1,'p_not_yes_nested_if','sintactico.py',203),
  ('arithmetic_operation -> value_numeric','arithmetic_operation',1,'p_arithmetic_operation','sintactico.py',209),
  ('arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation','arithmetic_operation',3,'p_arithmetic_operation','sintactico.py',210),
  ('logic_operation -> value_logic','logic_operation',1,'p_logic_operation','sintactico.py',214),
  ('logic_operation -> value_logic logic_operator logic_operation','logic_operation',3,'p_logic_operation','sintactico.py',215),
  ('concatenation -> STRING','concatenation',1,'p_concatenation','sintactico.py',219),
  ('concatenation -> STRING PLUS concatenation','concatenation',3,'p_concatenation','sintactico.py',220),
  ('logic_operator -> GREATER_THAN','logic_operator',1,'p_logic_operator','sintactico.py',224),
  ('logic_operator -> SMALLER_THAN','logic_operator',1,'p_logic_operator','sintactico.py',225),
  ('logic_operator -> EQUAL_COMPARATION','logic_operator',1,'p_logic_operator','sintactico.py',226),
  ('logic_operator -> INEQUALITY','logic_operator',1,'p_logic_operator','sintactico.py',227),
  ('logic_operator -> GREATER_THAN_OR_EQUAL','logic_operator',1,'p_logic_operator','sintactico.py',228),
  ('logic_operator -> SMALLER_THAN_OR_EQUAL','logic_operator',1,'p_logic_operator','sintactico.py',229),
  ('logic_operator -> LOGICAND','logic_operator',1,'p_logic_operator','sintactico.py',230),
  ('logic_operator -> LOGICOR','logic_operator',1,'p_logic_operator','sintactico.py',231),
  ('logic_operator -> LOGICNOT','logic_operator',1,'p_logic_operator','sintactico.py',232),
  ('logic_operator -> LOGICXOR','logic_operator',1,'p_logic_operator','sintactico.py',233),
  ('arithmetic_operator -> PLUS','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',237),
  ('arithmetic_operator -> MINUS','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',238),
  ('arithmetic_operator -> TIMES','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',239),
  ('arithmetic_operator -> DIVIDE','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',240),
  ('arithmetic_operator -> PERCENT','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',241),
  ('variable_assignation_multiline -> <empty>','variable_assignation_multiline',0,'p_variable_assignation_multiline','sintactico.py',245),
  ('dict_estruct -> dict_empty','dict_estruct',1,'p_dict_estruct','sintactico.py',254),
  ('dict_estruct -> dict_full','dict_estruct',1,'p_dict_estruct','sintactico.py',255),
  ('dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA','dict_empty',12,'p_dict_empty','sintactico.py',261),
  ('dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY dictionary_value RKEY DOTANDCOMMA','dict_full',15,'p_dict_full','sintactico.py',266),
  ('dictionary_value -> LKEY key_value_pair RKEY','dictionary_value',3,'p_dictionary_value','sintactico.py',270),
  ('key_value_pairs -> key_value_pair','key_value_pairs',1,'p_key_value_pairs','sintactico.py',273),
  ('key_value_pairs -> key_value_pair COMMA key_value_pairs','key_value_pairs',3,'p_key_value_pairs','sintactico.py',274),
  ('key_value_pair -> STRING DOUBLEPOINT valueHash','key_value_pair',3,'p_key_value_pair','sintactico.py',278),
  ('valueHash -> INTTYPE','valueHash',1,'p_valueHash','sintactico.py',282),
  ('estruct_of_data -> list_empty','estruct_of_data',1,'p_estruct_of_data','sintactico.py',285),
  ('estruct_of_data -> list_full','estruct_of_data',1,'p_estruct_of_data','sintactico.py',286),
  ('functions_dict -> dict_func_put','functions_dict',1,'p_functions_dict','sintactico.py',291),
  ('functions_dict -> dict_func_remove','functions_dict',1,'p_functions_dict','sintactico.py',292),
  ('dict_func_put -> STRING DOT PUT LPARENT STRING COMMA STRING RPARENT DOTANDCOMMA','dict_func_put',9,'p_dict_func_put','sintactico.py',297),
  ('dict_func_remove -> STRING DOT REMOVE LPARENT STRING RPARENT DOTANDCOMMA','dict_func_remove',7,'p_dict_func_remove','sintactico.py',302),
  ('list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA','list_empty',14,'p_list_empty','sintactico.py',308),
  ('list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA','list_empty',14,'p_list_empty','sintactico.py',309),
  ('list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY','list_full',16,'p_list_full','sintactico.py',313),
  ('list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY','list_full',16,'p_list_full','sintactico.py',314),
  ('strings_list -> STRING','strings_list',1,'p_strings_list','sintactico.py',318),
  ('strings_list -> STRING COMMA strings_list','strings_list',3,'p_strings_list','sintactico.py',319),
  ('ints_list -> INTEGER','ints_list',1,'p_ints_list','sintactico.py',323),
  ('ints_list -> INTEGER COMMA ints_list','ints_list',3,'p_ints_list','sintactico.py',324),
  ('functions_list -> list_func_clear','functions_list',1,'p_functions_list','sintactico.py',328),
  ('functions_list -> list_func_count','functions_list',1,'p_functions_list','sintactico.py',329),
  ('functions_list -> list_func_add','functions_list',1,'p_functions_list','sintactico.py',330),
  ('functions_list -> list_func_removeat','functions_list',1,'p_functions_list','sintactico.py',331),
  ('list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA','list_func_clear',6,'p_list_func_clear','sintactico.py',335),
  ('list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA','list_func_count',6,'p_list_func_count','sintactico.py',338),
  ('list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA','list_func_add',7,'p_list_func_add','sintactico.py',341),
  ('list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA','list_func_removeat',7,'p_list_func_removeat','sintactico.py',344),
  ('declaration_lambda -> ACTION SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION VARIABLE ARROW LKEY RKEY','declaration_lambda',10,'p_declration_lambda','sintactico.py',352),
]
