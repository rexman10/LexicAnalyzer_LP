
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ACTION ADD ADDITION_ASSIGNMENT ARROW ASSIGNATION ASYNC AWAIT BACK_SLASH BOOL BOOLFALSE BOOLTRUE BOOLTYPE BREAK CATCH CHAR CHARTYPE CLASS CLEAR COMMA CONST COUNT DECIMALTYPE DECIMAL_NUMBER DECREMENT DEQUEUE DEQUEUE DICTIONARY DIVIDE DIVISION_ASSIGNMENT DO DOLLARSIGN DOT DOTANDCOMMA DOUBLEPOINT DOUBLE_QUOTATION_MARKS ELSE ELSE_IF ENQUEUE ENQUEUE EQUAL_COMPARATION EXCEPTION FINALLY FLOATTYPE FLOAT_NUMBER FOR FOREACH GREATER_THAN GREATER_THAN_OR_EQUAL ID IF IN INCREMENT INEQUALITY INTEGER INTTYPE ISEMPTY JUMP_LINE LBRACKET LIST LKEY LOGICAND LOGICNOT LOGICOR LOGICXOR LONG LPARENT METHOD MINUS MODULE_ASSIGNMENT MULTIPLICATION_ASSIGNMENT NAMESPACE NEW PEEK PERCENT PIPE PLUS POP PRINT PRIVATE PUBLIC PUSH PUT QUEUE RBRACKET READ REMOVE REMOVEAT RETURN RKEY RPARENT SIPLE_QUOTATION_MARKS SMALLER_THAN SMALLER_THAN_OR_EQUAL STACK STATIC STRING STRINGTYPE SUBTRACTION_ASSIGNMENT SWITCH SYSTEM TABULATION TASK TIMES TRY USING VARIABLE VOID WHILEprogram                    : USING SYSTEM DOTANDCOMMA block_publicClassblock_publicClass          : PUBLIC CLASS VARIABLE LKEY all_block_code RKEYblock_code               : def_const_or_var\n                                | print_data\n                                | read_data\n                                | arithmetic_operation\n                                | logic_operation\n\n                                | lists\n                                | functions_list\n\n                                | dict_estruct\n                                | functions_dict\n\n                                | queue_struct\n                                | functions_queue\n\n                                | block_for\n\n                                | block_try_catch\n\n                                | block_while\n    all_block_code           : block_code\n                                | block_code all_block_code  \n    print_data               : PRINT LPARENT STRING RPARENT DOTANDCOMMA\n                                | PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA\n    read_data                : READ LPARENT RPARENT DOTANDCOMMA\n    concatenation            : STRING\n                                | STRING PLUS concatenation\n    value                    : value_numeric\n                                | value_logic\n                                | value_string\n                                | read_data\n    value_string             : STRING\n                                | CHAR\n                                | VARIABLE\n                                | concatenation\n    value_logic              : BOOLTRUE\n                                | BOOLFALSE\n                                | logic_operation\n    value_numeric            : INTEGER\n                                | FLOAT_NUMBER\n                                | DECIMAL_NUMBER\n                                | arithmetic_operation\n    arithmetic_operation     : value_numeric\n                                | VARIABLE\n                                | value_numeric arithmetic_operator arithmetic_operation\n                                | VARIABLE arithmetic_operator arithmetic_operation\n    logic_operation          : value_numeric logic_operator INTEGER \n                                | VARIABLE logic_operator INTEGER\n    logic_operator           : GREATER_THAN\n                                | SMALLER_THAN\n                                | EQUAL_COMPARATION\n                                | INEQUALITY\n                                | GREATER_THAN_OR_EQUAL\n                                | SMALLER_THAN_OR_EQUAL\n                                | LOGICAND\n                                | LOGICOR\n                                | LOGICNOT\n                                | LOGICXOR\n    arithmetic_operator      : PLUS\n                                | MINUS\n                                | TIMES\n                                | DIVIDE\n                                | PERCENT\n    access_modifiers         : PUBLIC\n                                | PRIVATE\n    def_const_or_var         : constant_assignation\n                                | variable_assignation\n                                | late_initialization\n    constant_assignation     : access_modifiers CONST data_type assignation_key_value DOTANDCOMMA\n                                | CONST data_type assignation_key_value DOTANDCOMMA\n                                | access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA\n                                | CONST data_type assignation_key_value_multiple DOTANDCOMMA\n    variable_assignation     : access_modifiers data_type assignation_key_value DOTANDCOMMA\n                                | data_type assignation_key_value DOTANDCOMMA\n                                | access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA\n                                | data_type assignation_key_value_multiple DOTANDCOMMA\n    late_initialization      : access_modifiers data_type VARIABLE DOTANDCOMMA\n                                | data_type VARIABLE DOTANDCOMMA\n                                | assignation_key_value DOTANDCOMMA\n    assignation_key_value    : VARIABLE ASSIGNATION value\n                                | READ LPARENT RPARENT\n    assignation_key_value_multiple   : assignation_key_value\n                                        | assignation_key_value COMMA assignation_key_value_multiple   \n    assignation_with_datatype        : data_type assignation_key_value DOTANDCOMMA\n                                        | data_type assignation_key_value COMMA assignation_with_datatype                    \n    data_type                : CHARTYPE\n                                | STRINGTYPE\n                                | FLOATTYPE\n                                | DECIMALTYPE\n                                | INTTYPE\n                                | BOOLTYPE\n    logic_operations         : logic_operation DOTANDCOMMA\n                                | logic_operation COMMA logic_operations\n    block_for                : for_anidado\n                                | for_each\n    for_simple               : FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY\n                                | FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY\n\n    for_anidado              : for_simple\n                                | FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY\n                                | FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY \n    for_each                 : FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY\n    block_try_catch          : try_catch_simply\n                                | try_catch_finally\n    try_catch_simply           : TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEYtry_catch_finally          : TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEYblock_while              : normal_while\n                                | do_while             \n    normal_while               : WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEYdo_while                   : DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENTblock_if                   : IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if\n    other_if                    : ELSE LKEY not_yes_nested_if RKEY\n                                | ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if\n    \n    not_yes_nested_if           : block_if\n                                | block_code\n    \n    dict_estruct                : dict_empty\n                                | dict_full\n    \n    dict_empty                  : DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA\n    \n    dict_full                   : DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA\n    key_value_pairs          : key_value_pair\n                                | key_value_pair COMMA key_value_pairs\n    key_value_pair           : LKEY VARIABLE COMMA value RKEY\n    estruct_of_data          : list_empty\n                                | list_full\n    \n    functions_dict              : dict_func_put\n                                | dict_func_remove\n    \n    dict_func_put               : VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA\n    \n    dict_func_remove            : VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA\n     lists                   : list_empty\n                                | list_full\n    list_empty               : LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA\n                                | LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA\n    list_full                : LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA\n                                | LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA\n    strings_list             : STRING\n                                | STRING COMMA strings_list\n    ints_list                : INTEGER\n                                | INTEGER COMMA ints_list\n    functions_list           : list_func_clear\n                                | list_func_count\n                                | list_func_add\n                                | list_func_removeat\n    list_func_clear            : VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMAlist_func_count            : VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMAlist_func_add              : VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMAlist_func_removeat         : VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMAstack_assignation          : STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMAstack_push                 : VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMAstack_pop                  : VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMAqueue_struct             : QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA\n    functions_queue          : queue_enqueue\n                                | queue_dequeue\n                                | queue_clear\n                                | queue_isEmpty\n    queue_enqueue            : VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA\n    queue_dequeue            : VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA\n    queue_clear              : VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA\n    queue_clear              : VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA\n    queue_isEmpty            : VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA\n    declaration_async        : PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY\n    declaration_lambda         : ACTION SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION VARIABLE ARROW LKEY block_code RKEY'
    
_lr_action_items = {'USING':([0,],[2,]),'$end':([1,5,96,],[0,-1,-2,]),'SYSTEM':([2,],[3,]),'DOTANDCOMMA':([3,34,59,60,61,103,104,105,118,119,120,121,132,133,134,135,136,137,138,139,140,141,142,143,144,148,149,150,158,159,160,161,162,187,188,189,191,192,193,194,195,204,205,206,211,212,218,219,220,221,222,223,233,243,244,246,247,256,277,309,321,322,323,334,345,347,],[4,-35,110,-36,-37,152,154,155,-40,-38,-39,-44,-30,-76,-24,-25,-26,-27,-38,-32,-33,-34,-22,-29,-31,189,-38,-43,196,197,198,199,200,224,225,-21,-78,-79,-77,227,228,232,233,235,241,242,248,249,250,-22,-23,189,-88,262,263,265,266,-89,287,318,328,329,331,342,351,353,]),'PUBLIC':([4,9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,47,48,49,50,51,52,53,54,55,56,60,61,66,110,115,117,118,119,120,121,149,150,152,154,155,189,196,197,198,199,200,224,225,227,228,239,241,242,248,249,250,262,263,265,266,275,284,286,287,292,293,300,302,304,305,310,311,312,313,318,320,328,329,331,336,342,350,351,353,],[6,10,-40,10,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-62,-63,-64,-39,-35,-124,-125,-134,-135,-136,-137,-111,-112,-120,-121,-146,-147,-148,-149,-90,-91,-98,-99,-102,-103,-36,-37,-94,-75,10,10,-40,-38,-39,-44,-38,-43,-70,-72,-74,-21,-69,-71,-73,-66,-68,-19,-20,-65,-67,10,-138,-139,-151,-153,-154,-140,-141,-123,-150,-104,10,-105,-122,10,10,-90,-90,-97,10,-95,-92,-96,-93,-113,-100,-145,-126,-127,10,-114,-101,-128,-129,]),'CLASS':([6,],[7,]),'VARIABLE':([7,9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,60,61,63,64,66,73,74,75,76,77,80,81,82,83,84,85,98,100,108,109,110,115,116,117,118,119,120,121,149,150,152,153,154,155,157,166,167,168,169,180,181,189,190,196,197,198,199,200,201,202,224,225,227,228,232,234,235,237,239,241,242,245,248,249,250,257,261,262,263,265,266,274,275,284,286,287,292,293,300,302,304,305,310,311,312,313,318,320,324,328,329,331,336,341,342,350,351,353,],[8,11,-40,11,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-62,-63,-64,-39,-35,-124,-125,-134,-135,-136,-137,-111,-112,-120,-121,105,-146,-147,-148,-149,-90,-91,-98,-99,-102,-103,-36,-37,-83,-86,-94,-82,-84,-85,-87,118,132,-55,-56,-57,-58,-59,147,118,160,163,-75,11,173,11,-40,-38,-39,-44,-38,-43,-70,163,-72,-74,163,203,173,163,207,216,132,-21,226,-69,-71,-73,-66,-68,229,230,-19,-20,-65,-67,255,173,-80,258,11,-138,-139,264,-151,-153,-154,-81,173,-140,-141,-123,-150,285,-104,11,-105,-122,11,11,-90,-90,-97,11,-95,-92,-96,-93,-113,-100,333,-145,-126,-127,11,132,-114,-101,-128,-129,]),'LKEY':([8,69,71,209,273,282,283,295,309,319,322,323,327,335,],[9,115,117,239,284,292,293,305,319,324,330,332,336,324,]),'PRINT':([9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,47,48,49,50,51,52,53,54,55,56,60,61,66,110,115,117,118,119,120,121,149,150,152,154,155,189,196,197,198,199,200,224,225,227,228,239,241,242,248,249,250,262,263,265,266,275,284,286,287,292,293,300,302,304,305,310,311,312,313,318,320,328,329,331,336,342,350,351,353,],[31,-40,31,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-62,-63,-64,-39,-35,-124,-125,-134,-135,-136,-137,-111,-112,-120,-121,-146,-147,-148,-149,-90,-91,-98,-99,-102,-103,-36,-37,-94,-75,31,31,-40,-38,-39,-44,-38,-43,-70,-72,-74,-21,-69,-71,-73,-66,-68,-19,-20,-65,-67,31,-138,-139,-151,-153,-154,-140,-141,-123,-150,-104,31,-105,-122,31,31,-90,-90,-97,31,-95,-92,-96,-93,-113,-100,-145,-126,-127,31,-114,-101,-128,-129,]),'READ':([9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,60,61,63,64,66,73,74,75,76,80,108,109,110,115,117,118,119,120,121,149,150,152,153,154,155,157,168,181,189,196,197,198,199,200,224,225,227,228,239,241,242,248,249,250,262,263,265,266,275,284,286,287,292,293,300,302,304,305,310,311,312,313,318,320,328,329,331,336,341,342,350,351,353,],[32,-40,32,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-62,-63,-64,-39,-35,-124,-125,-134,-135,-136,-137,-111,-112,-120,-121,106,-146,-147,-148,-149,-90,-91,-98,-99,-102,-103,-36,-37,-83,-86,-94,-82,-84,-85,-87,145,106,106,-75,32,32,-40,-38,-39,-44,-38,-43,-70,106,-72,-74,106,106,145,-21,-69,-71,-73,-66,-68,-19,-20,-65,-67,32,-138,-139,-151,-153,-154,-140,-141,-123,-150,-104,32,-105,-122,32,32,-90,-90,-97,32,-95,-92,-96,-93,-113,-100,-145,-126,-127,32,145,-114,-101,-128,-129,]),'QUEUE':([9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,47,48,49,50,51,52,53,54,55,56,60,61,66,110,115,117,118,119,120,121,149,150,152,154,155,189,196,197,198,199,200,224,225,227,228,239,241,242,248,249,250,262,263,265,266,267,275,284,286,287,292,293,300,302,304,305,310,311,312,313,318,320,328,329,331,336,342,350,351,353,],[45,-40,45,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-62,-63,-64,-39,-35,-124,-125,-134,-135,-136,-137,-111,-112,-120,-121,-146,-147,-148,-149,-90,-91,-98,-99,-102,-103,-36,-37,-94,-75,45,45,-40,-38,-39,-44,-38,-43,-70,-72,-74,-21,-69,-71,-73,-66,-68,-19,-20,-65,-67,45,-138,-139,-151,-153,-154,-140,-141,-123,-150,278,-104,45,-105,-122,45,45,-90,-90,-97,45,-95,-92,-96,-93,-113,-100,-145,-126,-127,45,-114,-101,-128,-129,]),'CONST':([9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,47,48,49,50,51,52,53,54,55,56,57,60,61,66,72,110,115,117,118,119,120,121,149,150,152,154,155,189,196,197,198,199,200,224,225,227,228,239,241,242,248,249,250,262,263,265,266,275,284,286,287,292,293,300,302,304,305,310,311,312,313,318,320,328,329,331,336,342,350,351,353,],[58,-60,-40,58,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-62,-63,-64,-39,-35,-124,-125,-134,-135,-136,-137,-111,-112,-120,-121,-146,-147,-148,-149,-90,-91,-98,-99,-102,-103,107,-36,-37,-94,-61,-75,58,58,-40,-38,-39,-44,-38,-43,-70,-72,-74,-21,-69,-71,-73,-66,-68,-19,-20,-65,-67,58,-138,-139,-151,-153,-154,-140,-141,-123,-150,-104,58,-105,-122,58,58,-90,-90,-97,58,-95,-92,-96,-93,-113,-100,-145,-126,-127,58,-114,-101,-128,-129,]),'INTEGER':([9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,47,48,49,50,51,52,53,54,55,56,60,61,66,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,100,101,110,115,116,117,118,119,120,121,149,150,152,154,155,167,178,181,189,196,197,198,199,200,224,225,227,228,234,235,239,241,242,248,249,250,257,261,262,263,265,266,275,284,286,287,292,293,300,302,304,305,310,311,312,313,318,320,328,329,331,332,336,341,342,348,350,351,353,],[34,-40,34,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-62,-63,-64,-39,-35,-124,-125,-134,-135,-136,-137,-111,-112,-120,-121,-146,-147,-148,-149,-90,-91,-98,-99,-102,-103,-36,-37,-94,34,121,34,-55,-56,-57,-58,-59,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,34,150,-75,34,34,34,-40,-38,-39,-44,-38,-43,-70,-72,-74,34,214,34,-21,-69,-71,-73,-66,-68,-19,-20,-65,-67,34,-80,34,-138,-139,-151,-153,-154,-81,34,-140,-141,-123,-150,-104,34,-105,-122,34,34,-90,-90,-97,34,-95,-92,-96,-93,-113,-100,-145,-126,-127,340,34,34,-114,340,-101,-128,-129,]),'FLOAT_NUMBER':([9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,47,48,49,50,51,52,53,54,55,56,60,61,66,77,80,81,82,83,84,85,100,110,115,116,117,118,119,120,121,149,150,152,154,155,167,181,189,196,197,198,199,200,224,225,227,228,234,235,239,241,242,248,249,250,257,261,262,263,265,266,275,284,286,287,292,293,300,302,304,305,310,311,312,313,318,320,328,329,331,336,341,342,350,351,353,],[60,-40,60,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-62,-63,-64,-39,-35,-124,-125,-134,-135,-136,-137,-111,-112,-120,-121,-146,-147,-148,-149,-90,-91,-98,-99,-102,-103,-36,-37,-94,60,60,-55,-56,-57,-58,-59,60,-75,60,60,60,-40,-38,-39,-44,-38,-43,-70,-72,-74,60,60,-21,-69,-71,-73,-66,-68,-19,-20,-65,-67,60,-80,60,-138,-139,-151,-153,-154,-81,60,-140,-141,-123,-150,-104,60,-105,-122,60,60,-90,-90,-97,60,-95,-92,-96,-93,-113,-100,-145,-126,-127,60,60,-114,-101,-128,-129,]),'DECIMAL_NUMBER':([9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,47,48,49,50,51,52,53,54,55,56,60,61,66,77,80,81,82,83,84,85,100,110,115,116,117,118,119,120,121,149,150,152,154,155,167,181,189,196,197,198,199,200,224,225,227,228,234,235,239,241,242,248,249,250,257,261,262,263,265,266,275,284,286,287,292,293,300,302,304,305,310,311,312,313,318,320,328,329,331,336,341,342,350,351,353,],[61,-40,61,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-62,-63,-64,-39,-35,-124,-125,-134,-135,-136,-137,-111,-112,-120,-121,-146,-147,-148,-149,-90,-91,-98,-99,-102,-103,-36,-37,-94,61,61,-55,-56,-57,-58,-59,61,-75,61,61,61,-40,-38,-39,-44,-38,-43,-70,-72,-74,61,61,-21,-69,-71,-73,-66,-68,-19,-20,-65,-67,61,-80,61,-138,-139,-151,-153,-154,-81,61,-140,-141,-123,-150,-104,61,-105,-122,61,61,-90,-90,-97,61,-95,-92,-96,-93,-113,-100,-145,-126,-127,61,61,-114,-101,-128,-129,]),'LIST':([9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,47,48,49,50,51,52,53,54,55,56,60,61,66,110,115,117,118,119,120,121,149,150,152,154,155,189,196,197,198,199,200,224,225,227,228,239,241,242,248,249,250,262,263,265,266,268,269,275,284,286,287,292,293,300,302,304,305,310,311,312,313,318,320,328,329,331,336,342,350,351,353,],[62,-40,62,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-62,-63,-64,-39,-35,-124,-125,-134,-135,-136,-137,-111,-112,-120,-121,-146,-147,-148,-149,-90,-91,-98,-99,-102,-103,-36,-37,-94,-75,62,62,-40,-38,-39,-44,-38,-43,-70,-72,-74,-21,-69,-71,-73,-66,-68,-19,-20,-65,-67,62,-138,-139,-151,-153,-154,-140,-141,-123,-150,279,280,-104,62,-105,-122,62,62,-90,-90,-97,62,-95,-92,-96,-93,-113,-100,-145,-126,-127,62,-114,-101,-128,-129,]),'DICTIONARY':([9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,47,48,49,50,51,52,53,54,55,56,60,61,66,110,115,117,118,119,120,121,149,150,152,154,155,189,196,197,198,199,200,224,225,227,228,239,241,242,248,249,250,254,262,263,265,266,275,284,286,287,292,293,300,302,304,305,310,311,312,313,318,320,328,329,331,336,342,350,351,353,],[65,-40,65,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-62,-63,-64,-39,-35,-124,-125,-134,-135,-136,-137,-111,-112,-120,-121,-146,-147,-148,-149,-90,-91,-98,-99,-102,-103,-36,-37,-94,-75,65,65,-40,-38,-39,-44,-38,-43,-70,-72,-74,-21,-69,-71,-73,-66,-68,-19,-20,-65,-67,65,-138,-139,-151,-153,-154,270,-140,-141,-123,-150,-104,65,-105,-122,65,65,-90,-90,-97,65,-95,-92,-96,-93,-113,-100,-145,-126,-127,65,-114,-101,-128,-129,]),'FOR':([9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,47,48,49,50,51,52,53,54,55,56,60,61,66,110,115,117,118,119,120,121,149,150,152,154,155,189,196,197,198,199,200,224,225,227,228,239,241,242,248,249,250,262,263,265,266,275,284,286,287,292,293,300,302,304,305,310,311,312,313,318,320,328,329,331,336,342,350,351,353,],[67,-40,67,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-62,-63,-64,-39,-35,-124,-125,-134,-135,-136,-137,-111,-112,-120,-121,-146,-147,-148,-149,-90,-91,-98,-99,-102,-103,-36,-37,-94,-75,67,67,-40,-38,-39,-44,-38,-43,-70,-72,-74,-21,-69,-71,-73,-66,-68,-19,-20,-65,-67,67,-138,-139,-151,-153,-154,-140,-141,-123,-150,-104,67,-105,-122,67,67,-90,-90,-97,67,-95,-92,-96,-93,-113,-100,-145,-126,-127,67,-114,-101,-128,-129,]),'FOREACH':([9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,47,48,49,50,51,52,53,54,55,56,60,61,66,110,115,117,118,119,120,121,149,150,152,154,155,189,196,197,198,199,200,224,225,227,228,239,241,242,248,249,250,262,263,265,266,275,284,286,287,292,293,300,302,304,305,310,311,312,313,318,320,328,329,331,336,342,350,351,353,],[68,-40,68,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-62,-63,-64,-39,-35,-124,-125,-134,-135,-136,-137,-111,-112,-120,-121,-146,-147,-148,-149,-90,-91,-98,-99,-102,-103,-36,-37,-94,-75,68,68,-40,-38,-39,-44,-38,-43,-70,-72,-74,-21,-69,-71,-73,-66,-68,-19,-20,-65,-67,68,-138,-139,-151,-153,-154,-140,-141,-123,-150,-104,68,-105,-122,68,68,-90,-90,-97,68,-95,-92,-96,-93,-113,-100,-145,-126,-127,68,-114,-101,-128,-129,]),'TRY':([9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,47,48,49,50,51,52,53,54,55,56,60,61,66,110,115,117,118,119,120,121,149,150,152,154,155,189,196,197,198,199,200,224,225,227,228,239,241,242,248,249,250,262,263,265,266,275,284,286,287,292,293,300,302,304,305,310,311,312,313,318,320,328,329,331,336,342,350,351,353,],[69,-40,69,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-62,-63,-64,-39,-35,-124,-125,-134,-135,-136,-137,-111,-112,-120,-121,-146,-147,-148,-149,-90,-91,-98,-99,-102,-103,-36,-37,-94,-75,69,69,-40,-38,-39,-44,-38,-43,-70,-72,-74,-21,-69,-71,-73,-66,-68,-19,-20,-65,-67,69,-138,-139,-151,-153,-154,-140,-141,-123,-150,-104,69,-105,-122,69,69,-90,-90,-97,69,-95,-92,-96,-93,-113,-100,-145,-126,-127,69,-114,-101,-128,-129,]),'WHILE':([9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,47,48,49,50,51,52,53,54,55,56,60,61,66,110,115,117,118,119,120,121,149,150,152,154,155,189,196,197,198,199,200,210,224,225,227,228,239,241,242,248,249,250,262,263,265,266,275,284,286,287,292,293,300,302,304,305,310,311,312,313,318,320,328,329,331,336,342,350,351,353,],[70,-40,70,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-62,-63,-64,-39,-35,-124,-125,-134,-135,-136,-137,-111,-112,-120,-121,-146,-147,-148,-149,-90,-91,-98,-99,-102,-103,-36,-37,-94,-75,70,70,-40,-38,-39,-44,-38,-43,-70,-72,-74,-21,-69,-71,-73,-66,-68,240,-19,-20,-65,-67,70,-138,-139,-151,-153,-154,-140,-141,-123,-150,-104,70,-105,-122,70,70,-90,-90,-97,70,-95,-92,-96,-93,-113,-100,-145,-126,-127,70,-114,-101,-128,-129,]),'DO':([9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,47,48,49,50,51,52,53,54,55,56,60,61,66,110,115,117,118,119,120,121,149,150,152,154,155,189,196,197,198,199,200,224,225,227,228,239,241,242,248,249,250,262,263,265,266,275,284,286,287,292,293,300,302,304,305,310,311,312,313,318,320,328,329,331,336,342,350,351,353,],[71,-40,71,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-62,-63,-64,-39,-35,-124,-125,-134,-135,-136,-137,-111,-112,-120,-121,-146,-147,-148,-149,-90,-91,-98,-99,-102,-103,-36,-37,-94,-75,71,71,-40,-38,-39,-44,-38,-43,-70,-72,-74,-21,-69,-71,-73,-66,-68,-19,-20,-65,-67,71,-138,-139,-151,-153,-154,-140,-141,-123,-150,-104,71,-105,-122,71,71,-90,-90,-97,71,-95,-92,-96,-93,-113,-100,-145,-126,-127,71,-114,-101,-128,-129,]),'PRIVATE':([9,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,47,48,49,50,51,52,53,54,55,56,60,61,66,110,115,117,118,119,120,121,149,150,152,154,155,189,196,197,198,199,200,224,225,227,228,239,241,242,248,249,250,262,263,265,266,275,284,286,287,292,293,300,302,304,305,310,311,312,313,318,320,328,329,331,336,342,350,351,353,],[72,-40,72,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-62,-63,-64,-39,-35,-124,-125,-134,-135,-136,-137,-111,-112,-120,-121,-146,-147,-148,-149,-90,-91,-98,-99,-102,-103,-36,-37,-94,-75,72,72,-40,-38,-39,-44,-38,-43,-70,-72,-74,-21,-69,-71,-73,-66,-68,-19,-20,-65,-67,72,-138,-139,-151,-153,-154,-140,-141,-123,-150,-104,72,-105,-122,72,72,-90,-90,-97,72,-95,-92,-96,-93,-113,-100,-145,-126,-127,72,-114,-101,-128,-129,]),'CHARTYPE':([9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,47,48,49,50,51,52,53,54,55,56,57,58,60,61,66,72,102,107,110,113,114,115,117,118,119,120,121,149,150,152,154,155,189,196,197,198,199,200,224,225,227,228,236,239,241,242,248,249,250,262,263,265,266,275,284,286,287,288,292,293,300,302,304,305,310,311,312,313,318,320,328,329,331,336,342,350,351,353,],[73,-60,-40,73,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-62,-63,-64,-39,-35,-124,-125,-134,-135,-136,-137,-111,-112,-120,-121,-146,-147,-148,-149,-90,-91,-98,-99,-102,-103,73,73,-36,-37,-94,-61,73,73,-75,73,73,73,73,-40,-38,-39,-44,-38,-43,-70,-72,-74,-21,-69,-71,-73,-66,-68,-19,-20,-65,-67,73,73,-138,-139,-151,-153,-154,-140,-141,-123,-150,-104,73,-105,-122,73,73,73,-90,-90,-97,73,-95,-92,-96,-93,-113,-100,-145,-126,-127,73,-114,-101,-128,-129,]),'STRINGTYPE':([9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,47,48,49,50,51,52,53,54,55,56,57,58,60,61,66,72,102,107,110,111,113,114,115,117,118,119,120,121,149,150,152,154,155,189,196,197,198,199,200,224,225,227,228,236,239,241,242,248,249,250,262,263,265,266,275,284,286,287,288,289,292,293,300,302,304,305,310,311,312,313,318,320,328,329,331,336,342,350,351,353,],[63,-60,-40,63,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-62,-63,-64,-39,-35,-124,-125,-134,-135,-136,-137,-111,-112,-120,-121,-146,-147,-148,-149,-90,-91,-98,-99,-102,-103,63,63,-36,-37,-94,-61,63,63,-75,164,63,63,63,63,-40,-38,-39,-44,-38,-43,-70,-72,-74,-21,-69,-71,-73,-66,-68,-19,-20,-65,-67,63,63,-138,-139,-151,-153,-154,-140,-141,-123,-150,-104,63,-105,-122,63,297,63,63,-90,-90,-97,63,-95,-92,-96,-93,-113,-100,-145,-126,-127,63,-114,-101,-128,-129,]),'FLOATTYPE':([9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,47,48,49,50,51,52,53,54,55,56,57,58,60,61,66,72,102,107,110,113,114,115,117,118,119,120,121,149,150,152,154,155,189,196,197,198,199,200,224,225,227,228,236,239,241,242,248,249,250,262,263,265,266,275,284,286,287,288,292,293,300,302,304,305,310,311,312,313,318,320,328,329,331,336,342,350,351,353,],[74,-60,-40,74,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-62,-63,-64,-39,-35,-124,-125,-134,-135,-136,-137,-111,-112,-120,-121,-146,-147,-148,-149,-90,-91,-98,-99,-102,-103,74,74,-36,-37,-94,-61,74,74,-75,74,74,74,74,-40,-38,-39,-44,-38,-43,-70,-72,-74,-21,-69,-71,-73,-66,-68,-19,-20,-65,-67,74,74,-138,-139,-151,-153,-154,-140,-141,-123,-150,-104,74,-105,-122,74,74,74,-90,-90,-97,74,-95,-92,-96,-93,-113,-100,-145,-126,-127,74,-114,-101,-128,-129,]),'DECIMALTYPE':([9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,47,48,49,50,51,52,53,54,55,56,57,58,60,61,66,72,102,107,110,113,114,115,117,118,119,120,121,149,150,152,154,155,189,196,197,198,199,200,224,225,227,228,236,239,241,242,248,249,250,262,263,265,266,275,284,286,287,288,292,293,300,302,304,305,310,311,312,313,318,320,328,329,331,336,342,350,351,353,],[75,-60,-40,75,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-62,-63,-64,-39,-35,-124,-125,-134,-135,-136,-137,-111,-112,-120,-121,-146,-147,-148,-149,-90,-91,-98,-99,-102,-103,75,75,-36,-37,-94,-61,75,75,-75,75,75,75,75,-40,-38,-39,-44,-38,-43,-70,-72,-74,-21,-69,-71,-73,-66,-68,-19,-20,-65,-67,75,75,-138,-139,-151,-153,-154,-140,-141,-123,-150,-104,75,-105,-122,75,75,75,-90,-90,-97,75,-95,-92,-96,-93,-113,-100,-145,-126,-127,75,-114,-101,-128,-129,]),'INTTYPE':([9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,47,48,49,50,51,52,53,54,55,56,57,58,60,61,66,72,102,107,110,111,113,114,115,117,118,119,120,121,149,150,152,154,155,189,196,197,198,199,200,224,225,227,228,236,239,241,242,248,249,250,262,263,265,266,275,284,286,287,288,290,292,293,300,302,304,305,310,311,312,313,318,320,328,329,331,336,342,350,351,353,],[64,-60,-40,64,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-62,-63,-64,-39,-35,-124,-125,-134,-135,-136,-137,-111,-112,-120,-121,-146,-147,-148,-149,-90,-91,-98,-99,-102,-103,64,64,-36,-37,-94,-61,64,64,-75,165,64,64,64,64,-40,-38,-39,-44,-38,-43,-70,-72,-74,-21,-69,-71,-73,-66,-68,-19,-20,-65,-67,64,64,-138,-139,-151,-153,-154,-140,-141,-123,-150,-104,64,-105,-122,64,298,64,64,-90,-90,-97,64,-95,-92,-96,-93,-113,-100,-145,-126,-127,64,-114,-101,-128,-129,]),'BOOLTYPE':([9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,47,48,49,50,51,52,53,54,55,56,57,58,60,61,66,72,102,107,110,113,114,115,117,118,119,120,121,149,150,152,154,155,189,196,197,198,199,200,224,225,227,228,236,239,241,242,248,249,250,262,263,265,266,275,284,286,287,288,292,293,300,302,304,305,310,311,312,313,318,320,328,329,331,336,342,350,351,353,],[76,-60,-40,76,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-62,-63,-64,-39,-35,-124,-125,-134,-135,-136,-137,-111,-112,-120,-121,-146,-147,-148,-149,-90,-91,-98,-99,-102,-103,76,76,-36,-37,-94,-61,76,76,-75,76,76,76,76,-40,-38,-39,-44,-38,-43,-70,-72,-74,-21,-69,-71,-73,-66,-68,-19,-20,-65,-67,76,76,-138,-139,-151,-153,-154,-140,-141,-123,-150,-104,76,-105,-122,76,76,76,-90,-90,-97,76,-95,-92,-96,-93,-113,-100,-145,-126,-127,76,-114,-101,-128,-129,]),'RKEY':([11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,47,48,49,50,51,52,53,54,55,56,60,61,66,97,110,118,119,120,121,132,134,135,136,137,138,139,140,141,142,143,144,149,150,152,154,155,170,174,189,196,197,198,199,200,221,222,224,225,227,228,241,242,248,249,250,260,262,263,265,266,275,286,287,294,300,301,302,303,304,310,311,312,313,314,318,320,325,326,328,329,331,337,338,339,340,342,343,344,349,350,351,352,353,354,355,],[-40,96,-17,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-62,-63,-64,-39,-35,-124,-125,-134,-135,-136,-137,-111,-112,-120,-121,-146,-147,-148,-149,-90,-91,-98,-99,-102,-103,-36,-37,-94,-18,-75,-40,-38,-39,-44,-30,-24,-25,-26,-27,-38,-32,-33,-34,-22,-29,-31,-38,-43,-70,-72,-74,208,210,-21,-69,-71,-73,-66,-68,-22,-23,-19,-20,-65,-67,-138,-139,-151,-153,-154,275,-140,-141,-123,-150,-104,-105,-122,304,310,311,312,313,-97,-95,-92,-96,-93,320,-113,-100,334,-115,-145,-126,-127,345,-130,347,-132,-114,-116,350,355,-101,-128,-131,-129,-133,-117,]),'PLUS':([11,17,33,34,60,61,118,119,120,132,134,138,142,149,172,173,221,],[81,-38,81,-35,-36,-37,81,-38,81,81,81,-38,185,-38,81,81,185,]),'MINUS':([11,17,33,34,60,61,118,119,120,132,134,138,149,172,173,],[82,-38,82,-35,-36,-37,82,-38,82,82,82,-38,-38,82,82,]),'TIMES':([11,17,33,34,60,61,118,119,120,132,134,138,149,172,173,],[83,-38,83,-35,-36,-37,83,-38,83,83,83,-38,-38,83,83,]),'DIVIDE':([11,17,33,34,60,61,118,119,120,132,134,138,149,172,173,],[84,-38,84,-35,-36,-37,84,-38,84,84,84,-38,-38,84,84,]),'PERCENT':([11,17,33,34,60,61,118,119,120,132,134,138,149,172,173,],[85,-38,85,-35,-36,-37,85,-38,85,85,85,-38,-38,85,85,]),'GREATER_THAN':([11,17,33,34,60,61,63,64,73,74,75,76,112,118,119,120,132,134,138,149,151,164,165,172,173,281,296,297,298,],[86,-38,86,-35,-36,-37,-83,-86,-82,-84,-85,-87,166,-40,-38,-39,86,86,-38,-38,190,201,202,86,86,291,306,307,308,]),'SMALLER_THAN':([11,17,33,34,45,60,61,62,65,118,119,120,132,134,138,149,172,173,270,278,279,280,],[87,-38,87,-35,102,-36,-37,111,112,-40,-38,-39,87,87,-38,-38,87,87,281,288,289,290,]),'EQUAL_COMPARATION':([11,17,33,34,60,61,118,119,120,132,134,138,149,172,173,],[88,-38,88,-35,-36,-37,-40,-38,-39,88,88,-38,-38,88,88,]),'INEQUALITY':([11,17,33,34,60,61,118,119,120,132,134,138,149,172,173,],[89,-38,89,-35,-36,-37,-40,-38,-39,89,89,-38,-38,89,89,]),'GREATER_THAN_OR_EQUAL':([11,17,33,34,60,61,118,119,120,132,134,138,149,172,173,],[90,-38,90,-35,-36,-37,-40,-38,-39,90,90,-38,-38,90,90,]),'SMALLER_THAN_OR_EQUAL':([11,17,33,34,60,61,118,119,120,132,134,138,149,172,173,],[91,-38,91,-35,-36,-37,-40,-38,-39,91,91,-38,-38,91,91,]),'LOGICAND':([11,17,33,34,60,61,118,119,120,132,134,138,149,172,173,],[92,-38,92,-35,-36,-37,-40,-38,-39,92,92,-38,-38,92,92,]),'LOGICOR':([11,17,33,34,60,61,118,119,120,132,134,138,149,172,173,],[93,-38,93,-35,-36,-37,-40,-38,-39,93,93,-38,-38,93,93,]),'LOGICNOT':([11,17,33,34,60,61,118,119,120,132,134,138,149,172,173,],[94,-38,94,-35,-36,-37,-40,-38,-39,94,94,-38,-38,94,94,]),'LOGICXOR':([11,17,33,34,60,61,118,119,120,132,134,138,149,172,173,],[95,-38,95,-35,-36,-37,-40,-38,-39,95,95,-38,-38,95,95,]),'DOT':([11,],[79,]),'ASSIGNATION':([11,105,160,163,203,226,229,230,],[80,80,80,80,231,251,252,253,]),'LPARENT':([31,32,67,68,70,106,122,123,124,125,126,127,128,129,130,131,145,238,240,291,306,307,308,],[98,99,113,114,116,156,175,176,177,178,179,180,181,182,183,184,186,259,261,299,315,316,317,]),'COMMA':([34,60,61,103,118,119,120,121,132,133,134,135,136,137,138,139,140,141,142,143,144,149,150,158,161,189,191,193,194,205,206,215,221,222,326,333,338,340,355,],[-35,-36,-37,153,-40,-38,-39,-44,-30,-76,-24,-25,-26,-27,-38,-32,-33,-34,-22,-29,-31,-38,-43,153,153,-21,153,-77,153,234,236,245,-22,-23,335,341,346,348,-117,]),'RPARENT':([34,60,61,99,118,119,120,121,132,134,135,136,137,138,139,140,141,142,143,144,146,147,149,150,156,171,175,176,182,183,184,186,189,213,214,216,217,221,222,258,264,271,272,276,285,299,315,316,317,],[-35,-36,-37,148,-40,-38,-39,-44,-30,-24,-25,-26,-27,-38,-32,-33,-34,-22,-29,-31,187,188,-38,-43,193,209,211,212,218,219,220,223,-21,243,244,246,247,-22,-23,273,277,282,283,286,295,309,321,322,323,]),'CLEAR':([79,],[122,]),'COUNT':([79,],[123,]),'ADD':([79,],[124,]),'REMOVEAT':([79,],[125,]),'PUT':([79,],[126,]),'REMOVE':([79,],[127,]),'ENQUEUE':([79,],[128,]),'DEQUEUE':([79,],[129,]),'PEEK':([79,],[130,]),'ISEMPTY':([79,],[131,]),'BOOLTRUE':([80,181,341,],[139,139,139,]),'BOOLFALSE':([80,181,341,],[140,140,140,]),'STRING':([80,98,177,179,181,185,330,341,346,],[142,146,213,215,142,221,338,142,338,]),'CHAR':([80,181,341,],[143,143,143,]),'IN':([207,],[237,]),'CATCH':([208,],[238,]),'NEW':([231,251,252,253,],[254,267,268,269,]),'INCREMENT':([255,],[271,]),'DECREMENT':([255,],[272,]),'EXCEPTION':([259,],[274,]),'FINALLY':([320,],[327,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block_publicClass':([4,],[5,]),'all_block_code':([9,13,115,117,239,284,292,293,305,336,],[12,97,170,174,260,294,301,303,314,344,]),'block_code':([9,13,115,117,239,284,292,293,305,336,],[13,13,13,13,13,13,13,13,13,13,]),'def_const_or_var':([9,13,115,117,239,284,292,293,305,336,],[14,14,14,14,14,14,14,14,14,14,]),'print_data':([9,13,115,117,239,284,292,293,305,336,],[15,15,15,15,15,15,15,15,15,15,]),'read_data':([9,13,80,115,117,181,239,284,292,293,305,336,341,],[16,16,137,16,16,137,16,16,16,16,16,16,137,]),'arithmetic_operation':([9,13,77,80,100,115,116,117,167,181,234,239,261,284,292,293,305,336,341,],[17,17,119,138,149,17,138,17,138,138,138,17,138,17,17,17,17,17,138,]),'logic_operation':([9,13,80,115,116,117,167,181,234,239,261,284,292,293,305,336,341,],[18,18,141,18,171,18,205,141,205,18,276,18,18,18,18,18,141,]),'lists':([9,13,115,117,239,284,292,293,305,336,],[19,19,19,19,19,19,19,19,19,19,]),'functions_list':([9,13,115,117,239,284,292,293,305,336,],[20,20,20,20,20,20,20,20,20,20,]),'dict_estruct':([9,13,115,117,239,284,292,293,305,336,],[21,21,21,21,21,21,21,21,21,21,]),'functions_dict':([9,13,115,117,239,284,292,293,305,336,],[22,22,22,22,22,22,22,22,22,22,]),'queue_struct':([9,13,115,117,239,284,292,293,305,336,],[23,23,23,23,23,23,23,23,23,23,]),'functions_queue':([9,13,115,117,239,284,292,293,305,336,],[24,24,24,24,24,24,24,24,24,24,]),'block_for':([9,13,115,117,239,284,292,293,305,336,],[25,25,25,25,25,25,25,25,25,25,]),'block_try_catch':([9,13,115,117,239,284,292,293,305,336,],[26,26,26,26,26,26,26,26,26,26,]),'block_while':([9,13,115,117,239,284,292,293,305,336,],[27,27,27,27,27,27,27,27,27,27,]),'constant_assignation':([9,13,115,117,239,284,292,293,305,336,],[28,28,28,28,28,28,28,28,28,28,]),'variable_assignation':([9,13,115,117,239,284,292,293,305,336,],[29,29,29,29,29,29,29,29,29,29,]),'late_initialization':([9,13,115,117,239,284,292,293,305,336,],[30,30,30,30,30,30,30,30,30,30,]),'value_numeric':([9,13,77,80,100,115,116,117,167,181,234,239,261,284,292,293,305,336,341,],[33,33,120,134,120,33,172,33,172,134,172,33,172,33,33,33,33,33,134,]),'list_empty':([9,13,115,117,239,284,292,293,305,336,],[35,35,35,35,35,35,35,35,35,35,]),'list_full':([9,13,115,117,239,284,292,293,305,336,],[36,36,36,36,36,36,36,36,36,36,]),'list_func_clear':([9,13,115,117,239,284,292,293,305,336,],[37,37,37,37,37,37,37,37,37,37,]),'list_func_count':([9,13,115,117,239,284,292,293,305,336,],[38,38,38,38,38,38,38,38,38,38,]),'list_func_add':([9,13,115,117,239,284,292,293,305,336,],[39,39,39,39,39,39,39,39,39,39,]),'list_func_removeat':([9,13,115,117,239,284,292,293,305,336,],[40,40,40,40,40,40,40,40,40,40,]),'dict_empty':([9,13,115,117,239,284,292,293,305,336,],[41,41,41,41,41,41,41,41,41,41,]),'dict_full':([9,13,115,117,239,284,292,293,305,336,],[42,42,42,42,42,42,42,42,42,42,]),'dict_func_put':([9,13,115,117,239,284,292,293,305,336,],[43,43,43,43,43,43,43,43,43,43,]),'dict_func_remove':([9,13,115,117,239,284,292,293,305,336,],[44,44,44,44,44,44,44,44,44,44,]),'data_type':([9,13,57,58,102,107,113,114,115,117,236,239,284,288,292,293,305,336,],[46,46,108,109,151,157,168,169,46,46,168,46,46,296,46,46,46,46,]),'queue_enqueue':([9,13,115,117,239,284,292,293,305,336,],[47,47,47,47,47,47,47,47,47,47,]),'queue_dequeue':([9,13,115,117,239,284,292,293,305,336,],[48,48,48,48,48,48,48,48,48,48,]),'queue_clear':([9,13,115,117,239,284,292,293,305,336,],[49,49,49,49,49,49,49,49,49,49,]),'queue_isEmpty':([9,13,115,117,239,284,292,293,305,336,],[50,50,50,50,50,50,50,50,50,50,]),'for_anidado':([9,13,115,117,239,284,292,293,305,336,],[51,51,51,51,51,51,300,302,51,51,]),'for_each':([9,13,115,117,239,284,292,293,305,336,],[52,52,52,52,52,52,52,52,52,52,]),'try_catch_simply':([9,13,115,117,239,284,292,293,305,336,],[53,53,53,53,53,53,53,53,53,53,]),'try_catch_finally':([9,13,115,117,239,284,292,293,305,336,],[54,54,54,54,54,54,54,54,54,54,]),'normal_while':([9,13,115,117,239,284,292,293,305,336,],[55,55,55,55,55,55,55,55,55,55,]),'do_while':([9,13,115,117,239,284,292,293,305,336,],[56,56,56,56,56,56,56,56,56,56,]),'access_modifiers':([9,13,115,117,239,284,292,293,305,336,],[57,57,57,57,57,57,57,57,57,57,]),'assignation_key_value':([9,13,46,108,109,115,117,153,157,168,239,284,292,293,305,336,],[59,59,103,158,161,59,59,191,194,206,59,59,59,59,59,59,]),'for_simple':([9,13,115,117,239,284,292,293,305,336,],[66,66,66,66,66,66,66,66,66,66,]),'arithmetic_operator':([11,33,118,120,132,134,172,173,],[77,100,77,100,77,100,100,77,]),'logic_operator':([11,33,132,134,172,173,],[78,101,78,101,101,78,]),'assignation_key_value_multiple':([46,108,109,153,157,],[104,159,162,192,195,]),'value':([80,181,341,],[133,217,349,]),'value_logic':([80,181,341,],[135,135,135,]),'value_string':([80,181,341,],[136,136,136,]),'concatenation':([80,181,185,341,],[144,144,222,144,]),'assignation_with_datatype':([113,236,],[167,257,]),'logic_operations':([167,234,],[204,256,]),'key_value_pairs':([319,335,],[325,343,]),'key_value_pair':([319,335,],[326,326,]),'strings_list':([330,346,],[337,352,]),'ints_list':([332,348,],[339,354,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> USING SYSTEM DOTANDCOMMA block_publicClass','program',4,'p_program','sintactico.py',68),
  ('block_publicClass -> PUBLIC CLASS VARIABLE LKEY all_block_code RKEY','block_publicClass',6,'p_block_publicClass','sintactico.py',71),
  ('block_code -> def_const_or_var','block_code',1,'p_block_code','sintactico.py',74),
  ('block_code -> print_data','block_code',1,'p_block_code','sintactico.py',75),
  ('block_code -> read_data','block_code',1,'p_block_code','sintactico.py',76),
  ('block_code -> arithmetic_operation','block_code',1,'p_block_code','sintactico.py',77),
  ('block_code -> logic_operation','block_code',1,'p_block_code','sintactico.py',78),
  ('block_code -> lists','block_code',1,'p_block_code','sintactico.py',80),
  ('block_code -> functions_list','block_code',1,'p_block_code','sintactico.py',81),
  ('block_code -> dict_estruct','block_code',1,'p_block_code','sintactico.py',83),
  ('block_code -> functions_dict','block_code',1,'p_block_code','sintactico.py',84),
  ('block_code -> queue_struct','block_code',1,'p_block_code','sintactico.py',86),
  ('block_code -> functions_queue','block_code',1,'p_block_code','sintactico.py',87),
  ('block_code -> block_for','block_code',1,'p_block_code','sintactico.py',89),
  ('block_code -> block_try_catch','block_code',1,'p_block_code','sintactico.py',91),
  ('block_code -> block_while','block_code',1,'p_block_code','sintactico.py',93),
  ('all_block_code -> block_code','all_block_code',1,'p_all_block_code','sintactico.py',97),
  ('all_block_code -> block_code all_block_code','all_block_code',2,'p_all_block_code','sintactico.py',98),
  ('print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA','print_data',5,'p_print_data','sintactico.py',103),
  ('print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA','print_data',5,'p_print_data','sintactico.py',104),
  ('read_data -> READ LPARENT RPARENT DOTANDCOMMA','read_data',4,'p_read_data','sintactico.py',108),
  ('concatenation -> STRING','concatenation',1,'p_concatenation','sintactico.py',112),
  ('concatenation -> STRING PLUS concatenation','concatenation',3,'p_concatenation','sintactico.py',113),
  ('value -> value_numeric','value',1,'p_value','sintactico.py',117),
  ('value -> value_logic','value',1,'p_value','sintactico.py',118),
  ('value -> value_string','value',1,'p_value','sintactico.py',119),
  ('value -> read_data','value',1,'p_value','sintactico.py',120),
  ('value_string -> STRING','value_string',1,'p_value_string','sintactico.py',124),
  ('value_string -> CHAR','value_string',1,'p_value_string','sintactico.py',125),
  ('value_string -> VARIABLE','value_string',1,'p_value_string','sintactico.py',126),
  ('value_string -> concatenation','value_string',1,'p_value_string','sintactico.py',127),
  ('value_logic -> BOOLTRUE','value_logic',1,'p_value_logic','sintactico.py',131),
  ('value_logic -> BOOLFALSE','value_logic',1,'p_value_logic','sintactico.py',132),
  ('value_logic -> logic_operation','value_logic',1,'p_value_logic','sintactico.py',133),
  ('value_numeric -> INTEGER','value_numeric',1,'p_value_numeric','sintactico.py',137),
  ('value_numeric -> FLOAT_NUMBER','value_numeric',1,'p_value_numeric','sintactico.py',138),
  ('value_numeric -> DECIMAL_NUMBER','value_numeric',1,'p_value_numeric','sintactico.py',139),
  ('value_numeric -> arithmetic_operation','value_numeric',1,'p_value_numeric','sintactico.py',140),
  ('arithmetic_operation -> value_numeric','arithmetic_operation',1,'p_arithmetic_operation','sintactico.py',145),
  ('arithmetic_operation -> VARIABLE','arithmetic_operation',1,'p_arithmetic_operation','sintactico.py',146),
  ('arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation','arithmetic_operation',3,'p_arithmetic_operation','sintactico.py',147),
  ('arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation','arithmetic_operation',3,'p_arithmetic_operation','sintactico.py',148),
  ('logic_operation -> value_numeric logic_operator INTEGER','logic_operation',3,'p_logic_operation','sintactico.py',152),
  ('logic_operation -> VARIABLE logic_operator INTEGER','logic_operation',3,'p_logic_operation','sintactico.py',153),
  ('logic_operator -> GREATER_THAN','logic_operator',1,'p_logic_operator','sintactico.py',157),
  ('logic_operator -> SMALLER_THAN','logic_operator',1,'p_logic_operator','sintactico.py',158),
  ('logic_operator -> EQUAL_COMPARATION','logic_operator',1,'p_logic_operator','sintactico.py',159),
  ('logic_operator -> INEQUALITY','logic_operator',1,'p_logic_operator','sintactico.py',160),
  ('logic_operator -> GREATER_THAN_OR_EQUAL','logic_operator',1,'p_logic_operator','sintactico.py',161),
  ('logic_operator -> SMALLER_THAN_OR_EQUAL','logic_operator',1,'p_logic_operator','sintactico.py',162),
  ('logic_operator -> LOGICAND','logic_operator',1,'p_logic_operator','sintactico.py',163),
  ('logic_operator -> LOGICOR','logic_operator',1,'p_logic_operator','sintactico.py',164),
  ('logic_operator -> LOGICNOT','logic_operator',1,'p_logic_operator','sintactico.py',165),
  ('logic_operator -> LOGICXOR','logic_operator',1,'p_logic_operator','sintactico.py',166),
  ('arithmetic_operator -> PLUS','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',170),
  ('arithmetic_operator -> MINUS','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',171),
  ('arithmetic_operator -> TIMES','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',172),
  ('arithmetic_operator -> DIVIDE','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',173),
  ('arithmetic_operator -> PERCENT','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',174),
  ('access_modifiers -> PUBLIC','access_modifiers',1,'p_access_modifiers','sintactico.py',179),
  ('access_modifiers -> PRIVATE','access_modifiers',1,'p_access_modifiers','sintactico.py',180),
  ('def_const_or_var -> constant_assignation','def_const_or_var',1,'p_def_const_or_var','sintactico.py',184),
  ('def_const_or_var -> variable_assignation','def_const_or_var',1,'p_def_const_or_var','sintactico.py',185),
  ('def_const_or_var -> late_initialization','def_const_or_var',1,'p_def_const_or_var','sintactico.py',186),
  ('constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA','constant_assignation',5,'p_constant_assignation','sintactico.py',190),
  ('constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA','constant_assignation',4,'p_constant_assignation','sintactico.py',191),
  ('constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA','constant_assignation',5,'p_constant_assignation','sintactico.py',192),
  ('constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA','constant_assignation',4,'p_constant_assignation','sintactico.py',193),
  ('variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA','variable_assignation',4,'p_variable_assignation','sintactico.py',197),
  ('variable_assignation -> data_type assignation_key_value DOTANDCOMMA','variable_assignation',3,'p_variable_assignation','sintactico.py',198),
  ('variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA','variable_assignation',4,'p_variable_assignation','sintactico.py',199),
  ('variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA','variable_assignation',3,'p_variable_assignation','sintactico.py',200),
  ('late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA','late_initialization',4,'p_late_initialization','sintactico.py',204),
  ('late_initialization -> data_type VARIABLE DOTANDCOMMA','late_initialization',3,'p_late_initialization','sintactico.py',205),
  ('late_initialization -> assignation_key_value DOTANDCOMMA','late_initialization',2,'p_late_initialization','sintactico.py',206),
  ('assignation_key_value -> VARIABLE ASSIGNATION value','assignation_key_value',3,'p_assignation_key_value','sintactico.py',210),
  ('assignation_key_value -> READ LPARENT RPARENT','assignation_key_value',3,'p_assignation_key_value','sintactico.py',211),
  ('assignation_key_value_multiple -> assignation_key_value','assignation_key_value_multiple',1,'p_assignation_key_value_multiple','sintactico.py',215),
  ('assignation_key_value_multiple -> assignation_key_value COMMA assignation_key_value_multiple','assignation_key_value_multiple',3,'p_assignation_key_value_multiple','sintactico.py',216),
  ('assignation_with_datatype -> data_type assignation_key_value DOTANDCOMMA','assignation_with_datatype',3,'p_assignation_with_datatype','sintactico.py',220),
  ('assignation_with_datatype -> data_type assignation_key_value COMMA assignation_with_datatype','assignation_with_datatype',4,'p_assignation_with_datatype','sintactico.py',221),
  ('data_type -> CHARTYPE','data_type',1,'p_data_type','sintactico.py',225),
  ('data_type -> STRINGTYPE','data_type',1,'p_data_type','sintactico.py',226),
  ('data_type -> FLOATTYPE','data_type',1,'p_data_type','sintactico.py',227),
  ('data_type -> DECIMALTYPE','data_type',1,'p_data_type','sintactico.py',228),
  ('data_type -> INTTYPE','data_type',1,'p_data_type','sintactico.py',229),
  ('data_type -> BOOLTYPE','data_type',1,'p_data_type','sintactico.py',230),
  ('logic_operations -> logic_operation DOTANDCOMMA','logic_operations',2,'p_logic_operations','sintactico.py',236),
  ('logic_operations -> logic_operation COMMA logic_operations','logic_operations',3,'p_logic_operations','sintactico.py',237),
  ('block_for -> for_anidado','block_for',1,'p_block_for','sintactico.py',241),
  ('block_for -> for_each','block_for',1,'p_block_for','sintactico.py',242),
  ('for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY','for_simple',11,'p_for_simple','sintactico.py',246),
  ('for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY','for_simple',11,'p_for_simple','sintactico.py',247),
  ('for_anidado -> for_simple','for_anidado',1,'p_for_anidado','sintactico.py',252),
  ('for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY','for_anidado',11,'p_for_anidado','sintactico.py',253),
  ('for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY','for_anidado',11,'p_for_anidado','sintactico.py',254),
  ('for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY','for_each',10,'p_for_each','sintactico.py',258),
  ('block_try_catch -> try_catch_simply','block_try_catch',1,'p_block_try_catch','sintactico.py',262),
  ('block_try_catch -> try_catch_finally','block_try_catch',1,'p_block_try_catch','sintactico.py',263),
  ('try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY','try_catch_simply',12,'p_try_catch_simply','sintactico.py',267),
  ('try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY','try_catch_finally',16,'p_try_catch_finally','sintactico.py',270),
  ('block_while -> normal_while','block_while',1,'p_block_while','sintactico.py',274),
  ('block_while -> do_while','block_while',1,'p_block_while','sintactico.py',275),
  ('normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY','normal_while',7,'p_normal_while','sintactico.py',279),
  ('do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT','do_while',8,'p_do_while','sintactico.py',282),
  ('block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if','block_if',8,'p_block_if','sintactico.py',285),
  ('other_if -> ELSE LKEY not_yes_nested_if RKEY','other_if',4,'p_other_if','sintactico.py',289),
  ('other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if','other_if',8,'p_other_if','sintactico.py',290),
  ('not_yes_nested_if -> block_if','not_yes_nested_if',1,'p_not_yes_nested_if','sintactico.py',295),
  ('not_yes_nested_if -> block_code','not_yes_nested_if',1,'p_not_yes_nested_if','sintactico.py',296),
  ('dict_estruct -> dict_empty','dict_estruct',1,'p_dict_estruct','sintactico.py',305),
  ('dict_estruct -> dict_full','dict_estruct',1,'p_dict_estruct','sintactico.py',306),
  ('dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA','dict_empty',12,'p_dict_empty','sintactico.py',312),
  ('dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA','dict_full',15,'p_dict_full','sintactico.py',317),
  ('key_value_pairs -> key_value_pair','key_value_pairs',1,'p_key_value_pairs','sintactico.py',322),
  ('key_value_pairs -> key_value_pair COMMA key_value_pairs','key_value_pairs',3,'p_key_value_pairs','sintactico.py',323),
  ('key_value_pair -> LKEY VARIABLE COMMA value RKEY','key_value_pair',5,'p_key_value_pair','sintactico.py',328),
  ('estruct_of_data -> list_empty','estruct_of_data',1,'p_estruct_of_data','sintactico.py',333),
  ('estruct_of_data -> list_full','estruct_of_data',1,'p_estruct_of_data','sintactico.py',334),
  ('functions_dict -> dict_func_put','functions_dict',1,'p_functions_dict','sintactico.py',339),
  ('functions_dict -> dict_func_remove','functions_dict',1,'p_functions_dict','sintactico.py',340),
  ('dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA','dict_func_put',9,'p_dict_func_put','sintactico.py',345),
  ('dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA','dict_func_remove',7,'p_dict_func_remove','sintactico.py',350),
  ('lists -> list_empty','lists',1,'p_lists','sintactico.py',356),
  ('lists -> list_full','lists',1,'p_lists','sintactico.py',357),
  ('list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA','list_empty',14,'p_list_empty','sintactico.py',361),
  ('list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA','list_empty',14,'p_list_empty','sintactico.py',362),
  ('list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA','list_full',17,'p_list_full','sintactico.py',366),
  ('list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA','list_full',17,'p_list_full','sintactico.py',367),
  ('strings_list -> STRING','strings_list',1,'p_strings_list','sintactico.py',371),
  ('strings_list -> STRING COMMA strings_list','strings_list',3,'p_strings_list','sintactico.py',372),
  ('ints_list -> INTEGER','ints_list',1,'p_ints_list','sintactico.py',376),
  ('ints_list -> INTEGER COMMA ints_list','ints_list',3,'p_ints_list','sintactico.py',377),
  ('functions_list -> list_func_clear','functions_list',1,'p_functions_list','sintactico.py',381),
  ('functions_list -> list_func_count','functions_list',1,'p_functions_list','sintactico.py',382),
  ('functions_list -> list_func_add','functions_list',1,'p_functions_list','sintactico.py',383),
  ('functions_list -> list_func_removeat','functions_list',1,'p_functions_list','sintactico.py',384),
  ('list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA','list_func_clear',6,'p_list_func_clear','sintactico.py',388),
  ('list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA','list_func_count',6,'p_list_func_count','sintactico.py',391),
  ('list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA','list_func_add',7,'p_list_func_add','sintactico.py',394),
  ('list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA','list_func_removeat',7,'p_list_func_removeat','sintactico.py',397),
  ('stack_assignation -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA','stack_assignation',8,'p_stack_assignation','sintactico.py',400),
  ('stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA','stack_push',7,'p_stack_push','sintactico.py',403),
  ('stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA','stack_pop',6,'p_stack_pop','sintactico.py',406),
  ('queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA','queue_struct',14,'p_queue_struct','sintactico.py',409),
  ('functions_queue -> queue_enqueue','functions_queue',1,'p_functions_queue','sintactico.py',413),
  ('functions_queue -> queue_dequeue','functions_queue',1,'p_functions_queue','sintactico.py',414),
  ('functions_queue -> queue_clear','functions_queue',1,'p_functions_queue','sintactico.py',415),
  ('functions_queue -> queue_isEmpty','functions_queue',1,'p_functions_queue','sintactico.py',416),
  ('queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA','queue_enqueue',7,'p_queue_enqueue','sintactico.py',420),
  ('queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA','queue_dequeue',6,'p_queue_dequeue','sintactico.py',424),
  ('queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA','queue_clear',6,'p_queue_clear','sintactico.py',428),
  ('queue_clear -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA','queue_clear',6,'p_queue_peek','sintactico.py',432),
  ('queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA','queue_isEmpty',6,'p_queue_isEmpty','sintactico.py',436),
  ('declaration_async -> PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY','declaration_async',22,'p_declaration_async','sintactico.py',442),
  ('declaration_lambda -> ACTION SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION VARIABLE ARROW LKEY block_code RKEY','declaration_lambda',11,'p_declration_lambda','sintactico.py',446),
]
