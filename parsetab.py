
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ACTION ADD ADDITION_ASSIGNMENT ARROW ASSIGNATION ASYNC AWAIT BACK_SLASH BOOL BOOLFALSE BOOLTRUE BOOLTYPE BREAK CATCH CHAR CHARTYPE CLASS CLEAR COMMA CONCURRENT CONST COUNT DECIMALTYPE DECIMAL_NUMBER DECREMENT DEQUEUE DICTIONARY DIVIDE DIVISION_ASSIGNMENT DO DOLLARSIGN DOT DOTANDCOMMA DOUBLEPOINT DOUBLE_QUOTATION_MARKS ELSE ELSE_IF ENQUEUE EQUAL_COMPARATION EXCEPTION FINALLY FLOATTYPE FLOAT_NUMBER FOR FOREACH GREATER_THAN GREATER_THAN_OR_EQUAL ID IDENTIFIER IF IN INCREMENT INEQUALITY INTEGER INTTYPE ISEMPTY JUMP_LINE LBRACKET LIST LKEY LOGICAND LOGICNOT LOGICOR LOGICXOR LONG LPARENT MAIN METHOD MINUS MODULE_ASSIGNMENT MULTIPLICATION_ASSIGNMENT NAMESPACE NEW PEEK PERCENT PIPE PLUS POP PRINT PRIVATE PUBLIC PUSH PUT QUEUE RBRACKET READ REMOVE REMOVEAT RETURN RKEY RPARENT SIPLE_QUOTATION_MARKS SMALLER_THAN SMALLER_THAN_OR_EQUAL STACK STATIC STRING STRINGTYPE SUBTRACTION_ASSIGNMENT SWITCH SYSTEM TABULATION TASK TIMES TRY USING VARIABLE VOID WHILEprogram                    : USING SYSTEM DOTANDCOMMA block_publicClassblock_publicClass        : PUBLIC CLASS VARIABLE LKEY all_method_definitions block_main_method RKEY\n                                | PUBLIC CLASS VARIABLE LKEY block_main_method RKEY\n    block_main_method        : STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY\n    block_code               : def_const_or_var\n                                | print_data\n                                | read_data\n                                | arithmetic_operation\n                                | logic_operation\n                                | array_assignation\n                                | array_value_assign\n                                | array_indexing\n\n                                | lists\n                                | functions_list\n\n                                | dict_estruct\n                                | functions_dict\n                                | concurrent_method\n\n                                | queue_struct\n                                | functions_queue\n\n                                | stack_struct\n                                | functions_stack\n\n                                | block_if\n\n                                | block_for\n\n                                | block_try_catch\n\n                                | block_while\n    all_block_code           : block_code\n                                | block_code all_block_code  \n    method_definition        : simple_method\n                                | declaration_async\n                                | declaration_lambda\n    all_method_definitions   : method_definition\n                                | method_definition all_method_definitions  \n    print_data               : PRINT LPARENT STRING RPARENT DOTANDCOMMA\n                                | PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA\n    read_data                : READ LPARENT RPARENT DOTANDCOMMA\n    concatenation            : STRING\n                                | STRING PLUS concatenation\n    value                    : value_numeric\n                                | value_logic\n                                | value_string\n                                | read_data\n                                | METHOD\n                                | array\n    array_assignation          : array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMAarray                      : LBRACKET array_content RBRACKETarray_content            : value\n                                | value COMMA array_content\n    array_indexing           : VARIABLE LBRACKET VARIABLE RBRACKET\n                                | VARIABLE LBRACKET INTEGER RBRACKET\n    array_value_assign       : VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA\n                                | VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA\n    value_string             : STRING\n                                | CHAR\n                                | VARIABLE\n                                | concatenation\n    value_logic              : BOOLTRUE\n                                | BOOLFALSE\n                                | logic_operation\n    value_numeric            : INTEGER\n                                | FLOAT_NUMBER\n                                | DECIMAL_NUMBER\n                                | arithmetic_operation\n    arithmetic_operation     : value_numeric\n                                | VARIABLE\n                                | value_numeric arithmetic_operator arithmetic_operation\n                                | VARIABLE arithmetic_operator arithmetic_operation\n    logic_operation          : value_numeric logic_operator INTEGER \n                                | VARIABLE logic_operator INTEGER\n    logic_operator           : GREATER_THAN\n                                | SMALLER_THAN\n                                | EQUAL_COMPARATION\n                                | INEQUALITY\n                                | GREATER_THAN_OR_EQUAL\n                                | SMALLER_THAN_OR_EQUAL\n                                | LOGICAND\n                                | LOGICOR\n                                | LOGICNOT\n                                | LOGICXOR\n    arithmetic_operator      : PLUS\n                                | MINUS\n                                | TIMES\n                                | DIVIDE\n                                | PERCENT\n    access_modifiers         : PUBLIC\n                                | PRIVATE\n    def_const_or_var         : constant_assignation\n                                | variable_assignation\n                                | late_initialization\n    constant_assignation     : access_modifiers CONST data_type assignation_key_value DOTANDCOMMA\n                                | CONST data_type assignation_key_value DOTANDCOMMA\n                                | access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA\n                                | CONST data_type assignation_key_value_multiple DOTANDCOMMA\n    variable_assignation     : access_modifiers data_type assignation_key_value DOTANDCOMMA\n                                | data_type assignation_key_value DOTANDCOMMA\n                                | access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA\n                                | data_type assignation_key_value_multiple DOTANDCOMMA\n    late_initialization      : access_modifiers data_type VARIABLE DOTANDCOMMA\n                                | data_type VARIABLE DOTANDCOMMA\n                                | assignation_key_value DOTANDCOMMA\n    assignation_key_value    : VARIABLE ASSIGNATION value\n                                | READ LPARENT RPARENT\n    assignation_key_value_multiple   : assignation_key_value\n                                        | assignation_key_value COMMA assignation_key_value_multiple   \n    assignation_with_datatype        : data_type assignation_key_value DOTANDCOMMA\n                                        | data_type assignation_key_value COMMA assignation_with_datatype                    \n    data_type                : CHARTYPE\n                                | STRINGTYPE\n                                | FLOATTYPE\n                                | DECIMALTYPE\n                                | INTTYPE\n                                | BOOLTYPE\n                                | array_type\n    array_type               : CHARTYPE LBRACKET RBRACKET\n                                | STRINGTYPE LBRACKET RBRACKET\n                                | FLOATTYPE LBRACKET RBRACKET\n                                | DECIMALTYPE LBRACKET RBRACKET\n                                | INTTYPE LBRACKET RBRACKET\n                                | BOOLTYPE LBRACKET RBRACKET\n    logic_operations         : logic_operation DOTANDCOMMA\n                                | logic_operation COMMA logic_operations\n    block_for                : for_anidado\n                                | for_each\n    for_simple               : FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY\n                                | FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY\n\n    for_anidado              : for_simple\n                                | FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY\n                                | FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY \n    for_each                 : FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY\n    block_try_catch          : try_catch_simply\n                                | try_catch_finally\n    try_catch_simply           : TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEYtry_catch_finally          : TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEYblock_while              : normal_while\n                                | do_while             \n    normal_while               : WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEYdo_while                   : DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENTblock_if                   : IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if\n    other_if                    : ELSE LKEY not_yes_nested_if RKEY\n                                | ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if\n    \n    not_yes_nested_if           : block_if\n                                | block_code\n    \n    dict_estruct                : dict_empty\n                                | dict_full\n    \n    dict_empty                  : DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA\n    \n    dict_full                   : DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA\n    key_value_pairs          : key_value_pair\n                                | key_value_pair COMMA key_value_pairs\n    key_value_pair           : LKEY VARIABLE COMMA value RKEY\n    estruct_of_data          : list_empty\n                                | list_full\n    \n    functions_dict              : dict_func_put\n                                | dict_func_remove\n    \n    dict_func_put               : VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA\n    \n    dict_func_remove            : VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA\n     lists                   : list_empty\n                                | list_full\n    list_empty               : LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA\n                                | LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA\n    list_full                : LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA\n                                | LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA\n    strings_list             : STRING\n                                | STRING COMMA strings_list\n    ints_list                : INTEGER\n                                | INTEGER COMMA ints_list\n    functions_list           : list_func_clear\n                                | list_func_count\n                                | list_func_add\n                                | list_func_removeat\n    list_func_clear            : VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMAlist_func_count            : VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMAlist_func_add              : VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMAlist_func_removeat         : VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMAstack_struct               : STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMAfunctions_stack          : stack_push\n                                | stack_pop\n                                | stack_clear\n                                | stack_peek\n                                | stack_isEmpty\n    stack_push                 : VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMAstack_pop                  : VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMAstack_clear                : VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMAstack_peek                 : VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMAstack_isEmpty              : VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMAqueue_struct             : QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA\n    functions_queue          : queue_enqueue\n                                | queue_dequeue\n                                | queue_clear\n                                | queue_isEmpty\n    queue_enqueue            : VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA\n    queue_dequeue            : VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA\n    queue_clear              : VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA\n    queue_peek               : VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA\n    queue_isEmpty            : VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA\n    simple_method            : STATIC data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY\n                                | STATIC VOID METHOD LPARENT function_arguments RPARENT LKEY all_block_code RKEY\n                                | access_modifiers STATIC data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY\n                                | access_modifiers STATIC VOID METHOD LPARENT function_arguments RPARENT LKEY all_block_code RKEY\n    function_return          : RETURN value DOTANDCOMMA\n    function_argument        : data_type VARIABLE\n                                | METHOD VARIABLE\n    function_arguments       : function_argument\n                                | function_argument COMMA function_arguments\n    declaration_async        : PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY\n    declaration_lambda         : ACTION SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION VARIABLE ARROW LKEY block_code RKEYconcurrent_method        : method_declaration CONCURRENT LKEY concurrent_block RKEYmethod_declaration       : METHOD IDENTIFIER LPARENT RPARENT DOTANDCOMMAconcurrent_block         : statement_liststatement_list           : statement\n                                | statement_list statementstatement                : assignment_concurrent\n                                | if_statement_concurrent\n                                | while_loop_concurrent\n                                | method_call_concurrent\n                                | return_statement_concurrentassignment_concurrent    : VARIABLE ASSIGNATION expression DOTANDCOMMAif_statement_concurrent  : IF LPARENT condition RPARENT LKEY concurrent_block RKEYwhile_loop_concurrent    : WHILE LPARENT condition RPARENT LKEY concurrent_block RKEYmethod_call_concurrent   : IDENTIFIER LPARENT RPARENT DOTANDCOMMAreturn_statement_concurrent : RETURN expression DOTANDCOMMAexpression                   : value_numeric\n                                    | VARIABLE\n                                    | value_numeric arithmetic_operator expression\n                                    | VARIABLE arithmetic_operator expression\n    condition                    : value_numeric logic_operator value_numeric\n                                    | VARIABLE logic_operator value_numeric\n                                    | value_numeric logic_operator VARIABLE\n                                    | VARIABLE logic_operator VARIABLE\n    '
    
_lr_action_items = {'USING':([0,],[2,]),'$end':([1,5,24,39,],[0,-1,-3,-2,]),'SYSTEM':([2,],[3,]),'DOTANDCOMMA':([3,128,162,163,164,216,217,218,243,244,245,246,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,278,279,280,294,295,296,297,298,310,316,317,318,337,353,354,355,358,359,368,369,370,385,386,387,388,390,391,397,398,400,401,409,410,411,421,430,431,435,436,438,439,442,445,446,451,464,486,487,489,501,556,570,571,573,574,587,600,602,],[4,-59,225,-60,-61,284,286,287,-64,-62,-63,-68,-54,-100,-38,-39,-40,-41,-42,-43,-62,-56,-57,-58,-36,-53,-55,337,-62,-67,360,361,362,363,364,375,380,381,382,-35,-102,-103,-101,415,416,420,421,423,-36,-37,337,-45,433,434,440,441,443,444,452,-63,-64,-119,471,472,473,474,476,477,478,479,480,485,-120,-222,-223,509,522,567,579,580,582,584,597,606,608,]),'PUBLIC':([4,9,13,15,16,17,89,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,127,128,130,131,132,133,134,135,136,137,138,139,143,144,145,146,148,149,150,151,152,154,155,156,157,158,159,163,164,173,181,182,187,225,230,232,237,239,243,244,245,246,279,280,284,286,287,309,312,319,320,337,360,361,362,363,364,376,377,381,382,403,414,415,416,427,433,434,440,441,443,444,471,472,473,474,476,477,478,479,498,509,510,518,520,522,526,531,532,535,544,546,548,549,552,557,558,559,560,564,567,569,580,582,584,589,590,591,597,605,606,608,],[6,10,10,-28,-29,-30,179,179,179,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-86,-87,-88,-64,-63,-59,-155,-156,-165,-166,-167,-168,-142,-143,-151,-152,-185,-186,-187,-188,-174,-175,-176,-177,-178,-121,-122,-129,-130,-133,-134,-60,-61,-125,179,179,-195,-99,179,179,179,179,-64,-62,-63,-68,-62,-67,-94,-96,-98,-194,-197,-48,-49,-35,-93,-95,-97,-90,-92,-196,-204,-33,-34,-205,179,-89,-91,179,-169,-170,-190,-183,-180,-182,-50,-51,-171,-172,-154,-189,-179,-44,-135,-173,-137,179,-136,-153,179,179,179,179,-121,-121,-128,179,-138,-126,-123,-127,-124,179,-144,-131,-184,-157,-158,179,-203,-139,-145,-132,-159,-160,]),'CLASS':([6,],[7,]),'VARIABLE':([7,28,30,31,32,33,34,35,57,59,60,61,62,63,66,69,72,86,88,89,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,127,128,129,130,131,132,133,134,135,136,137,138,139,142,143,144,145,146,147,148,149,150,151,152,154,155,156,157,158,159,163,164,165,166,167,168,169,170,173,181,182,189,190,192,193,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,211,221,223,224,225,230,231,232,234,237,239,243,244,245,246,265,279,280,282,284,285,286,287,293,302,303,304,305,319,320,330,331,334,337,338,340,341,342,343,344,345,346,351,352,360,361,362,363,364,365,366,381,382,383,384,389,403,404,405,406,407,414,415,416,420,422,423,425,427,433,434,437,440,441,443,444,452,453,454,465,469,471,472,473,474,476,477,478,479,480,482,483,485,497,498,502,507,509,510,518,520,522,526,527,531,532,535,536,537,544,546,548,549,552,557,558,559,560,564,567,569,575,580,582,584,589,591,596,597,605,606,608,],[8,-107,-106,-108,-109,-110,-111,-112,-114,-113,-115,-116,-117,-118,76,79,82,94,96,125,125,125,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-86,-87,-88,-64,-63,-59,213,-155,-156,-165,-166,-167,-168,-142,-143,-151,-152,218,-185,-186,-187,-188,220,-174,-175,-176,-177,-178,-121,-122,-129,-130,-133,-134,-60,-61,-106,-107,-108,-109,-110,-111,-125,125,125,242,243,247,249,-79,-80,-81,-82,-83,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,243,292,296,299,-99,125,292,125,249,125,125,-64,-62,-63,-68,249,-62,-67,347,-94,299,-96,-98,299,367,292,299,371,-48,-49,395,249,249,-35,249,347,-208,-210,-211,-212,-213,-214,411,412,-93,-95,-97,-90,-92,417,418,-33,-34,249,249,249,-205,-209,411,449,449,125,-89,-91,463,292,-104,466,125,-169,-170,475,-190,-183,-180,-182,-219,411,411,-105,292,-50,-51,-171,-172,-154,-189,-179,-44,-215,504,505,-218,519,-135,347,347,-173,-137,125,-136,-153,125,292,125,125,125,-216,-217,-121,-121,-128,125,-138,-126,-123,-127,-124,125,-144,-131,586,-184,-157,-158,125,-139,249,-145,-132,-159,-160,]),'LKEY':([8,80,83,87,92,93,176,178,183,185,214,357,373,481,484,496,511,516,517,521,534,553,556,568,573,574,578,588,],[9,89,91,95,181,182,230,232,237,239,282,414,427,502,507,518,526,531,532,535,549,564,568,575,583,585,589,575,]),'STATIC':([9,10,11,13,15,16,17,18,20,25,187,309,312,376,377,590,],[14,21,23,26,-28,-29,-30,36,-85,-32,-195,-194,-197,-196,-204,-203,]),'ACTION':([9,13,15,16,17,187,309,312,376,377,590,],[19,19,-28,-29,-30,-195,-194,-197,-196,-204,-203,]),'PRIVATE':([9,13,15,16,17,89,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,127,128,130,131,132,133,134,135,136,137,138,139,143,144,145,146,148,149,150,151,152,154,155,156,157,158,159,163,164,173,181,182,187,225,230,232,237,239,243,244,245,246,279,280,284,286,287,309,312,319,320,337,360,361,362,363,364,376,377,381,382,403,414,415,416,427,433,434,440,441,443,444,471,472,473,474,476,477,478,479,498,509,510,518,520,522,526,531,532,535,544,546,548,549,552,557,558,559,560,564,567,569,580,582,584,589,590,591,597,605,606,608,],[20,20,-28,-29,-30,20,20,20,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-86,-87,-88,-64,-63,-59,-155,-156,-165,-166,-167,-168,-142,-143,-151,-152,-185,-186,-187,-188,-174,-175,-176,-177,-178,-121,-122,-129,-130,-133,-134,-60,-61,-125,20,20,-195,-99,20,20,20,20,-64,-62,-63,-68,-62,-67,-94,-96,-98,-194,-197,-48,-49,-35,-93,-95,-97,-90,-92,-196,-204,-33,-34,-205,20,-89,-91,20,-169,-170,-190,-183,-180,-182,-50,-51,-171,-172,-154,-189,-179,-44,-135,-173,-137,20,-136,-153,20,20,20,20,-121,-121,-128,20,-138,-126,-123,-127,-124,20,-144,-131,-184,-157,-158,20,-203,-139,-145,-132,-159,-160,]),'RKEY':([12,22,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,127,128,130,131,132,133,134,135,136,137,138,139,143,144,145,146,148,149,150,151,152,154,155,156,157,158,159,163,164,173,188,225,233,236,243,244,245,246,249,251,252,253,254,255,256,257,258,259,260,261,262,263,279,280,284,286,287,306,308,311,313,315,319,320,337,339,340,341,342,343,344,345,346,360,361,362,363,364,375,379,381,382,385,386,388,403,404,415,416,433,434,440,441,443,444,452,457,458,459,468,471,472,473,474,476,477,478,479,480,485,498,509,510,520,522,523,524,533,536,537,539,544,545,546,547,548,550,552,557,558,559,560,561,567,569,572,576,577,579,580,582,584,591,592,593,594,595,597,598,599,604,605,606,607,608,609,610,],[24,39,187,-26,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-86,-87,-88,-64,-63,-59,-155,-156,-165,-166,-167,-168,-142,-143,-151,-152,-185,-186,-187,-188,-174,-175,-176,-177,-178,-121,-122,-129,-130,-133,-134,-60,-61,-125,-27,-99,309,312,-64,-62,-63,-68,-54,-38,-39,-40,-41,-42,-43,-62,-56,-57,-58,-36,-53,-55,-62,-67,-94,-96,-98,372,374,376,377,379,-48,-49,-35,403,-207,-208,-210,-211,-212,-213,-214,-93,-95,-97,-90,-92,-198,-4,-33,-34,-36,-37,-45,-205,-209,-89,-91,-169,-170,-190,-183,-180,-182,-219,490,-22,-141,498,-50,-51,-171,-172,-154,-189,-179,-44,-215,-218,-135,-173,-137,-136,-153,536,537,548,-216,-217,552,557,558,559,560,-128,562,-138,-126,-123,-127,-124,569,-144,-131,581,587,-146,590,-184,-157,-158,-139,600,-161,602,-163,-145,-147,605,610,-132,-159,-162,-160,-164,-148,]),'VOID':([14,23,26,36,],[27,40,41,52,]),'CHARTYPE':([14,20,26,36,56,58,74,75,81,89,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,127,128,130,131,132,133,134,135,136,137,138,139,143,144,145,146,148,149,150,151,152,154,155,156,157,158,159,160,161,163,164,173,179,181,182,215,222,225,228,229,230,232,237,239,243,244,245,246,279,280,284,286,287,319,320,337,360,361,362,363,364,381,382,403,414,415,416,424,427,433,434,440,441,443,444,471,472,473,474,476,477,478,479,498,509,510,518,520,522,525,526,531,532,535,544,546,548,549,552,557,558,559,560,564,567,569,580,582,584,589,591,597,605,606,608,],[30,-85,30,30,30,30,30,30,30,165,165,165,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-86,-87,-88,-64,-63,-59,-155,-156,-165,-166,-167,-168,-142,-143,-151,-152,-185,-186,-187,-188,-174,-175,-176,-177,-178,-121,-122,-129,-130,-133,-134,30,30,-60,-61,-125,-84,165,165,30,30,-99,30,30,165,165,165,165,-64,-62,-63,-68,-62,-67,-94,-96,-98,-48,-49,-35,-93,-95,-97,-90,-92,-33,-34,-205,165,-89,-91,30,165,-169,-170,-190,-183,-180,-182,-50,-51,-171,-172,-154,-189,-179,-44,-135,-173,-137,165,-136,-153,30,165,165,165,165,-121,-121,-128,165,-138,-126,-123,-127,-124,165,-144,-131,-184,-157,-158,165,-139,-145,-132,-159,-160,]),'STRINGTYPE':([14,20,26,36,37,55,56,58,74,75,81,89,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,127,128,130,131,132,133,134,135,136,137,138,139,143,144,145,146,148,149,150,151,152,154,155,156,157,158,159,160,161,163,164,173,179,181,182,215,222,225,226,228,229,230,232,237,239,243,244,245,246,279,280,284,286,287,319,320,337,360,361,362,363,364,381,382,403,414,415,416,424,427,433,434,440,441,443,444,471,472,473,474,476,477,478,479,498,509,510,518,520,522,525,526,528,531,532,535,544,546,548,549,552,557,558,559,560,564,567,569,580,582,584,589,591,597,605,606,608,],[28,-85,28,28,53,68,28,28,28,28,28,166,166,166,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-86,-87,-88,-64,-63,-59,-155,-156,-165,-166,-167,-168,-142,-143,-151,-152,-185,-186,-187,-188,-174,-175,-176,-177,-178,-121,-122,-129,-130,-133,-134,28,28,-60,-61,-125,-84,166,166,28,28,-99,300,28,28,166,166,166,166,-64,-62,-63,-68,-62,-67,-94,-96,-98,-48,-49,-35,-93,-95,-97,-90,-92,-33,-34,-205,166,-89,-91,28,166,-169,-170,-190,-183,-180,-182,-50,-51,-171,-172,-154,-189,-179,-44,-135,-173,-137,166,-136,-153,28,166,541,166,166,166,-121,-121,-128,166,-138,-126,-123,-127,-124,166,-144,-131,-184,-157,-158,166,-139,-145,-132,-159,-160,]),'FLOATTYPE':([14,20,26,36,56,58,74,75,81,89,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,127,128,130,131,132,133,134,135,136,137,138,139,143,144,145,146,148,149,150,151,152,154,155,156,157,158,159,160,161,163,164,173,179,181,182,215,222,225,228,229,230,232,237,239,243,244,245,246,279,280,284,286,287,319,320,337,360,361,362,363,364,381,382,403,414,415,416,424,427,433,434,440,441,443,444,471,472,473,474,476,477,478,479,498,509,510,518,520,522,525,526,531,532,535,544,546,548,549,552,557,558,559,560,564,567,569,580,582,584,589,591,597,605,606,608,],[31,-85,31,31,31,31,31,31,31,167,167,167,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-86,-87,-88,-64,-63,-59,-155,-156,-165,-166,-167,-168,-142,-143,-151,-152,-185,-186,-187,-188,-174,-175,-176,-177,-178,-121,-122,-129,-130,-133,-134,31,31,-60,-61,-125,-84,167,167,31,31,-99,31,31,167,167,167,167,-64,-62,-63,-68,-62,-67,-94,-96,-98,-48,-49,-35,-93,-95,-97,-90,-92,-33,-34,-205,167,-89,-91,31,167,-169,-170,-190,-183,-180,-182,-50,-51,-171,-172,-154,-189,-179,-44,-135,-173,-137,167,-136,-153,31,167,167,167,167,-121,-121,-128,167,-138,-126,-123,-127,-124,167,-144,-131,-184,-157,-158,167,-139,-145,-132,-159,-160,]),'DECIMALTYPE':([14,20,26,36,56,58,74,75,81,89,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,127,128,130,131,132,133,134,135,136,137,138,139,143,144,145,146,148,149,150,151,152,154,155,156,157,158,159,160,161,163,164,173,179,181,182,215,222,225,228,229,230,232,237,239,243,244,245,246,279,280,284,286,287,319,320,337,360,361,362,363,364,381,382,403,414,415,416,424,427,433,434,440,441,443,444,471,472,473,474,476,477,478,479,498,509,510,518,520,522,525,526,531,532,535,544,546,548,549,552,557,558,559,560,564,567,569,580,582,584,589,591,597,605,606,608,],[32,-85,32,32,32,32,32,32,32,168,168,168,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-86,-87,-88,-64,-63,-59,-155,-156,-165,-166,-167,-168,-142,-143,-151,-152,-185,-186,-187,-188,-174,-175,-176,-177,-178,-121,-122,-129,-130,-133,-134,32,32,-60,-61,-125,-84,168,168,32,32,-99,32,32,168,168,168,168,-64,-62,-63,-68,-62,-67,-94,-96,-98,-48,-49,-35,-93,-95,-97,-90,-92,-33,-34,-205,168,-89,-91,32,168,-169,-170,-190,-183,-180,-182,-50,-51,-171,-172,-154,-189,-179,-44,-135,-173,-137,168,-136,-153,32,168,168,168,168,-121,-121,-128,168,-138,-126,-123,-127,-124,168,-144,-131,-184,-157,-158,168,-139,-145,-132,-159,-160,]),'INTTYPE':([14,20,26,36,56,58,74,75,81,89,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,127,128,130,131,132,133,134,135,136,137,138,139,143,144,145,146,148,149,150,151,152,154,155,156,157,158,159,160,161,163,164,173,179,181,182,215,222,225,226,228,229,230,232,237,239,243,244,245,246,279,280,284,286,287,319,320,337,360,361,362,363,364,381,382,403,414,415,416,424,427,433,434,440,441,443,444,471,472,473,474,476,477,478,479,498,509,510,518,520,522,525,526,529,531,532,535,544,546,548,549,552,557,558,559,560,564,567,569,580,582,584,589,591,597,605,606,608,],[33,-85,33,33,33,33,33,33,33,169,169,169,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-86,-87,-88,-64,-63,-59,-155,-156,-165,-166,-167,-168,-142,-143,-151,-152,-185,-186,-187,-188,-174,-175,-176,-177,-178,-121,-122,-129,-130,-133,-134,33,33,-60,-61,-125,-84,169,169,33,33,-99,301,33,33,169,169,169,169,-64,-62,-63,-68,-62,-67,-94,-96,-98,-48,-49,-35,-93,-95,-97,-90,-92,-33,-34,-205,169,-89,-91,33,169,-169,-170,-190,-183,-180,-182,-50,-51,-171,-172,-154,-189,-179,-44,-135,-173,-137,169,-136,-153,33,169,542,169,169,169,-121,-121,-128,169,-138,-126,-123,-127,-124,169,-144,-131,-184,-157,-158,169,-139,-145,-132,-159,-160,]),'BOOLTYPE':([14,20,26,36,56,58,74,75,81,89,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,127,128,130,131,132,133,134,135,136,137,138,139,143,144,145,146,148,149,150,151,152,154,155,156,157,158,159,160,161,163,164,173,179,181,182,215,222,225,228,229,230,232,237,239,243,244,245,246,279,280,284,286,287,319,320,337,360,361,362,363,364,381,382,403,414,415,416,424,427,433,434,440,441,443,444,471,472,473,474,476,477,478,479,498,509,510,518,520,522,525,526,531,532,535,544,546,548,549,552,557,558,559,560,564,567,569,580,582,584,589,591,597,605,606,608,],[34,-85,34,34,34,34,34,34,34,170,170,170,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-86,-87,-88,-64,-63,-59,-155,-156,-165,-166,-167,-168,-142,-143,-151,-152,-185,-186,-187,-188,-174,-175,-176,-177,-178,-121,-122,-129,-130,-133,-134,34,34,-60,-61,-125,-84,170,170,34,34,-99,34,34,170,170,170,170,-64,-62,-63,-68,-62,-67,-94,-96,-98,-48,-49,-35,-93,-95,-97,-90,-92,-33,-34,-205,170,-89,-91,34,170,-169,-170,-190,-183,-180,-182,-50,-51,-171,-172,-154,-189,-179,-44,-135,-173,-137,170,-136,-153,34,170,170,170,170,-121,-121,-128,170,-138,-126,-123,-127,-124,170,-144,-131,-184,-157,-158,170,-139,-145,-132,-159,-160,]),'SMALLER_THAN':([19,103,125,127,128,141,163,164,171,172,243,244,245,249,251,257,279,291,292,448,449,493,508,513,514,],[37,-62,201,201,-59,215,-60,-61,226,227,-64,-62,-63,201,201,-62,-62,201,201,201,201,515,525,528,529,]),'CONST':([20,89,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,127,128,130,131,132,133,134,135,136,137,138,139,143,144,145,146,148,149,150,151,152,154,155,156,157,158,159,160,163,164,173,179,181,182,225,230,232,237,239,243,244,245,246,279,280,284,286,287,319,320,337,360,361,362,363,364,381,382,403,414,415,416,427,433,434,440,441,443,444,471,472,473,474,476,477,478,479,498,509,510,518,520,522,526,531,532,535,544,546,548,549,552,557,558,559,560,564,567,569,580,582,584,589,591,597,605,606,608,],[-85,161,161,161,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-86,-87,-88,-64,-63,-59,-155,-156,-165,-166,-167,-168,-142,-143,-151,-152,-185,-186,-187,-188,-174,-175,-176,-177,-178,-121,-122,-129,-130,-133,-134,222,-60,-61,-125,-84,161,161,-99,161,161,161,161,-64,-62,-63,-68,-62,-67,-94,-96,-98,-48,-49,-35,-93,-95,-97,-90,-92,-33,-34,-205,161,-89,-91,161,-169,-170,-190,-183,-180,-182,-50,-51,-171,-172,-154,-189,-179,-44,-135,-173,-137,161,-136,-153,161,161,161,161,-121,-121,-128,161,-138,-126,-123,-127,-124,161,-144,-131,-184,-157,-158,161,-139,-145,-132,-159,-160,]),'ASYNC':([21,],[38,]),'MAIN':([27,40,],[42,42,]),'METHOD':([27,28,29,30,31,32,33,34,35,41,51,52,54,56,57,58,59,60,61,62,63,74,75,81,89,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,127,128,130,131,132,133,134,135,136,137,138,139,143,144,145,146,148,149,150,151,152,154,155,156,157,158,159,163,164,173,181,182,193,225,230,232,234,237,239,243,244,245,246,265,279,280,284,286,287,314,319,320,331,334,337,338,360,361,362,363,364,381,382,383,384,389,403,414,415,416,427,433,434,440,441,443,444,471,472,473,474,476,477,478,479,498,509,510,518,520,522,526,531,532,535,544,546,548,549,552,557,558,559,560,564,567,569,580,582,584,589,591,596,597,605,606,608,],[43,-107,45,-106,-108,-109,-110,-111,-112,43,64,65,67,69,-114,69,-113,-115,-116,-117,-118,69,69,69,97,97,97,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-86,-87,-88,-64,-63,-59,-155,-156,-165,-166,-167,-168,-142,-143,-151,-152,-185,-186,-187,-188,-174,-175,-176,-177,-178,-121,-122,-129,-130,-133,-134,-60,-61,-125,97,97,255,-99,97,97,255,97,97,-64,-62,-63,-68,255,-62,-67,-94,-96,-98,378,-48,-49,255,255,-35,255,-93,-95,-97,-90,-92,-33,-34,255,255,255,-205,97,-89,-91,97,-169,-170,-190,-183,-180,-182,-50,-51,-171,-172,-154,-189,-179,-44,-135,-173,-137,97,-136,-153,97,97,97,97,-121,-121,-128,97,-138,-126,-123,-127,-124,97,-144,-131,-184,-157,-158,97,-139,255,-145,-132,-159,-160,]),'READ':([28,30,31,32,33,34,35,57,59,60,61,62,63,89,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,127,128,129,130,131,132,133,134,135,136,137,138,139,142,143,144,145,146,148,149,150,151,152,154,155,156,157,158,159,163,164,165,166,167,168,169,170,173,181,182,193,223,224,225,230,232,234,237,239,243,244,245,246,265,279,280,284,285,286,287,293,304,319,320,331,334,337,338,360,361,362,363,364,381,382,383,384,389,403,414,415,416,427,433,434,440,441,443,444,471,472,473,474,476,477,478,479,498,509,510,518,520,522,526,531,532,535,544,546,548,549,552,557,558,559,560,564,567,569,580,582,584,589,591,596,597,605,606,608,],[-107,-106,-108,-109,-110,-111,-112,-114,-113,-115,-116,-117,-118,126,126,126,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-86,-87,-88,-64,-63,-59,-112,-155,-156,-165,-166,-167,-168,-142,-143,-151,-152,219,-185,-186,-187,-188,-174,-175,-176,-177,-178,-121,-122,-129,-130,-133,-134,-60,-61,-106,-107,-108,-109,-110,-111,-125,126,126,264,219,219,-99,126,126,264,126,126,-64,-62,-63,-68,264,-62,-67,-94,219,-96,-98,219,219,-48,-49,264,264,-35,264,-93,-95,-97,-90,-92,-33,-34,264,264,264,-205,126,-89,-91,126,-169,-170,-190,-183,-180,-182,-50,-51,-171,-172,-154,-189,-179,-44,-135,-173,-137,126,-136,-153,126,126,126,126,-121,-121,-128,126,-138,-126,-123,-127,-124,126,-144,-131,-184,-157,-158,126,-139,264,-145,-132,-159,-160,]),'GREATER_THAN':([28,30,31,32,33,34,35,53,57,59,60,61,62,63,103,125,127,128,163,164,227,243,244,245,249,251,257,279,283,291,292,300,301,448,449,515,538,541,542,],[-107,-106,-108,-109,-110,-111,-112,66,-114,-113,-115,-116,-117,-118,-62,200,200,-59,-60,-61,302,-64,-62,-63,200,200,-62,-62,352,200,200,365,366,200,200,530,551,554,555,]),'LBRACKET':([28,30,31,32,33,34,68,125,165,166,167,168,169,170,193,234,265,281,331,334,338,383,384,389,596,],[44,46,47,48,49,50,78,192,46,44,47,48,49,50,265,265,265,338,265,265,265,265,265,265,265,]),'TASK':([38,184,],[54,238,]),'LPARENT':([42,43,45,64,65,67,124,126,153,174,175,177,186,219,264,266,267,268,269,270,271,272,273,274,275,276,277,348,349,350,378,413,426,428,429,512,530,551,554,555,],[55,56,58,74,75,77,189,210,221,228,229,231,240,288,322,325,326,327,328,329,330,331,332,333,334,335,336,406,407,408,429,456,467,469,470,527,543,563,565,566,]),'RBRACKET':([44,46,47,48,49,50,78,128,163,164,243,244,245,246,247,248,249,251,252,253,254,255,256,257,258,259,260,261,262,263,279,280,323,324,337,385,386,388,402,432,],[57,59,60,61,62,63,88,-59,-60,-61,-64,-62,-63,-68,319,320,-54,-38,-39,-40,-41,-42,-43,-62,-56,-57,-58,-36,-53,-55,-62,-67,388,-46,-35,-36,-37,-45,445,-47,]),'RPARENT':([70,71,73,77,79,82,84,85,90,96,128,163,164,210,240,241,242,243,244,245,246,249,251,252,253,254,255,256,257,258,259,260,261,262,263,279,280,288,290,307,322,325,326,332,333,335,336,337,385,386,388,392,393,395,396,399,408,447,450,456,466,470,475,494,495,499,503,504,505,506,519,540,543,562,563,565,566,],[80,-201,83,87,-200,-199,92,93,-202,185,-59,-60,-61,278,316,317,318,-64,-62,-63,-68,-54,-38,-39,-40,-41,-42,-43,-62,-56,-57,-58,-36,-53,-55,-62,-67,355,357,373,387,390,391,397,398,400,401,-35,-36,-37,-45,435,436,438,439,442,451,481,484,489,496,500,501,516,517,520,-63,-64,-64,-63,534,553,556,570,571,573,574,]),'COMMA':([71,79,82,128,163,164,216,243,244,245,246,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,279,280,294,297,324,337,353,355,358,369,370,385,386,388,394,577,586,593,595,610,],[81,-200,-199,-59,-60,-61,285,-64,-62,-63,-68,-54,-100,-38,-39,-40,-41,-42,-43,-62,-56,-57,-58,-36,-53,-55,-62,-67,285,285,389,-35,285,-101,285,422,424,-36,-37,-45,437,588,596,601,603,-148,]),'ASSIGNATION':([76,125,213,218,220,296,299,319,320,347,367,412,417,418,],[86,193,281,193,289,193,193,383,384,405,419,455,460,461,]),'PRINT':([89,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,127,128,130,131,132,133,134,135,136,137,138,139,143,144,145,146,148,149,150,151,152,154,155,156,157,158,159,163,164,173,181,182,225,230,232,237,239,243,244,245,246,279,280,284,286,287,319,320,337,360,361,362,363,364,381,382,403,414,415,416,427,433,434,440,441,443,444,471,472,473,474,476,477,478,479,498,509,510,518,520,522,526,531,532,535,544,546,548,549,552,557,558,559,560,564,567,569,580,582,584,589,591,597,605,606,608,],[124,124,124,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-86,-87,-88,-64,-63,-59,-155,-156,-165,-166,-167,-168,-142,-143,-151,-152,-185,-186,-187,-188,-174,-175,-176,-177,-178,-121,-122,-129,-130,-133,-134,-60,-61,-125,124,124,-99,124,124,124,124,-64,-62,-63,-68,-62,-67,-94,-96,-98,-48,-49,-35,-93,-95,-97,-90,-92,-33,-34,-205,124,-89,-91,124,-169,-170,-190,-183,-180,-182,-50,-51,-171,-172,-154,-189,-179,-44,-135,-173,-137,124,-136,-153,124,124,124,124,-121,-121,-128,124,-138,-126,-123,-127,-124,124,-144,-131,-184,-157,-158,124,-139,-145,-132,-159,-160,]),'QUEUE':([89,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,127,128,130,131,132,133,134,135,136,137,138,139,143,144,145,146,148,149,150,151,152,154,155,156,157,158,159,163,164,173,181,182,225,230,232,237,239,243,244,245,246,279,280,284,286,287,319,320,337,360,361,362,363,364,381,382,403,414,415,416,427,433,434,440,441,443,444,471,472,473,474,476,477,478,479,488,498,509,510,518,520,522,526,531,532,535,544,546,548,549,552,557,558,559,560,564,567,569,580,582,584,589,591,597,605,606,608,],[141,141,141,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-86,-87,-88,-64,-63,-59,-155,-156,-165,-166,-167,-168,-142,-143,-151,-152,-185,-186,-187,-188,-174,-175,-176,-177,-178,-121,-122,-129,-130,-133,-134,-60,-61,-125,141,141,-99,141,141,141,141,-64,-62,-63,-68,-62,-67,-94,-96,-98,-48,-49,-35,-93,-95,-97,-90,-92,-33,-34,-205,141,-89,-91,141,-169,-170,-190,-183,-180,-182,-50,-51,-171,-172,-154,-189,-179,-44,508,-135,-173,-137,141,-136,-153,141,141,141,141,-121,-121,-128,141,-138,-126,-123,-127,-124,141,-144,-131,-184,-157,-158,141,-139,-145,-132,-159,-160,]),'STACK':([89,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,127,128,130,131,132,133,134,135,136,137,138,139,143,144,145,146,148,149,150,151,152,154,155,156,157,158,159,163,164,173,181,182,225,230,232,237,239,243,244,245,246,279,280,284,286,287,319,320,337,356,360,361,362,363,364,381,382,403,414,415,416,427,433,434,440,441,443,444,471,472,473,474,476,477,478,479,498,509,510,518,520,522,526,531,532,535,544,546,548,549,552,557,558,559,560,564,567,569,580,582,584,589,591,597,605,606,608,],[147,147,147,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-86,-87,-88,-64,-63,-59,-155,-156,-165,-166,-167,-168,-142,-143,-151,-152,-185,-186,-187,-188,-174,-175,-176,-177,-178,-121,-122,-129,-130,-133,-134,-60,-61,-125,147,147,-99,147,147,147,147,-64,-62,-63,-68,-62,-67,-94,-96,-98,-48,-49,-35,413,-93,-95,-97,-90,-92,-33,-34,-205,147,-89,-91,147,-169,-170,-190,-183,-180,-182,-50,-51,-171,-172,-154,-189,-179,-44,-135,-173,-137,147,-136,-153,147,147,147,147,-121,-121,-128,147,-138,-126,-123,-127,-124,147,-144,-131,-184,-157,-158,147,-139,-145,-132,-159,-160,]),'IF':([89,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,127,128,130,131,132,133,134,135,136,137,138,139,143,144,145,146,148,149,150,151,152,154,155,156,157,158,159,163,164,173,181,182,225,230,232,237,239,243,244,245,246,279,280,282,284,286,287,319,320,337,340,341,342,343,344,345,346,360,361,362,363,364,381,382,403,404,414,415,416,427,433,434,440,441,443,444,452,471,472,473,474,476,477,478,479,480,485,498,502,507,509,510,518,520,522,526,531,532,535,536,537,544,546,548,549,552,557,558,559,560,564,567,569,580,582,584,589,591,597,605,606,608,],[153,153,153,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-86,-87,-88,-64,-63,-59,-155,-156,-165,-166,-167,-168,-142,-143,-151,-152,-185,-186,-187,-188,-174,-175,-176,-177,-178,-121,-122,-129,-130,-133,-134,-60,-61,-125,153,153,-99,153,153,153,153,-64,-62,-63,-68,-62,-67,348,-94,-96,-98,-48,-49,-35,348,-208,-210,-211,-212,-213,-214,-93,-95,-97,-90,-92,-33,-34,-205,-209,153,-89,-91,153,-169,-170,-190,-183,-180,-182,-219,-50,-51,-171,-172,-154,-189,-179,-44,-215,-218,-135,348,348,-173,-137,153,-136,-153,153,153,153,153,-216,-217,-121,-121,-128,153,-138,-126,-123,-127,-124,153,-144,-131,-184,-157,-158,153,-139,-145,-132,-159,-160,]),'INTEGER':([89,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,127,128,130,131,132,133,134,135,136,137,138,139,143,144,145,146,148,149,150,151,152,154,155,156,157,158,159,163,164,173,181,182,190,191,192,193,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,211,212,221,225,230,231,232,234,237,239,243,244,245,246,265,279,280,284,286,287,303,319,320,328,331,334,337,338,351,360,361,362,363,364,381,382,383,384,389,403,405,406,407,414,415,416,422,423,427,433,434,440,441,443,444,453,454,465,469,471,472,473,474,476,477,478,479,482,483,498,509,510,518,520,522,526,527,531,532,535,544,546,548,549,552,557,558,559,560,564,567,569,580,582,584,585,589,591,596,597,603,605,606,608,],[128,128,128,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-86,-87,-88,-64,-63,-59,-155,-156,-165,-166,-167,-168,-142,-143,-151,-152,-185,-186,-187,-188,-174,-175,-176,-177,-178,-121,-122,-129,-130,-133,-134,-60,-61,-125,128,128,128,246,248,128,-79,-80,-81,-82,-83,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,128,280,128,-99,128,128,128,128,128,128,-64,-62,-63,-68,128,-62,-67,-94,-96,-98,128,-48,-49,393,128,128,-35,128,128,-93,-95,-97,-90,-92,-33,-34,128,128,128,-205,128,128,128,128,-89,-91,128,-104,128,-169,-170,-190,-183,-180,-182,128,128,-105,128,-50,-51,-171,-172,-154,-189,-179,-44,128,128,-135,-173,-137,128,-136,-153,128,128,128,128,128,-121,-121,-128,128,-138,-126,-123,-127,-124,128,-144,-131,-184,-157,-158,595,128,-139,128,-145,595,-132,-159,-160,]),'FLOAT_NUMBER':([89,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,127,128,130,131,132,133,134,135,136,137,138,139,143,144,145,146,148,149,150,151,152,154,155,156,157,158,159,163,164,173,181,182,190,193,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,211,221,225,230,231,232,234,237,239,243,244,245,246,265,279,280,284,286,287,303,319,320,331,334,337,338,351,360,361,362,363,364,381,382,383,384,389,403,405,406,407,414,415,416,422,423,427,433,434,440,441,443,444,453,454,465,469,471,472,473,474,476,477,478,479,482,483,498,509,510,518,520,522,526,527,531,532,535,544,546,548,549,552,557,558,559,560,564,567,569,580,582,584,589,591,596,597,605,606,608,],[163,163,163,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-86,-87,-88,-64,-63,-59,-155,-156,-165,-166,-167,-168,-142,-143,-151,-152,-185,-186,-187,-188,-174,-175,-176,-177,-178,-121,-122,-129,-130,-133,-134,-60,-61,-125,163,163,163,163,-79,-80,-81,-82,-83,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,163,163,-99,163,163,163,163,163,163,-64,-62,-63,-68,163,-62,-67,-94,-96,-98,163,-48,-49,163,163,-35,163,163,-93,-95,-97,-90,-92,-33,-34,163,163,163,-205,163,163,163,163,-89,-91,163,-104,163,-169,-170,-190,-183,-180,-182,163,163,-105,163,-50,-51,-171,-172,-154,-189,-179,-44,163,163,-135,-173,-137,163,-136,-153,163,163,163,163,163,-121,-121,-128,163,-138,-126,-123,-127,-124,163,-144,-131,-184,-157,-158,163,-139,163,-145,-132,-159,-160,]),'DECIMAL_NUMBER':([89,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,127,128,130,131,132,133,134,135,136,137,138,139,143,144,145,146,148,149,150,151,152,154,155,156,157,158,159,163,164,173,181,182,190,193,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,211,221,225,230,231,232,234,237,239,243,244,245,246,265,279,280,284,286,287,303,319,320,331,334,337,338,351,360,361,362,363,364,381,382,383,384,389,403,405,406,407,414,415,416,422,423,427,433,434,440,441,443,444,453,454,465,469,471,472,473,474,476,477,478,479,482,483,498,509,510,518,520,522,526,527,531,532,535,544,546,548,549,552,557,558,559,560,564,567,569,580,582,584,589,591,596,597,605,606,608,],[164,164,164,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-86,-87,-88,-64,-63,-59,-155,-156,-165,-166,-167,-168,-142,-143,-151,-152,-185,-186,-187,-188,-174,-175,-176,-177,-178,-121,-122,-129,-130,-133,-134,-60,-61,-125,164,164,164,164,-79,-80,-81,-82,-83,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,164,164,-99,164,164,164,164,164,164,-64,-62,-63,-68,164,-62,-67,-94,-96,-98,164,-48,-49,164,164,-35,164,164,-93,-95,-97,-90,-92,-33,-34,164,164,164,-205,164,164,164,164,-89,-91,164,-104,164,-169,-170,-190,-183,-180,-182,164,164,-105,164,-50,-51,-171,-172,-154,-189,-179,-44,164,164,-135,-173,-137,164,-136,-153,164,164,164,164,164,-121,-121,-128,164,-138,-126,-123,-127,-124,164,-144,-131,-184,-157,-158,164,-139,164,-145,-132,-159,-160,]),'LIST':([89,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,127,128,130,131,132,133,134,135,136,137,138,139,143,144,145,146,148,149,150,151,152,154,155,156,157,158,159,163,164,173,181,182,225,230,232,237,239,243,244,245,246,279,280,284,286,287,319,320,337,360,361,362,363,364,381,382,403,414,415,416,427,433,434,440,441,443,444,471,472,473,474,476,477,478,479,491,492,498,509,510,518,520,522,526,531,532,535,544,546,548,549,552,557,558,559,560,564,567,569,580,582,584,589,591,597,605,606,608,],[171,171,171,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-86,-87,-88,-64,-63,-59,-155,-156,-165,-166,-167,-168,-142,-143,-151,-152,-185,-186,-187,-188,-174,-175,-176,-177,-178,-121,-122,-129,-130,-133,-134,-60,-61,-125,171,171,-99,171,171,171,171,-64,-62,-63,-68,-62,-67,-94,-96,-98,-48,-49,-35,-93,-95,-97,-90,-92,-33,-34,-205,171,-89,-91,171,-169,-170,-190,-183,-180,-182,-50,-51,-171,-172,-154,-189,-179,-44,513,514,-135,-173,-137,171,-136,-153,171,171,171,171,-121,-121,-128,171,-138,-126,-123,-127,-124,171,-144,-131,-184,-157,-158,171,-139,-145,-132,-159,-160,]),'DICTIONARY':([89,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,127,128,130,131,132,133,134,135,136,137,138,139,143,144,145,146,148,149,150,151,152,154,155,156,157,158,159,163,164,173,181,182,225,230,232,237,239,243,244,245,246,279,280,284,286,287,319,320,337,360,361,362,363,364,381,382,403,414,415,416,427,433,434,440,441,443,444,462,471,472,473,474,476,477,478,479,498,509,510,518,520,522,526,531,532,535,544,546,548,549,552,557,558,559,560,564,567,569,580,582,584,589,591,597,605,606,608,],[172,172,172,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-86,-87,-88,-64,-63,-59,-155,-156,-165,-166,-167,-168,-142,-143,-151,-152,-185,-186,-187,-188,-174,-175,-176,-177,-178,-121,-122,-129,-130,-133,-134,-60,-61,-125,172,172,-99,172,172,172,172,-64,-62,-63,-68,-62,-67,-94,-96,-98,-48,-49,-35,-93,-95,-97,-90,-92,-33,-34,-205,172,-89,-91,172,-169,-170,-190,-183,-180,-182,493,-50,-51,-171,-172,-154,-189,-179,-44,-135,-173,-137,172,-136,-153,172,172,172,172,-121,-121,-128,172,-138,-126,-123,-127,-124,172,-144,-131,-184,-157,-158,172,-139,-145,-132,-159,-160,]),'FOR':([89,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,127,128,130,131,132,133,134,135,136,137,138,139,143,144,145,146,148,149,150,151,152,154,155,156,157,158,159,163,164,173,181,182,225,230,232,237,239,243,244,245,246,279,280,284,286,287,319,320,337,360,361,362,363,364,381,382,403,414,415,416,427,433,434,440,441,443,444,471,472,473,474,476,477,478,479,498,509,510,518,520,522,526,531,532,535,544,546,548,549,552,557,558,559,560,564,567,569,580,582,584,589,591,597,605,606,608,],[174,174,174,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-86,-87,-88,-64,-63,-59,-155,-156,-165,-166,-167,-168,-142,-143,-151,-152,-185,-186,-187,-188,-174,-175,-176,-177,-178,-121,-122,-129,-130,-133,-134,-60,-61,-125,174,174,-99,174,174,174,174,-64,-62,-63,-68,-62,-67,-94,-96,-98,-48,-49,-35,-93,-95,-97,-90,-92,-33,-34,-205,174,-89,-91,174,-169,-170,-190,-183,-180,-182,-50,-51,-171,-172,-154,-189,-179,-44,-135,-173,-137,174,-136,-153,174,174,174,174,-121,-121,-128,174,-138,-126,-123,-127,-124,174,-144,-131,-184,-157,-158,174,-139,-145,-132,-159,-160,]),'FOREACH':([89,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,127,128,130,131,132,133,134,135,136,137,138,139,143,144,145,146,148,149,150,151,152,154,155,156,157,158,159,163,164,173,181,182,225,230,232,237,239,243,244,245,246,279,280,284,286,287,319,320,337,360,361,362,363,364,381,382,403,414,415,416,427,433,434,440,441,443,444,471,472,473,474,476,477,478,479,498,509,510,518,520,522,526,531,532,535,544,546,548,549,552,557,558,559,560,564,567,569,580,582,584,589,591,597,605,606,608,],[175,175,175,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-86,-87,-88,-64,-63,-59,-155,-156,-165,-166,-167,-168,-142,-143,-151,-152,-185,-186,-187,-188,-174,-175,-176,-177,-178,-121,-122,-129,-130,-133,-134,-60,-61,-125,175,175,-99,175,175,175,175,-64,-62,-63,-68,-62,-67,-94,-96,-98,-48,-49,-35,-93,-95,-97,-90,-92,-33,-34,-205,175,-89,-91,175,-169,-170,-190,-183,-180,-182,-50,-51,-171,-172,-154,-189,-179,-44,-135,-173,-137,175,-136,-153,175,175,175,175,-121,-121,-128,175,-138,-126,-123,-127,-124,175,-144,-131,-184,-157,-158,175,-139,-145,-132,-159,-160,]),'TRY':([89,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,127,128,130,131,132,133,134,135,136,137,138,139,143,144,145,146,148,149,150,151,152,154,155,156,157,158,159,163,164,173,181,182,225,230,232,237,239,243,244,245,246,279,280,284,286,287,319,320,337,360,361,362,363,364,381,382,403,414,415,416,427,433,434,440,441,443,444,471,472,473,474,476,477,478,479,498,509,510,518,520,522,526,531,532,535,544,546,548,549,552,557,558,559,560,564,567,569,580,582,584,589,591,597,605,606,608,],[176,176,176,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-86,-87,-88,-64,-63,-59,-155,-156,-165,-166,-167,-168,-142,-143,-151,-152,-185,-186,-187,-188,-174,-175,-176,-177,-178,-121,-122,-129,-130,-133,-134,-60,-61,-125,176,176,-99,176,176,176,176,-64,-62,-63,-68,-62,-67,-94,-96,-98,-48,-49,-35,-93,-95,-97,-90,-92,-33,-34,-205,176,-89,-91,176,-169,-170,-190,-183,-180,-182,-50,-51,-171,-172,-154,-189,-179,-44,-135,-173,-137,176,-136,-153,176,176,176,176,-121,-121,-128,176,-138,-126,-123,-127,-124,176,-144,-131,-184,-157,-158,176,-139,-145,-132,-159,-160,]),'WHILE':([89,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,127,128,130,131,132,133,134,135,136,137,138,139,143,144,145,146,148,149,150,151,152,154,155,156,157,158,159,163,164,173,181,182,225,230,232,237,239,243,244,245,246,279,280,282,284,286,287,319,320,337,340,341,342,343,344,345,346,360,361,362,363,364,374,381,382,403,404,414,415,416,427,433,434,440,441,443,444,452,471,472,473,474,476,477,478,479,480,485,498,502,507,509,510,518,520,522,526,531,532,535,536,537,544,546,548,549,552,557,558,559,560,564,567,569,580,582,584,589,591,597,605,606,608,],[177,177,177,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-86,-87,-88,-64,-63,-59,-155,-156,-165,-166,-167,-168,-142,-143,-151,-152,-185,-186,-187,-188,-174,-175,-176,-177,-178,-121,-122,-129,-130,-133,-134,-60,-61,-125,177,177,-99,177,177,177,177,-64,-62,-63,-68,-62,-67,349,-94,-96,-98,-48,-49,-35,349,-208,-210,-211,-212,-213,-214,-93,-95,-97,-90,-92,428,-33,-34,-205,-209,177,-89,-91,177,-169,-170,-190,-183,-180,-182,-219,-50,-51,-171,-172,-154,-189,-179,-44,-215,-218,-135,349,349,-173,-137,177,-136,-153,177,177,177,177,-216,-217,-121,-121,-128,177,-138,-126,-123,-127,-124,177,-144,-131,-184,-157,-158,177,-139,-145,-132,-159,-160,]),'DO':([89,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,127,128,130,131,132,133,134,135,136,137,138,139,143,144,145,146,148,149,150,151,152,154,155,156,157,158,159,163,164,173,181,182,225,230,232,237,239,243,244,245,246,279,280,284,286,287,319,320,337,360,361,362,363,364,381,382,403,414,415,416,427,433,434,440,441,443,444,471,472,473,474,476,477,478,479,498,509,510,518,520,522,526,531,532,535,544,546,548,549,552,557,558,559,560,564,567,569,580,582,584,589,591,597,605,606,608,],[178,178,178,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-86,-87,-88,-64,-63,-59,-155,-156,-165,-166,-167,-168,-142,-143,-151,-152,-185,-186,-187,-188,-174,-175,-176,-177,-178,-121,-122,-129,-130,-133,-134,-60,-61,-125,178,178,-99,178,178,178,178,-64,-62,-63,-68,-62,-67,-94,-96,-98,-48,-49,-35,-93,-95,-97,-90,-92,-33,-34,-205,178,-89,-91,178,-169,-170,-190,-183,-180,-182,-50,-51,-171,-172,-154,-189,-179,-44,-135,-173,-137,178,-136,-153,178,178,178,178,-121,-121,-128,178,-138,-126,-123,-127,-124,178,-144,-131,-184,-157,-158,178,-139,-145,-132,-159,-160,]),'ARROW':([94,500,],[183,521,]),'AWAIT':([95,],[184,]),'IDENTIFIER':([97,282,340,341,342,343,344,345,346,404,452,480,485,502,507,536,537,],[186,350,350,-208,-210,-211,-212,-213,-214,-209,-219,-215,-218,350,350,-216,-217,]),'RETURN':([99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,127,128,130,131,132,133,134,135,136,137,138,139,143,144,145,146,148,149,150,151,152,154,155,156,157,158,159,163,164,173,180,188,225,235,243,244,245,246,279,280,282,284,286,287,319,320,337,340,341,342,343,344,345,346,360,361,362,363,364,381,382,403,404,415,416,433,434,440,441,443,444,452,471,472,473,474,476,477,478,479,480,485,498,502,507,509,510,520,522,536,537,548,552,557,558,559,560,567,569,580,582,584,591,597,605,606,608,],[-26,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-86,-87,-88,-64,-63,-59,-155,-156,-165,-166,-167,-168,-142,-143,-151,-152,-185,-186,-187,-188,-174,-175,-176,-177,-178,-121,-122,-129,-130,-133,-134,-60,-61,-125,234,-27,-99,234,-64,-62,-63,-68,-62,-67,351,-94,-96,-98,-48,-49,-35,351,-208,-210,-211,-212,-213,-214,-93,-95,-97,-90,-92,-33,-34,-205,-209,-89,-91,-169,-170,-190,-183,-180,-182,-219,-50,-51,-171,-172,-154,-189,-179,-44,-215,-218,-135,351,351,-173,-137,-136,-153,-216,-217,-128,-138,-126,-123,-127,-124,-144,-131,-184,-157,-158,-139,-145,-132,-159,-160,]),'PLUS':([103,125,127,128,163,164,243,244,245,249,251,257,261,279,291,292,385,410,411,448,449,503,504,505,506,],[-62,195,195,-59,-60,-61,195,-62,195,195,195,-62,321,-62,195,195,321,195,195,195,195,195,195,195,195,]),'MINUS':([103,125,127,128,163,164,243,244,245,249,251,257,279,291,292,410,411,448,449,503,504,505,506,],[-62,196,196,-59,-60,-61,196,-62,196,196,196,-62,-62,196,196,196,196,196,196,196,196,196,196,]),'TIMES':([103,125,127,128,163,164,243,244,245,249,251,257,279,291,292,410,411,448,449,503,504,505,506,],[-62,197,197,-59,-60,-61,197,-62,197,197,197,-62,-62,197,197,197,197,197,197,197,197,197,197,]),'DIVIDE':([103,125,127,128,163,164,243,244,245,249,251,257,279,291,292,410,411,448,449,503,504,505,506,],[-62,198,198,-59,-60,-61,198,-62,198,198,198,-62,-62,198,198,198,198,198,198,198,198,198,198,]),'PERCENT':([103,125,127,128,163,164,243,244,245,249,251,257,279,291,292,410,411,448,449,503,504,505,506,],[-62,199,199,-59,-60,-61,199,-62,199,199,199,-62,-62,199,199,199,199,199,199,199,199,199,199,]),'EQUAL_COMPARATION':([103,125,127,128,163,164,243,244,245,249,251,257,279,291,292,448,449,],[-62,202,202,-59,-60,-61,-64,-62,-63,202,202,-62,-62,202,202,202,202,]),'INEQUALITY':([103,125,127,128,163,164,243,244,245,249,251,257,279,291,292,448,449,],[-62,203,203,-59,-60,-61,-64,-62,-63,203,203,-62,-62,203,203,203,203,]),'GREATER_THAN_OR_EQUAL':([103,125,127,128,163,164,243,244,245,249,251,257,279,291,292,448,449,],[-62,204,204,-59,-60,-61,-64,-62,-63,204,204,-62,-62,204,204,204,204,]),'SMALLER_THAN_OR_EQUAL':([103,125,127,128,163,164,243,244,245,249,251,257,279,291,292,448,449,],[-62,205,205,-59,-60,-61,-64,-62,-63,205,205,-62,-62,205,205,205,205,]),'LOGICAND':([103,125,127,128,163,164,243,244,245,249,251,257,279,291,292,448,449,],[-62,206,206,-59,-60,-61,-64,-62,-63,206,206,-62,-62,206,206,206,206,]),'LOGICOR':([103,125,127,128,163,164,243,244,245,249,251,257,279,291,292,448,449,],[-62,207,207,-59,-60,-61,-64,-62,-63,207,207,-62,-62,207,207,207,207,]),'LOGICNOT':([103,125,127,128,163,164,243,244,245,249,251,257,279,291,292,448,449,],[-62,208,208,-59,-60,-61,-64,-62,-63,208,208,-62,-62,208,208,208,208,]),'LOGICXOR':([103,125,127,128,163,164,243,244,245,249,251,257,279,291,292,448,449,],[-62,209,209,-59,-60,-61,-64,-62,-63,209,209,-62,-62,209,209,209,209,]),'DOT':([125,238,],[194,314,]),'CONCURRENT':([140,380,],[214,-206,]),'STRING':([189,193,234,265,321,327,329,331,334,338,383,384,389,583,596,601,],[241,261,261,261,385,392,394,261,261,261,261,261,261,593,261,593,]),'BOOLTRUE':([193,234,265,331,334,338,383,384,389,596,],[258,258,258,258,258,258,258,258,258,258,]),'BOOLFALSE':([193,234,265,331,334,338,383,384,389,596,],[259,259,259,259,259,259,259,259,259,259,]),'CHAR':([193,234,265,331,334,338,383,384,389,596,],[262,262,262,262,262,262,262,262,262,262,]),'CLEAR':([194,],[266,]),'COUNT':([194,],[267,]),'ADD':([194,],[268,]),'REMOVEAT':([194,],[269,]),'PUT':([194,],[270,]),'REMOVE':([194,],[271,]),'ENQUEUE':([194,],[272,]),'DEQUEUE':([194,],[273,]),'ISEMPTY':([194,],[274,]),'PUSH':([194,],[275,]),'POP':([194,],[276,]),'PEEK':([194,],[277,]),'NEW':([289,419,455,460,461,],[356,462,488,491,492,]),'IN':([371,],[425,]),'CATCH':([372,],[426,]),'INCREMENT':([463,],[494,]),'DECREMENT':([463,],[495,]),'EXCEPTION':([467,],[497,]),'ELSE':([490,581,],[511,511,]),'ELSE_IF':([490,581,],[512,512,]),'FINALLY':([569,],[578,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block_publicClass':([4,],[5,]),'all_method_definitions':([9,13,],[11,25,]),'block_main_method':([9,11,],[12,22,]),'method_definition':([9,13,],[13,13,]),'simple_method':([9,13,],[15,15,]),'declaration_async':([9,13,],[16,16,]),'declaration_lambda':([9,13,],[17,17,]),'access_modifiers':([9,13,89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[18,18,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,]),'data_type':([14,26,36,56,58,74,75,81,89,91,99,160,161,181,182,215,222,228,229,230,232,237,239,414,424,427,518,525,526,531,532,535,549,564,589,],[29,29,51,72,72,72,72,72,142,142,142,223,224,142,142,283,293,304,305,142,142,142,142,142,304,142,142,538,142,142,142,142,142,142,142,]),'array_type':([14,26,36,56,58,74,75,81,89,91,99,160,161,181,182,215,222,228,229,230,232,237,239,414,424,427,518,525,526,531,532,535,549,564,589,],[35,35,35,35,35,35,35,35,129,129,129,35,35,129,129,35,35,35,35,129,129,129,129,129,35,129,129,35,129,129,129,129,129,129,129,]),'function_arguments':([56,58,74,75,81,],[70,73,84,85,90,]),'function_argument':([56,58,74,75,81,],[71,71,71,71,71,]),'all_block_code':([89,91,99,181,182,230,232,239,427,518,531,532,549,589,],[98,180,188,235,236,306,308,315,468,533,545,547,561,599,]),'block_code':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[99,99,99,99,99,99,99,313,99,459,99,99,459,99,99,550,99,459,99,]),'def_const_or_var':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'print_data':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'read_data':([89,91,99,181,182,193,230,232,234,237,239,265,331,334,338,383,384,389,414,427,518,526,531,532,535,549,564,589,596,],[102,102,102,102,102,254,102,102,254,102,102,254,254,254,254,254,254,254,102,102,102,102,102,102,102,102,102,102,254,]),'arithmetic_operation':([89,91,99,181,182,190,193,211,221,230,231,232,234,237,239,265,303,331,334,338,351,383,384,389,405,406,407,414,422,427,453,454,469,482,483,518,526,527,531,532,535,549,564,589,596,],[103,103,103,103,103,244,257,279,257,103,257,103,257,103,103,257,257,257,257,257,257,257,257,257,257,257,257,103,257,103,279,244,257,257,257,103,103,257,103,103,103,103,103,103,257,]),'logic_operation':([89,91,99,181,182,193,221,230,231,232,234,237,239,265,303,331,334,338,383,384,389,414,422,427,469,518,526,527,531,532,535,549,564,589,596,],[104,104,104,104,104,260,290,104,307,104,260,104,104,260,369,260,260,260,260,260,260,104,369,104,499,104,104,540,104,104,104,104,104,104,260,]),'array_assignation':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'array_value_assign':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'array_indexing':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,]),'lists':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,]),'functions_list':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,]),'dict_estruct':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,]),'functions_dict':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,]),'concurrent_method':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,]),'queue_struct':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'functions_queue':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'stack_struct':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,]),'functions_stack':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,]),'block_if':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[117,117,117,117,117,117,117,117,117,458,117,117,458,117,117,117,117,458,117,]),'block_for':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,]),'block_try_catch':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,]),'block_while':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,]),'constant_assignation':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,]),'variable_assignation':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,]),'late_initialization':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,]),'value_numeric':([89,91,99,181,182,190,193,211,221,230,231,232,234,237,239,265,303,331,334,338,351,383,384,389,405,406,407,414,422,427,453,454,469,482,483,518,526,527,531,532,535,549,564,589,596,],[127,127,127,127,127,245,251,245,291,127,291,127,251,127,127,251,291,251,251,251,410,251,251,251,410,448,448,127,291,127,410,410,291,503,506,127,127,291,127,127,127,127,127,127,251,]),'list_empty':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,]),'list_full':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,]),'list_func_clear':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,]),'list_func_count':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,]),'list_func_add':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,]),'list_func_removeat':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,]),'dict_empty':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,]),'dict_full':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,]),'dict_func_put':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,]),'dict_func_remove':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,]),'method_declaration':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,]),'queue_enqueue':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,]),'queue_dequeue':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,]),'queue_clear':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,]),'queue_isEmpty':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,]),'stack_push':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,]),'stack_pop':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,]),'stack_clear':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,]),'stack_peek':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,]),'stack_isEmpty':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,]),'for_anidado':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[154,154,154,154,154,154,154,154,154,154,154,154,154,544,546,154,154,154,154,]),'for_each':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,]),'try_catch_simply':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,]),'try_catch_finally':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,]),'normal_while':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,]),'do_while':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,]),'assignation_key_value':([89,91,99,142,181,182,223,224,230,232,237,239,285,293,304,414,427,518,526,531,532,535,549,564,589,],[162,162,162,216,162,162,294,297,162,162,162,162,353,358,370,162,162,162,162,162,162,162,162,162,162,]),'for_simple':([89,91,99,181,182,230,232,237,239,414,427,518,526,531,532,535,549,564,589,],[173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,]),'arithmetic_operator':([125,127,243,245,249,251,291,292,410,411,448,449,503,504,505,506,],[190,211,190,211,190,211,211,190,453,454,211,190,211,190,190,211,]),'logic_operator':([125,127,249,251,291,292,448,449,],[191,212,191,212,212,191,482,483,]),'assignation_key_value_multiple':([142,223,224,285,293,],[217,295,298,354,359,]),'function_return':([180,235,],[233,311,]),'value':([193,234,265,331,334,338,383,384,389,596,],[250,310,324,396,399,324,430,431,324,604,]),'value_logic':([193,234,265,331,334,338,383,384,389,596,],[252,252,252,252,252,252,252,252,252,252,]),'value_string':([193,234,265,331,334,338,383,384,389,596,],[253,253,253,253,253,253,253,253,253,253,]),'array':([193,234,265,331,334,338,383,384,389,596,],[256,256,256,256,256,256,256,256,256,256,]),'concatenation':([193,234,265,321,331,334,338,383,384,389,596,],[263,263,263,386,263,263,263,263,263,263,263,]),'assignation_with_datatype':([228,424,],[303,465,]),'array_content':([265,338,389,],[323,402,432,]),'concurrent_block':([282,502,507,],[339,523,524,]),'statement_list':([282,502,507,],[340,340,340,]),'statement':([282,340,502,507,],[341,404,341,341,]),'assignment_concurrent':([282,340,502,507,],[342,342,342,342,]),'if_statement_concurrent':([282,340,502,507,],[343,343,343,343,]),'while_loop_concurrent':([282,340,502,507,],[344,344,344,344,]),'method_call_concurrent':([282,340,502,507,],[345,345,345,345,]),'return_statement_concurrent':([282,340,502,507,],[346,346,346,346,]),'logic_operations':([303,422,],[368,464,]),'expression':([351,405,453,454,],[409,446,486,487,]),'condition':([406,407,],[447,450,]),'not_yes_nested_if':([414,526,564,],[457,539,572,]),'other_if':([490,581,],[510,591,]),'key_value_pairs':([568,588,],[576,598,]),'key_value_pair':([568,588,],[577,577,]),'strings_list':([583,601,],[592,607,]),'ints_list':([585,603,],[594,609,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> USING SYSTEM DOTANDCOMMA block_publicClass','program',4,'p_program','sintactico.py',68),
  ('block_publicClass -> PUBLIC CLASS VARIABLE LKEY all_method_definitions block_main_method RKEY','block_publicClass',7,'p_block_publicClass','sintactico.py',71),
  ('block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_main_method RKEY','block_publicClass',6,'p_block_publicClass','sintactico.py',72),
  ('block_main_method -> STATIC VOID MAIN LPARENT STRINGTYPE LBRACKET RBRACKET VARIABLE RPARENT LKEY all_block_code RKEY','block_main_method',12,'p_block_main_method','sintactico.py',76),
  ('block_code -> def_const_or_var','block_code',1,'p_block_code','sintactico.py',80),
  ('block_code -> print_data','block_code',1,'p_block_code','sintactico.py',81),
  ('block_code -> read_data','block_code',1,'p_block_code','sintactico.py',82),
  ('block_code -> arithmetic_operation','block_code',1,'p_block_code','sintactico.py',83),
  ('block_code -> logic_operation','block_code',1,'p_block_code','sintactico.py',84),
  ('block_code -> array_assignation','block_code',1,'p_block_code','sintactico.py',85),
  ('block_code -> array_value_assign','block_code',1,'p_block_code','sintactico.py',86),
  ('block_code -> array_indexing','block_code',1,'p_block_code','sintactico.py',87),
  ('block_code -> lists','block_code',1,'p_block_code','sintactico.py',89),
  ('block_code -> functions_list','block_code',1,'p_block_code','sintactico.py',90),
  ('block_code -> dict_estruct','block_code',1,'p_block_code','sintactico.py',92),
  ('block_code -> functions_dict','block_code',1,'p_block_code','sintactico.py',93),
  ('block_code -> concurrent_method','block_code',1,'p_block_code','sintactico.py',94),
  ('block_code -> queue_struct','block_code',1,'p_block_code','sintactico.py',96),
  ('block_code -> functions_queue','block_code',1,'p_block_code','sintactico.py',97),
  ('block_code -> stack_struct','block_code',1,'p_block_code','sintactico.py',99),
  ('block_code -> functions_stack','block_code',1,'p_block_code','sintactico.py',100),
  ('block_code -> block_if','block_code',1,'p_block_code','sintactico.py',102),
  ('block_code -> block_for','block_code',1,'p_block_code','sintactico.py',104),
  ('block_code -> block_try_catch','block_code',1,'p_block_code','sintactico.py',106),
  ('block_code -> block_while','block_code',1,'p_block_code','sintactico.py',108),
  ('all_block_code -> block_code','all_block_code',1,'p_all_block_code','sintactico.py',112),
  ('all_block_code -> block_code all_block_code','all_block_code',2,'p_all_block_code','sintactico.py',113),
  ('method_definition -> simple_method','method_definition',1,'p_method_definition','sintactico.py',117),
  ('method_definition -> declaration_async','method_definition',1,'p_method_definition','sintactico.py',118),
  ('method_definition -> declaration_lambda','method_definition',1,'p_method_definition','sintactico.py',119),
  ('all_method_definitions -> method_definition','all_method_definitions',1,'p_all_method_definitions','sintactico.py',123),
  ('all_method_definitions -> method_definition all_method_definitions','all_method_definitions',2,'p_all_method_definitions','sintactico.py',124),
  ('print_data -> PRINT LPARENT STRING RPARENT DOTANDCOMMA','print_data',5,'p_print_data','sintactico.py',129),
  ('print_data -> PRINT LPARENT VARIABLE RPARENT DOTANDCOMMA','print_data',5,'p_print_data','sintactico.py',130),
  ('read_data -> READ LPARENT RPARENT DOTANDCOMMA','read_data',4,'p_read_data','sintactico.py',134),
  ('concatenation -> STRING','concatenation',1,'p_concatenation','sintactico.py',138),
  ('concatenation -> STRING PLUS concatenation','concatenation',3,'p_concatenation','sintactico.py',139),
  ('value -> value_numeric','value',1,'p_value','sintactico.py',143),
  ('value -> value_logic','value',1,'p_value','sintactico.py',144),
  ('value -> value_string','value',1,'p_value','sintactico.py',145),
  ('value -> read_data','value',1,'p_value','sintactico.py',146),
  ('value -> METHOD','value',1,'p_value','sintactico.py',147),
  ('value -> array','value',1,'p_value','sintactico.py',148),
  ('array_assignation -> array_type VARIABLE ASSIGNATION LBRACKET array_content RBRACKET DOTANDCOMMA','array_assignation',7,'p_array_assignation','sintactico.py',152),
  ('array -> LBRACKET array_content RBRACKET','array',3,'p_array','sintactico.py',155),
  ('array_content -> value','array_content',1,'p_array_content','sintactico.py',158),
  ('array_content -> value COMMA array_content','array_content',3,'p_array_content','sintactico.py',159),
  ('array_indexing -> VARIABLE LBRACKET VARIABLE RBRACKET','array_indexing',4,'p_array_indexing','sintactico.py',163),
  ('array_indexing -> VARIABLE LBRACKET INTEGER RBRACKET','array_indexing',4,'p_array_indexing','sintactico.py',164),
  ('array_value_assign -> VARIABLE LBRACKET VARIABLE RBRACKET ASSIGNATION value DOTANDCOMMA','array_value_assign',7,'p_array_value_assign','sintactico.py',168),
  ('array_value_assign -> VARIABLE LBRACKET INTEGER RBRACKET ASSIGNATION value DOTANDCOMMA','array_value_assign',7,'p_array_value_assign','sintactico.py',169),
  ('value_string -> STRING','value_string',1,'p_value_string','sintactico.py',173),
  ('value_string -> CHAR','value_string',1,'p_value_string','sintactico.py',174),
  ('value_string -> VARIABLE','value_string',1,'p_value_string','sintactico.py',175),
  ('value_string -> concatenation','value_string',1,'p_value_string','sintactico.py',176),
  ('value_logic -> BOOLTRUE','value_logic',1,'p_value_logic','sintactico.py',180),
  ('value_logic -> BOOLFALSE','value_logic',1,'p_value_logic','sintactico.py',181),
  ('value_logic -> logic_operation','value_logic',1,'p_value_logic','sintactico.py',182),
  ('value_numeric -> INTEGER','value_numeric',1,'p_value_numeric','sintactico.py',186),
  ('value_numeric -> FLOAT_NUMBER','value_numeric',1,'p_value_numeric','sintactico.py',187),
  ('value_numeric -> DECIMAL_NUMBER','value_numeric',1,'p_value_numeric','sintactico.py',188),
  ('value_numeric -> arithmetic_operation','value_numeric',1,'p_value_numeric','sintactico.py',189),
  ('arithmetic_operation -> value_numeric','arithmetic_operation',1,'p_arithmetic_operation','sintactico.py',194),
  ('arithmetic_operation -> VARIABLE','arithmetic_operation',1,'p_arithmetic_operation','sintactico.py',195),
  ('arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation','arithmetic_operation',3,'p_arithmetic_operation','sintactico.py',196),
  ('arithmetic_operation -> VARIABLE arithmetic_operator arithmetic_operation','arithmetic_operation',3,'p_arithmetic_operation','sintactico.py',197),
  ('logic_operation -> value_numeric logic_operator INTEGER','logic_operation',3,'p_logic_operation','sintactico.py',201),
  ('logic_operation -> VARIABLE logic_operator INTEGER','logic_operation',3,'p_logic_operation','sintactico.py',202),
  ('logic_operator -> GREATER_THAN','logic_operator',1,'p_logic_operator','sintactico.py',206),
  ('logic_operator -> SMALLER_THAN','logic_operator',1,'p_logic_operator','sintactico.py',207),
  ('logic_operator -> EQUAL_COMPARATION','logic_operator',1,'p_logic_operator','sintactico.py',208),
  ('logic_operator -> INEQUALITY','logic_operator',1,'p_logic_operator','sintactico.py',209),
  ('logic_operator -> GREATER_THAN_OR_EQUAL','logic_operator',1,'p_logic_operator','sintactico.py',210),
  ('logic_operator -> SMALLER_THAN_OR_EQUAL','logic_operator',1,'p_logic_operator','sintactico.py',211),
  ('logic_operator -> LOGICAND','logic_operator',1,'p_logic_operator','sintactico.py',212),
  ('logic_operator -> LOGICOR','logic_operator',1,'p_logic_operator','sintactico.py',213),
  ('logic_operator -> LOGICNOT','logic_operator',1,'p_logic_operator','sintactico.py',214),
  ('logic_operator -> LOGICXOR','logic_operator',1,'p_logic_operator','sintactico.py',215),
  ('arithmetic_operator -> PLUS','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',219),
  ('arithmetic_operator -> MINUS','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',220),
  ('arithmetic_operator -> TIMES','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',221),
  ('arithmetic_operator -> DIVIDE','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',222),
  ('arithmetic_operator -> PERCENT','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',223),
  ('access_modifiers -> PUBLIC','access_modifiers',1,'p_access_modifiers','sintactico.py',228),
  ('access_modifiers -> PRIVATE','access_modifiers',1,'p_access_modifiers','sintactico.py',229),
  ('def_const_or_var -> constant_assignation','def_const_or_var',1,'p_def_const_or_var','sintactico.py',233),
  ('def_const_or_var -> variable_assignation','def_const_or_var',1,'p_def_const_or_var','sintactico.py',234),
  ('def_const_or_var -> late_initialization','def_const_or_var',1,'p_def_const_or_var','sintactico.py',235),
  ('constant_assignation -> access_modifiers CONST data_type assignation_key_value DOTANDCOMMA','constant_assignation',5,'p_constant_assignation','sintactico.py',239),
  ('constant_assignation -> CONST data_type assignation_key_value DOTANDCOMMA','constant_assignation',4,'p_constant_assignation','sintactico.py',240),
  ('constant_assignation -> access_modifiers CONST data_type assignation_key_value_multiple DOTANDCOMMA','constant_assignation',5,'p_constant_assignation','sintactico.py',241),
  ('constant_assignation -> CONST data_type assignation_key_value_multiple DOTANDCOMMA','constant_assignation',4,'p_constant_assignation','sintactico.py',242),
  ('variable_assignation -> access_modifiers data_type assignation_key_value DOTANDCOMMA','variable_assignation',4,'p_variable_assignation','sintactico.py',246),
  ('variable_assignation -> data_type assignation_key_value DOTANDCOMMA','variable_assignation',3,'p_variable_assignation','sintactico.py',247),
  ('variable_assignation -> access_modifiers data_type assignation_key_value_multiple DOTANDCOMMA','variable_assignation',4,'p_variable_assignation','sintactico.py',248),
  ('variable_assignation -> data_type assignation_key_value_multiple DOTANDCOMMA','variable_assignation',3,'p_variable_assignation','sintactico.py',249),
  ('late_initialization -> access_modifiers data_type VARIABLE DOTANDCOMMA','late_initialization',4,'p_late_initialization','sintactico.py',253),
  ('late_initialization -> data_type VARIABLE DOTANDCOMMA','late_initialization',3,'p_late_initialization','sintactico.py',254),
  ('late_initialization -> assignation_key_value DOTANDCOMMA','late_initialization',2,'p_late_initialization','sintactico.py',255),
  ('assignation_key_value -> VARIABLE ASSIGNATION value','assignation_key_value',3,'p_assignation_key_value','sintactico.py',259),
  ('assignation_key_value -> READ LPARENT RPARENT','assignation_key_value',3,'p_assignation_key_value','sintactico.py',260),
  ('assignation_key_value_multiple -> assignation_key_value','assignation_key_value_multiple',1,'p_assignation_key_value_multiple','sintactico.py',264),
  ('assignation_key_value_multiple -> assignation_key_value COMMA assignation_key_value_multiple','assignation_key_value_multiple',3,'p_assignation_key_value_multiple','sintactico.py',265),
  ('assignation_with_datatype -> data_type assignation_key_value DOTANDCOMMA','assignation_with_datatype',3,'p_assignation_with_datatype','sintactico.py',269),
  ('assignation_with_datatype -> data_type assignation_key_value COMMA assignation_with_datatype','assignation_with_datatype',4,'p_assignation_with_datatype','sintactico.py',270),
  ('data_type -> CHARTYPE','data_type',1,'p_data_type','sintactico.py',274),
  ('data_type -> STRINGTYPE','data_type',1,'p_data_type','sintactico.py',275),
  ('data_type -> FLOATTYPE','data_type',1,'p_data_type','sintactico.py',276),
  ('data_type -> DECIMALTYPE','data_type',1,'p_data_type','sintactico.py',277),
  ('data_type -> INTTYPE','data_type',1,'p_data_type','sintactico.py',278),
  ('data_type -> BOOLTYPE','data_type',1,'p_data_type','sintactico.py',279),
  ('data_type -> array_type','data_type',1,'p_data_type','sintactico.py',280),
  ('array_type -> CHARTYPE LBRACKET RBRACKET','array_type',3,'p_array_type','sintactico.py',284),
  ('array_type -> STRINGTYPE LBRACKET RBRACKET','array_type',3,'p_array_type','sintactico.py',285),
  ('array_type -> FLOATTYPE LBRACKET RBRACKET','array_type',3,'p_array_type','sintactico.py',286),
  ('array_type -> DECIMALTYPE LBRACKET RBRACKET','array_type',3,'p_array_type','sintactico.py',287),
  ('array_type -> INTTYPE LBRACKET RBRACKET','array_type',3,'p_array_type','sintactico.py',288),
  ('array_type -> BOOLTYPE LBRACKET RBRACKET','array_type',3,'p_array_type','sintactico.py',289),
  ('logic_operations -> logic_operation DOTANDCOMMA','logic_operations',2,'p_logic_operations','sintactico.py',295),
  ('logic_operations -> logic_operation COMMA logic_operations','logic_operations',3,'p_logic_operations','sintactico.py',296),
  ('block_for -> for_anidado','block_for',1,'p_block_for','sintactico.py',300),
  ('block_for -> for_each','block_for',1,'p_block_for','sintactico.py',301),
  ('for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY all_block_code RKEY','for_simple',11,'p_for_simple','sintactico.py',305),
  ('for_simple -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY all_block_code RKEY','for_simple',11,'p_for_simple','sintactico.py',306),
  ('for_anidado -> for_simple','for_anidado',1,'p_for_anidado','sintactico.py',311),
  ('for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE INCREMENT RPARENT LKEY for_anidado RKEY','for_anidado',11,'p_for_anidado','sintactico.py',312),
  ('for_anidado -> FOR LPARENT assignation_with_datatype logic_operations DOTANDCOMMA VARIABLE DECREMENT RPARENT LKEY for_anidado RKEY','for_anidado',11,'p_for_anidado','sintactico.py',313),
  ('for_each -> FOREACH LPARENT data_type VARIABLE IN VARIABLE RPARENT LKEY all_block_code RKEY','for_each',10,'p_for_each','sintactico.py',317),
  ('block_try_catch -> try_catch_simply','block_try_catch',1,'p_block_try_catch','sintactico.py',321),
  ('block_try_catch -> try_catch_finally','block_try_catch',1,'p_block_try_catch','sintactico.py',322),
  ('try_catch_simply -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY','try_catch_simply',12,'p_try_catch_simply','sintactico.py',326),
  ('try_catch_finally -> TRY LKEY all_block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY all_block_code RKEY FINALLY LKEY all_block_code RKEY','try_catch_finally',16,'p_try_catch_finally','sintactico.py',329),
  ('block_while -> normal_while','block_while',1,'p_block_while','sintactico.py',333),
  ('block_while -> do_while','block_while',1,'p_block_while','sintactico.py',334),
  ('normal_while -> WHILE LPARENT logic_operation RPARENT LKEY all_block_code RKEY','normal_while',7,'p_normal_while','sintactico.py',338),
  ('do_while -> DO LKEY all_block_code RKEY WHILE LPARENT logic_operation RPARENT','do_while',8,'p_do_while','sintactico.py',341),
  ('block_if -> IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if','block_if',8,'p_block_if','sintactico.py',344),
  ('other_if -> ELSE LKEY not_yes_nested_if RKEY','other_if',4,'p_other_if','sintactico.py',348),
  ('other_if -> ELSE_IF LPARENT logic_operation RPARENT LKEY not_yes_nested_if RKEY other_if','other_if',8,'p_other_if','sintactico.py',349),
  ('not_yes_nested_if -> block_if','not_yes_nested_if',1,'p_not_yes_nested_if','sintactico.py',354),
  ('not_yes_nested_if -> block_code','not_yes_nested_if',1,'p_not_yes_nested_if','sintactico.py',355),
  ('dict_estruct -> dict_empty','dict_estruct',1,'p_dict_estruct','sintactico.py',364),
  ('dict_estruct -> dict_full','dict_estruct',1,'p_dict_estruct','sintactico.py',365),
  ('dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA','dict_empty',12,'p_dict_empty','sintactico.py',371),
  ('dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY key_value_pairs RKEY DOTANDCOMMA','dict_full',15,'p_dict_full','sintactico.py',376),
  ('key_value_pairs -> key_value_pair','key_value_pairs',1,'p_key_value_pairs','sintactico.py',381),
  ('key_value_pairs -> key_value_pair COMMA key_value_pairs','key_value_pairs',3,'p_key_value_pairs','sintactico.py',382),
  ('key_value_pair -> LKEY VARIABLE COMMA value RKEY','key_value_pair',5,'p_key_value_pair','sintactico.py',387),
  ('estruct_of_data -> list_empty','estruct_of_data',1,'p_estruct_of_data','sintactico.py',392),
  ('estruct_of_data -> list_full','estruct_of_data',1,'p_estruct_of_data','sintactico.py',393),
  ('functions_dict -> dict_func_put','functions_dict',1,'p_functions_dict','sintactico.py',398),
  ('functions_dict -> dict_func_remove','functions_dict',1,'p_functions_dict','sintactico.py',399),
  ('dict_func_put -> VARIABLE DOT PUT LPARENT STRING COMMA VARIABLE RPARENT DOTANDCOMMA','dict_func_put',9,'p_dict_func_put','sintactico.py',404),
  ('dict_func_remove -> VARIABLE DOT REMOVE LPARENT VARIABLE RPARENT DOTANDCOMMA','dict_func_remove',7,'p_dict_func_remove','sintactico.py',409),
  ('lists -> list_empty','lists',1,'p_lists','sintactico.py',415),
  ('lists -> list_full','lists',1,'p_lists','sintactico.py',416),
  ('list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA','list_empty',14,'p_list_empty','sintactico.py',420),
  ('list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA','list_empty',14,'p_list_empty','sintactico.py',421),
  ('list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY DOTANDCOMMA','list_full',17,'p_list_full','sintactico.py',425),
  ('list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY DOTANDCOMMA','list_full',17,'p_list_full','sintactico.py',426),
  ('strings_list -> STRING','strings_list',1,'p_strings_list','sintactico.py',430),
  ('strings_list -> STRING COMMA strings_list','strings_list',3,'p_strings_list','sintactico.py',431),
  ('ints_list -> INTEGER','ints_list',1,'p_ints_list','sintactico.py',435),
  ('ints_list -> INTEGER COMMA ints_list','ints_list',3,'p_ints_list','sintactico.py',436),
  ('functions_list -> list_func_clear','functions_list',1,'p_functions_list','sintactico.py',440),
  ('functions_list -> list_func_count','functions_list',1,'p_functions_list','sintactico.py',441),
  ('functions_list -> list_func_add','functions_list',1,'p_functions_list','sintactico.py',442),
  ('functions_list -> list_func_removeat','functions_list',1,'p_functions_list','sintactico.py',443),
  ('list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA','list_func_clear',6,'p_list_func_clear','sintactico.py',447),
  ('list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA','list_func_count',6,'p_list_func_count','sintactico.py',450),
  ('list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA','list_func_add',7,'p_list_func_add','sintactico.py',453),
  ('list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA','list_func_removeat',7,'p_list_func_removeat','sintactico.py',456),
  ('stack_struct -> STACK VARIABLE ASSIGNATION NEW STACK LPARENT RPARENT DOTANDCOMMA','stack_struct',8,'p_stack_struct','sintactico.py',459),
  ('functions_stack -> stack_push','functions_stack',1,'p_functions_stack','sintactico.py',462),
  ('functions_stack -> stack_pop','functions_stack',1,'p_functions_stack','sintactico.py',463),
  ('functions_stack -> stack_clear','functions_stack',1,'p_functions_stack','sintactico.py',464),
  ('functions_stack -> stack_peek','functions_stack',1,'p_functions_stack','sintactico.py',465),
  ('functions_stack -> stack_isEmpty','functions_stack',1,'p_functions_stack','sintactico.py',466),
  ('stack_push -> VARIABLE DOT PUSH LPARENT value RPARENT DOTANDCOMMA','stack_push',7,'p_stack_push','sintactico.py',470),
  ('stack_pop -> VARIABLE DOT POP LPARENT RPARENT DOTANDCOMMA','stack_pop',6,'p_stack_pop','sintactico.py',473),
  ('stack_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA','stack_clear',6,'p_stack_clear','sintactico.py',476),
  ('stack_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA','stack_peek',6,'p_stack_peek','sintactico.py',479),
  ('stack_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA','stack_isEmpty',6,'p_stack_isEmpty','sintactico.py',482),
  ('queue_struct -> QUEUE SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW QUEUE SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA','queue_struct',14,'p_queue_struct','sintactico.py',485),
  ('functions_queue -> queue_enqueue','functions_queue',1,'p_functions_queue','sintactico.py',489),
  ('functions_queue -> queue_dequeue','functions_queue',1,'p_functions_queue','sintactico.py',490),
  ('functions_queue -> queue_clear','functions_queue',1,'p_functions_queue','sintactico.py',491),
  ('functions_queue -> queue_isEmpty','functions_queue',1,'p_functions_queue','sintactico.py',492),
  ('queue_enqueue -> VARIABLE DOT ENQUEUE LPARENT value RPARENT DOTANDCOMMA','queue_enqueue',7,'p_queue_enqueue','sintactico.py',496),
  ('queue_dequeue -> VARIABLE DOT DEQUEUE LPARENT RPARENT DOTANDCOMMA','queue_dequeue',6,'p_queue_dequeue','sintactico.py',500),
  ('queue_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA','queue_clear',6,'p_queue_clear','sintactico.py',504),
  ('queue_peek -> VARIABLE DOT PEEK LPARENT RPARENT DOTANDCOMMA','queue_peek',6,'p_queue_peek','sintactico.py',508),
  ('queue_isEmpty -> VARIABLE DOT ISEMPTY LPARENT RPARENT DOTANDCOMMA','queue_isEmpty',6,'p_queue_isEmpty','sintactico.py',512),
  ('simple_method -> STATIC data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY','simple_method',10,'p_simple_method','sintactico.py',519),
  ('simple_method -> STATIC VOID METHOD LPARENT function_arguments RPARENT LKEY all_block_code RKEY','simple_method',9,'p_simple_method','sintactico.py',520),
  ('simple_method -> access_modifiers STATIC data_type METHOD LPARENT function_arguments RPARENT LKEY all_block_code function_return RKEY','simple_method',11,'p_simple_method','sintactico.py',521),
  ('simple_method -> access_modifiers STATIC VOID METHOD LPARENT function_arguments RPARENT LKEY all_block_code RKEY','simple_method',10,'p_simple_method','sintactico.py',522),
  ('function_return -> RETURN value DOTANDCOMMA','function_return',3,'p_function_return','sintactico.py',526),
  ('function_argument -> data_type VARIABLE','function_argument',2,'p_function_argument','sintactico.py',530),
  ('function_argument -> METHOD VARIABLE','function_argument',2,'p_function_argument','sintactico.py',531),
  ('function_arguments -> function_argument','function_arguments',1,'p_function_arguments','sintactico.py',535),
  ('function_arguments -> function_argument COMMA function_arguments','function_arguments',3,'p_function_arguments','sintactico.py',536),
  ('declaration_async -> PUBLIC STATIC ASYNC TASK METHOD LPARENT RPARENT LKEY AWAIT TASK DOT METHOD LPARENT LPARENT RPARENT ARROW LKEY block_code RKEY RPARENT DOTANDCOMMA RKEY','declaration_async',22,'p_declaration_async','sintactico.py',540),
  ('declaration_lambda -> ACTION SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION VARIABLE ARROW LKEY block_code RKEY','declaration_lambda',11,'p_declration_lambda','sintactico.py',544),
  ('concurrent_method -> method_declaration CONCURRENT LKEY concurrent_block RKEY','concurrent_method',5,'p_concurrent_method','sintactico.py',547),
  ('method_declaration -> METHOD IDENTIFIER LPARENT RPARENT DOTANDCOMMA','method_declaration',5,'p_method_declaration','sintactico.py',551),
  ('concurrent_block -> statement_list','concurrent_block',1,'p_concurrent_block','sintactico.py',555),
  ('statement_list -> statement','statement_list',1,'p_statement_list','sintactico.py',559),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','sintactico.py',560),
  ('statement -> assignment_concurrent','statement',1,'p_statement','sintactico.py',564),
  ('statement -> if_statement_concurrent','statement',1,'p_statement','sintactico.py',565),
  ('statement -> while_loop_concurrent','statement',1,'p_statement','sintactico.py',566),
  ('statement -> method_call_concurrent','statement',1,'p_statement','sintactico.py',567),
  ('statement -> return_statement_concurrent','statement',1,'p_statement','sintactico.py',568),
  ('assignment_concurrent -> VARIABLE ASSIGNATION expression DOTANDCOMMA','assignment_concurrent',4,'p_assignment_concurrent','sintactico.py',572),
  ('if_statement_concurrent -> IF LPARENT condition RPARENT LKEY concurrent_block RKEY','if_statement_concurrent',7,'p_if_statement_concurrent','sintactico.py',576),
  ('while_loop_concurrent -> WHILE LPARENT condition RPARENT LKEY concurrent_block RKEY','while_loop_concurrent',7,'p_while_loop_concurrent','sintactico.py',580),
  ('method_call_concurrent -> IDENTIFIER LPARENT RPARENT DOTANDCOMMA','method_call_concurrent',4,'p_method_call_concurrent','sintactico.py',584),
  ('return_statement_concurrent -> RETURN expression DOTANDCOMMA','return_statement_concurrent',3,'p_return_statement_concurrent','sintactico.py',588),
  ('expression -> value_numeric','expression',1,'p_expression','sintactico.py',592),
  ('expression -> VARIABLE','expression',1,'p_expression','sintactico.py',593),
  ('expression -> value_numeric arithmetic_operator expression','expression',3,'p_expression','sintactico.py',594),
  ('expression -> VARIABLE arithmetic_operator expression','expression',3,'p_expression','sintactico.py',595),
  ('condition -> value_numeric logic_operator value_numeric','condition',3,'p_condition','sintactico.py',599),
  ('condition -> VARIABLE logic_operator value_numeric','condition',3,'p_condition','sintactico.py',600),
  ('condition -> value_numeric logic_operator VARIABLE','condition',3,'p_condition','sintactico.py',601),
  ('condition -> VARIABLE logic_operator VARIABLE','condition',3,'p_condition','sintactico.py',602),
]
