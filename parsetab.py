
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADDITION_ASSIGNMENT ASSIGNATION BACK_SLASH BOOL BOOLFALSE BOOLTRUE BOOLTYPE BREAK CATCH CHAR CHARTYPE CLASS COMMA CONST DECIMALTYPE DECIMAL_NUMBER DECREMENT DICTIONARY DIVIDE DIVISION_ASSIGNMENT DOLLARSIGN DOT DOTANDCOMMA DOUBLEPOINT DOUBLE_QUOTATION_MARKS ELSE EQUAL_COMPARATION EXCEPTION FINALLY FLOATTYPE FLOAT_NUMBER FOR GREATER_THAN GREATER_THAN_OR_EQUAL ID IF INCREMENT INEQUALITY INTEGER INTTYPE JUMP_LINE LBRACKET LIST LKEY LOGICAND LOGICNOT LOGICOR LOGICXOR LONG LPARENT MINUS MODULE_ASSIGNMENT MULTIPLICATION_ASSIGNMENT NAMESPACE NEW PERCENT PIPE PLUS PRINT PRIVATE PUBLIC RBRACKET READ RETURN RKEY RPARENT SIPLE_QUOTATION_MARKS SMALLER_THAN SMALLER_THAN_OR_EQUAL STATIC STRING STRINGTYPE SUBTRACTION_ASSIGNMENT SWITCH SYSTEM TABULATION TIMES TRY USING VARIABLE VOID WHILEprogram : block_using block_publicClassblock_using : USING SYSTEM DOTANDCOMMAblock_publicClass : PUBLIC CLASS VARIABLE LKEY block_code RKEYblock_code : def_const_or_var\n                    | estruct_of_data\n                    | block_try_catch\n                    | VARIABLE\n                    | declaration_dict\n    def_const_or_var : constant_assignation\n                        | variable_assignation\n    variable_assignation : access_modifiers all_asignations\n                            | all_asignations\n\n    constant_assignation : access_modifiers CONST all_asignations\n                            | CONST all_asignations\n                            | CONST data_type assignation_key_value COMMA some_assignation_constant\n    all_asignations : assignation_with_datatype\n                        | assignation_without_datatype\n    assignation_with_datatype : data_type assignation_key_value DOTANDCOMMA\n                            | data_type assignation_key_value DOTANDCOMMA assignation_with_datatype   \n                            | data_type assignation_key_value DOTANDCOMMA assignation_without_datatype                     \n    assignation_without_datatype : assignation_key_value DOTANDCOMMA\n                                    | assignation_key_value DOTANDCOMMA assignation_without_datatype\n                                    | assignation_key_value DOTANDCOMMA assignation_with_datatype\n    some_assignation_constant : assignation_key_value DOTANDCOMMA\n                                | assignation_key_value COMMA some_assignation_constant\n    assignation_key_value : VARIABLE ASSIGNATION valuedata_type    : CHARTYPE\n                    | STRINGTYPE\n                    | FLOATTYPE\n                    | DECIMALTYPE\n                    | INTTYPE\n                    | BOOLTYPE\n    value    : value_numeric\n                | value_logic\n                | value_string\n    value_string : STRING\n                    | CHAR\n                    | VARIABLE\n                    | READ LPARENT RPARENT\n                    | concatenation\n    value_logic  : BOOLTRUE\n                    | BOOLFALSE\n    value_numeric    : INTEGER\n                        | FLOAT_NUMBER\n                        | DECIMAL_NUMBER\n    block_try_catch : try_catch_simply\n                        | try_catch_finally\n    try_catch_simply : TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEYtry_catch_finally : TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEY FINALLY LKEY block_code RKEYaccess_modifiers : PUBLIC\n                        | PRIVATE\n    arithmetic_operation : value_numeric\n                            | value_numeric arithmetic_operator arithmetic_operation\n    logic_operation  : value_logic\n                        | value_logic logic_operator logic_operation\n    concatenation    : STRING\n                        | STRING PLUS concatenation\n    logic_operator   : GREATER_THAN\n                        | SMALLER_THAN\n                        | EQUAL_COMPARATION\n                        | INEQUALITY\n                        | GREATER_THAN_OR_EQUAL\n                        | SMALLER_THAN_OR_EQUAL\n                        | LOGICAND\n                        | LOGICOR\n                        | LOGICNOT\n                        | LOGICXOR\n    arithmetic_operator  : PLUS\n                            | MINUS\n                            | TIMES\n                            | DIVIDE\n                            | PERCENT\n    variable_assignation_multiline   : \n    declaration_dict : DICTIONARY VARIABLE ASSIGNATION dictionary_valuedictionary_value : LKEY key_value_pairs RKEYkey_value_pairs : key_value_pair\n                       | key_value_pair COMMA key_value_pairskey_value_pair : STRING DOUBLEPOINT valuevalueHash : INTTYPE\n             | STRINGestruct_of_data : list\n    list : LIST SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA'
    
_lr_action_items = {'USING':([0,],[3,]),'$end':([1,4,41,],[0,-1,-3,]),'PUBLIC':([2,8,10,51,110,118,],[5,-2,11,11,11,11,]),'SYSTEM':([3,],[6,]),'CLASS':([5,],[7,]),'DOTANDCOMMA':([6,28,48,52,53,54,55,56,57,58,59,60,61,62,63,65,68,83,84,85,89,115,],[8,49,69,-38,-26,-33,-34,-35,-43,-44,-45,-41,-42,-36,-37,-40,69,-56,-57,-39,96,117,]),'VARIABLE':([7,10,11,23,24,25,27,31,34,35,36,37,38,39,40,43,47,49,51,69,78,81,95,97,104,110,118,],[9,12,-50,42,45,45,45,-51,-27,-28,-29,-30,-31,-32,52,45,45,45,12,45,45,91,52,45,106,12,12,]),'LKEY':([9,30,66,108,116,],[10,51,77,110,118,]),'DICTIONARY':([10,51,110,118,],[23,23,23,23,]),'CONST':([10,11,24,31,51,110,118,],[25,-50,43,-51,25,25,25,]),'LIST':([10,51,103,110,118,],[29,29,105,29,29,]),'TRY':([10,51,110,118,],[30,30,30,30,]),'PRIVATE':([10,51,110,118,],[31,31,31,31,]),'CHARTYPE':([10,11,24,25,31,43,49,50,51,69,107,110,118,],[34,-50,34,34,-51,34,34,34,34,34,34,34,34,]),'STRINGTYPE':([10,11,24,25,31,43,49,50,51,69,107,110,118,],[35,-50,35,35,-51,35,35,35,35,35,35,35,35,]),'FLOATTYPE':([10,11,24,25,31,43,49,50,51,69,107,110,118,],[36,-50,36,36,-51,36,36,36,36,36,36,36,36,]),'DECIMALTYPE':([10,11,24,25,31,43,49,50,51,69,107,110,118,],[37,-50,37,37,-51,37,37,37,37,37,37,37,37,]),'INTTYPE':([10,11,24,25,31,43,49,50,51,69,107,110,118,],[38,-50,38,38,-51,38,38,38,38,38,38,38,38,]),'BOOLTYPE':([10,11,24,25,31,43,49,50,51,69,107,110,118,],[39,-50,39,39,-51,39,39,39,39,39,39,39,39,]),'RKEY':([12,13,14,15,16,17,18,19,20,21,22,26,32,33,44,46,49,52,54,55,56,57,58,59,60,61,62,63,65,67,69,70,71,73,76,79,80,83,84,85,86,87,90,93,96,100,101,102,112,114,117,119,120,],[-7,41,-4,-5,-6,-8,-9,-10,-81,-46,-47,-12,-16,-17,-11,-14,-21,-38,-33,-34,-35,-43,-44,-45,-41,-42,-36,-37,-40,-13,-18,-22,-23,82,-74,-19,-20,-56,-57,-39,93,-76,-15,-75,-24,-77,-78,-25,114,-48,-82,120,-49,]),'ASSIGNATION':([12,42,45,91,],[40,66,40,98,]),'SMALLER_THAN':([29,105,],[50,107,]),'GREATER_THAN':([34,35,36,37,38,39,72,109,],[-27,-28,-29,-30,-31,-32,81,111,]),'INTEGER':([40,95,],[57,57,]),'FLOAT_NUMBER':([40,95,],[58,58,]),'DECIMAL_NUMBER':([40,95,],[59,59,]),'BOOLTRUE':([40,95,],[60,60,]),'BOOLFALSE':([40,95,],[61,61,]),'STRING':([40,74,77,94,95,],[62,83,88,88,62,]),'CHAR':([40,95,],[63,63,]),'READ':([40,95,],[64,64,]),'COMMA':([52,53,54,55,56,57,58,59,60,61,62,63,65,68,83,84,85,87,89,101,],[-38,-26,-33,-34,-35,-43,-44,-45,-41,-42,-36,-37,-40,78,-56,-57,-39,94,97,-78,]),'PLUS':([62,83,],[74,74,]),'LPARENT':([64,92,111,],[75,99,113,]),'RPARENT':([75,106,113,],[85,108,115,]),'CATCH':([82,],[92,]),'DOUBLEPOINT':([88,],[95,]),'NEW':([98,],[103,]),'EXCEPTION':([99,],[104,]),'FINALLY':([114,],[116,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block_using':([0,],[2,]),'block_publicClass':([2,],[4,]),'block_code':([10,51,110,118,],[13,73,112,119,]),'def_const_or_var':([10,51,110,118,],[14,14,14,14,]),'estruct_of_data':([10,51,110,118,],[15,15,15,15,]),'block_try_catch':([10,51,110,118,],[16,16,16,16,]),'declaration_dict':([10,51,110,118,],[17,17,17,17,]),'constant_assignation':([10,51,110,118,],[18,18,18,18,]),'variable_assignation':([10,51,110,118,],[19,19,19,19,]),'list':([10,51,110,118,],[20,20,20,20,]),'try_catch_simply':([10,51,110,118,],[21,21,21,21,]),'try_catch_finally':([10,51,110,118,],[22,22,22,22,]),'access_modifiers':([10,51,110,118,],[24,24,24,24,]),'all_asignations':([10,24,25,43,51,110,118,],[26,44,46,67,26,26,26,]),'data_type':([10,24,25,43,49,50,51,69,107,110,118,],[27,27,47,27,27,72,27,27,109,27,27,]),'assignation_key_value':([10,24,25,27,43,47,49,51,69,78,97,110,118,],[28,28,28,48,28,68,28,28,28,89,89,28,28,]),'assignation_with_datatype':([10,24,25,43,49,51,69,110,118,],[32,32,32,32,71,32,79,32,32,]),'assignation_without_datatype':([10,24,25,43,49,51,69,110,118,],[33,33,33,33,70,33,80,33,33,]),'value':([40,95,],[53,101,]),'value_numeric':([40,95,],[54,54,]),'value_logic':([40,95,],[55,55,]),'value_string':([40,95,],[56,56,]),'concatenation':([40,74,95,],[65,84,65,]),'dictionary_value':([66,],[76,]),'key_value_pairs':([77,94,],[86,100,]),'key_value_pair':([77,94,],[87,87,]),'some_assignation_constant':([78,97,],[90,102,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block_using block_publicClass','program',2,'p_program','sintactico.py',28),
  ('block_using -> USING SYSTEM DOTANDCOMMA','block_using',3,'p_block_using','sintactico.py',31),
  ('block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_code RKEY','block_publicClass',6,'p_block_publicClass','sintactico.py',34),
  ('block_code -> def_const_or_var','block_code',1,'p_block_code','sintactico.py',39),
  ('block_code -> estruct_of_data','block_code',1,'p_block_code','sintactico.py',40),
  ('block_code -> block_try_catch','block_code',1,'p_block_code','sintactico.py',41),
  ('block_code -> VARIABLE','block_code',1,'p_block_code','sintactico.py',42),
  ('block_code -> declaration_dict','block_code',1,'p_block_code','sintactico.py',43),
  ('def_const_or_var -> constant_assignation','def_const_or_var',1,'p_def_const_or_var','sintactico.py',52),
  ('def_const_or_var -> variable_assignation','def_const_or_var',1,'p_def_const_or_var','sintactico.py',53),
  ('variable_assignation -> access_modifiers all_asignations','variable_assignation',2,'p_variable_assignation','sintactico.py',57),
  ('variable_assignation -> all_asignations','variable_assignation',1,'p_variable_assignation','sintactico.py',58),
  ('constant_assignation -> access_modifiers CONST all_asignations','constant_assignation',3,'p_constant_assignation','sintactico.py',63),
  ('constant_assignation -> CONST all_asignations','constant_assignation',2,'p_constant_assignation','sintactico.py',64),
  ('constant_assignation -> CONST data_type assignation_key_value COMMA some_assignation_constant','constant_assignation',5,'p_constant_assignation','sintactico.py',65),
  ('all_asignations -> assignation_with_datatype','all_asignations',1,'p_all_asignations','sintactico.py',69),
  ('all_asignations -> assignation_without_datatype','all_asignations',1,'p_all_asignations','sintactico.py',70),
  ('assignation_with_datatype -> data_type assignation_key_value DOTANDCOMMA','assignation_with_datatype',3,'p_assignation_with_datatype','sintactico.py',74),
  ('assignation_with_datatype -> data_type assignation_key_value DOTANDCOMMA assignation_with_datatype','assignation_with_datatype',4,'p_assignation_with_datatype','sintactico.py',75),
  ('assignation_with_datatype -> data_type assignation_key_value DOTANDCOMMA assignation_without_datatype','assignation_with_datatype',4,'p_assignation_with_datatype','sintactico.py',76),
  ('assignation_without_datatype -> assignation_key_value DOTANDCOMMA','assignation_without_datatype',2,'p_assignation_without_datatype','sintactico.py',80),
  ('assignation_without_datatype -> assignation_key_value DOTANDCOMMA assignation_without_datatype','assignation_without_datatype',3,'p_assignation_without_datatype','sintactico.py',81),
  ('assignation_without_datatype -> assignation_key_value DOTANDCOMMA assignation_with_datatype','assignation_without_datatype',3,'p_assignation_without_datatype','sintactico.py',82),
  ('some_assignation_constant -> assignation_key_value DOTANDCOMMA','some_assignation_constant',2,'p_some_assignation_constant','sintactico.py',86),
  ('some_assignation_constant -> assignation_key_value COMMA some_assignation_constant','some_assignation_constant',3,'p_some_assignation_constant','sintactico.py',87),
  ('assignation_key_value -> VARIABLE ASSIGNATION value','assignation_key_value',3,'p_assignation_key_value','sintactico.py',91),
  ('data_type -> CHARTYPE','data_type',1,'p_data_type','sintactico.py',94),
  ('data_type -> STRINGTYPE','data_type',1,'p_data_type','sintactico.py',95),
  ('data_type -> FLOATTYPE','data_type',1,'p_data_type','sintactico.py',96),
  ('data_type -> DECIMALTYPE','data_type',1,'p_data_type','sintactico.py',97),
  ('data_type -> INTTYPE','data_type',1,'p_data_type','sintactico.py',98),
  ('data_type -> BOOLTYPE','data_type',1,'p_data_type','sintactico.py',99),
  ('value -> value_numeric','value',1,'p_value','sintactico.py',108),
  ('value -> value_logic','value',1,'p_value','sintactico.py',109),
  ('value -> value_string','value',1,'p_value','sintactico.py',110),
  ('value_string -> STRING','value_string',1,'p_value_string','sintactico.py',114),
  ('value_string -> CHAR','value_string',1,'p_value_string','sintactico.py',115),
  ('value_string -> VARIABLE','value_string',1,'p_value_string','sintactico.py',116),
  ('value_string -> READ LPARENT RPARENT','value_string',3,'p_value_string','sintactico.py',117),
  ('value_string -> concatenation','value_string',1,'p_value_string','sintactico.py',118),
  ('value_logic -> BOOLTRUE','value_logic',1,'p_value_logic','sintactico.py',122),
  ('value_logic -> BOOLFALSE','value_logic',1,'p_value_logic','sintactico.py',123),
  ('value_numeric -> INTEGER','value_numeric',1,'p_value_numeric','sintactico.py',127),
  ('value_numeric -> FLOAT_NUMBER','value_numeric',1,'p_value_numeric','sintactico.py',128),
  ('value_numeric -> DECIMAL_NUMBER','value_numeric',1,'p_value_numeric','sintactico.py',129),
  ('block_try_catch -> try_catch_simply','block_try_catch',1,'p_block_try_catch','sintactico.py',138),
  ('block_try_catch -> try_catch_finally','block_try_catch',1,'p_block_try_catch','sintactico.py',139),
  ('try_catch_simply -> TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEY','try_catch_simply',12,'p_try_catch_simply','sintactico.py',143),
  ('try_catch_finally -> TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEY FINALLY LKEY block_code RKEY','try_catch_finally',16,'p_try_catch_finally','sintactico.py',146),
  ('access_modifiers -> PUBLIC','access_modifiers',1,'p_access_modifiers','sintactico.py',150),
  ('access_modifiers -> PRIVATE','access_modifiers',1,'p_access_modifiers','sintactico.py',151),
  ('arithmetic_operation -> value_numeric','arithmetic_operation',1,'p_arithmetic_operation','sintactico.py',161),
  ('arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation','arithmetic_operation',3,'p_arithmetic_operation','sintactico.py',162),
  ('logic_operation -> value_logic','logic_operation',1,'p_logic_operation','sintactico.py',166),
  ('logic_operation -> value_logic logic_operator logic_operation','logic_operation',3,'p_logic_operation','sintactico.py',167),
  ('concatenation -> STRING','concatenation',1,'p_concatenation','sintactico.py',171),
  ('concatenation -> STRING PLUS concatenation','concatenation',3,'p_concatenation','sintactico.py',172),
  ('logic_operator -> GREATER_THAN','logic_operator',1,'p_logic_operator','sintactico.py',176),
  ('logic_operator -> SMALLER_THAN','logic_operator',1,'p_logic_operator','sintactico.py',177),
  ('logic_operator -> EQUAL_COMPARATION','logic_operator',1,'p_logic_operator','sintactico.py',178),
  ('logic_operator -> INEQUALITY','logic_operator',1,'p_logic_operator','sintactico.py',179),
  ('logic_operator -> GREATER_THAN_OR_EQUAL','logic_operator',1,'p_logic_operator','sintactico.py',180),
  ('logic_operator -> SMALLER_THAN_OR_EQUAL','logic_operator',1,'p_logic_operator','sintactico.py',181),
  ('logic_operator -> LOGICAND','logic_operator',1,'p_logic_operator','sintactico.py',182),
  ('logic_operator -> LOGICOR','logic_operator',1,'p_logic_operator','sintactico.py',183),
  ('logic_operator -> LOGICNOT','logic_operator',1,'p_logic_operator','sintactico.py',184),
  ('logic_operator -> LOGICXOR','logic_operator',1,'p_logic_operator','sintactico.py',185),
  ('arithmetic_operator -> PLUS','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',189),
  ('arithmetic_operator -> MINUS','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',190),
  ('arithmetic_operator -> TIMES','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',191),
  ('arithmetic_operator -> DIVIDE','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',192),
  ('arithmetic_operator -> PERCENT','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',193),
  ('variable_assignation_multiline -> <empty>','variable_assignation_multiline',0,'p_variable_assignation_multiline','sintactico.py',197),
  ('declaration_dict -> DICTIONARY VARIABLE ASSIGNATION dictionary_value','declaration_dict',4,'p_declaration_dict','sintactico.py',205),
  ('dictionary_value -> LKEY key_value_pairs RKEY','dictionary_value',3,'p_dictionary_value','sintactico.py',208),
  ('key_value_pairs -> key_value_pair','key_value_pairs',1,'p_key_value_pairs','sintactico.py',211),
  ('key_value_pairs -> key_value_pair COMMA key_value_pairs','key_value_pairs',3,'p_key_value_pairs','sintactico.py',212),
  ('key_value_pair -> STRING DOUBLEPOINT value','key_value_pair',3,'p_key_value_pair','sintactico.py',215),
  ('valueHash -> INTTYPE','valueHash',1,'p_valueHash','sintactico.py',219),
  ('valueHash -> STRING','valueHash',1,'p_valueHash','sintactico.py',220),
  ('estruct_of_data -> list','estruct_of_data',1,'p_estruct_of_data','sintactico.py',226),
  ('list -> LIST SMALLER_THAN data_type GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN data_type GREATER_THAN LPARENT RPARENT DOTANDCOMMA','list',14,'p_list','sintactico.py',230),
]
