
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADDITION_ASSIGNMENT ASSIGNATION BACK_SLASH BOOL BOOLFALSE BOOLTRUE BOOLTYPE BREAK CATCH CHAR CHARTYPE CLASS COMMA CONST DECIMALTYPE DECIMAL_NUMBER DECREMENT DIVIDE DIVISION_ASSIGNMENT DOLLARSIGN DOT DOTANDCOMMA DOUBLEPOINT DOUBLE_QUOTATION_MARKS ELSE EQUAL_COMPARATION EXCEPTION FINALLY FLOATTYPE FLOAT_NUMBER FOR GREATER_THAN GREATER_THAN_OR_EQUAL IF INCREMENT INEQUALITY INTEGER INTTYPE JUMP_LINE LBRACKET LKEY LOGICAND LOGICNOT LOGICOR LOGICXOR LONG LPARENT MINUS MODULE_ASSIGNMENT MULTIPLICATION_ASSIGNMENT NAMESPACE NEW PERCENT PIPE PLUS PRINT PRIVATE PUBLIC RBRACKET READ RETURN RKEY RPARENT SIPLE_QUOTATION_MARKS SMALLER_THAN SMALLER_THAN_OR_EQUAL STATIC STRING STRINGTYPE SUBTRACTION_ASSIGNMENT SWITCH SYSTEM TABULATION TIMES TRY USING VARIABLE VOID WHILEprogram : block_using block_publicClassblock_using : USING SYSTEM DOTANDCOMMAblock_publicClass : PUBLIC CLASS VARIABLE LKEY block_code RKEYblock_code : def_const_or_var\n                    | block_try_catch\n                    | VARIABLE\n    def_const_or_var : constant_assignation\n                        | variable_assignation\n    variable_assignation : access_modifiers all_asignations\n                            | all_asignations\n\n    constant_assignation : access_modifiers CONST all_asignations\n                            | CONST all_asignations\n                            | CONST data_type assignation_key_value COMMA some_assignation_constant\n    all_asignations : assignation_with_datatype\n                        | assignation_without_datatype\n    assignation_with_datatype : data_type assignation_key_value DOTANDCOMMA\n                            | data_type assignation_key_value DOTANDCOMMA assignation_with_datatype   \n                            | data_type assignation_key_value DOTANDCOMMA assignation_without_datatype                     \n    assignation_without_datatype : assignation_key_value DOTANDCOMMA\n                                    | assignation_key_value DOTANDCOMMA assignation_without_datatype\n                                    | assignation_key_value DOTANDCOMMA assignation_with_datatype\n    some_assignation_constant : assignation_key_value DOTANDCOMMA\n                                | assignation_key_value COMMA some_assignation_constant\n    assignation_key_value : VARIABLE ASSIGNATION valuedata_type    : CHARTYPE\n                    | STRINGTYPE\n                    | FLOATTYPE\n                    | DECIMALTYPE\n                    | INTTYPE\n                    | BOOLTYPE\n    value    : value_numeric\n                | value_logic\n                | value_string\n    value_string : STRING\n                    | CHAR\n                    | VARIABLE\n                    | READ LPARENT RPARENT\n                    | concatenation\n    value_logic  : BOOLTRUE\n                    | BOOLFALSE\n    value_numeric    : INTEGER\n                        | FLOAT_NUMBER\n                        | DECIMAL_NUMBER\n    block_try_catch : try_catch_simply\n                        | try_catch_finally\n    try_catch_simply : TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEYtry_catch_finally : TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEY FINALLY LKEY block_code RKEYaccess_modifiers : PUBLIC\n                        | PRIVATE\n    arithmetic_operation : value_numeric\n                            | value_numeric arithmetic_operator arithmetic_operation\n    logic_operation  : value_logic\n                        | value_logic logic_operator logic_operation\n    concatenation    : STRING\n                        | STRING PLUS concatenation\n    logic_operator   : GREATER_THAN\n                        | SMALLER_THAN\n                        | EQUAL_COMPARATION\n                        | INEQUALITY\n                        | GREATER_THAN_OR_EQUAL\n                        | SMALLER_THAN_OR_EQUAL\n                        | LOGICAND\n                        | LOGICOR\n                        | LOGICNOT\n                        | LOGICXOR\n    arithmetic_operator  : PLUS\n                            | MINUS\n                            | TIMES\n                            | DIVIDE\n                            | PERCENT\n    variable_assignation_multiline   : \n    '
    
_lr_action_items = {'USING':([0,],[3,]),'$end':([1,4,36,],[0,-1,-3,]),'PUBLIC':([2,8,10,44,84,88,],[5,-2,11,11,11,11,]),'SYSTEM':([3,],[6,]),'CLASS':([5,],[7,]),'DOTANDCOMMA':([6,24,42,45,46,47,48,49,50,51,52,53,54,55,56,58,60,71,72,73,74,],[8,43,61,-36,-24,-31,-32,-33,-41,-42,-43,-39,-40,-34,-35,-38,61,-54,-55,-37,77,]),'VARIABLE':([7,10,11,20,21,23,26,29,30,31,32,33,34,35,37,41,43,44,61,67,78,81,84,88,],[9,12,-48,39,39,39,-49,-25,-26,-27,-28,-29,-30,45,39,39,39,12,39,39,39,82,12,12,]),'LKEY':([9,25,83,87,],[10,44,84,88,]),'CONST':([10,11,20,26,44,84,88,],[21,-48,37,-49,21,21,21,]),'TRY':([10,44,84,88,],[25,25,25,25,]),'PRIVATE':([10,44,84,88,],[26,26,26,26,]),'CHARTYPE':([10,11,20,21,26,37,43,44,61,84,88,],[29,-48,29,29,-49,29,29,29,29,29,29,]),'STRINGTYPE':([10,11,20,21,26,37,43,44,61,84,88,],[30,-48,30,30,-49,30,30,30,30,30,30,]),'FLOATTYPE':([10,11,20,21,26,37,43,44,61,84,88,],[31,-48,31,31,-49,31,31,31,31,31,31,]),'DECIMALTYPE':([10,11,20,21,26,37,43,44,61,84,88,],[32,-48,32,32,-49,32,32,32,32,32,32,]),'INTTYPE':([10,11,20,21,26,37,43,44,61,84,88,],[33,-48,33,33,-49,33,33,33,33,33,33,]),'BOOLTYPE':([10,11,20,21,26,37,43,44,61,84,88,],[34,-48,34,34,-49,34,34,34,34,34,34,]),'RKEY':([12,13,14,15,16,17,18,19,22,27,28,38,40,43,59,61,62,63,64,68,69,75,77,80,85,86,89,90,],[-6,36,-4,-5,-7,-8,-44,-45,-10,-14,-15,-9,-12,-19,-11,-16,-20,-21,70,-17,-18,-13,-22,-23,86,-46,90,-47,]),'ASSIGNATION':([12,39,],[35,35,]),'INTEGER':([35,],[50,]),'FLOAT_NUMBER':([35,],[51,]),'DECIMAL_NUMBER':([35,],[52,]),'BOOLTRUE':([35,],[53,]),'BOOLFALSE':([35,],[54,]),'STRING':([35,65,],[55,71,]),'CHAR':([35,],[56,]),'READ':([35,],[57,]),'COMMA':([45,46,47,48,49,50,51,52,53,54,55,56,58,60,71,72,73,74,],[-36,-24,-31,-32,-33,-41,-42,-43,-39,-40,-34,-35,-38,67,-54,-55,-37,78,]),'PLUS':([55,71,],[65,65,]),'LPARENT':([57,76,],[66,79,]),'RPARENT':([66,82,],[73,83,]),'CATCH':([70,],[76,]),'EXCEPTION':([79,],[81,]),'FINALLY':([86,],[87,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block_using':([0,],[2,]),'block_publicClass':([2,],[4,]),'block_code':([10,44,84,88,],[13,64,85,89,]),'def_const_or_var':([10,44,84,88,],[14,14,14,14,]),'block_try_catch':([10,44,84,88,],[15,15,15,15,]),'constant_assignation':([10,44,84,88,],[16,16,16,16,]),'variable_assignation':([10,44,84,88,],[17,17,17,17,]),'try_catch_simply':([10,44,84,88,],[18,18,18,18,]),'try_catch_finally':([10,44,84,88,],[19,19,19,19,]),'access_modifiers':([10,44,84,88,],[20,20,20,20,]),'all_asignations':([10,20,21,37,44,84,88,],[22,38,40,59,22,22,22,]),'data_type':([10,20,21,37,43,44,61,84,88,],[23,23,41,23,23,23,23,23,23,]),'assignation_key_value':([10,20,21,23,37,41,43,44,61,67,78,84,88,],[24,24,24,42,24,60,24,24,24,74,74,24,24,]),'assignation_with_datatype':([10,20,21,37,43,44,61,84,88,],[27,27,27,27,63,27,68,27,27,]),'assignation_without_datatype':([10,20,21,37,43,44,61,84,88,],[28,28,28,28,62,28,69,28,28,]),'value':([35,],[46,]),'value_numeric':([35,],[47,]),'value_logic':([35,],[48,]),'value_string':([35,],[49,]),'concatenation':([35,65,],[58,72,]),'some_assignation_constant':([67,78,],[75,80,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block_using block_publicClass','program',2,'p_program','sintactico.py',18),
  ('block_using -> USING SYSTEM DOTANDCOMMA','block_using',3,'p_block_using','sintactico.py',21),
  ('block_publicClass -> PUBLIC CLASS VARIABLE LKEY block_code RKEY','block_publicClass',6,'p_block_publicClass','sintactico.py',24),
  ('block_code -> def_const_or_var','block_code',1,'p_block_code','sintactico.py',29),
  ('block_code -> block_try_catch','block_code',1,'p_block_code','sintactico.py',30),
  ('block_code -> VARIABLE','block_code',1,'p_block_code','sintactico.py',31),
  ('def_const_or_var -> constant_assignation','def_const_or_var',1,'p_def_const_or_var','sintactico.py',40),
  ('def_const_or_var -> variable_assignation','def_const_or_var',1,'p_def_const_or_var','sintactico.py',41),
  ('variable_assignation -> access_modifiers all_asignations','variable_assignation',2,'p_variable_assignation','sintactico.py',45),
  ('variable_assignation -> all_asignations','variable_assignation',1,'p_variable_assignation','sintactico.py',46),
  ('constant_assignation -> access_modifiers CONST all_asignations','constant_assignation',3,'p_constant_assignation','sintactico.py',51),
  ('constant_assignation -> CONST all_asignations','constant_assignation',2,'p_constant_assignation','sintactico.py',52),
  ('constant_assignation -> CONST data_type assignation_key_value COMMA some_assignation_constant','constant_assignation',5,'p_constant_assignation','sintactico.py',53),
  ('all_asignations -> assignation_with_datatype','all_asignations',1,'p_all_asignations','sintactico.py',57),
  ('all_asignations -> assignation_without_datatype','all_asignations',1,'p_all_asignations','sintactico.py',58),
  ('assignation_with_datatype -> data_type assignation_key_value DOTANDCOMMA','assignation_with_datatype',3,'p_assignation_with_datatype','sintactico.py',62),
  ('assignation_with_datatype -> data_type assignation_key_value DOTANDCOMMA assignation_with_datatype','assignation_with_datatype',4,'p_assignation_with_datatype','sintactico.py',63),
  ('assignation_with_datatype -> data_type assignation_key_value DOTANDCOMMA assignation_without_datatype','assignation_with_datatype',4,'p_assignation_with_datatype','sintactico.py',64),
  ('assignation_without_datatype -> assignation_key_value DOTANDCOMMA','assignation_without_datatype',2,'p_assignation_without_datatype','sintactico.py',68),
  ('assignation_without_datatype -> assignation_key_value DOTANDCOMMA assignation_without_datatype','assignation_without_datatype',3,'p_assignation_without_datatype','sintactico.py',69),
  ('assignation_without_datatype -> assignation_key_value DOTANDCOMMA assignation_with_datatype','assignation_without_datatype',3,'p_assignation_without_datatype','sintactico.py',70),
  ('some_assignation_constant -> assignation_key_value DOTANDCOMMA','some_assignation_constant',2,'p_some_assignation_constant','sintactico.py',74),
  ('some_assignation_constant -> assignation_key_value COMMA some_assignation_constant','some_assignation_constant',3,'p_some_assignation_constant','sintactico.py',75),
  ('assignation_key_value -> VARIABLE ASSIGNATION value','assignation_key_value',3,'p_assignation_key_value','sintactico.py',79),
  ('data_type -> CHARTYPE','data_type',1,'p_data_type','sintactico.py',82),
  ('data_type -> STRINGTYPE','data_type',1,'p_data_type','sintactico.py',83),
  ('data_type -> FLOATTYPE','data_type',1,'p_data_type','sintactico.py',84),
  ('data_type -> DECIMALTYPE','data_type',1,'p_data_type','sintactico.py',85),
  ('data_type -> INTTYPE','data_type',1,'p_data_type','sintactico.py',86),
  ('data_type -> BOOLTYPE','data_type',1,'p_data_type','sintactico.py',87),
  ('value -> value_numeric','value',1,'p_value','sintactico.py',96),
  ('value -> value_logic','value',1,'p_value','sintactico.py',97),
  ('value -> value_string','value',1,'p_value','sintactico.py',98),
  ('value_string -> STRING','value_string',1,'p_value_string','sintactico.py',102),
  ('value_string -> CHAR','value_string',1,'p_value_string','sintactico.py',103),
  ('value_string -> VARIABLE','value_string',1,'p_value_string','sintactico.py',104),
  ('value_string -> READ LPARENT RPARENT','value_string',3,'p_value_string','sintactico.py',105),
  ('value_string -> concatenation','value_string',1,'p_value_string','sintactico.py',106),
  ('value_logic -> BOOLTRUE','value_logic',1,'p_value_logic','sintactico.py',110),
  ('value_logic -> BOOLFALSE','value_logic',1,'p_value_logic','sintactico.py',111),
  ('value_numeric -> INTEGER','value_numeric',1,'p_value_numeric','sintactico.py',115),
  ('value_numeric -> FLOAT_NUMBER','value_numeric',1,'p_value_numeric','sintactico.py',116),
  ('value_numeric -> DECIMAL_NUMBER','value_numeric',1,'p_value_numeric','sintactico.py',117),
  ('block_try_catch -> try_catch_simply','block_try_catch',1,'p_block_try_catch','sintactico.py',126),
  ('block_try_catch -> try_catch_finally','block_try_catch',1,'p_block_try_catch','sintactico.py',127),
  ('try_catch_simply -> TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEY','try_catch_simply',12,'p_try_catch_simply','sintactico.py',131),
  ('try_catch_finally -> TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEY FINALLY LKEY block_code RKEY','try_catch_finally',16,'p_try_catch_finally','sintactico.py',134),
  ('access_modifiers -> PUBLIC','access_modifiers',1,'p_access_modifiers','sintactico.py',138),
  ('access_modifiers -> PRIVATE','access_modifiers',1,'p_access_modifiers','sintactico.py',139),
  ('arithmetic_operation -> value_numeric','arithmetic_operation',1,'p_arithmetic_operation','sintactico.py',149),
  ('arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation','arithmetic_operation',3,'p_arithmetic_operation','sintactico.py',150),
  ('logic_operation -> value_logic','logic_operation',1,'p_logic_operation','sintactico.py',154),
  ('logic_operation -> value_logic logic_operator logic_operation','logic_operation',3,'p_logic_operation','sintactico.py',155),
  ('concatenation -> STRING','concatenation',1,'p_concatenation','sintactico.py',159),
  ('concatenation -> STRING PLUS concatenation','concatenation',3,'p_concatenation','sintactico.py',160),
  ('logic_operator -> GREATER_THAN','logic_operator',1,'p_logic_operator','sintactico.py',164),
  ('logic_operator -> SMALLER_THAN','logic_operator',1,'p_logic_operator','sintactico.py',165),
  ('logic_operator -> EQUAL_COMPARATION','logic_operator',1,'p_logic_operator','sintactico.py',166),
  ('logic_operator -> INEQUALITY','logic_operator',1,'p_logic_operator','sintactico.py',167),
  ('logic_operator -> GREATER_THAN_OR_EQUAL','logic_operator',1,'p_logic_operator','sintactico.py',168),
  ('logic_operator -> SMALLER_THAN_OR_EQUAL','logic_operator',1,'p_logic_operator','sintactico.py',169),
  ('logic_operator -> LOGICAND','logic_operator',1,'p_logic_operator','sintactico.py',170),
  ('logic_operator -> LOGICOR','logic_operator',1,'p_logic_operator','sintactico.py',171),
  ('logic_operator -> LOGICNOT','logic_operator',1,'p_logic_operator','sintactico.py',172),
  ('logic_operator -> LOGICXOR','logic_operator',1,'p_logic_operator','sintactico.py',173),
  ('arithmetic_operator -> PLUS','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',177),
  ('arithmetic_operator -> MINUS','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',178),
  ('arithmetic_operator -> TIMES','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',179),
  ('arithmetic_operator -> DIVIDE','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',180),
  ('arithmetic_operator -> PERCENT','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',181),
  ('variable_assignation_multiline -> <empty>','variable_assignation_multiline',0,'p_variable_assignation_multiline','sintactico.py',185),
]
