
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ACTION ADD ADDITION_ASSIGNMENT ARROW ASSIGNATION BACK_SLASH BOOL BOOLFALSE BOOLTRUE BOOLTYPE BREAK CATCH CHAR CHARTYPE CLASS CLEAR COMMA CONST COUNT DECIMALTYPE DECIMAL_NUMBER DECREMENT DICTIONARY DIVIDE DIVISION_ASSIGNMENT DOLLARSIGN DOT DOTANDCOMMA DOUBLEPOINT DOUBLE_QUOTATION_MARKS ELSE ELSE_IF EQUAL_COMPARATION EXCEPTION FINALLY FLOATTYPE FLOAT_NUMBER FOR GREATER_THAN GREATER_THAN_OR_EQUAL ID IF INCREMENT INEQUALITY INTEGER INTTYPE JUMP_LINE LBRACKET LIST LKEY LOGICAND LOGICNOT LOGICOR LOGICXOR LONG LPARENT MINUS MODULE_ASSIGNMENT MULTIPLICATION_ASSIGNMENT NAMESPACE NEW PERCENT PIPE PLUS PRINT PRIVATE PUBLIC RBRACKET READ REMOVEAT RETURN RKEY RPARENT SIPLE_QUOTATION_MARKS SMALLER_THAN SMALLER_THAN_OR_EQUAL STATIC STRING STRINGTYPE SUBTRACTION_ASSIGNMENT SWITCH SYSTEM TABULATION TIMES TRY USING VARIABLE VOID WHILEprogram : block_using block_publicClassblock_using : USING SYSTEM DOTANDCOMMAblock_publicClass : PUBLIC CLASS VARIABLE LKEY all_block_code RKEYall_block_code : block_code\n                        | block_code all_block_code  \n    block_code : def_const_or_var\n                    | estruct_of_data\n                    | block_try_catch\n                    | VARIABLE\n                    | dict_estruct\n                    | functions_list\n                    | declaration_lambda\n                    | block_if\n    def_const_or_var : constant_assignation\n                        | variable_assignation\n    variable_assignation : access_modifiers all_asignations\n                            | all_asignations\n\n    constant_assignation : access_modifiers CONST all_asignations\n                            | CONST all_asignations\n                            | CONST data_type assignation_key_value COMMA some_assignation_constant\n    all_asignations : assignation_with_datatype\n                        | assignation_without_datatype\n    assignation_with_datatype : data_type assignation_key_value DOTANDCOMMA\n                            | data_type assignation_key_value DOTANDCOMMA assignation_with_datatype   \n                            | data_type assignation_key_value DOTANDCOMMA assignation_without_datatype                     \n    assignation_without_datatype : assignation_key_value DOTANDCOMMA\n                                    | assignation_key_value DOTANDCOMMA assignation_without_datatype\n                                    | assignation_key_value DOTANDCOMMA assignation_with_datatype\n    some_assignation_constant : assignation_key_value DOTANDCOMMA\n                                | assignation_key_value COMMA some_assignation_constant\n    assignation_key_value : VARIABLE ASSIGNATION valuedata_type    : CHARTYPE\n                    | STRINGTYPE\n                    | FLOATTYPE\n                    | DECIMALTYPE\n                    | INTTYPE\n                    | BOOLTYPE\n    value    : value_numeric\n                | value_logic\n                | value_string\n    value_string : STRING\n                    | CHAR\n                    | VARIABLE\n                    | READ LPARENT RPARENT\n                    | concatenation\n    value_logic  : BOOLTRUE\n                    | BOOLFALSE\n    value_numeric    : INTEGER\n                        | FLOAT_NUMBER\n                        | DECIMAL_NUMBER\n    block_try_catch : try_catch_simply\n                        | try_catch_finally\n    try_catch_simply : TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEYtry_catch_finally : TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEY FINALLY LKEY block_code RKEYaccess_modifiers : PUBLIC\n                        | PRIVATE\n    block_if : IF LPARENT VARIABLE RPARENT LKEY not_yes_nested_if RKEY other_if\n    other_if : ELSE LKEY not_yes_nested_if RKEY\n               | ELSE_IF LPARENT VARIABLE RPARENT LKEY not_yes_nested_if RKEY other_if\n    \n    not_yes_nested_if : block_if\n                       | block_code\n    arithmetic_operation : value_numeric\n                            | value_numeric arithmetic_operator arithmetic_operation\n    logic_operation  : value_logic\n                        | value_logic logic_operator logic_operation\n    concatenation    : STRING\n                        | STRING PLUS concatenation\n    logic_operator   : GREATER_THAN\n                        | SMALLER_THAN\n                        | EQUAL_COMPARATION\n                        | INEQUALITY\n                        | GREATER_THAN_OR_EQUAL\n                        | SMALLER_THAN_OR_EQUAL\n                        | LOGICAND\n                        | LOGICOR\n                        | LOGICNOT\n                        | LOGICXOR\n    arithmetic_operator  : PLUS\n                            | MINUS\n                            | TIMES\n                            | DIVIDE\n                            | PERCENT\n    variable_assignation_multiline   : \n    \n    dict_estruct : dict_empty\n                   | dict_full\n    \n    dict_empty : DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA\n    \n    dict_full : DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY dictionary_value RKEY DOTANDCOMMA\n    dictionary_value : LKEY key_value_pair RKEYkey_value_pairs : key_value_pair\n                       | key_value_pair COMMA key_value_pairskey_value_pair : STRING DOUBLEPOINT valueHashvalueHash : INTTYPE\n                estruct_of_data : list_empty\n                        | list_full\n    list_empty : LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA\n                    | LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA\n    list_full : LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY\n                    | LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY\n    strings_list : STRING\n                    | STRING COMMA strings_list\n    ints_list : INTEGER\n                | INTEGER COMMA ints_list\n    functions_list : list_func_clear\n                        | list_func_count\n                        | list_func_add\n                        | list_func_removeat\n    list_func_clear : VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMAlist_func_count : VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMAlist_func_add : VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMAlist_func_removeat : VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMAdeclaration_lambda : ACTION SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION VARIABLE ARROW LKEY RKEY'
    
_lr_action_items = {'USING':([0,],[3,]),'$end':([1,4,55,],[0,-1,-3,]),'PUBLIC':([2,8,10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,47,48,60,62,65,67,89,91,92,93,107,108,121,123,128,129,136,142,143,146,152,160,166,171,173,179,182,183,192,194,196,200,208,209,211,213,],[5,-2,11,-9,11,-6,-7,-8,-10,-11,-12,-13,-14,-15,-93,-94,-51,-52,-84,-85,-103,-104,-105,-106,-17,-21,-22,-16,-19,-26,11,-18,-23,-27,-28,-24,-25,11,-20,-107,-108,-29,-109,-110,-30,-57,11,-111,11,-58,11,-53,-86,-95,-96,11,-59,-87,-97,-98,-54,]),'SYSTEM':([3,],[6,]),'CLASS':([5,],[7,]),'DOTANDCOMMA':([6,41,64,73,74,75,76,77,78,79,80,81,82,83,84,86,90,113,114,117,118,119,122,130,131,178,186,187,199,],[8,65,91,-43,-31,-38,-39,-40,-48,-49,-50,-46,-47,-41,-42,-45,91,128,129,-66,-67,-44,136,142,143,183,192,194,208,]),'VARIABLE':([7,10,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,37,38,39,40,43,46,47,48,49,50,51,52,54,58,59,60,62,63,65,67,89,91,92,93,97,104,106,107,108,109,110,121,123,128,129,132,136,137,142,143,146,149,152,160,161,166,171,173,179,182,183,192,194,196,200,208,209,211,213,],[9,12,-55,-9,12,-6,-7,-8,-10,-11,-12,-13,-14,-15,-93,-94,-51,-52,-84,-85,-103,-104,-105,-106,-33,61,61,-17,61,-36,-56,-21,-22,-32,-34,-35,-37,73,88,61,-16,-19,61,61,12,-18,61,-27,-28,112,120,61,-24,-25,124,125,12,-20,-107,-108,144,-29,61,-109,-110,-30,157,-57,12,168,-111,12,-58,12,-53,-86,-95,-96,12,-59,-87,-97,-98,-54,]),'LKEY':([9,44,105,151,153,164,174,178,184,186,187,188,],[10,67,121,159,160,171,179,184,189,193,195,196,]),'ACTION':([10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,47,48,60,62,65,67,89,91,92,93,107,108,121,123,128,129,136,142,143,146,152,160,166,171,173,179,182,183,192,194,196,200,208,209,211,213,],[34,-9,34,-6,-7,-8,-10,-11,-12,-13,-14,-15,-93,-94,-51,-52,-84,-85,-103,-104,-105,-106,-17,-21,-22,-16,-19,-26,34,-18,-23,-27,-28,-24,-25,34,-20,-107,-108,-29,-109,-110,-30,-57,34,-111,34,-58,34,-53,-86,-95,-96,34,-59,-87,-97,-98,-54,]),'IF':([10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,47,48,60,62,65,67,89,91,92,93,107,108,121,123,128,129,136,142,143,146,152,160,166,171,173,179,182,183,192,194,196,200,208,209,211,213,],[36,-9,36,-6,-7,-8,-10,-11,-12,-13,-14,-15,-93,-94,-51,-52,-84,-85,-103,-104,-105,-106,-17,-21,-22,-16,-19,-26,36,-18,-23,-27,-28,-24,-25,36,-20,-107,-108,-29,-109,-110,-30,-57,36,-111,36,-58,36,-53,-86,-95,-96,36,-59,-87,-97,-98,-54,]),'CONST':([10,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,39,46,47,48,60,62,65,67,89,91,92,93,107,108,121,123,128,129,136,142,143,146,152,160,166,171,173,179,182,183,192,194,196,200,208,209,211,213,],[38,-55,-9,38,-6,-7,-8,-10,-11,-12,-13,-14,-15,-93,-94,-51,-52,-84,-85,-103,-104,-105,-106,59,-17,-56,-21,-22,-16,-19,-26,38,-18,-23,-27,-28,-24,-25,38,-20,-107,-108,-29,-109,-110,-30,-57,38,-111,38,-58,38,-53,-86,-95,-96,38,-59,-87,-97,-98,-54,]),'LIST':([10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,47,48,60,62,65,67,89,91,92,93,107,108,121,123,128,129,136,142,143,146,147,148,152,160,166,171,173,179,182,183,192,194,196,200,208,209,211,213,],[42,-9,42,-6,-7,-8,-10,-11,-12,-13,-14,-15,-93,-94,-51,-52,-84,-85,-103,-104,-105,-106,-17,-21,-22,-16,-19,-26,42,-18,-23,-27,-28,-24,-25,42,-20,-107,-108,-29,-109,-110,-30,155,156,-57,42,-111,42,-58,42,-53,-86,-95,-96,42,-59,-87,-97,-98,-54,]),'TRY':([10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,47,48,60,62,65,67,89,91,92,93,107,108,121,123,128,129,136,142,143,146,152,160,166,171,173,179,182,183,192,194,196,200,208,209,211,213,],[44,-9,44,-6,-7,-8,-10,-11,-12,-13,-14,-15,-93,-94,-51,-52,-84,-85,-103,-104,-105,-106,-17,-21,-22,-16,-19,-26,44,-18,-23,-27,-28,-24,-25,44,-20,-107,-108,-29,-109,-110,-30,-57,44,-111,44,-58,44,-53,-86,-95,-96,44,-59,-87,-97,-98,-54,]),'DICTIONARY':([10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,47,48,60,62,65,67,89,91,92,93,107,108,121,123,128,129,136,141,142,143,146,152,160,166,171,173,179,182,183,192,194,196,200,208,209,211,213,],[45,-9,45,-6,-7,-8,-10,-11,-12,-13,-14,-15,-93,-94,-51,-52,-84,-85,-103,-104,-105,-106,-17,-21,-22,-16,-19,-26,45,-18,-23,-27,-28,-24,-25,45,-20,-107,-108,-29,150,-109,-110,-30,-57,45,-111,45,-58,45,-53,-86,-95,-96,45,-59,-87,-97,-98,-54,]),'PRIVATE':([10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,47,48,60,62,65,67,89,91,92,93,107,108,121,123,128,129,136,142,143,146,152,160,166,171,173,179,182,183,192,194,196,200,208,209,211,213,],[46,-9,46,-6,-7,-8,-10,-11,-12,-13,-14,-15,-93,-94,-51,-52,-84,-85,-103,-104,-105,-106,-17,-21,-22,-16,-19,-26,46,-18,-23,-27,-28,-24,-25,46,-20,-107,-108,-29,-109,-110,-30,-57,46,-111,46,-58,46,-53,-86,-95,-96,46,-59,-87,-97,-98,-54,]),'CHARTYPE':([10,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,38,39,46,47,48,59,60,62,65,67,89,91,92,93,107,108,121,123,128,129,136,142,143,146,152,160,166,171,173,179,182,183,192,194,196,200,208,209,211,213,],[49,-55,-9,49,-6,-7,-8,-10,-11,-12,-13,-14,-15,-93,-94,-51,-52,-84,-85,-103,-104,-105,-106,49,49,-17,-56,-21,-22,49,-16,-19,49,49,-18,49,-27,-28,-24,-25,49,-20,-107,-108,-29,-109,-110,-30,-57,49,-111,49,-58,49,-53,-86,-95,-96,49,-59,-87,-97,-98,-54,]),'STRINGTYPE':([10,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,38,39,46,47,48,57,59,60,62,65,66,67,89,91,92,93,107,108,121,123,128,129,136,142,143,146,152,160,162,166,171,173,179,182,183,192,194,196,200,208,209,211,213,],[35,-55,-9,35,-6,-7,-8,-10,-11,-12,-13,-14,-15,-93,-94,-51,-52,-84,-85,-103,-104,-105,-106,35,35,-17,-56,-21,-22,87,35,-16,-19,35,94,35,-18,35,-27,-28,-24,-25,35,-20,-107,-108,-29,-109,-110,-30,-57,35,169,-111,35,-58,35,-53,-86,-95,-96,35,-59,-87,-97,-98,-54,]),'FLOATTYPE':([10,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,38,39,46,47,48,59,60,62,65,67,89,91,92,93,107,108,121,123,128,129,136,142,143,146,152,160,166,171,173,179,182,183,192,194,196,200,208,209,211,213,],[50,-55,-9,50,-6,-7,-8,-10,-11,-12,-13,-14,-15,-93,-94,-51,-52,-84,-85,-103,-104,-105,-106,50,50,-17,-56,-21,-22,50,-16,-19,50,50,-18,50,-27,-28,-24,-25,50,-20,-107,-108,-29,-109,-110,-30,-57,50,-111,50,-58,50,-53,-86,-95,-96,50,-59,-87,-97,-98,-54,]),'DECIMALTYPE':([10,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,38,39,46,47,48,59,60,62,65,67,89,91,92,93,107,108,121,123,128,129,136,142,143,146,152,160,166,171,173,179,182,183,192,194,196,200,208,209,211,213,],[51,-55,-9,51,-6,-7,-8,-10,-11,-12,-13,-14,-15,-93,-94,-51,-52,-84,-85,-103,-104,-105,-106,51,51,-17,-56,-21,-22,51,-16,-19,51,51,-18,51,-27,-28,-24,-25,51,-20,-107,-108,-29,-109,-110,-30,-57,51,-111,51,-58,51,-53,-86,-95,-96,51,-59,-87,-97,-98,-54,]),'INTTYPE':([10,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,38,39,46,47,48,59,60,62,65,66,67,89,91,92,93,107,108,121,123,128,129,136,142,143,146,152,160,163,166,171,173,179,182,183,192,194,196,200,207,208,209,211,213,],[43,-55,-9,43,-6,-7,-8,-10,-11,-12,-13,-14,-15,-93,-94,-51,-52,-84,-85,-103,-104,-105,-106,43,43,-17,-56,-21,-22,43,-16,-19,43,95,43,-18,43,-27,-28,-24,-25,43,-20,-107,-108,-29,-109,-110,-30,-57,43,170,-111,43,-58,43,-53,-86,-95,-96,43,-59,215,-87,-97,-98,-54,]),'BOOLTYPE':([10,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,38,39,46,47,48,59,60,62,65,67,89,91,92,93,107,108,121,123,128,129,136,142,143,146,152,160,166,171,173,179,182,183,192,194,196,200,208,209,211,213,],[52,-55,-9,52,-6,-7,-8,-10,-11,-12,-13,-14,-15,-93,-94,-51,-52,-84,-85,-103,-104,-105,-106,52,52,-17,-56,-21,-22,52,-16,-19,52,52,-18,52,-27,-28,-24,-25,52,-20,-107,-108,-29,-109,-110,-30,-57,52,-111,52,-58,52,-53,-86,-95,-96,52,-59,-87,-97,-98,-54,]),'RKEY':([12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,47,48,56,60,62,65,89,91,92,93,96,107,108,123,128,129,133,134,135,136,142,143,146,152,159,166,167,173,177,182,183,185,190,192,194,197,200,201,202,203,204,205,206,208,209,211,213,214,215,216,217,],[-9,55,-4,-6,-7,-8,-10,-11,-12,-13,-14,-15,-93,-94,-51,-52,-84,-85,-103,-104,-105,-106,-17,-21,-22,-5,-16,-19,-26,-18,-23,-27,-28,111,-24,-25,-20,-107,-108,145,-13,-61,-29,-109,-110,-30,-57,166,-111,173,-58,182,-53,-86,191,199,-95,-96,206,-59,209,-99,211,-101,213,-88,-87,-97,-98,-54,-91,-92,-100,-102,]),'DOT':([12,],[53,]),'ASSIGNATION':([12,61,112,120,124,125,],[54,54,127,132,138,139,]),'SMALLER_THAN':([34,42,45,150,155,156,],[57,66,68,158,162,163,]),'LPARENT':([36,69,70,71,72,85,126,154,165,175,176,],[58,98,99,100,101,103,140,161,172,180,181,]),'CLEAR':([53,],[69,]),'COUNT':([53,],[70,]),'ADD':([53,],[71,]),'REMOVEAT':([53,],[72,]),'INTEGER':([54,101,195,212,],[78,116,204,204,]),'FLOAT_NUMBER':([54,],[79,]),'DECIMAL_NUMBER':([54,],[80,]),'BOOLTRUE':([54,],[81,]),'BOOLFALSE':([54,],[82,]),'STRING':([54,100,102,189,193,210,],[83,115,117,198,202,202,]),'CHAR':([54,],[84,]),'READ':([54,],[85,]),'GREATER_THAN':([68,87,94,95,158,169,170,],[97,104,109,110,165,175,176,]),'COMMA':([73,74,75,76,77,78,79,80,81,82,83,84,86,90,117,118,119,122,202,204,],[-43,-31,-38,-39,-40,-48,-49,-50,-46,-47,-41,-42,-45,106,-66,-67,-44,137,210,212,]),'PLUS':([83,117,],[102,102,]),'RPARENT':([88,98,99,103,115,116,157,168,172,180,181,],[105,113,114,119,130,131,164,174,178,186,187,]),'CATCH':([111,],[126,]),'NEW':([127,138,139,],[141,147,148,]),'EXCEPTION':([140,],[149,]),'ARROW':([144,],[151,]),'ELSE':([145,191,],[153,153,]),'ELSE_IF':([145,191,],[154,154,]),'FINALLY':([182,],[188,]),'DOUBLEPOINT':([198,],[207,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block_using':([0,],[2,]),'block_publicClass':([2,],[4,]),'all_block_code':([10,14,],[13,56,]),'block_code':([10,14,67,121,160,171,179,196,],[14,14,96,135,135,177,135,205,]),'def_const_or_var':([10,14,67,121,160,171,179,196,],[15,15,15,15,15,15,15,15,]),'estruct_of_data':([10,14,67,121,160,171,179,196,],[16,16,16,16,16,16,16,16,]),'block_try_catch':([10,14,67,121,160,171,179,196,],[17,17,17,17,17,17,17,17,]),'dict_estruct':([10,14,67,121,160,171,179,196,],[18,18,18,18,18,18,18,18,]),'functions_list':([10,14,67,121,160,171,179,196,],[19,19,19,19,19,19,19,19,]),'declaration_lambda':([10,14,67,121,160,171,179,196,],[20,20,20,20,20,20,20,20,]),'block_if':([10,14,67,121,160,171,179,196,],[21,21,21,134,134,21,134,21,]),'constant_assignation':([10,14,67,121,160,171,179,196,],[22,22,22,22,22,22,22,22,]),'variable_assignation':([10,14,67,121,160,171,179,196,],[23,23,23,23,23,23,23,23,]),'list_empty':([10,14,67,121,160,171,179,196,],[24,24,24,24,24,24,24,24,]),'list_full':([10,14,67,121,160,171,179,196,],[25,25,25,25,25,25,25,25,]),'try_catch_simply':([10,14,67,121,160,171,179,196,],[26,26,26,26,26,26,26,26,]),'try_catch_finally':([10,14,67,121,160,171,179,196,],[27,27,27,27,27,27,27,27,]),'dict_empty':([10,14,67,121,160,171,179,196,],[28,28,28,28,28,28,28,28,]),'dict_full':([10,14,67,121,160,171,179,196,],[29,29,29,29,29,29,29,29,]),'list_func_clear':([10,14,67,121,160,171,179,196,],[30,30,30,30,30,30,30,30,]),'list_func_count':([10,14,67,121,160,171,179,196,],[31,31,31,31,31,31,31,31,]),'list_func_add':([10,14,67,121,160,171,179,196,],[32,32,32,32,32,32,32,32,]),'list_func_removeat':([10,14,67,121,160,171,179,196,],[33,33,33,33,33,33,33,33,]),'access_modifiers':([10,14,67,121,160,171,179,196,],[37,37,37,37,37,37,37,37,]),'all_asignations':([10,14,37,38,59,67,121,160,171,179,196,],[39,39,60,62,89,39,39,39,39,39,39,]),'data_type':([10,14,37,38,59,65,67,91,121,160,171,179,196,],[40,40,40,63,40,40,40,40,40,40,40,40,40,]),'assignation_key_value':([10,14,37,38,40,59,63,65,67,91,106,121,137,160,171,179,196,],[41,41,41,41,64,41,90,41,41,41,122,41,122,41,41,41,41,]),'assignation_with_datatype':([10,14,37,38,59,65,67,91,121,160,171,179,196,],[47,47,47,47,47,93,47,107,47,47,47,47,47,]),'assignation_without_datatype':([10,14,37,38,59,65,67,91,121,160,171,179,196,],[48,48,48,48,48,92,48,108,48,48,48,48,48,]),'value':([54,],[74,]),'value_numeric':([54,],[75,]),'value_logic':([54,],[76,]),'value_string':([54,],[77,]),'concatenation':([54,102,],[86,118,]),'some_assignation_constant':([106,137,],[123,146,]),'not_yes_nested_if':([121,160,179,],[133,167,185,]),'other_if':([145,191,],[152,200,]),'dictionary_value':([184,],[190,]),'key_value_pair':([189,],[197,]),'strings_list':([193,210,],[201,216,]),'ints_list':([195,212,],[203,217,]),'valueHash':([207,],[214,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block_using block_publicClass','program',2,'p_program','sintactico.py',45),
  ('block_using -> USING SYSTEM DOTANDCOMMA','block_using',3,'p_block_using','sintactico.py',48),
  ('block_publicClass -> PUBLIC CLASS VARIABLE LKEY all_block_code RKEY','block_publicClass',6,'p_block_publicClass','sintactico.py',51),
  ('all_block_code -> block_code','all_block_code',1,'p_all_block_code','sintactico.py',55),
  ('all_block_code -> block_code all_block_code','all_block_code',2,'p_all_block_code','sintactico.py',56),
  ('block_code -> def_const_or_var','block_code',1,'p_block_code','sintactico.py',60),
  ('block_code -> estruct_of_data','block_code',1,'p_block_code','sintactico.py',61),
  ('block_code -> block_try_catch','block_code',1,'p_block_code','sintactico.py',62),
  ('block_code -> VARIABLE','block_code',1,'p_block_code','sintactico.py',63),
  ('block_code -> dict_estruct','block_code',1,'p_block_code','sintactico.py',64),
  ('block_code -> functions_list','block_code',1,'p_block_code','sintactico.py',65),
  ('block_code -> declaration_lambda','block_code',1,'p_block_code','sintactico.py',66),
  ('block_code -> block_if','block_code',1,'p_block_code','sintactico.py',67),
  ('def_const_or_var -> constant_assignation','def_const_or_var',1,'p_def_const_or_var','sintactico.py',73),
  ('def_const_or_var -> variable_assignation','def_const_or_var',1,'p_def_const_or_var','sintactico.py',74),
  ('variable_assignation -> access_modifiers all_asignations','variable_assignation',2,'p_variable_assignation','sintactico.py',78),
  ('variable_assignation -> all_asignations','variable_assignation',1,'p_variable_assignation','sintactico.py',79),
  ('constant_assignation -> access_modifiers CONST all_asignations','constant_assignation',3,'p_constant_assignation','sintactico.py',84),
  ('constant_assignation -> CONST all_asignations','constant_assignation',2,'p_constant_assignation','sintactico.py',85),
  ('constant_assignation -> CONST data_type assignation_key_value COMMA some_assignation_constant','constant_assignation',5,'p_constant_assignation','sintactico.py',86),
  ('all_asignations -> assignation_with_datatype','all_asignations',1,'p_all_asignations','sintactico.py',90),
  ('all_asignations -> assignation_without_datatype','all_asignations',1,'p_all_asignations','sintactico.py',91),
  ('assignation_with_datatype -> data_type assignation_key_value DOTANDCOMMA','assignation_with_datatype',3,'p_assignation_with_datatype','sintactico.py',95),
  ('assignation_with_datatype -> data_type assignation_key_value DOTANDCOMMA assignation_with_datatype','assignation_with_datatype',4,'p_assignation_with_datatype','sintactico.py',96),
  ('assignation_with_datatype -> data_type assignation_key_value DOTANDCOMMA assignation_without_datatype','assignation_with_datatype',4,'p_assignation_with_datatype','sintactico.py',97),
  ('assignation_without_datatype -> assignation_key_value DOTANDCOMMA','assignation_without_datatype',2,'p_assignation_without_datatype','sintactico.py',101),
  ('assignation_without_datatype -> assignation_key_value DOTANDCOMMA assignation_without_datatype','assignation_without_datatype',3,'p_assignation_without_datatype','sintactico.py',102),
  ('assignation_without_datatype -> assignation_key_value DOTANDCOMMA assignation_with_datatype','assignation_without_datatype',3,'p_assignation_without_datatype','sintactico.py',103),
  ('some_assignation_constant -> assignation_key_value DOTANDCOMMA','some_assignation_constant',2,'p_some_assignation_constant','sintactico.py',107),
  ('some_assignation_constant -> assignation_key_value COMMA some_assignation_constant','some_assignation_constant',3,'p_some_assignation_constant','sintactico.py',108),
  ('assignation_key_value -> VARIABLE ASSIGNATION value','assignation_key_value',3,'p_assignation_key_value','sintactico.py',112),
  ('data_type -> CHARTYPE','data_type',1,'p_data_type','sintactico.py',115),
  ('data_type -> STRINGTYPE','data_type',1,'p_data_type','sintactico.py',116),
  ('data_type -> FLOATTYPE','data_type',1,'p_data_type','sintactico.py',117),
  ('data_type -> DECIMALTYPE','data_type',1,'p_data_type','sintactico.py',118),
  ('data_type -> INTTYPE','data_type',1,'p_data_type','sintactico.py',119),
  ('data_type -> BOOLTYPE','data_type',1,'p_data_type','sintactico.py',120),
  ('value -> value_numeric','value',1,'p_value','sintactico.py',129),
  ('value -> value_logic','value',1,'p_value','sintactico.py',130),
  ('value -> value_string','value',1,'p_value','sintactico.py',131),
  ('value_string -> STRING','value_string',1,'p_value_string','sintactico.py',135),
  ('value_string -> CHAR','value_string',1,'p_value_string','sintactico.py',136),
  ('value_string -> VARIABLE','value_string',1,'p_value_string','sintactico.py',137),
  ('value_string -> READ LPARENT RPARENT','value_string',3,'p_value_string','sintactico.py',138),
  ('value_string -> concatenation','value_string',1,'p_value_string','sintactico.py',139),
  ('value_logic -> BOOLTRUE','value_logic',1,'p_value_logic','sintactico.py',143),
  ('value_logic -> BOOLFALSE','value_logic',1,'p_value_logic','sintactico.py',144),
  ('value_numeric -> INTEGER','value_numeric',1,'p_value_numeric','sintactico.py',148),
  ('value_numeric -> FLOAT_NUMBER','value_numeric',1,'p_value_numeric','sintactico.py',149),
  ('value_numeric -> DECIMAL_NUMBER','value_numeric',1,'p_value_numeric','sintactico.py',150),
  ('block_try_catch -> try_catch_simply','block_try_catch',1,'p_block_try_catch','sintactico.py',159),
  ('block_try_catch -> try_catch_finally','block_try_catch',1,'p_block_try_catch','sintactico.py',160),
  ('try_catch_simply -> TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEY','try_catch_simply',12,'p_try_catch_simply','sintactico.py',164),
  ('try_catch_finally -> TRY LKEY block_code RKEY CATCH LPARENT EXCEPTION VARIABLE RPARENT LKEY block_code RKEY FINALLY LKEY block_code RKEY','try_catch_finally',16,'p_try_catch_finally','sintactico.py',167),
  ('access_modifiers -> PUBLIC','access_modifiers',1,'p_access_modifiers','sintactico.py',171),
  ('access_modifiers -> PRIVATE','access_modifiers',1,'p_access_modifiers','sintactico.py',172),
  ('block_if -> IF LPARENT VARIABLE RPARENT LKEY not_yes_nested_if RKEY other_if','block_if',8,'p_block_if','sintactico.py',177),
  ('other_if -> ELSE LKEY not_yes_nested_if RKEY','other_if',4,'p_other_if','sintactico.py',181),
  ('other_if -> ELSE_IF LPARENT VARIABLE RPARENT LKEY not_yes_nested_if RKEY other_if','other_if',8,'p_other_if','sintactico.py',182),
  ('not_yes_nested_if -> block_if','not_yes_nested_if',1,'p_not_yes_nested_if','sintactico.py',187),
  ('not_yes_nested_if -> block_code','not_yes_nested_if',1,'p_not_yes_nested_if','sintactico.py',188),
  ('arithmetic_operation -> value_numeric','arithmetic_operation',1,'p_arithmetic_operation','sintactico.py',194),
  ('arithmetic_operation -> value_numeric arithmetic_operator arithmetic_operation','arithmetic_operation',3,'p_arithmetic_operation','sintactico.py',195),
  ('logic_operation -> value_logic','logic_operation',1,'p_logic_operation','sintactico.py',199),
  ('logic_operation -> value_logic logic_operator logic_operation','logic_operation',3,'p_logic_operation','sintactico.py',200),
  ('concatenation -> STRING','concatenation',1,'p_concatenation','sintactico.py',204),
  ('concatenation -> STRING PLUS concatenation','concatenation',3,'p_concatenation','sintactico.py',205),
  ('logic_operator -> GREATER_THAN','logic_operator',1,'p_logic_operator','sintactico.py',209),
  ('logic_operator -> SMALLER_THAN','logic_operator',1,'p_logic_operator','sintactico.py',210),
  ('logic_operator -> EQUAL_COMPARATION','logic_operator',1,'p_logic_operator','sintactico.py',211),
  ('logic_operator -> INEQUALITY','logic_operator',1,'p_logic_operator','sintactico.py',212),
  ('logic_operator -> GREATER_THAN_OR_EQUAL','logic_operator',1,'p_logic_operator','sintactico.py',213),
  ('logic_operator -> SMALLER_THAN_OR_EQUAL','logic_operator',1,'p_logic_operator','sintactico.py',214),
  ('logic_operator -> LOGICAND','logic_operator',1,'p_logic_operator','sintactico.py',215),
  ('logic_operator -> LOGICOR','logic_operator',1,'p_logic_operator','sintactico.py',216),
  ('logic_operator -> LOGICNOT','logic_operator',1,'p_logic_operator','sintactico.py',217),
  ('logic_operator -> LOGICXOR','logic_operator',1,'p_logic_operator','sintactico.py',218),
  ('arithmetic_operator -> PLUS','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',222),
  ('arithmetic_operator -> MINUS','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',223),
  ('arithmetic_operator -> TIMES','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',224),
  ('arithmetic_operator -> DIVIDE','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',225),
  ('arithmetic_operator -> PERCENT','arithmetic_operator',1,'p_arithmetic_operator','sintactico.py',226),
  ('variable_assignation_multiline -> <empty>','variable_assignation_multiline',0,'p_variable_assignation_multiline','sintactico.py',230),
  ('dict_estruct -> dict_empty','dict_estruct',1,'p_dict_estruct','sintactico.py',239),
  ('dict_estruct -> dict_full','dict_estruct',1,'p_dict_estruct','sintactico.py',240),
  ('dict_empty -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT DOTANDCOMMA','dict_empty',12,'p_dict_empty','sintactico.py',246),
  ('dict_full -> DICTIONARY SMALLER_THAN GREATER_THAN VARIABLE ASSIGNATION NEW DICTIONARY SMALLER_THAN GREATER_THAN LPARENT RPARENT LKEY dictionary_value RKEY DOTANDCOMMA','dict_full',15,'p_dict_full','sintactico.py',251),
  ('dictionary_value -> LKEY key_value_pair RKEY','dictionary_value',3,'p_dictionary_value','sintactico.py',255),
  ('key_value_pairs -> key_value_pair','key_value_pairs',1,'p_key_value_pairs','sintactico.py',258),
  ('key_value_pairs -> key_value_pair COMMA key_value_pairs','key_value_pairs',3,'p_key_value_pairs','sintactico.py',259),
  ('key_value_pair -> STRING DOUBLEPOINT valueHash','key_value_pair',3,'p_key_value_pair','sintactico.py',263),
  ('valueHash -> INTTYPE','valueHash',1,'p_valueHash','sintactico.py',267),
  ('estruct_of_data -> list_empty','estruct_of_data',1,'p_estruct_of_data','sintactico.py',270),
  ('estruct_of_data -> list_full','estruct_of_data',1,'p_estruct_of_data','sintactico.py',271),
  ('list_empty -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA','list_empty',14,'p_list_empty','sintactico.py',275),
  ('list_empty -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT DOTANDCOMMA','list_empty',14,'p_list_empty','sintactico.py',276),
  ('list_full -> LIST SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN STRINGTYPE GREATER_THAN LPARENT RPARENT LKEY strings_list RKEY','list_full',16,'p_list_full','sintactico.py',280),
  ('list_full -> LIST SMALLER_THAN INTTYPE GREATER_THAN VARIABLE ASSIGNATION NEW LIST SMALLER_THAN INTTYPE GREATER_THAN LPARENT RPARENT LKEY ints_list RKEY','list_full',16,'p_list_full','sintactico.py',281),
  ('strings_list -> STRING','strings_list',1,'p_strings_list','sintactico.py',285),
  ('strings_list -> STRING COMMA strings_list','strings_list',3,'p_strings_list','sintactico.py',286),
  ('ints_list -> INTEGER','ints_list',1,'p_ints_list','sintactico.py',290),
  ('ints_list -> INTEGER COMMA ints_list','ints_list',3,'p_ints_list','sintactico.py',291),
  ('functions_list -> list_func_clear','functions_list',1,'p_functions_list','sintactico.py',295),
  ('functions_list -> list_func_count','functions_list',1,'p_functions_list','sintactico.py',296),
  ('functions_list -> list_func_add','functions_list',1,'p_functions_list','sintactico.py',297),
  ('functions_list -> list_func_removeat','functions_list',1,'p_functions_list','sintactico.py',298),
  ('list_func_clear -> VARIABLE DOT CLEAR LPARENT RPARENT DOTANDCOMMA','list_func_clear',6,'p_list_func_clear','sintactico.py',302),
  ('list_func_count -> VARIABLE DOT COUNT LPARENT RPARENT DOTANDCOMMA','list_func_count',6,'p_list_func_count','sintactico.py',305),
  ('list_func_add -> VARIABLE DOT ADD LPARENT STRING RPARENT DOTANDCOMMA','list_func_add',7,'p_list_func_add','sintactico.py',308),
  ('list_func_removeat -> VARIABLE DOT REMOVEAT LPARENT INTEGER RPARENT DOTANDCOMMA','list_func_removeat',7,'p_list_func_removeat','sintactico.py',311),
  ('declaration_lambda -> ACTION SMALLER_THAN STRINGTYPE GREATER_THAN VARIABLE ASSIGNATION VARIABLE ARROW LKEY RKEY','declaration_lambda',10,'p_declration_lambda','sintactico.py',319),
]
